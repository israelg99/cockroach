// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:466
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CUBE = 57413
const CURRENT = 57414
const CURRENT_CATALOG = 57415
const CURRENT_DATE = 57416
const CURRENT_ROLE = 57417
const CURRENT_TIME = 57418
const CURRENT_TIMESTAMP = 57419
const CURRENT_USER = 57420
const CYCLE = 57421
const DATA = 57422
const DATABASE = 57423
const DATABASES = 57424
const DATE = 57425
const DAY = 57426
const DEC = 57427
const DECIMAL = 57428
const DEFAULT = 57429
const DEALLOCATE = 57430
const DEFERRABLE = 57431
const DELETE = 57432
const DESC = 57433
const DISTINCT = 57434
const DO = 57435
const DOUBLE = 57436
const DROP = 57437
const ELSE = 57438
const ENCODING = 57439
const END = 57440
const ESCAPE = 57441
const EXCEPT = 57442
const EXISTS = 57443
const EXECUTE = 57444
const EXPERIMENTAL_FINGERPRINTS = 57445
const EXPLAIN = 57446
const EXTRACT = 57447
const EXTRACT_DURATION = 57448
const FALSE = 57449
const FAMILY = 57450
const FETCH = 57451
const FILTER = 57452
const FIRST = 57453
const FLOAT = 57454
const FLOORDIV = 57455
const FOLLOWING = 57456
const FOR = 57457
const FORCE_INDEX = 57458
const FOREIGN = 57459
const FROM = 57460
const FULL = 57461
const GRANT = 57462
const GRANTS = 57463
const GREATEST = 57464
const GROUP = 57465
const GROUPING = 57466
const HAVING = 57467
const HELP = 57468
const HIGH = 57469
const HOUR = 57470
const INCREMENTAL = 57471
const IF = 57472
const IFNULL = 57473
const ILIKE = 57474
const IN = 57475
const INTERLEAVE = 57476
const INDEX = 57477
const INDEXES = 57478
const INITIALLY = 57479
const INNER = 57480
const INSERT = 57481
const INT = 57482
const INT2VECTOR = 57483
const INT8 = 57484
const INT64 = 57485
const INTEGER = 57486
const INTERSECT = 57487
const INTERVAL = 57488
const INTO = 57489
const IS = 57490
const ISOLATION = 57491
const JOB = 57492
const JOBS = 57493
const JOIN = 57494
const KEY = 57495
const KEYS = 57496
const KV = 57497
const LATERAL = 57498
const LC_CTYPE = 57499
const LC_COLLATE = 57500
const LEADING = 57501
const LEAST = 57502
const LEFT = 57503
const LEVEL = 57504
const LIKE = 57505
const LIMIT = 57506
const LOCAL = 57507
const LOCALTIME = 57508
const LOCALTIMESTAMP = 57509
const LOW = 57510
const LSHIFT = 57511
const MATCH = 57512
const MINUTE = 57513
const MONTH = 57514
const NAN = 57515
const NAME = 57516
const NAMES = 57517
const NATURAL = 57518
const NEXT = 57519
const NO = 57520
const NO_INDEX_JOIN = 57521
const NORMAL = 57522
const NOT = 57523
const NOTHING = 57524
const NULL = 57525
const NULLIF = 57526
const NULLS = 57527
const NUMERIC = 57528
const OF = 57529
const OFF = 57530
const OFFSET = 57531
const OID = 57532
const ON = 57533
const ONLY = 57534
const OPTIONS = 57535
const OR = 57536
const ORDER = 57537
const ORDINALITY = 57538
const OUT = 57539
const OUTER = 57540
const OVER = 57541
const OVERLAPS = 57542
const OVERLAY = 57543
const PARENT = 57544
const PARTIAL = 57545
const PARTITION = 57546
const PASSWORD = 57547
const PAUSE = 57548
const PLACING = 57549
const POSITION = 57550
const PRECEDING = 57551
const PRECISION = 57552
const PREPARE = 57553
const PRIMARY = 57554
const PRIORITY = 57555
const QUERIES = 57556
const QUERY = 57557
const RANGE = 57558
const READ = 57559
const REAL = 57560
const RECURSIVE = 57561
const REF = 57562
const REFERENCES = 57563
const REGCLASS = 57564
const REGPROC = 57565
const REGPROCEDURE = 57566
const REGNAMESPACE = 57567
const REGTYPE = 57568
const RENAME = 57569
const REPEATABLE = 57570
const RELEASE = 57571
const RESET = 57572
const RESTORE = 57573
const RESTRICT = 57574
const RESUME = 57575
const RETURNING = 57576
const REVOKE = 57577
const RIGHT = 57578
const ROLLBACK = 57579
const ROLLUP = 57580
const ROW = 57581
const ROWS = 57582
const RSHIFT = 57583
const SAVEPOINT = 57584
const SCATTER = 57585
const SEARCH = 57586
const SECOND = 57587
const SELECT = 57588
const SERIAL = 57589
const SERIALIZABLE = 57590
const SESSION = 57591
const SESSIONS = 57592
const SESSION_USER = 57593
const SET = 57594
const SETTING = 57595
const SETTINGS = 57596
const SHOW = 57597
const SIMILAR = 57598
const SIMPLE = 57599
const SMALLINT = 57600
const SMALLSERIAL = 57601
const SNAPSHOT = 57602
const SOME = 57603
const SPLIT = 57604
const SQL = 57605
const START = 57606
const STATUS = 57607
const STDIN = 57608
const STRICT = 57609
const STRING = 57610
const STORING = 57611
const SUBSTRING = 57612
const SYMMETRIC = 57613
const SYSTEM = 57614
const TABLE = 57615
const TABLES = 57616
const TEMPLATE = 57617
const TESTING_RANGES = 57618
const TESTING_RELOCATE = 57619
const TEXT = 57620
const THEN = 57621
const TIME = 57622
const TIMESTAMP = 57623
const TIMESTAMPTZ = 57624
const TO = 57625
const TRAILING = 57626
const TRACE = 57627
const TRANSACTION = 57628
const TREAT = 57629
const TRIM = 57630
const TRUE = 57631
const TRUNCATE = 57632
const TYPE = 57633
const UNBOUNDED = 57634
const UNCOMMITTED = 57635
const UNION = 57636
const UNIQUE = 57637
const UNKNOWN = 57638
const UPDATE = 57639
const UPSERT = 57640
const USE = 57641
const USER = 57642
const USERS = 57643
const USING = 57644
const UUID = 57645
const VALID = 57646
const VALIDATE = 57647
const VALUE = 57648
const VALUES = 57649
const VARCHAR = 57650
const VARIADIC = 57651
const VIEW = 57652
const VARYING = 57653
const WHEN = 57654
const WHERE = 57655
const WINDOW = 57656
const WITH = 57657
const WITHIN = 57658
const WITHOUT = 57659
const WRITE = 57660
const YEAR = 57661
const ZONE = 57662
const NOT_LA = 57663
const WITH_LA = 57664
const AS_LA = 57665
const POSTFIXOP = 57666
const UMINUS = 57667

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5637

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 35,
	344, 35,
	-2, 456,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 59,
	1, 429,
	191, 429,
	234, 429,
	340, 429,
	342, 429,
	344, 429,
	-2, 439,
	-1, 74,
	1, 432,
	191, 432,
	234, 432,
	340, 432,
	342, 432,
	344, 432,
	-2, 438,
	-1, 83,
	1, 35,
	344, 35,
	-2, 456,
	-1, 464,
	1, 180,
	344, 180,
	-2, 1033,
	-1, 535,
	109, 466,
	164, 466,
	189, 466,
	-2, 435,
	-1, 538,
	109, 465,
	164, 465,
	189, 465,
	-2, 433,
	-1, 618,
	341, 961,
	-2, 954,
	-1, 619,
	341, 962,
	-2, 955,
	-1, 625,
	5, 630,
	341, 630,
	-2, 1150,
	-1, 649,
	5, 591,
	-2, 1124,
	-1, 650,
	5, 624,
	341, 624,
	-2, 1126,
	-1, 651,
	5, 599,
	-2, 1127,
	-1, 652,
	5, 598,
	-2, 1128,
	-1, 653,
	5, 624,
	341, 624,
	-2, 1131,
	-1, 654,
	5, 624,
	341, 624,
	-2, 1132,
	-1, 655,
	5, 625,
	-2, 1135,
	-1, 656,
	5, 585,
	-2, 1136,
	-1, 657,
	5, 585,
	-2, 1137,
	-1, 658,
	5, 606,
	-2, 1141,
	-1, 659,
	5, 586,
	-2, 1146,
	-1, 660,
	5, 587,
	-2, 1147,
	-1, 661,
	5, 588,
	-2, 1148,
	-1, 662,
	5, 589,
	-2, 1149,
	-1, 663,
	5, 585,
	-2, 1154,
	-1, 664,
	5, 592,
	-2, 1159,
	-1, 665,
	5, 590,
	-2, 1162,
	-1, 666,
	5, 622,
	341, 622,
	-2, 1164,
	-1, 667,
	5, 626,
	-2, 1167,
	-1, 668,
	5, 628,
	-2, 1168,
	-1, 669,
	5, 621,
	341, 621,
	-2, 1173,
	-1, 787,
	109, 465,
	164, 465,
	189, 465,
	-2, 436,
	-1, 896,
	100, 439,
	109, 439,
	145, 439,
	164, 439,
	189, 439,
	195, 439,
	294, 439,
	-2, 749,
	-1, 905,
	341, 938,
	-2, 926,
	-1, 1179,
	13, 0,
	14, 0,
	15, 0,
	324, 0,
	325, 0,
	326, 0,
	-2, 665,
	-1, 1180,
	13, 0,
	14, 0,
	15, 0,
	324, 0,
	325, 0,
	326, 0,
	-2, 666,
	-1, 1181,
	13, 0,
	14, 0,
	15, 0,
	324, 0,
	325, 0,
	326, 0,
	-2, 667,
	-1, 1185,
	13, 0,
	14, 0,
	15, 0,
	324, 0,
	325, 0,
	326, 0,
	-2, 671,
	-1, 1186,
	13, 0,
	14, 0,
	15, 0,
	324, 0,
	325, 0,
	326, 0,
	-2, 672,
	-1, 1187,
	13, 0,
	14, 0,
	15, 0,
	324, 0,
	325, 0,
	326, 0,
	-2, 673,
	-1, 1190,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	163, 0,
	256, 0,
	321, 0,
	327, 0,
	-2, 678,
	-1, 1196,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	163, 0,
	256, 0,
	321, 0,
	327, 0,
	-2, 680,
	-1, 1198,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	163, 0,
	256, 0,
	321, 0,
	327, 0,
	-2, 684,
	-1, 1199,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	163, 0,
	256, 0,
	321, 0,
	327, 0,
	-2, 685,
	-1, 1200,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	163, 0,
	256, 0,
	321, 0,
	327, 0,
	-2, 686,
	-1, 1201,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	163, 0,
	256, 0,
	321, 0,
	327, 0,
	-2, 687,
	-1, 1227,
	200, 820,
	-2, 823,
	-1, 1263,
	118, 860,
	341, 961,
	-2, 954,
	-1, 1264,
	118, 861,
	-2, 1120,
	-1, 1265,
	118, 862,
	-2, 1032,
	-1, 1266,
	118, 863,
	-2, 997,
	-1, 1267,
	118, 864,
	-2, 1013,
	-1, 1268,
	118, 865,
	-2, 1031,
	-1, 1269,
	118, 866,
	-2, 1082,
	-1, 1450,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	163, 0,
	256, 0,
	321, 0,
	327, 0,
	-2, 679,
	-1, 1451,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	163, 0,
	256, 0,
	321, 0,
	327, 0,
	-2, 681,
	-1, 1456,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	163, 0,
	256, 0,
	321, 0,
	327, 0,
	-2, 682,
	-1, 1474,
	200, 819,
	-2, 822,
	-1, 1639,
	100, 439,
	109, 439,
	145, 439,
	164, 439,
	189, 439,
	195, 439,
	294, 439,
	-2, 520,
	-1, 1681,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	163, 0,
	256, 0,
	321, 0,
	327, 0,
	-2, 683,
	-1, 1686,
	148, 0,
	-2, 699,
	-1, 1696,
	200, 821,
	-2, 824,
	-1, 1738,
	13, 0,
	14, 0,
	15, 0,
	324, 0,
	325, 0,
	326, 0,
	-2, 726,
	-1, 1739,
	13, 0,
	14, 0,
	15, 0,
	324, 0,
	325, 0,
	326, 0,
	-2, 727,
	-1, 1740,
	13, 0,
	14, 0,
	15, 0,
	324, 0,
	325, 0,
	326, 0,
	-2, 728,
	-1, 1744,
	13, 0,
	14, 0,
	15, 0,
	324, 0,
	325, 0,
	326, 0,
	-2, 732,
	-1, 1745,
	13, 0,
	14, 0,
	15, 0,
	324, 0,
	325, 0,
	326, 0,
	-2, 733,
	-1, 1746,
	13, 0,
	14, 0,
	15, 0,
	324, 0,
	325, 0,
	326, 0,
	-2, 734,
	-1, 1828,
	1, 521,
	70, 521,
	100, 521,
	109, 521,
	119, 521,
	123, 521,
	125, 521,
	138, 521,
	145, 521,
	152, 521,
	161, 521,
	164, 521,
	176, 521,
	189, 521,
	191, 521,
	195, 521,
	234, 521,
	236, 521,
	294, 521,
	302, 521,
	313, 521,
	314, 521,
	323, 521,
	340, 521,
	342, 521,
	344, 521,
	345, 521,
	-2, 520,
	-1, 1878,
	148, 0,
	-2, 700,
	-1, 1881,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	163, 0,
	256, 0,
	321, 0,
	327, 0,
	-2, 703,
	-1, 1882,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	163, 0,
	256, 0,
	321, 0,
	327, 0,
	-2, 705,
	-1, 1998,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	163, 0,
	256, 0,
	321, 0,
	327, 0,
	-2, 704,
	-1, 1999,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	163, 0,
	256, 0,
	321, 0,
	327, 0,
	-2, 706,
	-1, 2006,
	148, 0,
	-2, 735,
	-1, 2073,
	148, 0,
	-2, 736,
	-1, 2154,
	36, 0,
	132, 0,
	163, 0,
	256, 0,
	321, 0,
	327, 0,
	-2, 1123,
}

const sqlPrivate = 57344

const sqlLast = 31611

var sqlAct = [...]int{

	619, 1784, 2182, 2137, 2153, 1970, 2102, 2138, 1316, 2139,
	1079, 1824, 1715, 2152, 1996, 2030, 1836, 539, 1308, 1927,
	1951, 1391, 1823, 1794, 1362, 58, 1850, 672, 1637, 609,
	1085, 612, 1634, 1938, 1611, 560, 1613, 96, 96, 595,
	96, 1566, 974, 1652, 680, 1625, 1366, 1932, 329, 1380,
	331, 96, 96, 96, 1361, 845, 1540, 1365, 96, 1399,
	1802, 96, 817, 1651, 1811, 1317, 1081, 820, 1485, 96,
	1158, 1398, 526, 1225, 517, 1539, 901, 1121, 96, 96,
	807, 1446, 96, 1620, 1235, 96, 96, 96, 96, 546,
	73, 96, 96, 1130, 617, 616, 1250, 975, 1105, 1387,
	1039, 1404, 544, 1153, 589, 1354, 725, 1213, 946, 1210,
	1289, 822, 808, 520, 846, 724, 575, 1244, 521, 701,
	690, 1260, 892, 1310, 588, 549, 693, 1369, 1110, 791,
	790, 74, 460, 1401, 789, 449, 313, 931, 73, 459,
	950, 315, 23, 512, 538, 88, 438, 692, 611, 1037,
	686, 92, 770, 1851, 771, 547, 935, 795, 1473, 452,
	2041, 847, 848, 2042, 867, 868, 869, 877, 878, 879,
	959, 959, 510, 73, 959, 1247, 75, 870, 2180, 1309,
	543, 842, 543, 298, 850, 1313, 2162, 881, 594, 1849,
	2149, 1635, 1578, 1341, 847, 848, 2148, 1112, 836, 1341,
	877, 878, 879, 2145, 503, 536, 842, 2135, 849, 2132,
	842, 1577, 842, 2121, 864, 557, 1335, 850, 563, 1248,
	881, 570, 1154, 2099, 2083, 23, 842, 1849, 301, 2079,
	1341, 957, 842, 566, 551, 2075, 2067, 2037, 1335, 2066,
	2038, 849, 2024, 2021, 1623, 1849, 842, 864, 2089, 2019,
	535, 463, 1849, 2000, 1981, 1980, 1335, 842, 1849, 1157,
	1623, 1111, 1249, 1246, 855, 1954, 1905, 1597, 1341, 1341,
	558, 1292, 1883, 565, 568, 1341, 558, 1880, 1870, 1869,
	1335, 1341, 1341, 874, 882, 1848, 1778, 1751, 1849, 1307,
	1632, 1773, 1690, 1600, 1307, 1341, 842, 855, 79, 880,
	1557, 1555, 1554, 1558, 1341, 1341, 328, 1693, 96, 96,
	96, 96, 96, 96, 872, 526, 874, 882, 1553, 328,
	865, 1341, 1477, 1476, 1119, 81, 1474, 1478, 1341, 1341,
	1341, 1395, 1484, 1601, 842, 1345, 1251, 698, 1341, 1154,
	544, 847, 848, 1340, 79, 871, 1341, 872, 1334, 842,
	1390, 1335, 72, 865, 960, 960, 1352, 1306, 960, 82,
	1307, 1157, 1229, 1118, 850, 72, 1117, 77, 803, 968,
	1029, 81, 969, 573, 78, 713, 556, 83, 47, 579,
	1946, 1638, 523, 1852, 79, 1051, 739, 48, 849, 2172,
	2151, 47, 866, 76, 864, 2144, 2107, 2070, 2022, 1910,
	48, 802, 1913, 847, 848, 82, 1906, 875, 1898, 49,
	1245, 81, 1897, 77, 1896, 1892, 677, 1891, 1890, 1577,
	78, 1603, 49, 1889, 1111, 866, 850, 1828, 1801, 1782,
	1766, 1761, 1339, 702, 96, 1760, 1759, 1701, 696, 1312,
	875, 687, 813, 1599, 855, 82, 1562, 1559, 1547, 1636,
	849, 96, 1510, 1511, 96, 96, 679, 1538, 1509, 1506,
	1505, 1503, 1490, 1489, 1221, 526, 1408, 963, 958, 1257,
	1256, 1077, 873, 526, 97, 861, 862, 863, 876, 76,
	860, 858, 859, 851, 852, 853, 854, 856, 857, 802,
	801, 909, 902, 2101, 76, 1084, 558, 1717, 568, 2124,
	865, 2086, 2065, 96, 2064, 873, 855, 2063, 2055, 96,
	2053, 876, 2045, 860, 858, 859, 851, 852, 853, 854,
	856, 857, 1510, 1511, 332, 813, 2033, 2017, 2008, 79,
	96, 96, 96, 1967, 96, 1956, 1921, 1903, 62, 1875,
	1855, 1816, 79, 1792, 1790, 1789, 527, 743, 1787, 96,
	1685, 62, 1912, 788, 1660, 1516, 81, 1780, 1659, 1537,
	96, 1499, 695, 695, 1498, 735, 1222, 1495, 1470, 81,
	1465, 1215, 866, 526, 96, 1437, 1435, 1422, 1421, 1394,
	331, 526, 936, 939, 1299, 1255, 1078, 742, 1510, 1511,
	82, 561, 812, 943, 929, 928, 927, 926, 77, 925,
	924, 923, 922, 82, 787, 78, 847, 848, 921, 920,
	919, 77, 723, 718, 720, 918, 917, 916, 78, 544,
	915, 914, 670, 913, 76, 1516, 906, 1422, 843, 850,
	895, 76, 806, 722, 811, 709, 707, 76, 774, 678,
	2163, 2040, 776, 1943, 1918, 1917, 1885, 743, 1817, 902,
	772, 1510, 1511, 849, 1587, 743, 1586, 893, 733, 2069,
	860, 858, 859, 851, 852, 853, 854, 856, 857, 579,
	2043, 731, 333, 1614, 1916, 1579, 1154, 941, 536, 96,
	1638, 1561, 942, 1560, 96, 96, 96, 840, 96, 1449,
	762, 1516, 734, 911, 528, 847, 848, 558, 1082, 798,
	799, 1447, 830, 1035, 804, 96, 96, 524, 1386, 1933,
	1510, 1511, 1309, 96, 732, 1944, 1385, 96, 850, 1718,
	1481, 828, 96, 535, 948, 841, 86, 853, 854, 856,
	857, 1236, 526, 526, 533, 1008, 829, 932, 766, 981,
	331, 823, 849, 824, 1573, 1647, 96, 1526, 814, 96,
	1624, 96, 96, 96, 96, 96, 96, 2110, 905, 2170,
	2169, 1863, 96, 1525, 1344, 496, 1050, 96, 96, 1594,
	502, 671, 1991, 501, 96, 767, 1514, 1515, 1517, 1518,
	85, 780, 497, 783, 1123, 96, 2078, 759, 1052, 527,
	1671, 933, 934, 813, 1083, 1066, 1990, 1989, 855, 1628,
	1131, 760, 1123, 1988, 96, 1675, 1674, 96, 1122, 1644,
	1643, 1494, 1493, 1516, 937, 825, 96, 687, 1631, 1527,
	940, 1492, 1491, 731, 96, 1452, 952, 908, 96, 1036,
	73, 1109, 1626, 823, 949, 824, 96, 96, 970, 1342,
	96, 1629, 304, 96, 1512, 1513, 1514, 1515, 1517, 1518,
	331, 308, 1088, 972, 1027, 1197, 1627, 1151, 1022, 1150,
	1023, 1026, 1024, 1134, 1147, 898, 732, 947, 773, 1526,
	1124, 1940, 558, 951, 951, 1008, 1008, 1053, 1047, 981,
	981, 1057, 1040, 1046, 1061, 1062, 1063, 1064, 1065, 542,
	1779, 305, 572, 565, 568, 823, 1060, 824, 1167, 1070,
	1071, 2077, 1135, 1137, 1381, 309, 1874, 825, 1247, 1075,
	1512, 1513, 1514, 1515, 1517, 1518, 1630, 758, 84, 1303,
	1091, 624, 1092, 1090, 1302, 962, 529, 536, 965, 1107,
	536, 536, 1168, 857, 541, 1074, 1236, 528, 509, 527,
	1115, 1527, 1678, 1073, 1212, 1159, 1166, 527, 534, 1156,
	948, 1127, 1248, 530, 96, 87, 96, 96, 1133, 96,
	705, 1140, 96, 531, 96, 96, 2169, 96, 96, 825,
	526, 1142, 1101, 1152, 1145, 1102, 1103, 834, 1518, 1233,
	763, 1020, 1939, 1148, 543, 1972, 1054, 1768, 1212, 1563,
	944, 721, 1329, 833, 1028, 1249, 1246, 1055, 1251, 436,
	1593, 2185, 756, 2122, 1116, 1510, 1511, 1076, 1669, 746,
	953, 1662, 831, 2176, 1223, 1220, 558, 851, 852, 853,
	854, 856, 857, 833, 568, 826, 1120, 832, 558, 1521,
	1519, 1520, 1512, 1513, 1514, 1515, 1517, 1518, 757, 1433,
	1270, 1132, 831, 310, 764, 747, 439, 527, 745, 307,
	306, 1219, 331, 1567, 332, 527, 1217, 832, 73, 1708,
	96, 1711, 2118, 73, 504, 1388, 1389, 444, 1571, 1251,
	312, 2191, 440, 96, 96, 96, 1315, 674, 96, 96,
	311, 1072, 1325, 540, 1442, 96, 2119, 528, 702, 1331,
	1439, 1327, 1311, 1328, 1311, 528, 765, 441, 704, 1338,
	1353, 821, 1709, 1208, 2141, 1330, 1324, 959, 1516, 838,
	1333, 1567, 837, 96, 331, 2058, 443, 826, 1206, 1595,
	930, 96, 96, 96, 1376, 2004, 2018, 96, 890, 1396,
	96, 2183, 1497, 1812, 1407, 1251, 96, 96, 96, 96,
	96, 505, 1320, 1245, 2175, 1346, 1827, 568, 96, 1194,
	568, 96, 96, 543, 934, 933, 1008, 73, 526, 937,
	981, 940, 1406, 299, 1526, 728, 1348, 1226, 1663, 1679,
	1799, 2140, 2168, 1415, 1230, 2166, 1251, 1350, 1238, 826,
	1409, 1926, 1378, 1454, 1202, 2184, 1973, 750, 2142, 1262,
	1262, 1273, 1203, 1284, 1204, 528, 716, 1351, 1209, 1296,
	1297, 1298, 333, 528, 1356, 2186, 527, 527, 1432, 1349,
	1384, 1360, 793, 712, 332, 1326, 695, 439, 695, 1844,
	794, 1358, 1837, 442, 1397, 582, 1419, 1211, 300, 729,
	1835, 1410, 743, 730, 1839, 507, 1527, 1844, 444, 2174,
	1445, 544, 2143, 440, 1983, 1192, 1195, 1901, 1982, 1965,
	1747, 2196, 1845, 2050, 1646, 2192, 1483, 1862, 1418, 1414,
	1379, 1357, 568, 1359, 1861, 1089, 558, 792, 441, 1080,
	1845, 1859, 1448, 1838, 445, 1795, 1191, 1707, 1952, 2103,
	793, 1069, 1030, 1434, 1928, 1097, 1436, 443, 1966, 1424,
	1218, 960, 794, 1045, 1044, 1423, 523, 518, 1941, 1807,
	1205, 1402, 1806, 1455, 1453, 728, 544, 1207, 96, 1411,
	447, 506, 1919, 96, 685, 96, 446, 1628, 1444, 1480,
	684, 1469, 96, 541, 332, 1519, 1520, 1512, 1513, 1514,
	1515, 1517, 1518, 96, 784, 792, 1631, 1275, 544, 1748,
	1441, 1953, 1902, 96, 96, 1749, 1840, 2195, 1841, 1034,
	1810, 1098, 1569, 526, 528, 528, 1963, 1575, 1860, 1629,
	1785, 1803, 333, 1008, 1840, 1858, 1841, 981, 1621, 1193,
	1254, 96, 2007, 96, 1900, 96, 1048, 1843, 1964, 96,
	1541, 1684, 1677, 96, 1564, 1504, 1846, 1464, 1343, 604,
	1032, 1305, 1008, 1146, 442, 1843, 981, 1544, 1545, 1546,
	1143, 1602, 1033, 1604, 1846, 769, 96, 2100, 768, 761,
	755, 754, 753, 752, 751, 748, 683, 580, 1542, 1067,
	1059, 1572, 912, 740, 1253, 2136, 93, 93, 1833, 302,
	1580, 544, 1667, 1585, 1630, 1014, 1665, 1645, 847, 848,
	430, 431, 432, 1610, 527, 445, 1382, 451, 1590, 1591,
	465, 1592, 1658, 1596, 1049, 1374, 1332, 967, 451, 966,
	1842, 850, 1419, 1598, 964, 1641, 1584, 550, 550, 961,
	956, 302, 333, 839, 302, 302, 569, 302, 1842, 1007,
	93, 576, 835, 1616, 73, 849, 827, 1468, 1698, 1618,
	73, 1642, 1612, 1008, 1471, 2012, 1565, 981, 96, 682,
	796, 947, 1622, 554, 1703, 1704, 1705, 1640, 1687, 681,
	947, 1670, 1487, 1488, 1649, 1605, 1392, 1657, 1656, 1608,
	2170, 558, 89, 320, 33, 1676, 332, 1042, 2014, 1008,
	1008, 1619, 1139, 981, 981, 1772, 2060, 1633, 1008, 1008,
	1852, 855, 981, 981, 435, 741, 2072, 1694, 1804, 326,
	28, 3, 1536, 325, 27, 1697, 1123, 1581, 1123, 1582,
	1583, 800, 1138, 1549, 1136, 1144, 1141, 1609, 1719, 2090,
	797, 1008, 1721, 555, 1924, 981, 1393, 673, 96, 96,
	1377, 1726, 1373, 1724, 1314, 1108, 1025, 973, 332, 1710,
	1712, 1713, 528, 577, 1402, 1774, 1754, 865, 96, 1159,
	1722, 448, 96, 578, 96, 1337, 2189, 33, 1159, 1727,
	2194, 96, 1771, 574, 526, 2134, 1755, 1791, 2093, 1007,
	1007, 524, 519, 1949, 96, 1781, 1606, 96, 1624, 980,
	324, 26, 527, 28, 1788, 562, 331, 27, 96, 1510,
	1511, 1758, 1777, 1775, 96, 96, 96, 621, 1769, 1796,
	1776, 1767, 1432, 322, 25, 319, 17, 323, 12, 1786,
	1666, 96, 1668, 1818, 327, 11, 96, 1714, 96, 866,
	96, 96, 96, 1809, 333, 96, 96, 1628, 526, 495,
	778, 1853, 1798, 1805, 1819, 1857, 1808, 1887, 1797, 1658,
	847, 848, 1832, 1462, 1813, 1814, 1631, 302, 688, 302,
	465, 465, 576, 1829, 1588, 317, 10, 1672, 1460, 1673,
	1626, 321, 9, 1008, 26, 316, 8, 981, 96, 1629,
	318, 4, 1556, 1856, 847, 848, 847, 848, 1879, 778,
	777, 1304, 1301, 1873, 1627, 1300, 333, 25, 1243, 17,
	899, 12, 1691, 779, 2116, 498, 499, 850, 11, 1997,
	1706, 1607, 743, 909, 1657, 1656, 907, 860, 858, 859,
	851, 852, 853, 854, 856, 857, 1320, 1402, 508, 980,
	980, 849, 1971, 849, 1457, 437, 1058, 749, 1945, 1815,
	528, 1899, 2117, 1893, 1458, 1010, 1496, 2029, 1463, 10,
	96, 96, 2003, 1252, 1630, 9, 910, 526, 46, 8,
	1654, 598, 1834, 1648, 4, 1368, 1367, 96, 96, 1752,
	334, 96, 1402, 1043, 1922, 1402, 1915, 1658, 620, 96,
	1762, 511, 1658, 710, 1261, 1160, 96, 527, 675, 622,
	978, 623, 1929, 979, 96, 938, 96, 610, 331, 96,
	717, 1948, 976, 465, 465, 1923, 1947, 96, 1931, 700,
	1318, 1920, 1216, 331, 1234, 1479, 1925, 1957, 1866, 903,
	590, 602, 601, 1231, 1872, 706, 1936, 1937, 1950, 462,
	1942, 1930, 1975, 61, 458, 1977, 1570, 1958, 1911, 1658,
	1959, 1096, 1657, 1656, 1383, 1093, 1961, 1657, 1656, 1664,
	1459, 1008, 451, 1974, 532, 981, 948, 1461, 302, 1507,
	1007, 1976, 708, 1282, 1993, 1274, 2002, 1271, 1822, 775,
	816, 891, 1319, 96, 1992, 1914, 738, 1576, 1336, 465,
	782, 465, 805, 785, 1104, 1010, 1010, 96, 553, 552,
	526, 1008, 1363, 736, 96, 981, 1031, 2013, 550, 1347,
	884, 883, 96, 500, 1657, 1656, 2009, 2052, 96, 302,
	727, 1658, 2015, 726, 1510, 1511, 1375, 96, 96, 1417,
	2190, 1985, 2059, 93, 96, 2026, 2028, 1661, 2109, 2047,
	2039, 2032, 2054, 80, 2068, 528, 2036, 2048, 1995, 1443,
	34, 2046, 32, 2044, 29, 2020, 24, 22, 21, 96,
	96, 20, 31, 19, 2049, 1402, 1402, 2057, 30, 1402,
	18, 2035, 16, 15, 2027, 2056, 14, 13, 45, 44,
	43, 42, 41, 40, 7, 96, 1657, 1656, 6, 96,
	1100, 2071, 5, 2, 2084, 2082, 1, 526, 0, 0,
	2085, 0, 0, 0, 96, 1969, 1008, 0, 0, 1021,
	981, 0, 0, 544, 331, 96, 96, 0, 0, 0,
	980, 2074, 2088, 0, 96, 0, 96, 1516, 2091, 96,
	0, 331, 2094, 0, 0, 2092, 2023, 2097, 302, 0,
	2098, 0, 0, 302, 302, 302, 1935, 954, 2106, 0,
	2105, 2115, 0, 0, 2125, 0, 0, 2127, 527, 2126,
	96, 0, 2095, 96, 302, 302, 1986, 1987, 2123, 0,
	0, 2087, 93, 2131, 2133, 2130, 93, 1007, 2129, 2111,
	332, 465, 0, 1526, 0, 2025, 1658, 0, 0, 2146,
	0, 0, 0, 96, 0, 96, 0, 1979, 2161, 0,
	1402, 2159, 2150, 2158, 0, 465, 1007, 96, 465, 0,
	93, 465, 465, 465, 465, 465, 1276, 2167, 2165, 2160,
	2128, 1068, 527, 2171, 0, 0, 465, 465, 0, 2173,
	0, 0, 328, 451, 0, 0, 0, 0, 2181, 0,
	0, 0, 0, 2187, 1087, 2188, 0, 0, 2179, 0,
	0, 1657, 1656, 2193, 0, 1527, 0, 0, 0, 0,
	0, 0, 0, 550, 2197, 0, 576, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 1010, 0, 72, 0,
	0, 0, 0, 1128, 0, 0, 0, 302, 0, 0,
	0, 0, 0, 0, 0, 302, 1149, 0, 0, 302,
	0, 0, 1155, 0, 47, 0, 528, 1007, 0, 0,
	0, 0, 0, 48, 0, 0, 0, 2108, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 980, 333, 0,
	0, 0, 0, 0, 0, 49, 0, 0, 0, 0,
	0, 527, 0, 1007, 1007, 1520, 1512, 1513, 1514, 1515,
	1517, 1518, 1007, 1007, 0, 1009, 980, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	528, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1320, 332, 0, 0, 1007, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 332, 0, 0,
	0, 0, 0, 0, 0, 2112, 2113, 2114, 0, 581,
	676, 0, 0, 302, 2120, 1322, 1323, 0, 302, 0,
	0, 302, 0, 465, 465, 977, 465, 576, 0, 0,
	0, 0, 0, 847, 848, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 79, 850, 980, 0, 0,
	0, 0, 0, 0, 62, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 527, 0, 0, 0, 0, 0,
	849, 0, 81, 1010, 0, 0, 0, 0, 0, 528,
	0, 0, 0, 980, 980, 1009, 1009, 0, 0, 0,
	0, 0, 980, 980, 0, 0, 1276, 1276, 0, 0,
	0, 0, 1010, 0, 0, 0, 82, 0, 0, 1355,
	0, 0, 0, 0, 77, 0, 0, 1007, 0, 0,
	333, 78, 302, 302, 302, 980, 855, 302, 1364, 0,
	0, 0, 0, 0, 576, 333, 0, 0, 0, 0,
	314, 0, 0, 847, 848, 0, 714, 715, 0, 599,
	59, 0, 0, 0, 0, 977, 977, 847, 848, 0,
	0, 527, 302, 1276, 1276, 1276, 850, 0, 0, 0,
	302, 1412, 1413, 0, 0, 0, 1128, 0, 332, 1420,
	850, 0, 865, 0, 0, 1425, 1426, 1428, 1430, 1431,
	849, 0, 0, 0, 0, 332, 0, 1438, 59, 0,
	1440, 302, 0, 1010, 849, 0, 0, 0, 1466, 1467,
	0, 0, 528, 0, 0, 0, 0, 1510, 1511, 0,
	1528, 1529, 1530, 537, 0, 0, 545, 0, 0, 0,
	0, 0, 0, 59, 0, 0, 0, 0, 0, 1010,
	1010, 0, 0, 0, 0, 0, 855, 0, 1010, 1010,
	0, 0, 809, 809, 866, 0, 0, 0, 0, 0,
	855, 818, 1510, 1511, 0, 0, 0, 980, 0, 0,
	1525, 0, 0, 0, 0, 1533, 1534, 1535, 0, 0,
	0, 1010, 0, 885, 886, 887, 888, 889, 0, 0,
	0, 0, 0, 897, 0, 1007, 0, 0, 0, 0,
	0, 0, 865, 904, 0, 0, 0, 0, 0, 528,
	0, 0, 0, 0, 0, 0, 865, 0, 0, 0,
	1516, 0, 0, 0, 0, 0, 333, 0, 0, 0,
	0, 0, 0, 0, 0, 1007, 0, 0, 0, 1276,
	1276, 0, 0, 333, 859, 851, 852, 853, 854, 856,
	857, 0, 0, 0, 0, 1531, 0, 302, 0, 0,
	0, 0, 302, 0, 1574, 1516, 1009, 0, 0, 0,
	0, 302, 0, 0, 866, 0, 1526, 0, 0, 0,
	0, 0, 302, 0, 0, 0, 0, 0, 866, 0,
	0, 0, 1355, 1355, 0, 0, 0, 0, 1276, 1276,
	1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276,
	1276, 1276, 1276, 1276, 1276, 1276, 1276, 0, 1276, 0,
	1087, 1526, 1087, 1010, 465, 0, 0, 0, 302, 0,
	0, 0, 1615, 0, 0, 0, 977, 0, 0, 0,
	1007, 0, 0, 0, 0, 980, 0, 0, 1527, 0,
	0, 1682, 1683, 0, 0, 302, 0, 0, 0, 0,
	0, 0, 0, 0, 545, 851, 852, 853, 854, 856,
	857, 0, 1653, 0, 0, 0, 0, 858, 859, 851,
	852, 853, 854, 856, 857, 980, 0, 0, 0, 0,
	0, 0, 1094, 1527, 1099, 0, 0, 0, 0, 0,
	1106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737,
	1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 0,
	1750, 1522, 1523, 1524, 0, 0, 1521, 1519, 1520, 1512,
	1513, 1514, 1515, 1517, 1518, 0, 0, 1716, 0, 0,
	0, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177,
	1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187,
	1188, 1189, 1190, 1009, 1196, 0, 1198, 1199, 1200, 1201,
	0, 1521, 1519, 1520, 1512, 1513, 1514, 1515, 1517, 1518,
	980, 0, 0, 1224, 0, 0, 0, 0, 0, 0,
	0, 1010, 1009, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1258, 1259, 0, 0, 1272,
	0, 1283, 1285, 1290, 1293, 1294, 1295, 302, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1010, 0, 977, 0, 0, 0, 1783, 0, 0,
	0, 1128, 0, 1087, 0, 0, 0, 0, 0, 0,
	1793, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 977, 302, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1826, 0, 0,
	0, 0, 0, 1830, 1831, 1128, 537, 0, 0, 0,
	0, 0, 0, 1009, 0, 0, 0, 0, 0, 1653,
	576, 0, 0, 0, 0, 1864, 0, 1865, 0, 302,
	1867, 1868, 0, 0, 1871, 302, 0, 0, 0, 0,
	0, 1276, 0, 0, 0, 0, 0, 0, 0, 1009,
	1009, 894, 0, 896, 0, 0, 1010, 0, 1009, 1009,
	900, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1894, 0, 0,
	0, 0, 0, 977, 0, 0, 0, 0, 0, 0,
	0, 1009, 0, 0, 0, 0, 1276, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 977,
	977, 809, 0, 0, 0, 0, 0, 818, 977, 977,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1653, 0, 576,
	1364, 0, 1653, 1968, 0, 0, 0, 0, 0, 0,
	0, 977, 0, 0, 0, 0, 302, 302, 0, 0,
	302, 0, 0, 0, 0, 0, 0, 0, 1826, 0,
	0, 0, 0, 0, 0, 1955, 0, 0, 0, 0,
	0, 0, 0, 1128, 0, 1960, 0, 0, 1962, 0,
	59, 1450, 1451, 1276, 0, 0, 302, 1456, 2006, 1653,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 847, 848, 0, 867, 868, 869, 877, 878,
	879, 0, 0, 1009, 1994, 0, 0, 0, 870, 1475,
	0, 0, 0, 0, 0, 850, 1482, 0, 881, 1486,
	0, 0, 0, 0, 0, 537, 0, 0, 537, 537,
	0, 0, 0, 0, 0, 1500, 0, 0, 0, 849,
	0, 0, 576, 0, 0, 864, 0, 0, 0, 0,
	0, 1653, 0, 0, 0, 0, 302, 0, 0, 59,
	897, 0, 59, 2031, 0, 0, 1290, 1290, 1290, 0,
	0, 302, 0, 977, 0, 0, 0, 1826, 0, 0,
	0, 0, 0, 0, 0, 2073, 576, 1826, 0, 1568,
	0, 0, 0, 1087, 0, 855, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1214, 0, 874, 882, 0, 0, 2061, 2062,
	0, 1589, 0, 0, 0, 0, 0, 0, 0, 0,
	880, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2080, 872, 0, 0, 2081, 0,
	0, 865, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 576, 0, 1617, 0, 0, 0, 0,
	1106, 0, 0, 0, 1826, 576, 871, 0, 0, 0,
	59, 1009, 59, 2104, 0, 576, 0, 0, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 59, 0,
	0, 1650, 0, 59, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1653, 0, 0, 2031,
	0, 1009, 1826, 866, 0, 0, 0, 0, 0, 1680,
	0, 0, 1681, 0, 0, 0, 0, 0, 875, 0,
	0, 0, 0, 0, 1686, 0, 0, 0, 0, 0,
	0, 977, 302, 1695, 576, 0, 0, 0, 0, 0,
	0, 1699, 0, 0, 1589, 0, 2164, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1723, 0, 0, 0, 1725, 0,
	0, 977, 0, 0, 0, 1510, 1511, 59, 1528, 1529,
	1530, 0, 0, 873, 0, 0, 861, 862, 863, 876,
	0, 860, 858, 859, 851, 852, 853, 854, 856, 857,
	0, 1756, 1757, 0, 0, 0, 1009, 1907, 0, 0,
	1763, 1764, 1765, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1403, 0, 0, 0, 0, 809, 1525, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 818,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 59, 0, 0, 59, 0, 0, 0, 0, 0,
	0, 847, 848, 0, 867, 868, 869, 877, 878, 879,
	0, 0, 0, 0, 0, 0, 977, 870, 1516, 0,
	0, 0, 0, 0, 850, 0, 0, 881, 0, 0,
	0, 0, 0, 847, 848, 0, 867, 868, 869, 877,
	878, 879, 0, 0, 0, 1214, 0, 0, 849, 870,
	0, 0, 0, 0, 864, 1854, 850, 0, 0, 881,
	0, 0, 0, 0, 0, 896, 0, 0, 0, 0,
	0, 0, 0, 0, 1526, 0, 0, 0, 0, 0,
	849, 0, 0, 0, 1878, 0, 864, 0, 1881, 1882,
	0, 0, 0, 1884, 0, 0, 0, 0, 0, 0,
	1886, 0, 1888, 0, 855, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1895, 0,
	0, 0, 0, 874, 882, 0, 0, 0, 0, 0,
	896, 0, 0, 0, 0, 0, 855, 0, 0, 880,
	0, 0, 0, 0, 0, 0, 1527, 0, 0, 0,
	0, 1904, 0, 0, 872, 874, 882, 0, 0, 0,
	865, 0, 545, 0, 0, 0, 0, 0, 0, 0,
	0, 880, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 871, 872, 0, 0, 0,
	0, 0, 865, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1934, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 871, 0, 0,
	0, 0, 0, 59, 0, 0, 0, 59, 0, 1522,
	1523, 1524, 866, 0, 1521, 1519, 1520, 1512, 1513, 1514,
	1515, 1517, 1518, 0, 59, 0, 0, 875, 0, 0,
	59, 0, 0, 0, 0, 1639, 0, 0, 0, 0,
	0, 1984, 0, 0, 866, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1998, 1999, 0, 875,
	0, 0, 847, 848, 0, 867, 868, 869, 877, 878,
	879, 0, 0, 0, 0, 0, 0, 0, 870, 0,
	0, 0, 0, 0, 0, 850, 0, 2011, 881, 0,
	0, 0, 873, 0, 0, 861, 862, 863, 876, 0,
	860, 858, 859, 851, 852, 853, 854, 856, 857, 849,
	0, 0, 0, 0, 0, 864, 1552, 0, 0, 0,
	2034, 0, 0, 0, 873, 0, 0, 861, 862, 863,
	876, 0, 860, 858, 859, 851, 852, 853, 854, 856,
	857, 1510, 1511, 0, 1528, 1529, 1530, 2051, 1551, 0,
	0, 0, 0, 0, 0, 0, 0, 1877, 0, 0,
	0, 0, 0, 847, 848, 855, 867, 868, 869, 877,
	878, 879, 0, 0, 0, 0, 0, 0, 0, 870,
	0, 0, 0, 0, 874, 882, 850, 0, 0, 881,
	0, 0, 0, 0, 1525, 0, 0, 818, 0, 0,
	880, 1510, 1511, 0, 1528, 1529, 1530, 0, 1403, 0,
	849, 0, 0, 0, 0, 872, 864, 1876, 0, 0,
	0, 865, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1516, 0, 871, 0, 0, 0,
	0, 0, 0, 1403, 1525, 0, 1403, 0, 0, 0,
	1510, 1511, 0, 1528, 1529, 1530, 855, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1689, 0, 0, 1531,
	0, 0, 0, 0, 0, 874, 882, 0, 0, 0,
	2147, 0, 0, 866, 0, 0, 0, 0, 2157, 2157,
	1526, 880, 0, 0, 1516, 0, 0, 0, 875, 0,
	0, 0, 0, 1525, 0, 0, 872, 0, 0, 0,
	0, 0, 865, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2157, 0, 0, 0, 0, 1531,
	0, 0, 0, 0, 0, 0, 0, 871, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1526, 0, 0, 1516, 0, 0, 0, 0, 0, 2157,
	0, 0, 1527, 873, 0, 0, 861, 862, 863, 876,
	0, 860, 858, 859, 851, 852, 853, 854, 856, 857,
	0, 0, 0, 0, 866, 0, 0, 1550, 1531, 0,
	0, 0, 0, 59, 0, 0, 0, 0, 0, 875,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1526,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1527, 0, 0, 0, 1403, 1403, 0, 0,
	1403, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1522, 1523, 1524, 0, 0,
	1521, 1519, 1520, 1512, 1513, 1514, 1515, 1517, 1518, 0,
	0, 0, 0, 0, 873, 0, 0, 861, 862, 863,
	876, 0, 860, 858, 859, 851, 852, 853, 854, 856,
	857, 1527, 0, 0, 0, 0, 0, 0, 1502, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1522, 1523, 1524, 0, 0,
	1521, 1519, 1520, 1512, 1513, 1514, 1515, 1517, 1518, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2016, 0, 0, 0,
	0, 0, 0, 0, 59, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1403, 0, 0, 1522, 1523, 1524, 0, 0, 1521,
	1519, 1520, 1512, 1513, 1514, 1515, 1517, 1518, 330, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 99, 349, 100, 350, 351,
	352, 353, 246, 354, 355, 356, 357, 101, 102, 103,
	247, 248, 249, 250, 104, 251, 252, 358, 105, 253,
	254, 106, 107, 359, 360, 255, 256, 257, 361, 108,
	258, 362, 335, 363, 109, 110, 111, 896, 112, 364,
	113, 114, 115, 365, 336, 116, 117, 366, 367, 368,
	369, 370, 371, 118, 119, 303, 120, 259, 121, 260,
	261, 372, 122, 373, 123, 374, 375, 376, 124, 125,
	377, 126, 378, 0, 379, 262, 127, 128, 129, 263,
	264, 380, 381, 382, 130, 131, 265, 0, 132, 383,
	133, 384, 385, 337, 386, 134, 266, 387, 267, 388,
	135, 136, 137, 138, 268, 269, 339, 389, 142, 390,
	139, 391, 338, 140, 270, 141, 271, 272, 273, 392,
	274, 393, 340, 143, 144, 145, 341, 146, 147, 148,
	394, 150, 149, 395, 275, 342, 151, 343, 396, 152,
	397, 398, 153, 0, 154, 155, 156, 158, 276, 157,
	344, 159, 160, 162, 161, 399, 400, 401, 277, 163,
	278, 164, 165, 402, 166, 403, 404, 167, 405, 406,
	168, 279, 345, 169, 346, 280, 170, 171, 172, 173,
	174, 407, 281, 175, 282, 176, 408, 177, 178, 179,
	180, 181, 283, 182, 183, 409, 184, 185, 186, 187,
	188, 190, 191, 189, 192, 193, 194, 195, 410, 196,
	347, 197, 198, 284, 199, 0, 203, 204, 205, 206,
	411, 285, 207, 208, 209, 412, 210, 200, 201, 211,
	348, 212, 286, 287, 213, 413, 219, 214, 215, 202,
	216, 218, 288, 217, 289, 414, 220, 415, 221, 222,
	223, 224, 225, 416, 290, 291, 292, 417, 418, 226,
	227, 293, 294, 419, 228, 229, 230, 231, 420, 421,
	232, 233, 234, 235, 422, 236, 423, 295, 237, 238,
	239, 296, 297, 424, 425, 240, 426, 427, 428, 429,
	241, 242, 243, 244, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 0, 0, 1820, 0, 0, 0, 0, 0, 0,
	0, 1821, 98, 99, 349, 100, 350, 351, 352, 353,
	246, 354, 355, 356, 357, 101, 102, 103, 247, 248,
	249, 250, 104, 251, 252, 358, 105, 253, 254, 106,
	107, 359, 360, 255, 256, 257, 361, 108, 258, 362,
	335, 363, 109, 110, 111, 0, 112, 364, 113, 114,
	115, 365, 336, 116, 117, 366, 367, 368, 369, 370,
	371, 118, 119, 303, 120, 259, 121, 260, 261, 372,
	122, 373, 123, 374, 375, 376, 124, 125, 377, 126,
	378, 0, 379, 262, 127, 128, 129, 263, 264, 380,
	381, 382, 130, 131, 265, 0, 132, 383, 133, 384,
	385, 337, 386, 134, 266, 387, 267, 388, 135, 136,
	137, 138, 268, 269, 339, 389, 142, 390, 139, 391,
	338, 140, 270, 141, 271, 272, 273, 392, 274, 393,
	340, 143, 144, 145, 341, 146, 147, 148, 394, 150,
	149, 395, 275, 342, 151, 343, 396, 152, 397, 398,
	153, 0, 154, 155, 156, 158, 276, 157, 344, 159,
	160, 162, 161, 399, 400, 401, 277, 163, 278, 164,
	165, 402, 166, 403, 404, 167, 405, 406, 168, 279,
	345, 169, 346, 280, 170, 171, 172, 173, 174, 407,
	281, 175, 282, 176, 408, 177, 178, 179, 180, 181,
	283, 182, 183, 409, 184, 185, 186, 187, 188, 190,
	191, 189, 192, 193, 194, 195, 410, 196, 347, 197,
	198, 284, 199, 0, 203, 204, 205, 206, 411, 285,
	207, 208, 209, 412, 210, 200, 201, 211, 348, 212,
	286, 287, 213, 413, 219, 214, 215, 202, 216, 218,
	288, 217, 289, 414, 220, 415, 221, 222, 223, 224,
	225, 416, 290, 291, 292, 417, 418, 226, 227, 293,
	294, 419, 228, 229, 230, 231, 420, 421, 232, 233,
	234, 235, 422, 236, 423, 295, 237, 238, 239, 296,
	297, 424, 425, 240, 426, 427, 428, 429, 241, 242,
	243, 244, 245, 0, 0, 0, 330, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2096, 98, 99, 349, 100, 350, 351, 352, 353,
	246, 354, 355, 356, 357, 101, 102, 103, 247, 248,
	249, 250, 104, 251, 252, 358, 105, 253, 254, 106,
	107, 359, 360, 255, 256, 257, 361, 108, 258, 362,
	335, 363, 109, 110, 111, 0, 112, 364, 113, 114,
	115, 365, 336, 116, 117, 366, 367, 368, 369, 370,
	371, 118, 119, 303, 120, 259, 121, 260, 261, 372,
	122, 373, 123, 374, 375, 376, 124, 125, 377, 126,
	378, 0, 379, 262, 127, 128, 129, 263, 264, 380,
	381, 382, 130, 131, 265, 0, 132, 383, 133, 384,
	385, 337, 386, 134, 266, 387, 267, 388, 135, 136,
	137, 138, 268, 269, 339, 389, 142, 390, 139, 391,
	338, 140, 270, 141, 271, 272, 273, 392, 274, 393,
	340, 143, 144, 145, 341, 146, 147, 148, 394, 150,
	149, 395, 275, 342, 151, 343, 396, 152, 397, 398,
	153, 0, 154, 155, 156, 158, 276, 157, 344, 159,
	160, 162, 161, 399, 400, 401, 277, 163, 278, 164,
	165, 402, 166, 403, 404, 167, 405, 406, 168, 279,
	345, 169, 346, 280, 170, 171, 172, 173, 174, 407,
	281, 175, 282, 176, 408, 177, 178, 179, 180, 181,
	283, 182, 183, 409, 184, 185, 186, 187, 188, 190,
	191, 189, 192, 193, 194, 195, 410, 196, 347, 197,
	198, 284, 199, 0, 203, 204, 205, 206, 411, 285,
	207, 208, 209, 412, 210, 200, 201, 211, 348, 212,
	286, 287, 213, 413, 219, 214, 215, 202, 216, 218,
	288, 217, 289, 414, 220, 415, 221, 222, 223, 224,
	225, 416, 290, 291, 292, 417, 418, 226, 227, 293,
	294, 419, 228, 229, 230, 231, 420, 421, 232, 233,
	234, 235, 422, 236, 423, 295, 237, 238, 239, 296,
	297, 424, 425, 240, 426, 427, 428, 429, 241, 242,
	243, 244, 245, 330, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 844, 0, 0, 98,
	99, 349, 100, 350, 351, 352, 353, 246, 354, 355,
	356, 357, 101, 102, 103, 247, 248, 249, 250, 104,
	251, 252, 358, 105, 253, 254, 106, 107, 359, 360,
	255, 256, 257, 361, 108, 258, 362, 335, 363, 109,
	110, 111, 0, 112, 364, 113, 114, 115, 365, 336,
	116, 117, 366, 367, 368, 369, 370, 371, 118, 119,
	303, 120, 259, 121, 260, 261, 372, 122, 373, 123,
	374, 375, 376, 124, 125, 377, 126, 378, 0, 379,
	262, 127, 128, 129, 263, 264, 380, 381, 382, 130,
	131, 265, 0, 132, 383, 133, 384, 385, 337, 386,
	134, 266, 387, 267, 388, 135, 136, 137, 138, 268,
	269, 339, 389, 142, 390, 139, 391, 338, 140, 270,
	141, 271, 272, 273, 392, 274, 393, 340, 143, 144,
	145, 341, 146, 147, 148, 394, 150, 149, 395, 275,
	342, 151, 343, 396, 152, 397, 398, 153, 0, 154,
	155, 156, 158, 276, 157, 344, 159, 160, 162, 161,
	399, 400, 401, 277, 163, 278, 164, 165, 402, 166,
	403, 404, 167, 405, 406, 168, 279, 345, 169, 346,
	280, 170, 171, 172, 173, 174, 407, 281, 175, 282,
	176, 408, 177, 178, 179, 180, 181, 283, 182, 183,
	409, 184, 185, 186, 187, 188, 190, 191, 189, 192,
	193, 194, 195, 410, 196, 347, 197, 198, 284, 199,
	0, 203, 204, 205, 206, 411, 285, 207, 208, 209,
	412, 210, 200, 201, 211, 348, 212, 286, 287, 213,
	413, 219, 214, 215, 202, 216, 218, 288, 217, 289,
	414, 220, 415, 221, 222, 223, 224, 225, 416, 290,
	291, 292, 417, 418, 226, 227, 293, 294, 419, 228,
	229, 230, 231, 420, 421, 232, 233, 234, 235, 422,
	236, 423, 295, 237, 238, 239, 296, 297, 424, 425,
	240, 426, 427, 428, 429, 241, 242, 243, 244, 245,
	618, 607, 608, 605, 606, 597, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 0, 634, 600, 0, 0, 0, 101,
	102, 103, 247, 649, 249, 650, 104, 651, 652, 0,
	105, 253, 254, 106, 107, 603, 633, 653, 654, 257,
	0, 108, 645, 0, 626, 0, 109, 110, 111, 0,
	112, 0, 113, 114, 115, 0, 336, 116, 117, 0,
	627, 629, 0, 628, 630, 118, 119, 303, 120, 655,
	121, 656, 657, 819, 122, 0, 123, 0, 0, 0,
	648, 125, 0, 126, 0, 0, 0, 591, 127, 128,
	129, 635, 636, 614, 0, 0, 130, 131, 658, 0,
	132, 0, 133, 0, 0, 337, 0, 134, 646, 0,
	267, 0, 135, 136, 137, 138, 642, 644, 339, 0,
	142, 0, 139, 0, 338, 140, 659, 141, 660, 661,
	662, 0, 625, 0, 340, 143, 144, 145, 341, 146,
	147, 148, 0, 150, 149, 0, 647, 342, 151, 343,
	0, 152, 0, 0, 153, 0, 154, 155, 156, 158,
	276, 157, 344, 159, 160, 162, 161, 586, 0, 615,
	643, 163, 663, 164, 165, 0, 166, 0, 0, 167,
	0, 0, 168, 279, 345, 169, 346, 637, 170, 171,
	172, 173, 174, 0, 638, 175, 282, 176, 0, 177,
	178, 179, 180, 181, 664, 182, 183, 0, 184, 185,
	186, 187, 188, 190, 191, 189, 192, 193, 194, 195,
	0, 196, 347, 197, 198, 592, 199, 0, 203, 204,
	205, 206, 79, 285, 207, 208, 209, 631, 210, 200,
	201, 211, 348, 212, 665, 287, 213, 0, 219, 214,
	215, 202, 216, 218, 666, 217, 639, 0, 220, 81,
	221, 222, 223, 224, 225, 0, 290, 667, 668, 0,
	0, 226, 227, 640, 641, 613, 228, 229, 230, 231,
	0, 0, 232, 233, 234, 235, 632, 236, 0, 295,
	237, 238, 239, 703, 669, 0, 0, 240, 0, 0,
	0, 77, 241, 242, 243, 244, 245, 587, 78, 0,
	0, 0, 0, 585, 0, 0, 0, 0, 583, 584,
	618, 607, 608, 605, 606, 597, 0, 593, 0, 0,
	0, 0, 596, 0, 0, 0, 98, 99, 1240, 100,
	0, 0, 0, 0, 634, 600, 0, 0, 0, 101,
	102, 103, 247, 649, 249, 650, 104, 651, 652, 0,
	105, 253, 254, 106, 107, 603, 633, 653, 654, 257,
	0, 108, 645, 0, 626, 0, 109, 110, 111, 0,
	112, 0, 113, 114, 115, 0, 336, 116, 117, 0,
	627, 629, 0, 628, 630, 118, 119, 303, 120, 655,
	121, 656, 657, 0, 122, 0, 123, 0, 1241, 0,
	648, 125, 0, 126, 0, 0, 0, 591, 127, 128,
	129, 635, 636, 614, 0, 0, 130, 131, 658, 0,
	132, 0, 133, 0, 0, 337, 0, 134, 646, 0,
	267, 0, 135, 136, 137, 138, 642, 644, 339, 0,
	142, 0, 139, 0, 338, 140, 659, 141, 660, 661,
	662, 0, 625, 0, 340, 143, 144, 145, 341, 146,
	147, 148, 0, 150, 149, 0, 647, 342, 151, 343,
	0, 152, 0, 0, 153, 0, 154, 155, 156, 158,
	276, 157, 344, 159, 160, 162, 161, 586, 0, 615,
	643, 163, 663, 164, 165, 0, 166, 0, 0, 167,
	0, 0, 168, 279, 345, 169, 346, 637, 170, 171,
	172, 173, 174, 0, 638, 175, 282, 176, 0, 177,
	178, 179, 180, 181, 664, 182, 183, 0, 184, 185,
	186, 187, 188, 190, 191, 189, 192, 193, 194, 195,
	0, 196, 347, 197, 198, 592, 199, 0, 203, 204,
	205, 206, 0, 285, 207, 208, 209, 631, 210, 200,
	201, 211, 348, 212, 665, 287, 213, 0, 219, 214,
	215, 202, 216, 218, 666, 217, 639, 0, 220, 0,
	221, 222, 223, 224, 225, 0, 290, 667, 668, 0,
	0, 226, 227, 640, 641, 613, 228, 229, 230, 231,
	0, 0, 232, 233, 234, 235, 632, 236, 0, 295,
	237, 238, 239, 296, 669, 1239, 0, 240, 0, 0,
	0, 0, 241, 242, 243, 244, 245, 587, 0, 0,
	0, 0, 0, 585, 0, 0, 0, 0, 583, 584,
	1242, 618, 607, 608, 605, 606, 597, 593, 1237, 0,
	0, 0, 596, 0, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 0, 634, 600, 0, 0, 0,
	101, 102, 103, 247, 649, 249, 650, 104, 651, 652,
	0, 105, 253, 254, 106, 107, 603, 633, 653, 654,
	257, 0, 108, 645, 0, 626, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 336, 116, 117,
	0, 627, 629, 0, 628, 630, 118, 119, 303, 120,
	655, 121, 656, 657, 0, 122, 0, 123, 0, 0,
	0, 648, 125, 0, 126, 0, 0, 0, 591, 127,
	128, 129, 635, 636, 614, 0, 0, 130, 131, 658,
	0, 132, 0, 133, 0, 0, 337, 0, 134, 646,
	0, 267, 0, 135, 136, 137, 138, 642, 644, 339,
	0, 142, 0, 139, 0, 338, 140, 659, 141, 660,
	661, 662, 0, 625, 0, 340, 143, 144, 145, 341,
	146, 147, 148, 0, 150, 149, 0, 647, 342, 151,
	343, 0, 152, 0, 0, 153, 0, 154, 155, 156,
	158, 276, 157, 344, 159, 160, 162, 161, 586, 0,
	615, 643, 163, 663, 164, 165, 0, 166, 0, 0,
	167, 0, 0, 168, 279, 345, 169, 346, 637, 170,
	171, 172, 173, 174, 0, 638, 175, 282, 176, 0,
	177, 178, 179, 180, 181, 664, 182, 183, 0, 184,
	185, 186, 187, 188, 190, 191, 189, 192, 193, 194,
	195, 0, 196, 347, 197, 198, 592, 199, 0, 203,
	204, 205, 206, 79, 285, 207, 208, 209, 631, 210,
	200, 201, 211, 348, 212, 665, 287, 213, 0, 219,
	214, 215, 202, 216, 218, 666, 217, 639, 0, 220,
	81, 221, 222, 223, 224, 225, 0, 290, 667, 668,
	0, 0, 226, 227, 640, 641, 613, 228, 229, 230,
	231, 0, 0, 232, 233, 234, 235, 632, 236, 0,
	295, 237, 238, 239, 703, 669, 0, 0, 240, 0,
	0, 0, 77, 241, 242, 243, 244, 245, 587, 78,
	0, 0, 0, 0, 585, 0, 0, 0, 0, 583,
	584, 618, 607, 608, 605, 606, 597, 0, 593, 0,
	0, 0, 0, 596, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 0, 634, 600, 0, 0, 0,
	101, 102, 103, 247, 649, 249, 650, 104, 651, 652,
	1286, 105, 253, 254, 106, 107, 603, 633, 653, 654,
	257, 0, 108, 645, 0, 626, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 336, 116, 117,
	0, 627, 629, 0, 628, 630, 118, 119, 303, 120,
	655, 121, 656, 657, 0, 122, 0, 123, 0, 0,
	0, 648, 125, 0, 126, 0, 0, 0, 591, 127,
	128, 129, 635, 636, 614, 0, 0, 130, 131, 658,
	0, 132, 0, 133, 0, 1291, 337, 0, 134, 646,
	0, 267, 0, 135, 136, 137, 138, 642, 644, 339,
	0, 142, 0, 139, 0, 338, 140, 659, 141, 660,
	661, 662, 0, 625, 0, 340, 143, 144, 145, 341,
	146, 147, 148, 0, 150, 149, 1287, 647, 342, 151,
	343, 0, 152, 0, 0, 153, 0, 154, 155, 156,
	158, 276, 157, 344, 159, 160, 162, 161, 586, 0,
	615, 643, 163, 663, 164, 165, 0, 166, 0, 0,
	167, 0, 0, 168, 279, 345, 169, 346, 637, 170,
	171, 172, 173, 174, 0, 638, 175, 282, 176, 0,
	177, 178, 179, 180, 181, 664, 182, 183, 0, 184,
	185, 186, 187, 188, 190, 191, 189, 192, 193, 194,
	195, 0, 196, 347, 197, 198, 592, 199, 0, 203,
	204, 205, 206, 0, 285, 207, 208, 209, 631, 210,
	200, 201, 211, 348, 212, 665, 287, 213, 0, 219,
	214, 215, 202, 216, 218, 666, 217, 639, 0, 220,
	0, 221, 222, 223, 224, 225, 0, 290, 667, 668,
	0, 1288, 226, 227, 640, 641, 613, 228, 229, 230,
	231, 0, 0, 232, 233, 234, 235, 632, 236, 0,
	295, 237, 238, 239, 296, 669, 0, 0, 240, 0,
	0, 0, 0, 241, 242, 243, 244, 245, 587, 0,
	0, 0, 0, 0, 585, 0, 0, 0, 0, 583,
	584, 618, 607, 608, 605, 606, 597, 0, 593, 0,
	0, 0, 0, 596, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 0, 634, 600, 0, 0, 0,
	101, 102, 103, 247, 649, 249, 650, 104, 651, 652,
	0, 105, 253, 254, 106, 107, 603, 633, 653, 654,
	257, 0, 108, 645, 0, 626, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 336, 116, 117,
	0, 627, 629, 0, 628, 630, 118, 119, 303, 120,
	655, 121, 656, 657, 0, 122, 0, 123, 0, 0,
	0, 648, 125, 0, 126, 0, 0, 0, 591, 127,
	128, 129, 635, 636, 614, 0, 0, 130, 131, 658,
	0, 132, 0, 133, 0, 0, 337, 0, 134, 646,
	0, 267, 0, 135, 136, 137, 138, 642, 644, 339,
	0, 142, 0, 139, 0, 338, 140, 659, 141, 660,
	661, 662, 0, 625, 0, 340, 143, 144, 145, 341,
	146, 147, 148, 0, 150, 149, 0, 647, 342, 151,
	343, 0, 152, 0, 0, 153, 0, 154, 155, 156,
	158, 276, 157, 344, 159, 160, 162, 161, 586, 1770,
	615, 643, 163, 663, 164, 165, 0, 166, 0, 0,
	167, 0, 0, 168, 279, 345, 169, 346, 637, 170,
	171, 172, 173, 174, 0, 638, 175, 282, 176, 0,
	177, 178, 179, 180, 181, 664, 182, 183, 0, 184,
	185, 186, 187, 188, 190, 191, 189, 192, 193, 194,
	195, 0, 196, 347, 197, 198, 592, 199, 0, 203,
	204, 205, 206, 0, 285, 207, 208, 209, 631, 210,
	200, 201, 211, 348, 212, 665, 287, 213, 0, 219,
	214, 215, 202, 216, 218, 666, 217, 639, 0, 220,
	0, 221, 222, 223, 224, 225, 0, 290, 667, 668,
	0, 0, 226, 227, 640, 641, 613, 228, 229, 230,
	231, 0, 0, 232, 233, 234, 235, 632, 236, 0,
	295, 237, 238, 239, 296, 669, 0, 0, 240, 0,
	0, 0, 0, 241, 242, 243, 244, 245, 587, 0,
	0, 0, 0, 0, 585, 0, 0, 0, 0, 583,
	584, 810, 618, 607, 608, 605, 606, 597, 593, 0,
	0, 0, 0, 596, 0, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 0, 634, 600, 0, 0,
	0, 101, 102, 103, 247, 649, 249, 650, 104, 651,
	652, 0, 105, 253, 254, 106, 107, 603, 633, 653,
	654, 257, 0, 108, 645, 0, 626, 0, 109, 110,
	111, 0, 112, 0, 113, 114, 115, 0, 336, 116,
	117, 0, 627, 629, 0, 628, 630, 118, 119, 303,
	120, 655, 121, 656, 657, 0, 122, 0, 123, 0,
	0, 0, 648, 125, 0, 126, 0, 0, 0, 591,
	127, 128, 129, 635, 636, 614, 0, 0, 130, 131,
	658, 0, 132, 0, 133, 0, 0, 337, 0, 134,
	646, 0, 267, 0, 135, 136, 137, 138, 642, 644,
	339, 0, 142, 0, 139, 0, 338, 140, 659, 141,
	660, 661, 662, 0, 625, 0, 340, 143, 144, 145,
	341, 146, 147, 148, 0, 150, 149, 0, 647, 342,
	151, 343, 0, 152, 0, 0, 153, 0, 154, 155,
	156, 158, 276, 157, 344, 159, 160, 162, 161, 586,
	0, 615, 643, 163, 663, 164, 165, 0, 166, 0,
	0, 167, 0, 0, 168, 279, 345, 169, 346, 637,
	170, 171, 172, 173, 174, 0, 638, 175, 282, 176,
	0, 177, 178, 179, 180, 181, 664, 182, 183, 0,
	184, 185, 186, 187, 188, 190, 191, 189, 192, 193,
	194, 195, 0, 196, 347, 197, 198, 592, 199, 0,
	203, 204, 205, 206, 0, 285, 207, 208, 209, 631,
	210, 200, 201, 211, 348, 212, 665, 287, 213, 0,
	219, 214, 215, 202, 216, 218, 666, 217, 639, 0,
	220, 0, 221, 222, 223, 224, 225, 0, 290, 667,
	668, 0, 0, 226, 227, 640, 641, 613, 228, 229,
	230, 231, 0, 0, 232, 233, 234, 235, 632, 236,
	0, 295, 237, 238, 239, 296, 669, 0, 0, 240,
	0, 0, 0, 0, 241, 242, 243, 244, 245, 587,
	0, 0, 0, 0, 0, 585, 0, 0, 0, 0,
	583, 584, 0, 0, 0, 0, 0, 902, 1232, 593,
	0, 0, 0, 0, 596, 618, 607, 608, 605, 606,
	597, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 0, 634,
	600, 0, 0, 0, 101, 102, 103, 247, 649, 249,
	650, 104, 651, 652, 0, 105, 253, 254, 106, 107,
	603, 633, 653, 654, 257, 0, 108, 645, 0, 626,
	0, 109, 110, 111, 0, 112, 0, 113, 114, 115,
	0, 336, 116, 117, 0, 627, 629, 0, 628, 630,
	118, 119, 303, 120, 655, 121, 656, 657, 819, 122,
	0, 123, 0, 0, 0, 648, 125, 0, 126, 0,
	0, 0, 591, 127, 128, 129, 635, 636, 614, 0,
	0, 130, 131, 658, 0, 132, 0, 133, 0, 0,
	337, 0, 134, 646, 0, 267, 0, 135, 136, 137,
	138, 642, 644, 339, 0, 142, 0, 139, 0, 338,
	140, 659, 141, 660, 661, 662, 0, 625, 0, 340,
	143, 144, 145, 341, 146, 147, 148, 0, 150, 149,
	0, 647, 342, 151, 343, 0, 152, 0, 0, 153,
	0, 154, 155, 156, 158, 276, 157, 344, 159, 160,
	162, 161, 586, 0, 615, 643, 163, 663, 164, 165,
	0, 166, 0, 0, 167, 0, 0, 168, 279, 345,
	169, 346, 637, 170, 171, 172, 173, 174, 0, 638,
	175, 282, 176, 0, 177, 178, 179, 180, 181, 664,
	182, 183, 0, 184, 185, 186, 187, 188, 190, 191,
	189, 192, 193, 194, 195, 0, 196, 347, 197, 198,
	592, 199, 0, 203, 204, 205, 206, 0, 285, 207,
	208, 209, 631, 210, 200, 201, 211, 348, 212, 665,
	287, 213, 0, 219, 214, 215, 202, 216, 218, 666,
	217, 639, 0, 220, 0, 221, 222, 223, 224, 225,
	0, 290, 667, 668, 0, 0, 226, 227, 640, 641,
	613, 228, 229, 230, 231, 0, 0, 232, 233, 234,
	235, 632, 236, 0, 295, 237, 238, 239, 296, 669,
	0, 0, 240, 0, 0, 0, 0, 241, 242, 243,
	244, 245, 587, 0, 0, 0, 0, 0, 585, 0,
	0, 0, 0, 583, 584, 618, 607, 608, 605, 606,
	597, 0, 593, 0, 0, 0, 0, 596, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 0, 634,
	600, 0, 0, 0, 101, 102, 103, 247, 649, 249,
	650, 104, 651, 652, 0, 105, 253, 254, 106, 107,
	603, 633, 653, 654, 257, 0, 108, 645, 0, 626,
	0, 109, 110, 111, 0, 112, 0, 113, 114, 115,
	0, 336, 116, 117, 0, 627, 629, 0, 628, 630,
	118, 119, 303, 120, 655, 121, 656, 657, 0, 122,
	0, 123, 0, 0, 0, 648, 125, 0, 126, 0,
	0, 0, 591, 127, 128, 129, 635, 636, 614, 0,
	0, 130, 131, 658, 0, 132, 0, 133, 0, 0,
	337, 0, 134, 646, 0, 267, 0, 135, 136, 137,
	138, 642, 644, 339, 0, 142, 0, 139, 0, 338,
	140, 659, 141, 660, 661, 662, 0, 625, 0, 340,
	143, 144, 145, 341, 146, 147, 148, 0, 150, 149,
	0, 647, 342, 151, 343, 0, 152, 0, 0, 153,
	0, 154, 155, 156, 158, 276, 157, 344, 159, 160,
	162, 161, 586, 0, 615, 643, 163, 663, 164, 165,
	0, 166, 0, 0, 167, 0, 0, 168, 279, 345,
	169, 346, 637, 170, 171, 172, 173, 174, 0, 638,
	175, 282, 176, 0, 177, 178, 179, 180, 181, 664,
	182, 183, 0, 184, 185, 186, 187, 188, 190, 191,
	189, 192, 193, 194, 195, 0, 196, 347, 197, 198,
	592, 199, 0, 203, 204, 205, 206, 0, 285, 207,
	208, 209, 631, 210, 200, 201, 211, 348, 212, 665,
	287, 213, 0, 219, 214, 215, 202, 216, 218, 666,
	217, 639, 0, 220, 0, 221, 222, 223, 224, 225,
	0, 290, 667, 668, 0, 0, 226, 227, 640, 641,
	613, 228, 229, 230, 231, 0, 0, 232, 233, 234,
	235, 632, 236, 0, 295, 237, 238, 239, 296, 669,
	0, 0, 240, 0, 0, 0, 0, 241, 242, 243,
	244, 245, 587, 0, 0, 0, 0, 0, 585, 0,
	0, 0, 0, 583, 584, 618, 607, 608, 605, 606,
	597, 0, 593, 1753, 0, 0, 0, 596, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 0, 634,
	600, 0, 0, 0, 101, 102, 103, 247, 649, 249,
	650, 104, 651, 652, 0, 105, 253, 254, 106, 107,
	603, 633, 653, 654, 257, 0, 108, 645, 0, 626,
	0, 109, 110, 111, 0, 112, 0, 113, 114, 115,
	0, 336, 116, 117, 0, 627, 629, 0, 628, 630,
	118, 119, 303, 120, 655, 121, 656, 657, 0, 122,
	0, 123, 0, 0, 0, 648, 125, 0, 126, 0,
	0, 0, 591, 127, 128, 129, 635, 636, 614, 0,
	0, 130, 131, 658, 0, 132, 0, 133, 0, 0,
	337, 0, 134, 646, 0, 267, 0, 135, 136, 137,
	138, 642, 644, 339, 0, 142, 0, 139, 0, 338,
	140, 659, 141, 660, 661, 662, 0, 625, 0, 340,
	143, 144, 145, 341, 146, 147, 148, 0, 150, 149,
	0, 647, 342, 151, 343, 0, 152, 0, 0, 153,
	0, 154, 155, 156, 158, 276, 157, 344, 159, 160,
	162, 161, 586, 0, 615, 643, 163, 663, 164, 165,
	0, 166, 0, 0, 167, 0, 0, 168, 279, 345,
	169, 346, 637, 170, 171, 172, 173, 174, 0, 638,
	175, 282, 176, 0, 177, 178, 179, 180, 181, 664,
	182, 183, 0, 184, 185, 186, 187, 188, 190, 191,
	189, 192, 193, 194, 195, 0, 196, 347, 197, 198,
	592, 199, 0, 203, 204, 205, 206, 0, 285, 207,
	208, 209, 631, 210, 200, 201, 211, 348, 212, 665,
	287, 213, 0, 219, 214, 215, 202, 216, 218, 666,
	217, 639, 0, 220, 0, 221, 222, 223, 224, 225,
	0, 290, 667, 668, 0, 0, 226, 227, 640, 641,
	613, 228, 229, 230, 231, 0, 0, 232, 233, 234,
	235, 632, 236, 0, 295, 237, 238, 239, 296, 669,
	1702, 0, 240, 0, 0, 0, 0, 241, 242, 243,
	244, 245, 587, 0, 0, 0, 0, 0, 585, 0,
	0, 0, 0, 583, 584, 618, 607, 608, 605, 606,
	597, 0, 593, 0, 0, 0, 0, 596, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 0, 634,
	600, 0, 0, 0, 101, 102, 103, 247, 649, 249,
	650, 104, 651, 652, 0, 105, 253, 254, 106, 107,
	603, 633, 653, 654, 257, 0, 108, 645, 0, 626,
	0, 109, 110, 111, 0, 112, 0, 113, 114, 115,
	0, 336, 116, 117, 0, 627, 629, 0, 628, 630,
	118, 119, 303, 120, 655, 121, 656, 657, 0, 122,
	0, 123, 0, 0, 0, 648, 125, 0, 126, 0,
	0, 0, 591, 127, 128, 129, 635, 636, 614, 0,
	0, 130, 131, 658, 0, 132, 0, 133, 0, 0,
	337, 0, 134, 646, 0, 267, 0, 135, 136, 137,
	138, 642, 644, 339, 0, 142, 0, 139, 0, 338,
	140, 659, 141, 660, 661, 662, 0, 625, 0, 340,
	143, 144, 145, 341, 146, 147, 148, 0, 150, 149,
	0, 647, 342, 151, 343, 0, 152, 0, 0, 153,
	0, 154, 155, 156, 158, 276, 157, 344, 159, 160,
	162, 161, 586, 0, 615, 643, 163, 663, 164, 165,
	0, 166, 0, 0, 167, 0, 0, 168, 279, 345,
	169, 346, 637, 170, 171, 172, 173, 174, 0, 638,
	175, 282, 176, 0, 177, 178, 179, 180, 181, 664,
	182, 183, 0, 184, 185, 186, 187, 188, 190, 191,
	189, 192, 193, 194, 195, 0, 196, 347, 197, 198,
	592, 199, 0, 203, 204, 205, 206, 0, 285, 207,
	208, 209, 631, 210, 200, 201, 211, 348, 212, 665,
	287, 213, 0, 219, 214, 215, 202, 216, 218, 666,
	217, 639, 0, 220, 0, 221, 222, 223, 224, 225,
	0, 290, 667, 668, 0, 0, 226, 227, 640, 641,
	613, 228, 229, 230, 231, 0, 0, 232, 233, 234,
	235, 632, 236, 0, 295, 237, 238, 239, 296, 669,
	0, 0, 240, 0, 0, 0, 0, 241, 242, 243,
	244, 245, 587, 0, 0, 0, 0, 0, 585, 0,
	0, 0, 0, 583, 584, 618, 607, 608, 605, 606,
	597, 0, 593, 1692, 0, 0, 0, 596, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 0, 634,
	600, 0, 0, 0, 101, 102, 103, 247, 649, 249,
	650, 104, 651, 652, 0, 105, 253, 254, 106, 107,
	603, 633, 653, 654, 257, 0, 108, 645, 0, 626,
	0, 109, 110, 111, 0, 112, 0, 113, 114, 115,
	0, 336, 116, 117, 0, 627, 629, 0, 628, 630,
	118, 119, 303, 120, 655, 121, 656, 657, 0, 122,
	0, 123, 0, 0, 0, 648, 125, 0, 126, 0,
	0, 0, 591, 127, 128, 129, 635, 636, 614, 0,
	0, 130, 131, 658, 0, 132, 0, 133, 0, 1291,
	337, 0, 134, 646, 0, 267, 0, 135, 136, 137,
	138, 642, 644, 339, 0, 142, 0, 139, 0, 338,
	140, 659, 141, 660, 661, 662, 0, 625, 0, 340,
	143, 144, 145, 341, 146, 147, 148, 0, 150, 149,
	0, 647, 342, 151, 343, 0, 152, 0, 0, 153,
	0, 154, 155, 156, 158, 276, 157, 344, 159, 160,
	162, 161, 586, 0, 615, 643, 163, 663, 164, 165,
	0, 166, 0, 0, 167, 0, 0, 168, 279, 345,
	169, 346, 637, 170, 171, 172, 173, 174, 0, 638,
	175, 282, 176, 0, 177, 178, 179, 180, 181, 664,
	182, 183, 0, 184, 185, 186, 187, 188, 190, 191,
	189, 192, 193, 194, 195, 0, 196, 347, 197, 198,
	592, 199, 0, 203, 204, 205, 206, 0, 285, 207,
	208, 209, 631, 210, 200, 201, 211, 348, 212, 665,
	287, 213, 0, 219, 214, 215, 202, 216, 218, 666,
	217, 639, 0, 220, 0, 221, 222, 223, 224, 225,
	0, 290, 667, 668, 0, 0, 226, 227, 640, 641,
	613, 228, 229, 230, 231, 0, 0, 232, 233, 234,
	235, 632, 236, 0, 295, 237, 238, 239, 296, 669,
	0, 0, 240, 0, 0, 0, 0, 241, 242, 243,
	244, 245, 587, 0, 0, 0, 0, 0, 585, 0,
	0, 0, 0, 583, 584, 618, 607, 608, 605, 606,
	597, 0, 593, 0, 0, 0, 0, 596, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 0, 634,
	600, 0, 0, 0, 101, 102, 103, 247, 649, 249,
	650, 104, 651, 652, 0, 105, 253, 254, 106, 107,
	603, 633, 653, 654, 257, 0, 108, 645, 0, 626,
	0, 109, 110, 111, 0, 112, 0, 113, 114, 115,
	0, 336, 116, 117, 0, 627, 629, 0, 628, 630,
	118, 119, 303, 120, 655, 121, 656, 657, 0, 122,
	0, 123, 0, 0, 0, 648, 125, 0, 126, 0,
	0, 0, 591, 127, 128, 129, 635, 636, 614, 0,
	0, 130, 131, 658, 0, 132, 0, 133, 0, 0,
	337, 0, 134, 646, 0, 267, 0, 135, 136, 137,
	138, 642, 644, 339, 0, 142, 0, 139, 0, 338,
	140, 659, 141, 660, 661, 662, 0, 625, 0, 340,
	143, 144, 145, 341, 146, 147, 148, 0, 150, 149,
	0, 647, 342, 151, 343, 0, 152, 0, 0, 153,
	0, 154, 155, 156, 158, 276, 157, 344, 159, 160,
	162, 161, 586, 0, 615, 643, 163, 663, 164, 165,
	0, 166, 0, 0, 167, 0, 0, 168, 279, 345,
	169, 346, 637, 170, 171, 172, 173, 174, 0, 638,
	175, 282, 176, 0, 177, 178, 179, 180, 181, 664,
	182, 183, 0, 184, 185, 186, 187, 188, 190, 191,
	189, 192, 193, 194, 195, 0, 196, 347, 197, 198,
	592, 199, 0, 203, 204, 205, 206, 0, 285, 207,
	208, 209, 631, 210, 200, 201, 211, 348, 212, 665,
	287, 213, 0, 219, 214, 215, 202, 216, 218, 666,
	217, 639, 0, 220, 0, 221, 222, 223, 224, 225,
	0, 290, 667, 668, 0, 0, 226, 227, 640, 641,
	613, 228, 229, 230, 231, 0, 0, 232, 233, 234,
	235, 632, 236, 0, 295, 237, 238, 239, 296, 669,
	0, 0, 240, 0, 0, 0, 0, 241, 242, 243,
	244, 245, 587, 0, 0, 0, 0, 0, 585, 0,
	0, 0, 0, 583, 584, 810, 618, 607, 608, 605,
	606, 597, 593, 0, 0, 0, 0, 596, 0, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	634, 600, 0, 0, 0, 101, 102, 103, 247, 649,
	249, 650, 104, 651, 652, 0, 105, 253, 254, 106,
	107, 603, 633, 653, 654, 257, 0, 108, 645, 0,
	626, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 336, 116, 117, 0, 627, 629, 0, 628,
	630, 118, 119, 303, 120, 655, 121, 656, 657, 0,
	122, 0, 123, 0, 0, 0, 648, 125, 0, 126,
	0, 0, 0, 591, 127, 128, 129, 635, 636, 614,
	0, 0, 130, 131, 658, 0, 132, 0, 133, 0,
	0, 337, 0, 134, 646, 0, 267, 0, 135, 136,
	137, 138, 642, 644, 339, 0, 142, 0, 139, 0,
	338, 140, 659, 141, 660, 661, 662, 0, 625, 0,
	340, 143, 144, 145, 341, 146, 147, 148, 0, 150,
	149, 0, 647, 342, 151, 343, 0, 152, 0, 0,
	153, 0, 154, 155, 156, 158, 276, 157, 344, 159,
	160, 162, 161, 586, 0, 615, 643, 163, 663, 164,
	165, 0, 166, 0, 0, 167, 0, 0, 168, 279,
	345, 169, 346, 637, 170, 171, 172, 173, 174, 0,
	638, 175, 282, 176, 0, 177, 178, 179, 180, 181,
	664, 182, 183, 0, 184, 185, 186, 187, 188, 190,
	191, 189, 192, 193, 194, 195, 0, 196, 347, 197,
	198, 592, 199, 0, 203, 204, 205, 206, 0, 285,
	207, 208, 209, 631, 210, 200, 201, 211, 348, 212,
	665, 287, 213, 0, 219, 214, 215, 202, 216, 218,
	666, 217, 639, 0, 220, 0, 221, 222, 223, 224,
	225, 0, 290, 667, 668, 0, 0, 226, 227, 640,
	641, 613, 228, 229, 230, 231, 0, 0, 232, 233,
	234, 235, 632, 236, 0, 295, 237, 238, 239, 296,
	669, 0, 0, 240, 0, 0, 0, 0, 241, 242,
	243, 244, 245, 587, 0, 0, 0, 0, 0, 585,
	0, 0, 0, 0, 583, 584, 618, 607, 608, 605,
	606, 597, 0, 593, 1227, 0, 0, 0, 596, 0,
	0, 0, 98, 99, 1095, 100, 0, 0, 0, 0,
	634, 600, 0, 0, 0, 101, 102, 103, 247, 649,
	249, 650, 104, 651, 652, 0, 105, 253, 254, 106,
	107, 603, 633, 653, 654, 257, 0, 108, 645, 0,
	626, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 336, 116, 117, 0, 627, 629, 0, 628,
	630, 118, 119, 303, 120, 655, 121, 656, 657, 0,
	122, 0, 123, 0, 0, 0, 648, 125, 0, 126,
	0, 0, 0, 591, 127, 128, 129, 635, 636, 614,
	0, 0, 130, 131, 658, 0, 132, 0, 133, 0,
	0, 337, 0, 134, 646, 0, 267, 0, 135, 136,
	137, 138, 642, 644, 339, 0, 142, 0, 139, 0,
	338, 140, 659, 141, 660, 661, 662, 0, 625, 0,
	340, 143, 144, 145, 341, 146, 147, 148, 0, 150,
	149, 0, 647, 342, 151, 343, 0, 152, 0, 0,
	153, 0, 154, 155, 156, 158, 276, 157, 344, 159,
	160, 162, 161, 586, 0, 615, 643, 163, 663, 164,
	165, 0, 166, 0, 0, 167, 0, 0, 168, 279,
	345, 169, 346, 637, 170, 171, 172, 173, 174, 0,
	638, 175, 282, 176, 0, 177, 178, 179, 180, 181,
	664, 182, 183, 0, 184, 185, 186, 187, 188, 190,
	191, 189, 192, 193, 194, 195, 0, 196, 347, 197,
	198, 592, 199, 0, 203, 204, 205, 206, 0, 285,
	207, 208, 209, 631, 210, 200, 201, 211, 348, 212,
	665, 287, 213, 0, 219, 214, 215, 202, 216, 218,
	666, 217, 639, 0, 220, 0, 221, 222, 223, 224,
	225, 0, 290, 667, 668, 0, 0, 226, 227, 640,
	641, 613, 228, 229, 230, 231, 0, 0, 232, 233,
	234, 235, 632, 236, 0, 295, 237, 238, 239, 296,
	669, 0, 0, 240, 0, 0, 0, 0, 241, 242,
	243, 244, 245, 587, 0, 0, 0, 0, 0, 585,
	0, 0, 0, 0, 583, 584, 618, 607, 608, 605,
	606, 597, 0, 593, 0, 0, 0, 0, 596, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	634, 600, 0, 0, 0, 101, 102, 103, 247, 649,
	249, 650, 104, 651, 652, 0, 105, 253, 254, 106,
	107, 603, 633, 653, 654, 257, 0, 108, 645, 0,
	626, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 336, 116, 2156, 0, 627, 629, 0, 628,
	630, 118, 119, 303, 120, 655, 121, 656, 657, 0,
	122, 0, 123, 0, 0, 0, 648, 125, 0, 126,
	0, 0, 0, 591, 127, 128, 129, 635, 636, 614,
	0, 0, 130, 131, 658, 0, 132, 0, 133, 0,
	0, 337, 0, 134, 646, 0, 267, 0, 135, 136,
	137, 138, 642, 644, 339, 0, 142, 0, 139, 0,
	338, 140, 659, 141, 660, 661, 662, 0, 625, 0,
	340, 143, 144, 145, 341, 146, 147, 148, 0, 150,
	149, 0, 647, 342, 151, 343, 0, 152, 0, 0,
	153, 0, 154, 155, 156, 158, 276, 157, 344, 159,
	160, 162, 161, 586, 0, 615, 643, 163, 663, 164,
	165, 0, 166, 0, 0, 167, 0, 0, 168, 279,
	345, 169, 346, 637, 170, 171, 172, 173, 174, 0,
	638, 175, 282, 176, 0, 177, 178, 179, 180, 181,
	664, 182, 183, 0, 184, 185, 186, 187, 188, 190,
	191, 189, 192, 193, 194, 195, 0, 196, 347, 197,
	198, 592, 199, 0, 203, 204, 205, 206, 0, 285,
	207, 208, 209, 631, 210, 200, 201, 211, 348, 212,
	665, 287, 213, 0, 219, 214, 215, 202, 216, 218,
	666, 217, 639, 0, 220, 0, 221, 222, 223, 224,
	225, 0, 290, 667, 668, 0, 0, 226, 227, 640,
	641, 613, 228, 229, 2155, 231, 0, 0, 232, 233,
	234, 235, 632, 236, 0, 295, 237, 238, 239, 296,
	669, 0, 0, 240, 0, 0, 0, 0, 241, 242,
	243, 244, 245, 587, 0, 0, 0, 0, 0, 585,
	0, 0, 0, 0, 583, 584, 618, 607, 608, 605,
	606, 597, 0, 593, 0, 0, 0, 0, 596, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	634, 600, 0, 0, 0, 101, 102, 103, 2154, 649,
	249, 650, 104, 651, 652, 0, 105, 253, 254, 106,
	107, 603, 633, 653, 654, 257, 0, 108, 645, 0,
	626, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 336, 116, 2156, 0, 627, 629, 0, 628,
	630, 118, 119, 303, 120, 655, 121, 656, 657, 0,
	122, 0, 123, 0, 0, 0, 648, 125, 0, 126,
	0, 0, 0, 591, 127, 128, 129, 635, 636, 614,
	0, 0, 130, 131, 658, 0, 132, 0, 133, 0,
	0, 337, 0, 134, 646, 0, 267, 0, 135, 136,
	137, 138, 642, 644, 339, 0, 142, 0, 139, 0,
	338, 140, 659, 141, 660, 661, 662, 0, 625, 0,
	340, 143, 144, 145, 341, 146, 147, 148, 0, 150,
	149, 0, 647, 342, 151, 343, 0, 152, 0, 0,
	153, 0, 154, 155, 156, 158, 276, 157, 344, 159,
	160, 162, 161, 586, 0, 615, 643, 163, 663, 164,
	165, 0, 166, 0, 0, 167, 0, 0, 168, 279,
	345, 169, 346, 637, 170, 171, 172, 173, 174, 0,
	638, 175, 282, 176, 0, 177, 178, 179, 180, 181,
	664, 182, 183, 0, 184, 185, 186, 187, 188, 190,
	191, 189, 192, 193, 194, 195, 0, 196, 347, 197,
	198, 592, 199, 0, 203, 204, 205, 206, 0, 285,
	207, 208, 209, 631, 210, 200, 201, 211, 348, 212,
	665, 287, 213, 0, 219, 214, 215, 202, 216, 218,
	666, 217, 639, 0, 220, 0, 221, 222, 223, 224,
	225, 0, 290, 667, 668, 0, 0, 226, 227, 640,
	641, 613, 228, 229, 2155, 231, 0, 0, 232, 233,
	234, 235, 632, 236, 0, 295, 237, 238, 239, 296,
	669, 0, 0, 240, 0, 0, 0, 0, 241, 242,
	243, 244, 245, 587, 0, 0, 0, 0, 0, 585,
	0, 0, 0, 0, 583, 584, 618, 607, 608, 605,
	606, 597, 0, 593, 0, 0, 0, 0, 596, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	634, 600, 0, 0, 0, 101, 102, 103, 247, 649,
	249, 650, 104, 651, 652, 0, 105, 253, 254, 106,
	107, 603, 633, 653, 654, 257, 0, 108, 645, 0,
	626, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 336, 116, 117, 0, 627, 629, 0, 628,
	630, 118, 119, 303, 120, 655, 121, 656, 657, 0,
	122, 0, 123, 0, 0, 0, 648, 125, 0, 126,
	0, 0, 0, 591, 127, 128, 129, 635, 636, 614,
	0, 0, 130, 131, 658, 0, 132, 0, 133, 0,
	0, 337, 0, 134, 646, 0, 267, 0, 135, 136,
	137, 138, 642, 644, 339, 0, 142, 0, 139, 0,
	338, 140, 659, 141, 660, 661, 662, 0, 625, 0,
	340, 143, 144, 145, 341, 146, 147, 148, 0, 150,
	149, 0, 647, 342, 151, 343, 0, 152, 0, 0,
	153, 0, 154, 155, 156, 158, 276, 157, 344, 159,
	160, 162, 161, 586, 0, 615, 643, 163, 663, 164,
	165, 0, 166, 0, 0, 167, 0, 0, 168, 279,
	345, 169, 346, 637, 170, 171, 172, 173, 174, 0,
	638, 175, 282, 176, 0, 177, 178, 179, 180, 181,
	664, 182, 183, 0, 184, 185, 186, 187, 188, 190,
	191, 189, 192, 193, 194, 195, 0, 196, 347, 197,
	198, 592, 199, 0, 203, 204, 205, 206, 0, 285,
	207, 208, 209, 631, 210, 200, 201, 211, 348, 212,
	665, 287, 213, 0, 219, 214, 215, 202, 216, 218,
	666, 217, 639, 0, 220, 0, 221, 222, 223, 224,
	225, 0, 290, 667, 668, 0, 0, 226, 227, 640,
	641, 613, 228, 229, 230, 231, 0, 0, 232, 233,
	234, 235, 632, 236, 0, 295, 237, 238, 239, 296,
	669, 0, 0, 240, 0, 0, 0, 0, 241, 242,
	243, 244, 245, 587, 0, 0, 0, 0, 0, 585,
	0, 0, 0, 0, 583, 584, 1263, 607, 608, 605,
	606, 597, 0, 593, 0, 0, 0, 0, 596, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	634, 600, 0, 0, 0, 101, 102, 103, 247, 649,
	249, 650, 104, 651, 652, 0, 105, 253, 254, 106,
	107, 603, 633, 653, 654, 257, 0, 108, 645, 0,
	626, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 336, 116, 117, 0, 627, 629, 0, 628,
	630, 118, 119, 303, 120, 655, 1266, 656, 657, 0,
	122, 0, 123, 0, 0, 0, 648, 125, 0, 126,
	0, 0, 0, 591, 127, 128, 129, 635, 636, 614,
	0, 0, 130, 131, 658, 0, 132, 0, 133, 0,
	0, 337, 0, 134, 646, 0, 267, 0, 135, 136,
	1267, 138, 642, 644, 339, 0, 142, 0, 139, 0,
	338, 140, 659, 141, 660, 661, 662, 0, 625, 0,
	340, 143, 144, 145, 341, 146, 147, 148, 0, 150,
	149, 0, 647, 342, 151, 343, 0, 152, 0, 0,
	153, 0, 154, 1268, 1265, 158, 276, 157, 344, 159,
	160, 162, 161, 586, 0, 615, 643, 163, 663, 164,
	165, 0, 166, 0, 0, 167, 0, 0, 168, 279,
	345, 169, 346, 637, 170, 171, 172, 173, 174, 0,
	638, 175, 282, 176, 0, 177, 178, 179, 180, 181,
	664, 182, 183, 0, 184, 185, 186, 187, 188, 190,
	191, 189, 192, 193, 194, 195, 0, 196, 347, 197,
	198, 592, 199, 0, 203, 204, 205, 1269, 0, 285,
	207, 208, 209, 631, 210, 200, 201, 211, 348, 212,
	665, 287, 213, 0, 219, 214, 215, 202, 216, 218,
	666, 217, 639, 0, 220, 0, 221, 222, 223, 224,
	225, 0, 290, 667, 668, 0, 0, 226, 227, 640,
	641, 613, 228, 229, 230, 231, 0, 0, 232, 233,
	234, 235, 632, 236, 0, 295, 237, 238, 239, 296,
	669, 0, 0, 240, 0, 0, 0, 0, 241, 242,
	243, 1264, 245, 587, 0, 0, 0, 0, 0, 585,
	0, 0, 0, 0, 583, 584, 618, 607, 608, 605,
	606, 597, 0, 593, 0, 0, 0, 0, 596, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	634, 600, 0, 0, 0, 101, 102, 103, 247, 649,
	249, 650, 104, 651, 652, 0, 105, 253, 254, 106,
	107, 603, 633, 653, 654, 257, 0, 108, 645, 0,
	626, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 336, 116, 117, 0, 627, 629, 0, 628,
	630, 118, 119, 303, 120, 655, 121, 656, 657, 0,
	122, 0, 123, 0, 0, 0, 648, 125, 0, 126,
	0, 0, 0, 591, 127, 128, 129, 635, 636, 614,
	0, 0, 130, 131, 658, 0, 132, 0, 133, 0,
	0, 337, 0, 134, 646, 0, 267, 0, 135, 136,
	137, 138, 642, 644, 339, 0, 142, 0, 139, 0,
	338, 140, 659, 141, 660, 661, 662, 0, 625, 0,
	340, 143, 144, 145, 341, 146, 147, 148, 0, 150,
	149, 0, 647, 342, 151, 343, 0, 152, 0, 0,
	153, 0, 154, 155, 156, 158, 276, 157, 344, 159,
	160, 162, 161, 0, 0, 615, 643, 163, 663, 164,
	165, 0, 166, 0, 0, 167, 0, 0, 168, 279,
	345, 169, 346, 637, 170, 171, 172, 173, 174, 0,
	638, 175, 282, 176, 0, 177, 178, 179, 180, 181,
	664, 182, 183, 0, 184, 185, 186, 187, 188, 190,
	191, 189, 192, 193, 194, 195, 0, 196, 347, 197,
	198, 1281, 199, 0, 203, 204, 205, 206, 0, 285,
	207, 208, 209, 631, 210, 200, 201, 211, 348, 212,
	665, 287, 213, 0, 219, 214, 215, 202, 216, 218,
	666, 217, 639, 0, 220, 0, 221, 222, 223, 224,
	225, 0, 290, 667, 668, 0, 0, 226, 227, 640,
	641, 613, 228, 229, 230, 231, 0, 0, 232, 233,
	234, 235, 632, 236, 0, 295, 237, 238, 239, 296,
	669, 0, 0, 240, 0, 0, 0, 0, 241, 242,
	243, 244, 245, 0, 0, 0, 0, 0, 0, 1279,
	0, 0, 0, 0, 1277, 1278, 618, 607, 608, 605,
	606, 597, 0, 1280, 0, 0, 0, 0, 596, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	634, 600, 0, 0, 0, 101, 102, 103, 247, 649,
	249, 650, 104, 651, 652, 0, 105, 253, 254, 106,
	107, 0, 633, 653, 654, 257, 0, 108, 645, 0,
	626, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 336, 116, 117, 0, 627, 629, 0, 628,
	630, 118, 119, 303, 120, 655, 121, 656, 657, 0,
	122, 0, 123, 0, 0, 0, 648, 125, 0, 126,
	0, 0, 0, 262, 127, 128, 129, 635, 636, 614,
	0, 0, 130, 131, 658, 0, 132, 0, 133, 0,
	0, 337, 0, 134, 646, 0, 267, 0, 135, 136,
	137, 138, 642, 644, 339, 0, 142, 0, 139, 0,
	338, 140, 659, 141, 660, 661, 662, 0, 625, 0,
	340, 143, 144, 145, 341, 146, 147, 148, 0, 150,
	149, 0, 647, 342, 151, 343, 0, 152, 0, 0,
	153, 0, 154, 155, 156, 158, 276, 157, 344, 159,
	160, 162, 161, 0, 0, 615, 643, 163, 663, 164,
	165, 0, 166, 0, 0, 167, 0, 0, 168, 279,
	345, 169, 346, 637, 170, 171, 172, 173, 174, 0,
	638, 175, 282, 176, 0, 177, 178, 179, 180, 181,
	664, 182, 183, 0, 184, 185, 186, 187, 188, 190,
	191, 189, 192, 193, 194, 195, 0, 196, 347, 197,
	198, 1281, 199, 0, 203, 204, 205, 206, 0, 285,
	207, 208, 209, 631, 210, 200, 201, 211, 348, 212,
	665, 287, 213, 0, 219, 214, 215, 202, 216, 218,
	666, 217, 639, 0, 220, 0, 221, 222, 223, 224,
	225, 0, 290, 667, 668, 0, 0, 226, 227, 640,
	641, 613, 228, 229, 230, 231, 0, 0, 232, 233,
	234, 235, 632, 236, 0, 295, 237, 238, 239, 296,
	669, 0, 0, 240, 0, 0, 0, 0, 241, 242,
	243, 244, 245, 0, 0, 618, 607, 608, 605, 606,
	597, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 99, 1280, 100, 0, 0, 0, 596, 634,
	600, 0, 0, 0, 101, 102, 103, 0, 649, 249,
	650, 104, 651, 652, 0, 105, 253, 254, 106, 107,
	603, 633, 653, 654, 257, 0, 108, 645, 0, 626,
	0, 109, 110, 111, 0, 112, 0, 113, 114, 115,
	0, 336, 116, 2156, 0, 627, 629, 0, 628, 630,
	118, 119, 303, 120, 655, 121, 656, 657, 0, 122,
	0, 123, 0, 0, 0, 648, 125, 0, 126, 0,
	0, 0, 591, 127, 128, 129, 635, 636, 614, 0,
	0, 130, 131, 658, 0, 132, 0, 133, 0, 0,
	337, 0, 134, 646, 0, 267, 0, 135, 136, 137,
	138, 642, 644, 0, 0, 142, 0, 139, 0, 338,
	140, 659, 141, 660, 661, 662, 0, 625, 0, 0,
	143, 144, 145, 341, 146, 147, 148, 0, 150, 149,
	0, 647, 342, 151, 0, 0, 152, 0, 0, 153,
	0, 154, 155, 156, 158, 276, 157, 344, 159, 160,
	162, 161, 586, 0, 615, 643, 163, 663, 164, 165,
	0, 166, 0, 0, 167, 0, 0, 168, 279, 345,
	169, 346, 637, 170, 171, 172, 173, 174, 0, 638,
	175, 282, 176, 0, 177, 178, 179, 180, 181, 664,
	182, 183, 0, 184, 185, 186, 187, 188, 190, 191,
	189, 192, 193, 194, 195, 0, 196, 347, 197, 198,
	592, 199, 0, 203, 204, 205, 206, 0, 285, 207,
	208, 209, 631, 210, 200, 201, 211, 0, 212, 665,
	287, 213, 0, 219, 214, 215, 202, 216, 218, 666,
	217, 639, 0, 220, 0, 221, 222, 223, 224, 225,
	0, 290, 667, 668, 0, 0, 226, 227, 640, 641,
	613, 228, 229, 2155, 231, 0, 0, 232, 233, 234,
	235, 632, 236, 0, 295, 237, 238, 239, 296, 669,
	0, 0, 240, 0, 0, 0, 0, 241, 242, 243,
	244, 245, 618, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 583, 584, 0, 0, 0, 98, 99,
	0, 100, 593, 0, 0, 0, 634, 596, 0, 0,
	0, 101, 102, 103, 247, 248, 249, 250, 104, 251,
	252, 0, 105, 253, 254, 106, 107, 0, 633, 255,
	256, 257, 0, 108, 645, 0, 626, 0, 109, 110,
	111, 0, 112, 0, 113, 114, 115, 0, 336, 116,
	117, 0, 627, 629, 0, 628, 630, 118, 119, 303,
	120, 259, 121, 260, 261, 0, 122, 0, 123, 0,
	0, 0, 124, 125, 0, 126, 0, 0, 0, 262,
	127, 128, 129, 635, 636, 0, 0, 0, 130, 131,
	265, 0, 132, 0, 133, 0, 0, 337, 0, 134,
	646, 0, 267, 0, 135, 136, 137, 138, 642, 644,
	339, 0, 142, 0, 139, 0, 338, 140, 270, 141,
	271, 272, 273, 0, 274, 0, 340, 143, 144, 145,
	341, 146, 147, 148, 0, 150, 149, 0, 647, 342,
	151, 343, 0, 152, 0, 0, 153, 0, 154, 155,
	156, 158, 276, 157, 344, 159, 160, 162, 161, 0,
	0, 0, 643, 163, 278, 164, 165, 0, 166, 0,
	0, 167, 0, 0, 168, 279, 345, 169, 346, 637,
	170, 171, 172, 173, 174, 0, 638, 175, 282, 176,
	0, 177, 178, 179, 180, 181, 283, 182, 183, 0,
	184, 185, 186, 187, 188, 190, 191, 189, 192, 193,
	194, 195, 0, 196, 347, 197, 198, 284, 199, 0,
	203, 204, 205, 206, 0, 285, 207, 208, 209, 631,
	210, 200, 201, 211, 348, 212, 286, 287, 213, 0,
	219, 214, 215, 202, 216, 218, 288, 217, 639, 0,
	220, 0, 221, 222, 223, 224, 225, 0, 290, 291,
	292, 0, 0, 226, 227, 640, 641, 0, 228, 229,
	230, 231, 0, 0, 232, 233, 234, 235, 632, 236,
	0, 295, 237, 238, 239, 296, 297, 0, 0, 240,
	0, 525, 0, 0, 241, 242, 243, 244, 245, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 0, 246, 0, 0, 0, 1655,
	101, 102, 103, 247, 248, 249, 250, 104, 251, 252,
	0, 105, 253, 254, 106, 107, 0, 0, 255, 256,
	257, 0, 108, 258, 0, 335, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 336, 116, 117,
	0, 0, 0, 0, 0, 0, 118, 119, 303, 120,
	259, 121, 260, 261, 0, 122, 0, 123, 0, 0,
	0, 124, 125, 0, 126, 0, 0, 0, 262, 127,
	128, 129, 263, 264, 0, 0, 0, 130, 131, 265,
	0, 132, 0, 133, 0, 0, 337, 0, 134, 266,
	0, 267, 0, 135, 136, 137, 138, 268, 269, 339,
	0, 142, 0, 139, 0, 338, 140, 270, 141, 271,
	272, 273, 0, 274, 0, 340, 143, 144, 145, 341,
	146, 147, 148, 0, 150, 149, 0, 275, 342, 151,
	343, 0, 152, 0, 0, 153, 0, 154, 155, 156,
	158, 276, 157, 344, 159, 160, 162, 161, 0, 0,
	0, 277, 163, 278, 164, 165, 0, 166, 0, 0,
	167, 0, 0, 168, 279, 345, 169, 346, 280, 170,
	171, 172, 173, 174, 0, 281, 175, 282, 176, 0,
	177, 178, 179, 180, 181, 283, 182, 183, 0, 184,
	185, 186, 187, 188, 190, 191, 189, 192, 193, 194,
	195, 0, 196, 347, 197, 198, 284, 199, 0, 203,
	204, 205, 206, 79, 285, 207, 208, 209, 0, 210,
	200, 201, 211, 348, 212, 286, 287, 213, 0, 219,
	214, 215, 202, 216, 218, 288, 217, 289, 0, 220,
	81, 221, 222, 223, 224, 225, 0, 290, 291, 292,
	0, 0, 226, 227, 293, 294, 0, 228, 229, 230,
	231, 0, 0, 232, 233, 234, 235, 0, 236, 0,
	295, 237, 238, 239, 703, 297, 0, 0, 240, 0,
	0, 0, 77, 241, 242, 243, 244, 245, 0, 78,
	525, 522, 0, 523, 518, 513, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 99, 76, 100,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 101,
	102, 103, 247, 248, 249, 250, 104, 251, 252, 0,
	105, 253, 254, 106, 107, 0, 0, 255, 256, 257,
	0, 108, 258, 0, 335, 0, 109, 110, 111, 0,
	112, 0, 113, 114, 115, 0, 336, 116, 117, 0,
	0, 0, 0, 0, 0, 118, 119, 303, 120, 259,
	121, 260, 261, 1041, 122, 0, 123, 0, 0, 0,
	124, 125, 0, 126, 0, 0, 0, 262, 127, 128,
	129, 263, 264, 515, 0, 0, 130, 131, 265, 0,
	132, 0, 133, 0, 0, 337, 0, 134, 266, 0,
	267, 0, 135, 136, 137, 138, 268, 269, 339, 0,
	142, 0, 139, 0, 338, 140, 270, 141, 271, 272,
	273, 0, 274, 0, 340, 143, 144, 145, 341, 146,
	147, 148, 0, 150, 149, 0, 275, 342, 151, 343,
	0, 152, 0, 0, 153, 0, 154, 155, 156, 158,
	276, 157, 344, 159, 160, 162, 161, 0, 0, 0,
	277, 163, 278, 164, 165, 0, 166, 516, 0, 167,
	0, 0, 168, 279, 345, 169, 346, 280, 170, 171,
	172, 173, 174, 0, 281, 175, 282, 176, 0, 177,
	178, 179, 180, 181, 283, 182, 183, 0, 184, 185,
	186, 187, 188, 190, 191, 189, 192, 193, 194, 195,
	0, 196, 347, 197, 198, 284, 199, 0, 203, 204,
	205, 206, 0, 285, 207, 208, 209, 0, 210, 200,
	201, 211, 348, 212, 286, 287, 213, 0, 219, 214,
	215, 202, 216, 218, 288, 217, 289, 0, 220, 0,
	221, 222, 223, 224, 225, 0, 290, 291, 292, 0,
	0, 226, 227, 293, 294, 514, 228, 229, 230, 231,
	0, 0, 232, 233, 234, 235, 0, 236, 0, 295,
	237, 238, 239, 296, 297, 0, 0, 240, 0, 0,
	0, 0, 241, 242, 243, 244, 245, 525, 522, 0,
	523, 518, 513, 0, 0, 0, 0, 0, 524, 519,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 0,
	0, 246, 0, 0, 0, 0, 101, 102, 103, 247,
	248, 249, 250, 104, 251, 252, 0, 105, 253, 254,
	106, 107, 0, 0, 255, 256, 257, 0, 108, 258,
	0, 335, 0, 109, 110, 111, 0, 112, 0, 113,
	114, 115, 0, 336, 116, 117, 0, 0, 0, 0,
	0, 0, 118, 119, 303, 120, 259, 121, 260, 261,
	1038, 122, 0, 123, 0, 0, 0, 124, 125, 0,
	126, 0, 0, 0, 262, 127, 128, 129, 263, 264,
	515, 0, 0, 130, 131, 265, 0, 132, 0, 133,
	0, 0, 337, 0, 134, 266, 0, 267, 0, 135,
	136, 137, 138, 268, 269, 339, 0, 142, 0, 139,
	0, 338, 140, 270, 141, 271, 272, 273, 0, 274,
	0, 340, 143, 144, 145, 341, 146, 147, 148, 0,
	150, 149, 0, 275, 342, 151, 343, 0, 152, 0,
	0, 153, 0, 154, 155, 156, 158, 276, 157, 344,
	159, 160, 162, 161, 0, 0, 0, 277, 163, 278,
	164, 165, 0, 166, 516, 0, 167, 0, 0, 168,
	279, 345, 169, 346, 280, 170, 171, 172, 173, 174,
	0, 281, 175, 282, 176, 0, 177, 178, 179, 180,
	181, 283, 182, 183, 0, 184, 185, 186, 187, 188,
	190, 191, 189, 192, 193, 194, 195, 0, 196, 347,
	197, 198, 284, 199, 0, 203, 204, 205, 206, 0,
	285, 207, 208, 209, 0, 210, 200, 201, 211, 348,
	212, 286, 287, 213, 0, 219, 214, 215, 202, 216,
	218, 288, 217, 289, 0, 220, 0, 221, 222, 223,
	224, 225, 0, 290, 291, 292, 0, 0, 226, 227,
	293, 294, 514, 228, 229, 230, 231, 0, 0, 232,
	233, 234, 235, 0, 236, 0, 295, 237, 238, 239,
	296, 297, 0, 0, 240, 0, 0, 0, 0, 241,
	242, 243, 244, 245, 525, 522, 0, 523, 518, 513,
	0, 0, 0, 0, 0, 524, 519, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 101, 102, 103, 247, 248, 249, 250,
	104, 251, 252, 0, 105, 253, 254, 106, 107, 0,
	0, 255, 256, 257, 0, 108, 258, 0, 335, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	336, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 303, 120, 259, 121, 260, 261, 737, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 262, 127, 128, 129, 263, 264, 515, 0, 0,
	130, 131, 265, 0, 132, 0, 133, 0, 0, 337,
	0, 134, 266, 0, 267, 0, 135, 136, 137, 138,
	268, 269, 339, 0, 142, 0, 139, 0, 338, 140,
	270, 141, 271, 272, 273, 0, 274, 0, 340, 143,
	144, 145, 341, 146, 147, 148, 0, 150, 149, 0,
	275, 342, 151, 343, 0, 152, 0, 0, 153, 0,
	154, 155, 156, 158, 276, 157, 344, 159, 160, 162,
	161, 0, 0, 0, 277, 163, 278, 164, 165, 0,
	166, 516, 0, 167, 0, 0, 168, 279, 345, 169,
	346, 280, 170, 171, 172, 173, 174, 0, 281, 175,
	282, 176, 0, 177, 178, 179, 180, 181, 283, 182,
	183, 0, 184, 185, 186, 187, 188, 190, 191, 189,
	192, 193, 194, 195, 0, 196, 347, 197, 198, 284,
	199, 0, 203, 204, 205, 206, 0, 285, 207, 208,
	209, 0, 210, 200, 201, 211, 348, 212, 286, 287,
	213, 0, 219, 214, 215, 202, 216, 218, 288, 217,
	289, 0, 220, 0, 221, 222, 223, 224, 225, 0,
	290, 291, 292, 0, 0, 226, 227, 293, 294, 514,
	228, 229, 230, 231, 0, 0, 232, 233, 234, 235,
	0, 236, 0, 295, 237, 238, 239, 296, 297, 0,
	0, 240, 0, 0, 0, 0, 241, 242, 243, 244,
	245, 525, 522, 0, 523, 518, 513, 0, 0, 0,
	0, 0, 524, 519, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	101, 102, 103, 247, 248, 249, 250, 104, 251, 252,
	0, 105, 253, 254, 106, 107, 0, 0, 255, 256,
	257, 0, 108, 258, 0, 335, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 336, 116, 117,
	0, 0, 0, 0, 0, 0, 118, 119, 303, 120,
	259, 121, 260, 261, 0, 122, 0, 123, 0, 0,
	0, 124, 125, 0, 126, 0, 0, 0, 262, 127,
	128, 129, 263, 264, 515, 0, 0, 130, 131, 265,
	0, 132, 0, 133, 0, 0, 337, 0, 134, 266,
	0, 267, 0, 135, 136, 137, 138, 268, 269, 339,
	0, 142, 0, 139, 0, 338, 140, 270, 141, 271,
	272, 273, 0, 274, 0, 340, 143, 144, 145, 341,
	146, 147, 148, 0, 150, 149, 0, 275, 342, 151,
	343, 0, 152, 0, 0, 153, 0, 154, 155, 156,
	158, 276, 157, 344, 159, 160, 162, 161, 0, 0,
	0, 277, 163, 278, 164, 165, 0, 166, 516, 0,
	167, 0, 0, 168, 279, 345, 169, 346, 280, 170,
	171, 172, 173, 174, 0, 281, 175, 282, 176, 0,
	177, 178, 179, 180, 181, 283, 182, 183, 0, 184,
	185, 186, 187, 188, 190, 191, 189, 192, 193, 194,
	195, 0, 196, 347, 197, 198, 284, 199, 0, 203,
	204, 205, 206, 0, 285, 207, 208, 209, 0, 210,
	200, 201, 211, 348, 212, 286, 287, 213, 0, 219,
	214, 215, 202, 216, 218, 288, 217, 289, 0, 220,
	0, 221, 222, 223, 224, 225, 0, 290, 291, 292,
	0, 0, 226, 227, 293, 294, 514, 228, 229, 230,
	231, 0, 0, 232, 233, 234, 235, 0, 236, 0,
	295, 237, 238, 239, 296, 297, 0, 95, 240, 0,
	0, 0, 0, 241, 242, 243, 244, 245, 0, 0,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 524,
	519, 246, 0, 0, 0, 0, 101, 102, 103, 247,
	248, 249, 250, 104, 251, 252, 0, 105, 253, 254,
	106, 107, 0, 0, 255, 256, 257, 0, 108, 258,
	0, 0, 0, 109, 110, 111, 0, 112, 0, 113,
	114, 115, 0, 0, 116, 117, 0, 0, 0, 0,
	0, 0, 118, 119, 303, 120, 259, 121, 260, 261,
	0, 122, 0, 123, 0, 0, 0, 124, 125, 0,
	126, 0, 0, 0, 262, 127, 128, 129, 263, 264,
	0, 0, 0, 130, 131, 265, 0, 132, 0, 133,
	0, 0, 0, 0, 134, 266, 0, 267, 0, 135,
	136, 137, 138, 268, 269, 0, 0, 142, 0, 139,
	0, 0, 140, 270, 141, 271, 272, 273, 0, 274,
	0, 0, 143, 144, 145, 0, 146, 147, 148, 0,
	150, 149, 0, 275, 0, 151, 0, 0, 152, 0,
	0, 153, 0, 154, 155, 156, 158, 276, 157, 0,
	159, 160, 162, 161, 0, 0, 0, 277, 163, 278,
	164, 165, 0, 166, 0, 559, 167, 0, 0, 168,
	279, 0, 169, 0, 280, 170, 171, 172, 173, 174,
	0, 281, 175, 282, 176, 0, 177, 178, 179, 180,
	181, 283, 182, 183, 0, 184, 185, 186, 187, 188,
	190, 191, 189, 192, 193, 194, 195, 0, 196, 0,
	197, 198, 284, 199, 0, 203, 204, 205, 206, 79,
	285, 207, 208, 209, 0, 210, 200, 201, 211, 0,
	212, 286, 287, 213, 0, 219, 214, 215, 202, 216,
	218, 288, 217, 289, 0, 220, 81, 221, 222, 223,
	224, 225, 0, 290, 291, 292, 0, 0, 226, 227,
	293, 294, 0, 228, 229, 230, 231, 0, 0, 232,
	233, 234, 235, 0, 236, 0, 295, 237, 238, 239,
	703, 297, 0, 0, 240, 0, 95, 0, 77, 241,
	242, 243, 244, 245, 0, 78, 0, 0, 0, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	246, 0, 1400, 0, 1405, 101, 102, 103, 247, 248,
	249, 250, 104, 251, 252, 0, 105, 253, 254, 106,
	107, 0, 0, 255, 256, 257, 0, 108, 258, 0,
	0, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 0, 116, 117, 0, 0, 0, 0, 0,
	0, 118, 119, 303, 120, 259, 121, 260, 261, 0,
	122, 0, 123, 0, 0, 0, 124, 125, 0, 126,
	0, 0, 0, 262, 127, 128, 129, 263, 264, 0,
	0, 0, 130, 131, 265, 0, 132, 0, 133, 0,
	0, 0, 0, 134, 266, 0, 267, 0, 135, 136,
	137, 138, 268, 269, 0, 0, 142, 0, 139, 0,
	0, 140, 270, 141, 271, 272, 273, 0, 274, 0,
	0, 143, 144, 145, 0, 146, 147, 148, 0, 150,
	149, 0, 275, 0, 151, 0, 0, 152, 0, 0,
	153, 0, 154, 155, 156, 158, 276, 157, 0, 159,
	160, 162, 161, 0, 0, 0, 277, 163, 278, 164,
	165, 0, 166, 0, 0, 167, 0, 0, 168, 279,
	0, 169, 0, 280, 170, 171, 172, 173, 174, 0,
	281, 175, 282, 176, 0, 177, 178, 179, 180, 181,
	283, 182, 183, 0, 184, 185, 186, 187, 188, 190,
	191, 189, 192, 193, 194, 195, 0, 196, 0, 197,
	198, 284, 199, 0, 203, 204, 205, 206, 79, 285,
	207, 208, 209, 0, 210, 200, 201, 211, 0, 212,
	286, 287, 213, 0, 219, 214, 215, 202, 216, 218,
	288, 217, 289, 0, 220, 81, 221, 222, 223, 224,
	225, 0, 290, 291, 292, 0, 0, 226, 227, 293,
	294, 0, 228, 229, 230, 231, 0, 0, 232, 233,
	234, 235, 0, 236, 0, 295, 237, 238, 239, 703,
	297, 0, 0, 240, 0, 95, 0, 77, 241, 242,
	243, 244, 245, 0, 78, 0, 0, 0, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 0, 246,
	0, 0, 0, 76, 101, 102, 103, 247, 248, 249,
	250, 104, 251, 252, 0, 105, 253, 254, 106, 107,
	0, 0, 255, 256, 257, 0, 108, 258, 0, 0,
	0, 109, 110, 111, 0, 112, 0, 113, 114, 115,
	0, 0, 116, 117, 0, 0, 0, 0, 0, 0,
	118, 119, 303, 120, 259, 121, 260, 261, 0, 122,
	0, 123, 0, 0, 0, 124, 125, 0, 126, 0,
	0, 0, 262, 127, 128, 129, 263, 264, 0, 0,
	0, 130, 131, 265, 0, 132, 0, 133, 0, 0,
	0, 0, 134, 266, 0, 267, 0, 135, 136, 137,
	138, 268, 269, 0, 0, 142, 0, 139, 0, 0,
	140, 270, 141, 271, 272, 273, 0, 274, 0, 0,
	143, 144, 145, 0, 146, 147, 148, 0, 150, 149,
	0, 275, 0, 151, 0, 0, 152, 0, 0, 153,
	0, 154, 155, 156, 158, 276, 157, 0, 159, 160,
	162, 161, 0, 0, 0, 277, 163, 278, 164, 165,
	0, 166, 0, 559, 167, 0, 0, 168, 279, 0,
	169, 0, 280, 170, 171, 172, 173, 174, 0, 281,
	175, 282, 176, 0, 177, 178, 179, 180, 181, 283,
	182, 183, 0, 184, 185, 186, 187, 188, 190, 191,
	189, 192, 193, 194, 195, 0, 196, 0, 197, 198,
	284, 199, 0, 203, 204, 205, 206, 0, 285, 207,
	208, 209, 0, 210, 200, 201, 211, 0, 212, 286,
	287, 213, 0, 219, 214, 215, 202, 216, 218, 288,
	217, 289, 0, 220, 0, 221, 222, 223, 224, 225,
	0, 290, 291, 292, 0, 0, 226, 227, 293, 294,
	0, 228, 229, 230, 231, 0, 0, 232, 233, 234,
	235, 0, 236, 0, 295, 237, 238, 239, 296, 297,
	0, 0, 240, 0, 95, 0, 0, 241, 242, 243,
	244, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 0, 246, 0,
	1400, 0, 1405, 101, 102, 103, 247, 248, 249, 250,
	104, 251, 252, 0, 105, 253, 254, 106, 107, 0,
	0, 255, 256, 257, 0, 108, 258, 0, 0, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	0, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 303, 120, 259, 121, 260, 261, 0, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 262, 127, 128, 129, 263, 264, 0, 0, 0,
	130, 131, 265, 0, 132, 0, 133, 0, 0, 0,
	0, 134, 266, 0, 267, 0, 135, 136, 137, 138,
	268, 269, 0, 0, 142, 0, 139, 0, 0, 140,
	270, 141, 271, 272, 273, 0, 274, 0, 0, 143,
	144, 145, 0, 146, 147, 148, 0, 150, 149, 0,
	275, 0, 151, 0, 0, 152, 0, 0, 153, 0,
	154, 155, 156, 158, 276, 157, 0, 159, 160, 162,
	161, 0, 0, 0, 277, 163, 278, 164, 165, 0,
	166, 0, 0, 167, 0, 0, 168, 279, 0, 169,
	0, 280, 170, 171, 172, 173, 174, 0, 281, 175,
	282, 176, 0, 177, 178, 179, 180, 181, 283, 182,
	183, 0, 184, 185, 186, 187, 188, 190, 191, 189,
	192, 193, 194, 195, 0, 196, 0, 197, 198, 284,
	199, 0, 203, 204, 205, 206, 0, 285, 207, 208,
	209, 0, 210, 200, 201, 211, 0, 212, 286, 287,
	213, 0, 219, 214, 215, 202, 216, 218, 288, 217,
	289, 0, 220, 0, 221, 222, 223, 224, 225, 0,
	290, 291, 292, 0, 0, 226, 227, 293, 294, 0,
	228, 229, 230, 231, 0, 0, 232, 233, 234, 235,
	0, 236, 0, 295, 237, 238, 239, 296, 297, 0,
	0, 240, 0, 0, 95, 0, 241, 242, 243, 244,
	245, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 0, 246, 0,
	0, 0, 945, 101, 102, 103, 247, 248, 249, 250,
	104, 251, 252, 0, 105, 253, 254, 106, 107, 0,
	0, 255, 256, 257, 0, 108, 258, 0, 0, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	0, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 303, 120, 259, 121, 260, 261, 0, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 262, 127, 128, 129, 263, 264, 0, 0, 0,
	130, 131, 265, 0, 132, 0, 133, 0, 0, 0,
	0, 134, 266, 0, 267, 0, 135, 136, 137, 138,
	268, 269, 0, 0, 142, 0, 139, 0, 0, 140,
	270, 141, 271, 272, 273, 0, 274, 0, 0, 143,
	144, 145, 0, 146, 147, 148, 0, 150, 149, 0,
	275, 0, 151, 0, 0, 152, 0, 0, 153, 0,
	154, 155, 156, 158, 276, 157, 0, 159, 160, 162,
	161, 0, 0, 0, 277, 163, 278, 164, 165, 0,
	166, 0, 0, 167, 0, 0, 168, 279, 0, 169,
	0, 280, 170, 171, 172, 173, 174, 0, 281, 175,
	282, 176, 0, 177, 178, 179, 180, 181, 283, 182,
	183, 0, 184, 185, 186, 187, 188, 190, 191, 189,
	192, 193, 194, 195, 0, 196, 0, 197, 198, 284,
	199, 0, 203, 204, 205, 206, 0, 285, 207, 208,
	209, 0, 210, 200, 201, 211, 0, 212, 286, 287,
	213, 0, 219, 214, 215, 202, 216, 218, 288, 217,
	289, 0, 220, 0, 221, 222, 223, 224, 225, 0,
	290, 291, 292, 0, 0, 226, 227, 293, 294, 0,
	228, 229, 230, 231, 0, 0, 232, 233, 234, 235,
	0, 236, 0, 295, 237, 238, 239, 296, 297, 0,
	0, 240, 0, 95, 0, 0, 241, 242, 243, 244,
	245, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 0, 246, 0, 0,
	0, 1321, 101, 102, 103, 247, 248, 249, 250, 104,
	251, 252, 0, 105, 253, 254, 106, 107, 0, 0,
	255, 256, 257, 0, 108, 258, 0, 0, 0, 109,
	110, 111, 0, 112, 0, 113, 114, 115, 0, 0,
	116, 117, 0, 0, 0, 0, 0, 0, 118, 119,
	303, 120, 259, 121, 260, 261, 0, 122, 0, 123,
	0, 0, 0, 124, 125, 0, 126, 0, 0, 0,
	262, 127, 128, 129, 263, 264, 0, 0, 0, 130,
	131, 265, 0, 132, 0, 133, 0, 0, 0, 0,
	134, 266, 0, 267, 0, 135, 136, 137, 138, 268,
	269, 0, 0, 142, 0, 139, 0, 0, 140, 270,
	141, 271, 272, 273, 0, 274, 0, 0, 143, 144,
	145, 0, 146, 147, 148, 0, 150, 149, 0, 275,
	0, 151, 0, 0, 152, 0, 0, 153, 0, 154,
	155, 156, 158, 276, 157, 0, 159, 160, 162, 161,
	0, 0, 0, 277, 163, 278, 164, 165, 0, 166,
	0, 0, 167, 0, 0, 168, 279, 0, 169, 0,
	280, 170, 171, 172, 173, 174, 0, 281, 175, 282,
	176, 0, 177, 178, 179, 180, 181, 283, 182, 183,
	0, 184, 185, 186, 187, 188, 190, 191, 189, 192,
	193, 194, 195, 0, 196, 0, 197, 198, 284, 199,
	0, 203, 204, 205, 206, 0, 285, 207, 208, 209,
	0, 210, 200, 201, 211, 0, 212, 286, 287, 213,
	0, 219, 214, 215, 202, 216, 218, 288, 217, 289,
	0, 220, 0, 221, 222, 223, 224, 225, 0, 290,
	291, 292, 0, 0, 226, 227, 293, 294, 0, 228,
	229, 230, 231, 0, 0, 232, 233, 234, 235, 0,
	236, 0, 295, 237, 238, 239, 296, 297, 0, 0,
	240, 0, 95, 0, 0, 241, 242, 243, 244, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 0, 246, 0, 0, 0,
	1717, 101, 102, 103, 247, 248, 249, 250, 104, 251,
	252, 0, 105, 253, 254, 106, 107, 0, 0, 255,
	256, 257, 0, 108, 258, 0, 0, 0, 109, 110,
	111, 0, 112, 0, 113, 114, 115, 0, 0, 116,
	117, 0, 0, 0, 0, 0, 0, 118, 119, 303,
	120, 259, 121, 260, 261, 0, 122, 0, 123, 0,
	0, 0, 124, 125, 0, 126, 0, 0, 0, 262,
	127, 128, 129, 263, 264, 0, 0, 0, 130, 131,
	265, 0, 132, 0, 133, 0, 0, 0, 0, 134,
	266, 0, 267, 0, 135, 136, 137, 138, 268, 269,
	0, 0, 142, 0, 139, 0, 0, 140, 270, 141,
	271, 272, 273, 0, 274, 0, 0, 143, 144, 145,
	0, 146, 147, 148, 0, 150, 149, 0, 275, 0,
	151, 0, 0, 152, 0, 0, 153, 0, 154, 155,
	156, 158, 276, 157, 0, 159, 160, 162, 161, 0,
	0, 0, 277, 163, 278, 164, 165, 0, 166, 0,
	0, 167, 0, 0, 168, 279, 0, 169, 0, 280,
	170, 171, 172, 173, 174, 0, 281, 175, 282, 176,
	0, 177, 178, 179, 180, 181, 283, 182, 183, 0,
	184, 185, 186, 187, 188, 190, 191, 189, 192, 193,
	194, 195, 0, 196, 0, 197, 198, 284, 199, 0,
	203, 204, 205, 206, 0, 285, 207, 208, 209, 0,
	210, 200, 201, 211, 0, 212, 286, 287, 213, 0,
	219, 214, 215, 202, 216, 218, 288, 217, 289, 0,
	220, 0, 221, 222, 223, 224, 225, 0, 290, 291,
	292, 0, 0, 226, 227, 293, 294, 0, 228, 229,
	230, 231, 0, 0, 232, 233, 234, 235, 0, 236,
	0, 295, 237, 238, 239, 296, 297, 0, 0, 240,
	0, 0, 0, 0, 241, 242, 243, 244, 245, 618,
	607, 608, 605, 606, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 99, 0, 100, 815,
	0, 0, 0, 246, 0, 0, 0, 0, 101, 102,
	103, 247, 649, 249, 650, 104, 651, 652, 0, 105,
	253, 254, 106, 107, 0, 0, 653, 654, 257, 0,
	108, 258, 0, 335, 0, 109, 110, 111, 0, 112,
	0, 113, 114, 115, 0, 336, 116, 117, 0, 0,
	0, 0, 0, 0, 118, 119, 303, 120, 655, 121,
	656, 657, 0, 122, 0, 123, 0, 0, 0, 648,
	125, 0, 126, 0, 0, 0, 262, 127, 128, 129,
	263, 264, 614, 0, 0, 130, 131, 658, 0, 132,
	0, 133, 0, 0, 337, 0, 134, 266, 0, 267,
	0, 135, 136, 137, 138, 268, 269, 339, 0, 142,
	0, 139, 0, 338, 140, 659, 141, 660, 661, 662,
	0, 625, 0, 340, 143, 144, 145, 341, 146, 147,
	148, 0, 150, 149, 0, 275, 342, 151, 343, 0,
	152, 0, 0, 153, 0, 154, 155, 156, 158, 276,
	157, 344, 159, 160, 162, 161, 0, 0, 615, 277,
	163, 663, 164, 165, 0, 166, 0, 0, 167, 0,
	0, 168, 279, 345, 169, 346, 280, 170, 171, 172,
	173, 174, 0, 281, 175, 282, 176, 0, 177, 178,
	179, 180, 181, 664, 182, 183, 0, 184, 185, 186,
	187, 188, 190, 191, 189, 192, 193, 194, 195, 0,
	196, 347, 197, 198, 284, 199, 0, 203, 204, 205,
	206, 0, 285, 207, 208, 209, 0, 210, 200, 201,
	211, 348, 212, 665, 287, 213, 0, 219, 214, 215,
	202, 216, 218, 666, 217, 289, 0, 220, 0, 221,
	222, 223, 224, 225, 0, 290, 667, 668, 0, 0,
	226, 227, 293, 294, 613, 228, 229, 230, 231, 0,
	0, 232, 233, 234, 235, 0, 236, 0, 295, 237,
	238, 239, 296, 669, 525, 522, 240, 0, 0, 744,
	0, 241, 242, 243, 244, 245, 0, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 101, 102, 103, 247, 248, 249, 250,
	104, 251, 252, 0, 105, 253, 254, 106, 107, 0,
	0, 255, 256, 257, 0, 108, 258, 0, 335, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	336, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 303, 120, 259, 121, 260, 261, 0, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 262, 127, 128, 129, 263, 264, 0, 0, 0,
	130, 131, 265, 0, 132, 0, 133, 0, 0, 337,
	0, 134, 266, 0, 267, 0, 135, 136, 137, 138,
	268, 269, 339, 0, 142, 0, 139, 0, 338, 140,
	270, 141, 271, 272, 273, 0, 274, 0, 340, 143,
	144, 145, 341, 146, 147, 148, 0, 150, 149, 0,
	275, 342, 151, 343, 0, 152, 0, 0, 153, 0,
	154, 155, 156, 158, 276, 157, 344, 159, 160, 162,
	161, 0, 0, 0, 277, 163, 278, 164, 165, 0,
	166, 0, 0, 167, 0, 0, 168, 279, 345, 169,
	346, 280, 170, 171, 172, 173, 174, 0, 281, 175,
	282, 176, 0, 177, 178, 179, 180, 181, 283, 182,
	183, 0, 184, 185, 186, 187, 188, 190, 191, 189,
	192, 193, 194, 195, 0, 196, 347, 197, 198, 284,
	199, 0, 203, 204, 205, 206, 0, 285, 207, 208,
	209, 0, 210, 200, 201, 211, 348, 212, 286, 287,
	213, 0, 219, 214, 215, 202, 216, 218, 288, 217,
	289, 0, 220, 0, 221, 222, 223, 224, 225, 0,
	290, 291, 292, 0, 0, 226, 227, 293, 294, 0,
	228, 229, 230, 231, 0, 0, 232, 233, 234, 235,
	0, 236, 0, 295, 237, 238, 239, 296, 297, 95,
	0, 240, 0, 0, 0, 0, 241, 242, 243, 244,
	245, 0, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 101, 102,
	103, 247, 248, 249, 250, 104, 251, 252, 0, 105,
	253, 254, 106, 107, 0, 0, 255, 256, 257, 0,
	108, 258, 0, 0, 0, 109, 110, 111, 0, 112,
	0, 113, 114, 115, 0, 0, 116, 117, 0, 0,
	0, 0, 0, 0, 118, 119, 91, 120, 259, 121,
	260, 261, 0, 122, 0, 123, 0, 0, 0, 124,
	125, 0, 126, 0, 0, 0, 262, 127, 128, 129,
	263, 264, 0, 0, 0, 130, 131, 265, 0, 132,
	0, 133, 0, 0, 0, 0, 134, 266, 0, 267,
	0, 135, 136, 137, 138, 268, 269, 0, 0, 142,
	0, 139, 0, 0, 140, 270, 141, 271, 272, 273,
	0, 274, 0, 0, 143, 144, 145, 0, 146, 147,
	148, 0, 150, 149, 0, 275, 0, 151, 0, 0,
	152, 0, 0, 153, 0, 154, 155, 156, 158, 276,
	157, 0, 159, 160, 162, 161, 0, 0, 0, 277,
	163, 278, 164, 165, 0, 166, 0, 0, 167, 0,
	0, 168, 279, 0, 169, 0, 280, 170, 171, 172,
	173, 174, 0, 281, 175, 282, 176, 0, 177, 178,
	179, 180, 181, 283, 182, 183, 0, 184, 185, 186,
	187, 188, 190, 191, 189, 192, 193, 194, 195, 0,
	196, 0, 197, 198, 284, 199, 0, 203, 204, 205,
	206, 0, 285, 207, 208, 209, 0, 210, 200, 201,
	211, 0, 212, 286, 287, 213, 0, 219, 214, 215,
	202, 216, 218, 288, 217, 289, 0, 220, 90, 221,
	222, 223, 224, 225, 0, 290, 291, 292, 0, 0,
	226, 227, 293, 294, 0, 228, 229, 230, 231, 0,
	0, 232, 233, 234, 235, 0, 236, 0, 295, 237,
	238, 239, 296, 297, 525, 522, 240, 0, 0, 0,
	0, 241, 242, 243, 244, 245, 0, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 0, 246, 94,
	0, 0, 0, 101, 102, 103, 247, 248, 249, 250,
	104, 251, 252, 0, 105, 253, 254, 106, 107, 0,
	0, 255, 256, 257, 0, 108, 258, 0, 335, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	336, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 303, 120, 259, 121, 260, 261, 0, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 262, 127, 128, 129, 263, 264, 0, 0, 0,
	130, 131, 265, 0, 132, 0, 133, 0, 0, 337,
	0, 134, 266, 0, 267, 0, 135, 136, 137, 138,
	268, 269, 339, 0, 142, 0, 139, 0, 338, 140,
	270, 141, 271, 272, 273, 0, 274, 0, 340, 143,
	144, 145, 341, 146, 147, 148, 0, 150, 149, 0,
	275, 342, 151, 343, 0, 152, 0, 0, 153, 0,
	154, 155, 156, 158, 276, 157, 344, 159, 160, 162,
	161, 0, 0, 0, 277, 163, 278, 164, 165, 0,
	166, 0, 0, 167, 0, 0, 168, 279, 345, 169,
	346, 280, 170, 171, 172, 173, 174, 0, 281, 175,
	282, 176, 0, 177, 178, 179, 180, 181, 283, 182,
	183, 0, 184, 185, 186, 187, 188, 190, 191, 189,
	192, 193, 194, 195, 0, 196, 347, 197, 198, 284,
	199, 0, 203, 204, 205, 206, 0, 285, 207, 208,
	209, 0, 210, 200, 201, 211, 348, 212, 286, 287,
	213, 0, 219, 214, 215, 202, 216, 218, 288, 217,
	289, 0, 220, 0, 221, 222, 223, 224, 225, 0,
	290, 291, 292, 0, 0, 226, 227, 293, 294, 0,
	228, 229, 230, 231, 0, 0, 232, 233, 234, 235,
	0, 236, 0, 295, 237, 238, 239, 296, 297, 95,
	0, 240, 0, 0, 0, 0, 241, 242, 243, 244,
	245, 0, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 101, 102,
	103, 247, 248, 249, 250, 104, 251, 252, 0, 105,
	253, 254, 106, 107, 0, 0, 255, 256, 257, 0,
	108, 258, 0, 0, 0, 109, 110, 111, 0, 112,
	0, 113, 114, 115, 0, 0, 116, 117, 0, 0,
	0, 0, 0, 0, 118, 119, 303, 120, 259, 121,
	260, 261, 0, 122, 0, 123, 0, 0, 0, 124,
	125, 0, 126, 0, 0, 0, 262, 127, 128, 129,
	263, 264, 0, 0, 0, 130, 131, 265, 0, 132,
	0, 133, 0, 0, 0, 0, 134, 266, 0, 267,
	0, 135, 136, 137, 138, 268, 269, 0, 0, 142,
	0, 139, 0, 0, 140, 270, 141, 271, 272, 273,
	0, 274, 0, 0, 143, 144, 145, 0, 146, 147,
	148, 0, 150, 149, 0, 275, 0, 151, 0, 0,
	152, 0, 0, 153, 0, 154, 155, 156, 158, 276,
	157, 0, 159, 160, 162, 161, 0, 0, 0, 277,
	163, 278, 164, 165, 0, 166, 0, 0, 167, 0,
	0, 168, 279, 0, 169, 0, 280, 170, 171, 172,
	173, 174, 0, 281, 175, 282, 176, 0, 177, 178,
	179, 180, 181, 283, 182, 183, 0, 184, 185, 186,
	187, 188, 190, 191, 189, 192, 193, 194, 195, 0,
	196, 0, 197, 198, 284, 199, 0, 203, 204, 205,
	206, 0, 285, 207, 208, 209, 0, 210, 200, 201,
	211, 0, 212, 286, 287, 213, 0, 219, 214, 215,
	202, 216, 218, 288, 217, 289, 0, 220, 0, 221,
	222, 223, 224, 225, 0, 290, 291, 292, 0, 0,
	226, 227, 293, 294, 0, 228, 229, 230, 231, 0,
	0, 232, 233, 234, 235, 0, 236, 0, 295, 237,
	238, 239, 296, 297, 525, 0, 240, 0, 0, 0,
	0, 241, 242, 243, 244, 245, 0, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 0, 246, 94,
	0, 0, 0, 101, 102, 103, 247, 248, 249, 250,
	104, 251, 252, 0, 105, 253, 254, 106, 107, 0,
	0, 255, 256, 257, 0, 108, 258, 0, 335, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	336, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 303, 120, 259, 121, 260, 261, 0, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 262, 127, 128, 129, 263, 264, 0, 0, 0,
	130, 131, 265, 0, 132, 0, 133, 0, 0, 337,
	0, 134, 266, 0, 267, 0, 135, 136, 137, 138,
	268, 269, 339, 0, 142, 0, 139, 0, 338, 140,
	270, 141, 271, 272, 273, 0, 274, 0, 340, 143,
	144, 145, 341, 146, 147, 148, 0, 150, 149, 0,
	275, 342, 151, 343, 0, 152, 0, 0, 153, 0,
	154, 155, 156, 158, 276, 157, 344, 159, 160, 162,
	161, 0, 0, 0, 277, 163, 278, 164, 165, 0,
	166, 0, 0, 167, 0, 0, 168, 279, 345, 169,
	346, 280, 170, 171, 172, 173, 174, 0, 281, 175,
	282, 176, 0, 177, 178, 179, 180, 181, 283, 182,
	183, 0, 184, 185, 186, 187, 188, 190, 191, 189,
	192, 193, 194, 195, 0, 196, 347, 197, 198, 284,
	199, 0, 203, 204, 205, 206, 0, 285, 207, 208,
	209, 0, 210, 200, 201, 211, 348, 212, 286, 287,
	213, 0, 219, 214, 215, 202, 216, 218, 288, 217,
	289, 0, 220, 0, 221, 222, 223, 224, 225, 0,
	290, 291, 292, 0, 0, 226, 227, 293, 294, 0,
	228, 229, 230, 231, 0, 0, 232, 233, 234, 235,
	0, 236, 0, 295, 237, 238, 239, 296, 297, 95,
	0, 240, 0, 0, 0, 0, 241, 242, 243, 244,
	245, 0, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 101, 102,
	103, 247, 248, 249, 250, 104, 251, 252, 0, 105,
	253, 254, 106, 107, 0, 0, 255, 256, 257, 1131,
	108, 258, 0, 0, 0, 109, 110, 111, 0, 112,
	1129, 113, 114, 115, 0, 0, 116, 117, 0, 0,
	0, 0, 0, 0, 118, 119, 303, 120, 259, 121,
	260, 261, 0, 122, 0, 123, 0, 0, 0, 124,
	125, 0, 126, 0, 0, 0, 262, 127, 128, 129,
	263, 264, 0, 1372, 0, 130, 131, 265, 0, 132,
	0, 133, 1134, 0, 0, 0, 134, 266, 0, 267,
	0, 135, 136, 137, 138, 268, 269, 0, 0, 142,
	1370, 139, 0, 0, 140, 270, 141, 271, 272, 273,
	0, 274, 0, 0, 143, 144, 145, 0, 146, 147,
	148, 0, 150, 149, 0, 275, 0, 151, 0, 0,
	152, 0, 0, 153, 0, 154, 155, 156, 158, 276,
	157, 0, 159, 160, 162, 161, 0, 0, 0, 277,
	163, 278, 164, 165, 0, 166, 0, 0, 167, 0,
	0, 168, 279, 0, 169, 0, 280, 170, 171, 172,
	173, 174, 0, 281, 175, 282, 176, 1133, 177, 178,
	179, 180, 181, 283, 182, 183, 0, 184, 185, 186,
	187, 188, 190, 191, 189, 192, 193, 194, 195, 0,
	196, 0, 197, 198, 284, 199, 0, 203, 204, 205,
	206, 0, 285, 207, 208, 209, 0, 210, 200, 201,
	211, 0, 212, 286, 287, 213, 0, 219, 214, 215,
	202, 216, 218, 288, 217, 289, 0, 220, 0, 221,
	222, 223, 224, 225, 0, 290, 291, 292, 0, 0,
	226, 227, 293, 294, 0, 228, 229, 230, 231, 0,
	1371, 232, 233, 234, 235, 0, 236, 0, 295, 237,
	238, 239, 296, 297, 95, 0, 240, 0, 0, 0,
	0, 241, 242, 243, 244, 245, 0, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 101, 102, 103, 247, 248, 249, 250,
	104, 251, 252, 0, 105, 253, 254, 106, 107, 0,
	0, 255, 256, 257, 1131, 108, 258, 0, 0, 1126,
	109, 110, 111, 0, 112, 1129, 113, 114, 115, 0,
	0, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 303, 120, 259, 121, 260, 261, 0, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 262, 127, 128, 129, 263, 264, 0, 0, 0,
	130, 131, 265, 0, 132, 0, 133, 1134, 0, 0,
	0, 134, 266, 0, 267, 0, 135, 136, 137, 138,
	1125, 269, 0, 0, 142, 0, 139, 0, 0, 140,
	270, 141, 271, 272, 273, 0, 274, 0, 0, 143,
	144, 145, 0, 146, 147, 148, 0, 150, 149, 0,
	275, 0, 151, 0, 0, 152, 0, 0, 153, 0,
	154, 155, 156, 158, 276, 157, 0, 159, 160, 162,
	161, 0, 0, 0, 277, 163, 278, 164, 165, 0,
	166, 0, 0, 167, 0, 0, 168, 279, 0, 169,
	0, 280, 170, 171, 172, 173, 174, 0, 281, 175,
	282, 176, 1133, 177, 178, 179, 180, 181, 283, 182,
	183, 0, 184, 185, 186, 187, 188, 190, 191, 189,
	192, 193, 194, 195, 0, 196, 0, 197, 198, 284,
	199, 0, 203, 204, 205, 206, 0, 285, 207, 208,
	209, 0, 210, 200, 201, 211, 0, 212, 286, 287,
	213, 0, 219, 214, 215, 202, 216, 218, 288, 217,
	289, 0, 220, 0, 221, 222, 223, 224, 225, 0,
	290, 291, 292, 0, 0, 226, 227, 293, 294, 0,
	228, 229, 230, 231, 0, 1132, 232, 233, 234, 235,
	0, 236, 0, 295, 237, 238, 239, 296, 297, 95,
	0, 240, 0, 0, 0, 0, 241, 242, 243, 244,
	245, 0, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 0, 246, 0, 1825, 0, 0, 101, 102,
	103, 247, 248, 249, 250, 104, 251, 252, 0, 105,
	253, 254, 106, 107, 0, 0, 255, 256, 257, 0,
	108, 258, 0, 0, 0, 109, 110, 111, 0, 112,
	0, 113, 114, 115, 0, 0, 116, 117, 0, 0,
	0, 0, 0, 0, 118, 119, 303, 120, 259, 121,
	260, 261, 0, 122, 0, 123, 0, 0, 0, 124,
	125, 0, 126, 0, 0, 0, 262, 127, 128, 129,
	263, 264, 0, 0, 0, 130, 131, 265, 0, 132,
	0, 133, 0, 0, 0, 0, 134, 266, 0, 267,
	0, 135, 136, 137, 138, 268, 269, 0, 0, 142,
	0, 139, 0, 0, 140, 270, 141, 271, 272, 273,
	0, 274, 0, 0, 143, 144, 145, 0, 146, 147,
	148, 0, 150, 149, 0, 275, 0, 151, 0, 0,
	152, 0, 0, 153, 0, 154, 155, 156, 158, 276,
	157, 0, 159, 160, 162, 161, 0, 0, 0, 277,
	163, 278, 164, 165, 0, 166, 0, 0, 167, 0,
	0, 168, 279, 0, 169, 0, 280, 170, 171, 172,
	173, 174, 0, 281, 175, 282, 176, 0, 177, 178,
	179, 180, 181, 283, 182, 183, 0, 184, 185, 186,
	187, 188, 190, 191, 189, 192, 193, 194, 195, 0,
	196, 0, 197, 198, 284, 199, 0, 203, 204, 205,
	206, 0, 285, 207, 208, 209, 0, 210, 200, 201,
	211, 0, 212, 286, 287, 213, 0, 219, 214, 215,
	202, 216, 218, 288, 217, 289, 0, 220, 0, 221,
	222, 223, 224, 225, 0, 290, 291, 292, 0, 0,
	226, 227, 293, 294, 0, 228, 229, 230, 231, 0,
	0, 232, 233, 234, 235, 0, 236, 0, 295, 237,
	238, 239, 296, 297, 95, 0, 240, 0, 0, 0,
	0, 241, 242, 243, 244, 245, 0, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 101, 102, 103, 247, 248, 249, 250,
	104, 251, 252, 0, 105, 253, 254, 106, 107, 0,
	0, 255, 256, 257, 0, 108, 258, 0, 0, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	0, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 303, 120, 259, 121, 260, 261, 0, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 262, 127, 128, 129, 263, 264, 0, 0, 0,
	130, 131, 265, 0, 132, 0, 133, 0, 0, 0,
	0, 134, 266, 0, 267, 0, 135, 136, 137, 138,
	268, 269, 0, 0, 142, 0, 139, 0, 0, 140,
	270, 141, 271, 272, 273, 0, 274, 0, 0, 143,
	144, 145, 0, 146, 147, 148, 0, 150, 149, 0,
	275, 0, 151, 0, 0, 152, 0, 0, 153, 0,
	154, 155, 156, 158, 276, 157, 0, 159, 160, 162,
	161, 0, 0, 0, 277, 163, 278, 164, 165, 0,
	166, 0, 559, 167, 0, 0, 168, 279, 0, 169,
	0, 280, 170, 171, 172, 173, 174, 0, 281, 175,
	282, 176, 0, 177, 178, 179, 180, 181, 283, 182,
	183, 0, 184, 185, 186, 187, 188, 190, 191, 189,
	192, 193, 194, 195, 0, 196, 0, 197, 198, 284,
	199, 0, 203, 204, 205, 206, 0, 285, 207, 208,
	209, 0, 210, 200, 201, 211, 0, 212, 286, 287,
	213, 0, 219, 214, 215, 202, 216, 218, 288, 217,
	289, 0, 220, 0, 221, 222, 223, 224, 225, 0,
	290, 291, 292, 0, 0, 226, 227, 293, 294, 0,
	228, 229, 230, 231, 0, 0, 232, 233, 234, 235,
	0, 236, 0, 295, 237, 238, 239, 296, 297, 95,
	0, 240, 0, 0, 0, 0, 241, 242, 243, 244,
	245, 0, 0, 0, 0, 98, 99, 1056, 100, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 101, 102,
	103, 247, 248, 249, 250, 104, 251, 252, 0, 105,
	253, 254, 106, 107, 0, 0, 255, 256, 257, 0,
	108, 258, 0, 0, 0, 109, 110, 111, 0, 112,
	0, 113, 114, 115, 0, 0, 116, 117, 0, 0,
	0, 0, 0, 0, 118, 119, 303, 120, 259, 121,
	260, 261, 0, 122, 0, 123, 0, 0, 0, 124,
	125, 0, 126, 0, 0, 0, 262, 127, 128, 129,
	263, 264, 0, 0, 0, 130, 131, 265, 0, 132,
	0, 133, 0, 0, 0, 0, 134, 266, 0, 267,
	0, 135, 136, 137, 138, 268, 269, 0, 0, 142,
	0, 139, 0, 0, 140, 270, 141, 271, 272, 273,
	0, 274, 0, 0, 143, 144, 145, 0, 146, 147,
	148, 0, 150, 149, 0, 275, 0, 151, 0, 0,
	152, 0, 0, 153, 0, 154, 155, 156, 158, 276,
	157, 0, 159, 160, 162, 161, 0, 0, 0, 277,
	163, 278, 164, 165, 0, 166, 0, 0, 167, 0,
	0, 168, 279, 0, 169, 0, 280, 170, 171, 172,
	173, 174, 0, 281, 175, 282, 176, 0, 177, 178,
	179, 180, 181, 283, 182, 183, 0, 184, 185, 186,
	187, 188, 190, 191, 189, 192, 193, 194, 195, 0,
	196, 0, 197, 198, 284, 199, 0, 203, 204, 205,
	206, 0, 285, 207, 208, 209, 0, 210, 200, 201,
	211, 0, 212, 286, 287, 213, 0, 219, 214, 215,
	202, 216, 218, 288, 217, 289, 0, 220, 0, 221,
	222, 223, 224, 225, 0, 290, 291, 292, 0, 0,
	226, 227, 293, 294, 0, 228, 229, 230, 231, 0,
	0, 232, 233, 234, 235, 0, 236, 0, 295, 237,
	238, 239, 296, 297, 95, 0, 240, 0, 0, 0,
	0, 241, 242, 243, 244, 245, 0, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 101, 102, 103, 247, 248, 249, 250,
	104, 251, 252, 0, 105, 253, 254, 106, 107, 0,
	0, 255, 256, 257, 0, 108, 258, 0, 0, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	0, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 303, 120, 259, 121, 260, 261, 0, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 262, 127, 128, 129, 263, 264, 0, 0, 0,
	130, 131, 265, 0, 132, 0, 133, 0, 0, 0,
	0, 134, 266, 0, 267, 0, 135, 136, 137, 138,
	971, 269, 0, 0, 142, 0, 139, 0, 0, 140,
	270, 141, 271, 272, 273, 0, 274, 0, 0, 143,
	144, 145, 0, 146, 147, 148, 0, 150, 149, 0,
	275, 0, 151, 0, 0, 152, 0, 0, 153, 0,
	154, 155, 156, 158, 276, 157, 0, 159, 160, 162,
	161, 0, 0, 0, 277, 163, 278, 164, 165, 0,
	166, 0, 559, 167, 0, 0, 168, 279, 0, 169,
	0, 280, 170, 171, 172, 173, 174, 0, 281, 175,
	282, 176, 0, 177, 178, 179, 180, 181, 283, 182,
	183, 0, 184, 185, 186, 187, 188, 190, 191, 189,
	192, 193, 194, 195, 0, 196, 0, 197, 198, 284,
	199, 0, 203, 204, 205, 206, 0, 285, 207, 208,
	209, 0, 210, 200, 201, 211, 0, 212, 286, 287,
	213, 0, 219, 214, 215, 202, 216, 218, 288, 217,
	289, 0, 220, 0, 221, 222, 223, 224, 225, 0,
	290, 291, 292, 0, 0, 226, 227, 293, 294, 0,
	228, 229, 230, 231, 0, 0, 232, 233, 234, 235,
	0, 236, 0, 295, 237, 238, 239, 296, 297, 95,
	0, 240, 0, 0, 0, 0, 241, 242, 243, 244,
	245, 0, 0, 0, 0, 98, 99, 711, 100, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 101, 102,
	103, 247, 248, 249, 250, 104, 251, 252, 0, 105,
	253, 254, 106, 107, 0, 0, 255, 256, 257, 0,
	108, 258, 0, 0, 0, 109, 110, 111, 0, 112,
	0, 113, 114, 115, 0, 0, 116, 117, 0, 0,
	0, 0, 0, 0, 118, 119, 303, 120, 259, 121,
	260, 261, 0, 122, 0, 123, 0, 0, 0, 124,
	125, 0, 126, 0, 0, 0, 262, 127, 128, 129,
	263, 264, 0, 0, 0, 130, 131, 265, 0, 132,
	0, 133, 0, 0, 0, 0, 134, 266, 0, 267,
	0, 135, 136, 137, 138, 268, 269, 0, 0, 142,
	0, 139, 0, 0, 140, 270, 141, 271, 272, 273,
	0, 274, 0, 0, 143, 144, 145, 0, 146, 147,
	148, 0, 150, 149, 0, 275, 0, 151, 0, 0,
	152, 0, 0, 153, 0, 154, 155, 156, 158, 276,
	157, 0, 159, 160, 162, 161, 0, 0, 0, 277,
	163, 278, 164, 165, 0, 166, 0, 0, 167, 0,
	0, 168, 279, 0, 169, 0, 280, 170, 171, 172,
	173, 174, 0, 281, 175, 282, 176, 0, 177, 178,
	179, 180, 181, 283, 182, 183, 0, 184, 185, 186,
	187, 188, 190, 191, 189, 192, 193, 194, 195, 0,
	196, 0, 197, 198, 284, 199, 0, 203, 204, 205,
	206, 0, 285, 207, 208, 209, 0, 210, 200, 201,
	211, 0, 212, 286, 287, 213, 0, 219, 214, 215,
	202, 216, 218, 288, 217, 289, 0, 220, 0, 221,
	222, 223, 224, 225, 0, 290, 291, 292, 0, 0,
	226, 227, 293, 294, 0, 228, 229, 230, 231, 0,
	0, 232, 233, 234, 235, 0, 236, 0, 295, 237,
	238, 239, 296, 297, 95, 0, 240, 0, 0, 0,
	0, 241, 242, 243, 244, 245, 0, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 101, 102, 103, 247, 248, 249, 250,
	104, 251, 252, 0, 105, 253, 254, 106, 107, 0,
	0, 255, 256, 257, 0, 108, 258, 0, 0, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	0, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 303, 120, 259, 121, 260, 261, 0, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 262, 127, 128, 129, 263, 264, 0, 0, 0,
	130, 131, 265, 0, 132, 0, 133, 0, 0, 0,
	0, 134, 266, 0, 267, 0, 135, 136, 137, 138,
	571, 269, 0, 0, 142, 0, 139, 0, 0, 140,
	270, 141, 271, 272, 273, 0, 274, 0, 0, 143,
	144, 145, 0, 146, 147, 148, 0, 150, 149, 0,
	275, 0, 151, 0, 0, 152, 0, 0, 153, 0,
	154, 155, 156, 158, 276, 157, 0, 159, 160, 162,
	161, 0, 0, 0, 277, 163, 278, 164, 165, 0,
	166, 0, 559, 167, 0, 0, 168, 279, 0, 169,
	0, 280, 170, 171, 172, 173, 174, 0, 281, 175,
	282, 176, 0, 177, 178, 179, 180, 181, 283, 182,
	183, 0, 184, 185, 186, 187, 188, 190, 191, 189,
	192, 193, 194, 195, 0, 196, 0, 197, 198, 284,
	199, 0, 203, 204, 205, 206, 0, 285, 207, 208,
	209, 0, 210, 200, 201, 211, 0, 212, 286, 287,
	213, 0, 219, 214, 215, 202, 216, 218, 288, 217,
	289, 0, 220, 0, 221, 222, 223, 224, 225, 0,
	290, 291, 292, 0, 0, 226, 227, 293, 294, 0,
	228, 229, 230, 231, 0, 0, 232, 233, 234, 235,
	0, 236, 0, 295, 237, 238, 239, 296, 297, 95,
	0, 240, 0, 0, 0, 0, 241, 242, 243, 244,
	245, 0, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 101, 102,
	103, 247, 248, 249, 250, 104, 251, 252, 0, 105,
	253, 254, 106, 107, 0, 0, 255, 256, 257, 0,
	108, 258, 0, 0, 0, 109, 110, 111, 0, 112,
	0, 113, 114, 115, 0, 0, 116, 117, 0, 0,
	0, 0, 0, 0, 118, 119, 303, 120, 259, 121,
	260, 261, 0, 122, 0, 123, 0, 0, 0, 124,
	125, 0, 126, 0, 0, 0, 262, 127, 128, 129,
	263, 264, 0, 0, 0, 130, 131, 265, 0, 132,
	0, 133, 0, 0, 0, 0, 134, 266, 0, 267,
	0, 135, 136, 137, 138, 564, 269, 0, 0, 142,
	0, 139, 0, 0, 140, 270, 141, 271, 272, 273,
	0, 274, 0, 0, 143, 144, 145, 0, 146, 147,
	148, 0, 150, 149, 0, 275, 0, 151, 0, 0,
	152, 0, 0, 153, 0, 154, 155, 156, 158, 276,
	157, 0, 159, 160, 162, 161, 0, 0, 0, 277,
	163, 278, 164, 165, 0, 166, 0, 559, 167, 0,
	0, 168, 279, 0, 169, 0, 280, 170, 171, 172,
	173, 174, 0, 281, 175, 282, 176, 0, 177, 178,
	179, 180, 181, 283, 182, 183, 0, 184, 185, 186,
	187, 188, 190, 191, 189, 192, 193, 194, 195, 0,
	196, 0, 197, 198, 284, 199, 0, 203, 204, 205,
	206, 0, 285, 207, 208, 209, 0, 210, 200, 201,
	211, 0, 212, 286, 287, 213, 0, 219, 214, 215,
	202, 216, 218, 288, 217, 289, 0, 220, 0, 221,
	222, 223, 224, 225, 0, 290, 291, 292, 0, 0,
	226, 227, 293, 294, 0, 228, 229, 230, 231, 0,
	0, 232, 233, 234, 235, 0, 236, 0, 295, 237,
	238, 239, 296, 297, 95, 0, 240, 0, 0, 0,
	0, 241, 242, 243, 244, 245, 0, 0, 0, 0,
	98, 99, 434, 100, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 101, 102, 103, 247, 248, 249, 250,
	104, 251, 252, 0, 105, 253, 254, 106, 107, 0,
	0, 255, 256, 257, 0, 108, 258, 0, 0, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	0, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 303, 120, 259, 121, 260, 261, 0, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 262, 127, 128, 129, 263, 264, 0, 0, 0,
	130, 131, 265, 0, 132, 0, 133, 0, 0, 0,
	0, 134, 266, 0, 267, 0, 135, 136, 137, 138,
	268, 269, 0, 0, 142, 0, 139, 0, 0, 140,
	270, 141, 271, 272, 273, 0, 274, 0, 0, 143,
	144, 145, 0, 146, 147, 148, 0, 150, 149, 0,
	275, 0, 151, 0, 0, 152, 0, 0, 153, 0,
	154, 155, 156, 158, 276, 157, 0, 159, 160, 162,
	161, 0, 0, 0, 277, 163, 278, 164, 165, 0,
	166, 0, 0, 167, 0, 0, 168, 279, 0, 169,
	0, 280, 170, 171, 172, 173, 174, 0, 281, 175,
	282, 433, 0, 177, 178, 179, 180, 181, 283, 182,
	183, 0, 184, 185, 186, 187, 188, 190, 191, 189,
	192, 193, 194, 195, 0, 196, 0, 197, 198, 284,
	199, 0, 203, 204, 205, 206, 0, 285, 207, 208,
	209, 0, 210, 200, 201, 211, 0, 212, 286, 287,
	213, 0, 219, 214, 215, 202, 216, 218, 288, 217,
	289, 0, 220, 0, 221, 222, 223, 224, 225, 0,
	290, 291, 292, 0, 0, 226, 227, 293, 294, 0,
	228, 229, 230, 231, 0, 0, 232, 233, 234, 235,
	0, 236, 0, 295, 237, 238, 239, 296, 297, 95,
	0, 240, 0, 0, 0, 0, 241, 242, 243, 244,
	245, 0, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 101, 102,
	103, 247, 248, 249, 250, 104, 251, 252, 0, 105,
	253, 254, 106, 107, 0, 0, 255, 256, 257, 0,
	108, 258, 0, 0, 0, 109, 110, 111, 0, 112,
	0, 113, 114, 115, 0, 0, 116, 117, 0, 0,
	0, 0, 0, 0, 118, 119, 303, 120, 259, 121,
	260, 261, 0, 122, 0, 123, 0, 0, 0, 124,
	125, 0, 126, 0, 0, 0, 262, 127, 128, 129,
	263, 264, 0, 0, 0, 130, 131, 265, 0, 132,
	0, 133, 0, 0, 0, 0, 134, 266, 0, 267,
	0, 135, 136, 137, 138, 268, 269, 0, 0, 142,
	0, 139, 0, 0, 140, 270, 141, 271, 272, 273,
	0, 274, 0, 0, 143, 144, 145, 0, 146, 147,
	148, 0, 150, 149, 0, 275, 0, 151, 0, 0,
	152, 0, 0, 153, 0, 154, 155, 156, 158, 276,
	157, 0, 159, 160, 162, 161, 0, 0, 0, 277,
	163, 278, 164, 165, 0, 166, 0, 0, 167, 0,
	0, 168, 279, 0, 169, 0, 280, 170, 171, 172,
	173, 174, 0, 281, 175, 282, 176, 0, 177, 178,
	179, 180, 181, 283, 182, 183, 0, 184, 185, 186,
	187, 188, 190, 191, 189, 192, 193, 194, 195, 0,
	196, 0, 197, 198, 284, 199, 0, 203, 204, 205,
	206, 0, 285, 207, 208, 209, 0, 210, 200, 201,
	211, 0, 212, 286, 287, 213, 0, 219, 214, 215,
	202, 216, 218, 288, 217, 289, 0, 220, 0, 221,
	222, 223, 224, 225, 0, 290, 291, 292, 0, 0,
	226, 227, 293, 294, 0, 228, 229, 230, 231, 0,
	0, 232, 233, 234, 235, 0, 236, 0, 295, 237,
	238, 239, 296, 297, 95, 0, 240, 0, 0, 0,
	0, 241, 242, 243, 244, 245, 0, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 101, 102, 103, 247, 248, 249, 250,
	104, 251, 252, 0, 105, 253, 254, 106, 107, 0,
	0, 255, 256, 257, 0, 108, 258, 0, 0, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	0, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 303, 120, 259, 121, 260, 261, 0, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 262, 127, 128, 129, 263, 264, 0, 0, 0,
	130, 131, 265, 0, 132, 0, 133, 0, 0, 0,
	0, 134, 266, 0, 267, 0, 135, 136, 137, 138,
	1429, 269, 0, 0, 142, 0, 139, 0, 0, 140,
	270, 141, 271, 272, 273, 0, 274, 0, 0, 143,
	144, 145, 0, 146, 147, 148, 0, 150, 149, 0,
	275, 0, 151, 0, 0, 152, 0, 0, 153, 0,
	154, 155, 156, 158, 276, 157, 0, 159, 160, 162,
	161, 0, 0, 0, 277, 163, 278, 164, 165, 0,
	166, 0, 0, 167, 0, 0, 168, 279, 0, 169,
	0, 280, 170, 171, 172, 173, 174, 0, 281, 175,
	282, 176, 0, 177, 178, 179, 180, 181, 283, 182,
	183, 0, 184, 185, 186, 187, 188, 190, 191, 189,
	192, 193, 194, 195, 0, 196, 0, 197, 198, 284,
	199, 0, 203, 204, 205, 206, 0, 285, 207, 208,
	209, 0, 210, 200, 201, 211, 0, 212, 286, 287,
	213, 0, 219, 214, 215, 202, 216, 218, 288, 217,
	289, 0, 220, 0, 221, 222, 223, 224, 225, 0,
	290, 291, 292, 0, 0, 226, 227, 293, 294, 0,
	228, 229, 230, 231, 0, 0, 232, 233, 234, 235,
	0, 236, 0, 295, 237, 238, 239, 296, 297, 95,
	0, 240, 0, 0, 0, 0, 241, 242, 243, 244,
	245, 0, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 101, 102,
	103, 247, 248, 249, 250, 104, 251, 252, 0, 105,
	253, 254, 106, 107, 0, 0, 255, 256, 257, 0,
	108, 258, 0, 0, 0, 109, 110, 111, 0, 112,
	0, 113, 114, 115, 0, 0, 116, 117, 0, 0,
	0, 0, 0, 0, 118, 119, 303, 120, 259, 121,
	260, 261, 0, 122, 0, 123, 0, 0, 0, 124,
	125, 0, 126, 0, 0, 0, 262, 127, 128, 129,
	263, 264, 0, 0, 0, 130, 131, 265, 0, 132,
	0, 133, 0, 0, 0, 0, 134, 266, 0, 267,
	0, 135, 136, 137, 138, 1427, 269, 0, 0, 142,
	0, 139, 0, 0, 140, 270, 141, 271, 272, 273,
	0, 274, 0, 0, 143, 144, 145, 0, 146, 147,
	148, 0, 150, 149, 0, 275, 0, 151, 0, 0,
	152, 0, 0, 153, 0, 154, 155, 156, 158, 276,
	157, 0, 159, 160, 162, 161, 0, 0, 0, 277,
	163, 278, 164, 165, 0, 166, 0, 0, 167, 0,
	0, 168, 279, 0, 169, 0, 280, 170, 171, 172,
	173, 174, 0, 281, 175, 282, 176, 0, 177, 178,
	179, 180, 181, 283, 182, 183, 0, 184, 185, 186,
	187, 188, 190, 191, 189, 192, 193, 194, 195, 0,
	196, 0, 197, 198, 284, 199, 0, 203, 204, 205,
	206, 0, 285, 207, 208, 209, 0, 210, 200, 201,
	211, 0, 212, 286, 287, 213, 0, 219, 214, 215,
	202, 216, 218, 288, 217, 289, 0, 220, 0, 221,
	222, 223, 224, 225, 0, 290, 291, 292, 0, 0,
	226, 227, 293, 294, 0, 228, 229, 230, 231, 0,
	0, 232, 233, 234, 235, 0, 236, 0, 295, 237,
	238, 239, 296, 297, 95, 0, 240, 0, 0, 0,
	0, 241, 242, 243, 244, 245, 0, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 101, 102, 103, 247, 248, 249, 250,
	104, 251, 252, 0, 105, 253, 254, 106, 107, 0,
	0, 255, 256, 257, 0, 108, 258, 0, 0, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	0, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 303, 120, 259, 121, 260, 261, 0, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 262, 127, 128, 129, 263, 264, 0, 0, 0,
	130, 131, 265, 0, 132, 0, 133, 0, 0, 0,
	0, 134, 266, 0, 267, 0, 135, 136, 137, 138,
	1416, 269, 0, 0, 142, 0, 139, 0, 0, 140,
	270, 141, 271, 272, 273, 0, 274, 0, 0, 143,
	144, 145, 0, 146, 147, 148, 0, 150, 149, 0,
	275, 0, 151, 0, 0, 152, 0, 0, 153, 0,
	154, 155, 156, 158, 276, 157, 0, 159, 160, 162,
	161, 0, 0, 0, 277, 163, 278, 164, 165, 0,
	166, 0, 0, 167, 0, 0, 168, 279, 0, 169,
	0, 280, 170, 171, 172, 173, 174, 0, 281, 175,
	282, 176, 0, 177, 178, 179, 180, 181, 283, 182,
	183, 0, 184, 185, 186, 187, 188, 190, 191, 189,
	192, 193, 194, 195, 0, 196, 0, 197, 198, 284,
	199, 0, 203, 204, 205, 206, 0, 285, 207, 208,
	209, 0, 210, 200, 201, 211, 0, 212, 286, 287,
	213, 0, 219, 214, 215, 202, 216, 218, 288, 217,
	289, 0, 220, 0, 221, 222, 223, 224, 225, 0,
	290, 291, 292, 0, 0, 226, 227, 293, 294, 0,
	228, 229, 230, 231, 0, 0, 232, 233, 234, 235,
	0, 236, 0, 295, 237, 238, 239, 296, 297, 95,
	0, 240, 0, 0, 0, 0, 241, 242, 243, 244,
	245, 0, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 101, 102,
	103, 247, 248, 249, 250, 104, 251, 252, 0, 105,
	253, 254, 106, 107, 0, 0, 255, 256, 257, 0,
	108, 258, 0, 0, 0, 109, 110, 111, 0, 112,
	0, 113, 114, 115, 0, 0, 116, 117, 0, 0,
	0, 0, 0, 0, 118, 119, 303, 120, 259, 121,
	260, 261, 0, 122, 0, 123, 0, 0, 0, 124,
	125, 0, 126, 0, 0, 0, 262, 127, 128, 129,
	263, 264, 0, 0, 0, 130, 131, 265, 0, 132,
	0, 133, 0, 0, 0, 0, 134, 266, 0, 267,
	0, 135, 136, 137, 138, 1086, 269, 0, 0, 142,
	0, 139, 0, 0, 140, 270, 141, 271, 272, 273,
	0, 274, 0, 0, 143, 144, 145, 0, 146, 147,
	148, 0, 150, 149, 0, 275, 0, 151, 0, 0,
	152, 0, 0, 153, 0, 154, 155, 156, 158, 276,
	157, 0, 159, 160, 162, 161, 0, 0, 0, 277,
	163, 278, 164, 165, 0, 166, 0, 0, 167, 0,
	0, 168, 279, 0, 169, 0, 280, 170, 171, 172,
	173, 174, 0, 281, 175, 282, 176, 0, 177, 178,
	179, 180, 181, 283, 182, 183, 0, 184, 185, 186,
	187, 188, 190, 191, 189, 192, 193, 194, 195, 0,
	196, 0, 197, 198, 284, 199, 0, 203, 204, 205,
	206, 0, 285, 207, 208, 209, 0, 210, 200, 201,
	211, 0, 212, 286, 287, 213, 0, 219, 214, 215,
	202, 216, 218, 288, 217, 289, 0, 220, 0, 221,
	222, 223, 224, 225, 0, 290, 291, 292, 0, 0,
	226, 227, 293, 294, 0, 228, 229, 230, 231, 0,
	0, 232, 233, 234, 235, 0, 236, 0, 295, 237,
	238, 239, 296, 297, 95, 0, 240, 0, 0, 0,
	0, 241, 242, 243, 244, 245, 0, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 101, 102, 103, 247, 248, 249, 250,
	104, 251, 252, 0, 105, 253, 254, 106, 107, 0,
	0, 255, 256, 257, 0, 108, 258, 0, 0, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	0, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 303, 120, 259, 121, 260, 261, 0, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 262, 127, 128, 129, 263, 264, 0, 0, 0,
	130, 131, 265, 0, 132, 0, 133, 0, 0, 0,
	0, 134, 266, 0, 267, 0, 135, 136, 137, 138,
	268, 269, 0, 0, 142, 0, 139, 0, 0, 140,
	270, 141, 271, 272, 273, 0, 274, 0, 0, 143,
	144, 145, 0, 146, 147, 148, 0, 150, 149, 0,
	275, 0, 151, 0, 0, 152, 0, 0, 153, 0,
	154, 155, 156, 158, 276, 157, 0, 159, 160, 162,
	161, 0, 0, 0, 277, 163, 278, 164, 165, 0,
	166, 0, 0, 167, 0, 0, 168, 279, 0, 169,
	0, 280, 170, 171, 172, 173, 174, 0, 281, 175,
	282, 176, 0, 177, 178, 179, 180, 181, 283, 182,
	183, 0, 184, 185, 186, 187, 188, 190, 191, 189,
	192, 193, 194, 195, 0, 196, 0, 197, 198, 284,
	199, 0, 450, 204, 205, 206, 0, 285, 207, 208,
	209, 0, 210, 200, 201, 211, 0, 212, 286, 287,
	213, 0, 219, 214, 215, 202, 216, 218, 288, 217,
	289, 0, 220, 0, 221, 222, 223, 224, 225, 0,
	290, 291, 292, 0, 0, 226, 227, 293, 294, 0,
	228, 229, 230, 231, 0, 0, 232, 233, 234, 235,
	0, 236, 0, 295, 237, 238, 239, 296, 297, 95,
	0, 240, 0, 0, 0, 0, 241, 242, 243, 244,
	245, 0, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 0, 246, 0, 955, 0, 0, 101, 102,
	103, 247, 248, 249, 250, 104, 251, 252, 0, 105,
	253, 254, 106, 107, 0, 0, 255, 256, 257, 0,
	108, 258, 0, 0, 0, 109, 110, 111, 0, 112,
	0, 113, 114, 115, 0, 0, 116, 117, 0, 0,
	0, 0, 0, 0, 118, 119, 303, 120, 259, 121,
	260, 261, 0, 122, 0, 123, 0, 0, 0, 124,
	125, 0, 126, 0, 0, 0, 262, 127, 128, 129,
	263, 264, 0, 0, 0, 130, 131, 265, 0, 132,
	0, 133, 0, 0, 0, 0, 134, 266, 0, 267,
	0, 135, 136, 137, 138, 268, 269, 0, 0, 142,
	0, 139, 0, 0, 140, 270, 141, 271, 272, 273,
	0, 274, 0, 0, 143, 144, 145, 0, 146, 147,
	148, 0, 150, 149, 0, 275, 0, 151, 0, 0,
	152, 0, 0, 153, 0, 154, 155, 156, 158, 276,
	157, 0, 159, 160, 162, 161, 0, 0, 0, 277,
	163, 278, 164, 165, 0, 166, 0, 0, 167, 0,
	0, 168, 279, 0, 169, 0, 280, 170, 171, 172,
	173, 174, 0, 281, 175, 282, 176, 0, 177, 178,
	179, 180, 181, 283, 182, 183, 0, 184, 185, 186,
	187, 188, 190, 191, 189, 192, 193, 194, 195, 0,
	196, 0, 197, 198, 284, 199, 0, 203, 204, 205,
	206, 0, 285, 207, 208, 209, 0, 0, 200, 201,
	211, 0, 212, 286, 287, 213, 0, 219, 214, 215,
	202, 216, 218, 288, 217, 289, 0, 220, 0, 221,
	222, 223, 224, 225, 0, 290, 291, 292, 0, 0,
	226, 227, 293, 294, 0, 228, 229, 230, 231, 0,
	0, 232, 233, 234, 235, 0, 236, 0, 295, 237,
	238, 239, 296, 297, 95, 0, 240, 0, 0, 0,
	0, 241, 242, 243, 244, 245, 0, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 101, 102, 103, 247, 248, 249, 250,
	104, 251, 252, 0, 105, 253, 254, 106, 107, 0,
	0, 255, 256, 257, 0, 108, 258, 0, 0, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	0, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 303, 120, 259, 121, 260, 261, 0, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 262, 127, 128, 129, 263, 264, 0, 0, 0,
	130, 131, 265, 0, 132, 0, 133, 0, 0, 0,
	0, 134, 266, 0, 267, 0, 135, 136, 137, 138,
	786, 269, 0, 0, 142, 0, 139, 0, 0, 140,
	270, 141, 271, 272, 273, 0, 274, 0, 0, 143,
	144, 145, 0, 146, 147, 148, 0, 150, 149, 0,
	275, 0, 151, 0, 0, 152, 0, 0, 153, 0,
	154, 155, 156, 158, 276, 157, 0, 159, 160, 162,
	161, 0, 0, 0, 277, 163, 278, 164, 165, 0,
	166, 0, 0, 167, 0, 0, 168, 279, 0, 169,
	0, 280, 170, 171, 172, 173, 174, 0, 281, 175,
	282, 176, 0, 177, 178, 179, 180, 181, 283, 182,
	183, 0, 184, 185, 186, 187, 188, 190, 191, 189,
	192, 193, 194, 195, 0, 196, 0, 197, 198, 284,
	199, 0, 203, 204, 205, 206, 0, 285, 207, 208,
	209, 0, 210, 200, 201, 211, 0, 212, 286, 287,
	213, 0, 219, 214, 215, 202, 216, 218, 288, 217,
	289, 0, 220, 0, 221, 222, 223, 224, 225, 0,
	290, 291, 292, 0, 0, 226, 227, 293, 294, 0,
	228, 229, 230, 231, 0, 0, 232, 233, 234, 235,
	0, 236, 0, 295, 237, 238, 239, 296, 297, 95,
	0, 240, 0, 0, 0, 0, 241, 242, 243, 244,
	245, 0, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 101, 102,
	103, 247, 248, 249, 250, 104, 251, 252, 0, 105,
	253, 254, 106, 107, 0, 0, 255, 256, 257, 0,
	108, 258, 0, 0, 0, 109, 110, 111, 0, 112,
	0, 113, 114, 115, 0, 0, 116, 117, 0, 0,
	0, 0, 0, 0, 118, 119, 303, 120, 259, 121,
	260, 261, 0, 122, 0, 123, 0, 0, 0, 124,
	125, 0, 126, 0, 0, 0, 262, 127, 128, 129,
	263, 264, 0, 0, 0, 130, 131, 265, 0, 132,
	0, 133, 0, 0, 0, 0, 134, 266, 0, 267,
	0, 135, 136, 137, 138, 781, 269, 0, 0, 142,
	0, 139, 0, 0, 140, 270, 141, 271, 272, 273,
	0, 274, 0, 0, 143, 144, 145, 0, 146, 147,
	148, 0, 150, 149, 0, 275, 0, 151, 0, 0,
	152, 0, 0, 153, 0, 154, 155, 156, 158, 276,
	157, 0, 159, 160, 162, 161, 0, 0, 0, 277,
	163, 278, 164, 165, 0, 166, 0, 0, 167, 0,
	0, 168, 279, 0, 169, 0, 280, 170, 171, 172,
	173, 174, 0, 281, 175, 282, 176, 0, 177, 178,
	179, 180, 181, 283, 182, 183, 0, 184, 185, 186,
	187, 188, 190, 191, 189, 192, 193, 194, 195, 0,
	196, 0, 197, 198, 284, 199, 0, 203, 204, 205,
	206, 0, 285, 207, 208, 209, 0, 210, 200, 201,
	211, 0, 212, 286, 287, 213, 0, 219, 214, 215,
	202, 216, 218, 288, 217, 289, 0, 220, 0, 221,
	222, 223, 224, 225, 0, 290, 291, 292, 0, 0,
	226, 227, 293, 294, 0, 228, 229, 230, 231, 0,
	0, 232, 233, 234, 235, 0, 236, 0, 295, 237,
	238, 239, 296, 297, 95, 0, 240, 0, 0, 0,
	0, 241, 242, 243, 244, 245, 0, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 101, 102, 103, 247, 248, 249, 250,
	104, 251, 252, 0, 105, 253, 254, 106, 107, 0,
	0, 255, 256, 719, 0, 108, 258, 0, 0, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	0, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 303, 120, 259, 121, 260, 261, 0, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 262, 127, 128, 129, 263, 264, 0, 0, 0,
	130, 131, 265, 0, 132, 0, 133, 0, 0, 0,
	0, 134, 266, 0, 267, 0, 135, 136, 137, 138,
	268, 269, 0, 0, 142, 0, 139, 0, 0, 140,
	270, 141, 271, 272, 273, 0, 274, 0, 0, 143,
	144, 145, 0, 146, 147, 148, 0, 150, 149, 0,
	275, 0, 151, 0, 0, 152, 0, 0, 153, 0,
	154, 155, 156, 158, 276, 464, 0, 159, 160, 162,
	161, 0, 0, 0, 277, 163, 278, 164, 165, 0,
	166, 0, 0, 167, 0, 0, 168, 279, 0, 169,
	0, 280, 170, 171, 172, 173, 174, 0, 281, 175,
	282, 176, 0, 177, 178, 179, 180, 181, 283, 182,
	183, 0, 184, 185, 186, 187, 188, 190, 191, 189,
	192, 193, 194, 195, 0, 196, 0, 197, 198, 284,
	199, 0, 203, 204, 205, 206, 0, 285, 207, 208,
	209, 0, 210, 200, 201, 211, 0, 212, 286, 287,
	213, 0, 219, 214, 215, 202, 216, 218, 288, 217,
	289, 0, 220, 0, 221, 222, 223, 224, 225, 0,
	461, 291, 292, 0, 0, 226, 457, 293, 294, 0,
	228, 229, 230, 231, 0, 0, 232, 233, 234, 235,
	0, 236, 0, 295, 237, 238, 239, 296, 297, 95,
	0, 240, 0, 0, 0, 0, 241, 242, 243, 244,
	245, 0, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 101, 102,
	103, 247, 248, 249, 250, 104, 251, 252, 0, 105,
	253, 254, 106, 107, 0, 0, 255, 256, 257, 0,
	108, 258, 0, 0, 0, 109, 110, 111, 0, 112,
	0, 113, 114, 115, 0, 0, 116, 117, 0, 0,
	0, 0, 0, 0, 118, 119, 303, 120, 259, 121,
	260, 261, 0, 122, 0, 123, 0, 0, 0, 124,
	125, 0, 126, 0, 0, 0, 262, 127, 128, 129,
	263, 264, 0, 0, 0, 130, 131, 265, 0, 132,
	0, 133, 0, 0, 0, 0, 134, 266, 0, 267,
	0, 135, 136, 137, 138, 268, 269, 0, 0, 142,
	0, 139, 0, 0, 140, 270, 141, 271, 272, 273,
	0, 274, 0, 0, 143, 144, 145, 0, 146, 147,
	148, 0, 150, 149, 0, 275, 0, 151, 0, 0,
	152, 0, 0, 153, 0, 154, 155, 156, 158, 276,
	464, 0, 159, 160, 162, 161, 0, 0, 0, 277,
	163, 278, 164, 165, 0, 166, 0, 0, 167, 0,
	0, 168, 279, 0, 169, 0, 280, 170, 171, 172,
	173, 174, 0, 281, 175, 282, 176, 0, 177, 178,
	179, 180, 181, 283, 182, 183, 0, 184, 185, 186,
	187, 188, 190, 191, 189, 192, 193, 194, 195, 0,
	196, 0, 197, 198, 284, 199, 0, 203, 204, 205,
	206, 0, 285, 207, 208, 209, 0, 210, 200, 201,
	211, 0, 212, 286, 287, 213, 0, 219, 214, 215,
	202, 216, 218, 288, 217, 289, 0, 220, 0, 221,
	222, 223, 224, 225, 0, 461, 291, 292, 0, 0,
	226, 457, 293, 294, 0, 228, 229, 230, 231, 0,
	0, 232, 233, 234, 235, 0, 236, 0, 295, 237,
	238, 239, 296, 297, 95, 0, 240, 0, 0, 0,
	0, 241, 242, 243, 244, 245, 0, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 101, 102, 103, 247, 248, 249, 250,
	104, 251, 252, 0, 105, 253, 254, 106, 107, 0,
	0, 255, 256, 257, 0, 108, 258, 0, 0, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	0, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 303, 120, 259, 121, 260, 261, 0, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 262, 127, 128, 129, 263, 264, 0, 0, 0,
	130, 131, 265, 0, 132, 0, 133, 0, 0, 0,
	0, 134, 266, 0, 267, 0, 135, 136, 137, 138,
	699, 269, 0, 0, 142, 0, 139, 0, 0, 140,
	270, 141, 271, 272, 273, 0, 274, 0, 0, 143,
	144, 145, 0, 146, 147, 148, 0, 150, 149, 0,
	275, 0, 151, 0, 0, 152, 0, 0, 153, 0,
	154, 155, 156, 158, 276, 157, 0, 159, 160, 162,
	161, 0, 0, 0, 277, 163, 278, 164, 165, 0,
	166, 0, 0, 167, 0, 0, 168, 279, 0, 169,
	0, 280, 170, 171, 172, 173, 174, 0, 281, 175,
	282, 176, 0, 177, 178, 179, 180, 181, 283, 182,
	183, 0, 184, 185, 186, 187, 188, 190, 191, 189,
	192, 193, 194, 195, 0, 196, 0, 197, 198, 284,
	199, 0, 203, 204, 205, 206, 0, 285, 207, 208,
	209, 0, 210, 200, 201, 211, 0, 212, 286, 287,
	213, 0, 219, 214, 215, 202, 216, 218, 288, 217,
	289, 0, 220, 0, 221, 222, 223, 224, 225, 0,
	290, 291, 292, 0, 0, 226, 227, 293, 294, 0,
	228, 229, 230, 231, 0, 0, 232, 233, 234, 235,
	0, 236, 0, 295, 237, 238, 239, 296, 297, 95,
	0, 240, 0, 0, 0, 0, 241, 242, 243, 244,
	245, 0, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 101, 102,
	103, 247, 248, 249, 250, 104, 251, 252, 0, 105,
	253, 254, 106, 107, 0, 0, 255, 256, 257, 0,
	108, 258, 0, 0, 0, 109, 110, 111, 0, 112,
	0, 113, 114, 115, 0, 0, 116, 117, 0, 0,
	0, 0, 0, 0, 118, 119, 303, 120, 259, 121,
	260, 261, 0, 122, 0, 123, 0, 0, 0, 124,
	125, 0, 126, 0, 0, 0, 262, 127, 128, 129,
	263, 264, 0, 0, 0, 130, 131, 265, 0, 132,
	0, 133, 0, 0, 0, 0, 134, 266, 0, 267,
	0, 135, 136, 137, 138, 697, 269, 0, 0, 142,
	0, 139, 0, 0, 140, 270, 141, 271, 272, 273,
	0, 274, 0, 0, 143, 144, 145, 0, 146, 147,
	148, 0, 150, 149, 0, 275, 0, 151, 0, 0,
	152, 0, 0, 153, 0, 154, 155, 156, 158, 276,
	157, 0, 159, 160, 162, 161, 0, 0, 0, 277,
	163, 278, 164, 165, 0, 166, 0, 0, 167, 0,
	0, 168, 279, 0, 169, 0, 280, 170, 171, 172,
	173, 174, 0, 281, 175, 282, 176, 0, 177, 178,
	179, 180, 181, 283, 182, 183, 0, 184, 185, 186,
	187, 188, 190, 191, 189, 192, 193, 194, 195, 0,
	196, 0, 197, 198, 284, 199, 0, 203, 204, 205,
	206, 0, 285, 207, 208, 209, 0, 210, 200, 201,
	211, 0, 212, 286, 287, 213, 0, 219, 214, 215,
	202, 216, 218, 288, 217, 289, 0, 220, 0, 221,
	222, 223, 224, 225, 0, 290, 291, 292, 0, 0,
	226, 227, 293, 294, 0, 228, 229, 230, 231, 0,
	0, 232, 233, 234, 235, 0, 236, 0, 295, 237,
	238, 239, 296, 297, 95, 0, 240, 0, 0, 0,
	0, 241, 242, 243, 244, 245, 0, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 101, 102, 103, 247, 248, 249, 250,
	104, 251, 252, 0, 105, 253, 254, 106, 107, 0,
	0, 255, 256, 257, 0, 108, 258, 0, 0, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	0, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 303, 120, 259, 121, 260, 261, 0, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 262, 127, 128, 129, 263, 264, 0, 0, 0,
	130, 131, 265, 0, 132, 0, 133, 0, 0, 0,
	0, 134, 266, 0, 267, 0, 135, 136, 137, 138,
	694, 269, 0, 0, 142, 0, 139, 0, 0, 140,
	270, 141, 271, 272, 273, 0, 274, 0, 0, 143,
	144, 145, 0, 146, 147, 148, 0, 150, 149, 0,
	275, 0, 151, 0, 0, 152, 0, 0, 153, 0,
	154, 155, 156, 158, 276, 157, 0, 159, 160, 162,
	161, 0, 0, 0, 277, 163, 278, 164, 165, 0,
	166, 0, 0, 167, 0, 0, 168, 279, 0, 169,
	0, 280, 170, 171, 172, 173, 174, 0, 281, 175,
	282, 176, 0, 177, 178, 179, 180, 181, 283, 182,
	183, 0, 184, 185, 186, 187, 188, 190, 191, 189,
	192, 193, 194, 195, 0, 196, 0, 197, 198, 284,
	199, 0, 203, 204, 205, 206, 0, 285, 207, 208,
	209, 0, 210, 200, 201, 211, 0, 212, 286, 287,
	213, 0, 219, 214, 215, 202, 216, 218, 288, 217,
	289, 0, 220, 0, 221, 222, 223, 224, 225, 0,
	290, 291, 292, 0, 0, 226, 227, 293, 294, 0,
	228, 229, 230, 231, 0, 0, 232, 233, 234, 235,
	0, 236, 0, 295, 237, 238, 239, 296, 297, 95,
	0, 240, 0, 0, 0, 0, 241, 242, 243, 244,
	245, 0, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 101, 102,
	103, 247, 248, 249, 250, 104, 251, 252, 0, 105,
	253, 254, 106, 107, 0, 0, 255, 256, 257, 0,
	108, 258, 0, 0, 0, 109, 110, 111, 0, 112,
	0, 113, 114, 115, 0, 0, 116, 117, 0, 0,
	0, 0, 0, 0, 118, 119, 303, 120, 259, 121,
	260, 261, 0, 122, 0, 123, 0, 0, 0, 124,
	125, 0, 126, 0, 0, 0, 262, 127, 128, 129,
	263, 264, 0, 0, 0, 130, 131, 265, 0, 132,
	0, 133, 0, 0, 0, 0, 134, 266, 0, 267,
	0, 135, 136, 137, 138, 691, 269, 0, 0, 142,
	0, 139, 0, 0, 140, 270, 141, 271, 272, 273,
	0, 274, 0, 0, 143, 144, 145, 0, 146, 147,
	148, 0, 150, 149, 0, 275, 0, 151, 0, 0,
	152, 0, 0, 153, 0, 154, 155, 156, 158, 276,
	157, 0, 159, 160, 162, 161, 0, 0, 0, 277,
	163, 278, 164, 165, 0, 166, 0, 0, 167, 0,
	0, 168, 279, 0, 169, 0, 280, 170, 171, 172,
	173, 174, 0, 281, 175, 282, 176, 0, 177, 178,
	179, 180, 181, 283, 182, 183, 0, 184, 185, 186,
	187, 188, 190, 191, 189, 192, 193, 194, 195, 0,
	196, 0, 197, 198, 284, 199, 0, 203, 204, 205,
	206, 0, 285, 207, 208, 209, 0, 210, 200, 201,
	211, 0, 212, 286, 287, 213, 0, 219, 214, 215,
	202, 216, 218, 288, 217, 289, 0, 220, 0, 221,
	222, 223, 224, 225, 0, 290, 291, 292, 0, 0,
	226, 227, 293, 294, 0, 228, 229, 230, 231, 0,
	0, 232, 233, 234, 235, 0, 236, 0, 295, 237,
	238, 239, 296, 297, 95, 0, 240, 0, 0, 0,
	0, 241, 242, 243, 244, 245, 0, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 101, 102, 103, 247, 248, 249, 250,
	104, 251, 252, 0, 105, 253, 254, 106, 107, 0,
	0, 255, 256, 257, 0, 108, 258, 0, 0, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	0, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 303, 120, 259, 121, 260, 261, 0, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 262, 127, 128, 129, 263, 264, 0, 0, 0,
	130, 131, 265, 0, 132, 0, 133, 0, 0, 0,
	0, 134, 266, 0, 267, 0, 135, 136, 137, 138,
	689, 269, 0, 0, 142, 0, 139, 0, 0, 140,
	270, 141, 271, 272, 273, 0, 274, 0, 0, 143,
	144, 145, 0, 146, 147, 148, 0, 150, 149, 0,
	275, 0, 151, 0, 0, 152, 0, 0, 153, 0,
	154, 155, 156, 158, 276, 157, 0, 159, 160, 162,
	161, 0, 0, 0, 277, 163, 278, 164, 165, 0,
	166, 0, 0, 167, 0, 0, 168, 279, 0, 169,
	0, 280, 170, 171, 172, 173, 174, 0, 281, 175,
	282, 176, 0, 177, 178, 179, 180, 181, 283, 182,
	183, 0, 184, 185, 186, 187, 188, 190, 191, 189,
	192, 193, 194, 195, 0, 196, 0, 197, 198, 284,
	199, 0, 203, 204, 205, 206, 0, 285, 207, 208,
	209, 0, 210, 200, 201, 211, 0, 212, 286, 287,
	213, 0, 219, 214, 215, 202, 216, 218, 288, 217,
	289, 0, 220, 0, 221, 222, 223, 224, 225, 0,
	290, 291, 292, 0, 0, 226, 227, 293, 294, 0,
	228, 229, 230, 231, 0, 0, 232, 233, 234, 235,
	0, 236, 0, 295, 237, 238, 239, 296, 297, 95,
	0, 240, 0, 0, 0, 0, 241, 242, 243, 244,
	245, 0, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 101, 102,
	103, 247, 248, 249, 250, 104, 251, 252, 0, 105,
	253, 254, 106, 107, 0, 0, 255, 256, 257, 0,
	108, 258, 0, 0, 0, 109, 110, 111, 0, 112,
	0, 113, 114, 115, 0, 0, 116, 117, 0, 0,
	0, 0, 0, 0, 118, 119, 303, 120, 259, 121,
	260, 261, 0, 122, 0, 123, 0, 0, 0, 124,
	125, 0, 126, 0, 0, 0, 262, 127, 128, 129,
	263, 264, 0, 0, 0, 130, 131, 265, 0, 132,
	0, 133, 0, 0, 0, 0, 134, 266, 0, 267,
	0, 135, 136, 137, 138, 567, 269, 0, 0, 142,
	0, 139, 0, 0, 140, 270, 141, 271, 272, 273,
	0, 274, 0, 0, 143, 144, 145, 0, 146, 147,
	148, 0, 150, 149, 0, 275, 0, 151, 0, 0,
	152, 0, 0, 153, 0, 154, 155, 156, 158, 276,
	157, 0, 159, 160, 162, 161, 0, 0, 0, 277,
	163, 278, 164, 165, 0, 166, 0, 0, 167, 0,
	0, 168, 279, 0, 169, 0, 280, 170, 171, 172,
	173, 174, 0, 281, 175, 282, 176, 0, 177, 178,
	179, 180, 181, 283, 182, 183, 0, 184, 185, 186,
	187, 188, 190, 191, 189, 192, 193, 194, 195, 0,
	196, 0, 197, 198, 284, 199, 0, 203, 204, 205,
	206, 0, 285, 207, 208, 209, 0, 210, 200, 201,
	211, 0, 212, 286, 287, 213, 0, 219, 214, 215,
	202, 216, 218, 288, 217, 289, 0, 220, 0, 221,
	222, 223, 224, 225, 0, 290, 291, 292, 0, 0,
	226, 227, 293, 294, 0, 228, 229, 230, 231, 0,
	0, 232, 233, 234, 235, 0, 236, 0, 295, 237,
	238, 239, 296, 297, 95, 0, 240, 0, 0, 0,
	0, 241, 242, 243, 244, 245, 0, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 101, 102, 103, 247, 248, 249, 250,
	104, 251, 252, 0, 105, 253, 254, 106, 107, 0,
	0, 255, 256, 257, 0, 108, 258, 0, 0, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	0, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 303, 120, 259, 121, 260, 261, 0, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 262, 127, 128, 129, 263, 264, 0, 0, 0,
	130, 131, 265, 0, 132, 0, 133, 0, 0, 0,
	0, 134, 266, 0, 267, 0, 135, 136, 137, 138,
	268, 269, 0, 0, 142, 0, 139, 0, 0, 140,
	270, 141, 271, 272, 273, 0, 274, 0, 0, 143,
	144, 145, 0, 146, 147, 148, 0, 150, 149, 0,
	275, 0, 151, 0, 0, 152, 0, 0, 153, 0,
	154, 155, 156, 158, 276, 157, 0, 159, 160, 162,
	161, 0, 0, 0, 277, 163, 278, 164, 165, 0,
	166, 0, 0, 167, 0, 0, 168, 279, 0, 169,
	0, 280, 170, 171, 172, 173, 174, 0, 281, 175,
	282, 176, 0, 177, 178, 179, 180, 181, 283, 548,
	183, 0, 184, 185, 186, 187, 188, 190, 191, 189,
	192, 193, 194, 195, 0, 196, 0, 197, 198, 284,
	199, 0, 203, 204, 205, 206, 0, 285, 207, 208,
	209, 0, 210, 200, 201, 211, 0, 212, 286, 287,
	213, 0, 219, 214, 215, 202, 216, 218, 288, 217,
	289, 0, 220, 0, 221, 222, 223, 224, 225, 0,
	290, 291, 292, 0, 0, 226, 227, 293, 294, 0,
	228, 229, 230, 231, 0, 0, 232, 233, 234, 235,
	0, 236, 0, 295, 237, 238, 239, 296, 297, 95,
	0, 240, 0, 0, 0, 0, 241, 242, 243, 244,
	245, 0, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 0, 246, 0, 0, 0, 0, 101, 102,
	103, 247, 248, 249, 250, 104, 251, 252, 0, 105,
	253, 254, 106, 107, 0, 0, 255, 256, 257, 0,
	455, 258, 0, 0, 0, 109, 110, 111, 0, 112,
	0, 113, 114, 115, 0, 0, 116, 117, 0, 0,
	0, 0, 0, 0, 118, 119, 303, 120, 259, 121,
	260, 261, 0, 122, 0, 123, 0, 0, 0, 124,
	125, 0, 126, 0, 0, 0, 262, 127, 128, 129,
	263, 264, 0, 0, 0, 130, 131, 265, 0, 132,
	0, 133, 0, 0, 0, 0, 134, 266, 0, 267,
	0, 135, 136, 137, 138, 268, 269, 0, 0, 142,
	0, 139, 0, 0, 140, 270, 141, 271, 272, 273,
	0, 274, 0, 0, 143, 144, 145, 0, 146, 147,
	148, 0, 150, 149, 0, 275, 0, 151, 0, 0,
	453, 0, 0, 153, 0, 154, 155, 156, 158, 276,
	464, 0, 159, 160, 162, 161, 0, 0, 0, 277,
	163, 278, 164, 165, 0, 166, 0, 0, 167, 0,
	0, 168, 279, 0, 169, 0, 280, 170, 171, 172,
	173, 174, 0, 281, 175, 282, 176, 0, 177, 178,
	179, 180, 181, 283, 182, 183, 0, 184, 185, 186,
	187, 188, 190, 191, 189, 192, 193, 194, 195, 0,
	196, 0, 197, 198, 456, 199, 0, 203, 204, 205,
	206, 0, 285, 207, 454, 209, 0, 210, 200, 201,
	211, 0, 212, 286, 287, 213, 0, 219, 214, 215,
	202, 216, 218, 288, 217, 289, 0, 220, 0, 221,
	222, 223, 224, 225, 0, 461, 291, 292, 0, 0,
	226, 457, 293, 294, 0, 228, 229, 230, 231, 0,
	0, 232, 233, 234, 235, 0, 236, 0, 295, 237,
	238, 239, 296, 297, 95, 0, 240, 0, 0, 0,
	0, 241, 242, 243, 244, 245, 0, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 101, 102, 103, 247, 248, 249, 250,
	104, 251, 252, 0, 105, 253, 254, 106, 107, 0,
	0, 255, 256, 257, 0, 108, 258, 0, 0, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	0, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 303, 120, 259, 121, 260, 261, 0, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 262, 127, 128, 129, 263, 264, 0, 0, 0,
	130, 131, 265, 0, 132, 0, 133, 0, 0, 0,
	0, 134, 266, 0, 267, 0, 135, 136, 137, 138,
	268, 269, 0, 0, 142, 0, 139, 0, 0, 140,
	270, 141, 271, 272, 273, 0, 274, 0, 0, 143,
	144, 145, 0, 146, 147, 148, 0, 150, 149, 0,
	275, 0, 151, 0, 0, 152, 0, 0, 153, 0,
	154, 155, 156, 158, 276, 157, 0, 159, 160, 162,
	161, 0, 0, 0, 277, 163, 278, 164, 165, 0,
	166, 0, 0, 167, 0, 0, 168, 279, 0, 169,
	0, 280, 170, 171, 0, 173, 174, 0, 281, 175,
	282, 176, 0, 177, 178, 179, 0, 181, 283, 182,
	183, 0, 184, 185, 186, 187, 188, 190, 191, 189,
	192, 193, 194, 195, 0, 196, 0, 197, 198, 284,
	0, 0, 203, 204, 205, 206, 0, 285, 207, 208,
	209, 0, 210, 200, 201, 211, 0, 212, 286, 287,
	213, 0, 219, 214, 215, 202, 216, 218, 288, 217,
	289, 0, 220, 0, 221, 222, 223, 224, 225, 0,
	290, 291, 292, 0, 0, 226, 227, 293, 294, 0,
	228, 229, 230, 231, 0, 0, 232, 233, 234, 235,
	0, 236, 0, 295, 237, 238, 239, 296, 297, 0,
	0, 240, 0, 0, 0, 0, 241, 242, 243, 244,
	245, 847, 848, 0, 867, 868, 869, 877, 878, 879,
	0, 0, 0, 0, 0, 0, 0, 870, 0, 0,
	0, 0, 0, 0, 850, 0, 0, 881, 0, 847,
	848, 0, 867, 868, 869, 877, 878, 879, 0, 0,
	0, 0, 0, 0, 0, 870, 0, 0, 849, 0,
	0, 0, 850, 0, 864, 881, 0, 0, 847, 848,
	0, 867, 868, 869, 877, 878, 879, 0, 0, 0,
	0, 0, 0, 0, 870, 0, 849, 0, 0, 0,
	0, 850, 864, 0, 881, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 855, 849, 0, 0, 0, 0,
	0, 864, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 874, 882, 0, 0, 0, 0, 0,
	0, 0, 855, 0, 0, 0, 0, 0, 0, 880,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 874, 882, 0, 872, 0, 0, 0, 0, 0,
	865, 855, 0, 0, 0, 0, 0, 880, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	874, 882, 872, 0, 0, 871, 0, 0, 865, 0,
	0, 0, 0, 0, 0, 0, 880, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 872, 0, 871, 0, 0, 0, 865, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 866, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 871, 0, 0, 0, 0, 875, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	866, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 875, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 866,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 875, 0, 0, 0, 0, 0,
	0, 0, 873, 0, 0, 861, 862, 863, 876, 0,
	860, 858, 859, 851, 852, 853, 854, 856, 857, 0,
	0, 0, 0, 2076, 1510, 1511, 0, 1528, 1529, 1530,
	873, 0, 0, 861, 862, 863, 876, 0, 860, 858,
	859, 851, 852, 853, 854, 856, 857, 0, 0, 0,
	0, 2010, 0, 0, 0, 0, 0, 0, 0, 873,
	0, 0, 861, 862, 863, 876, 0, 860, 858, 859,
	851, 852, 853, 854, 856, 857, 0, 1525, 847, 848,
	2005, 867, 868, 869, 877, 878, 879, 0, 0, 0,
	0, 0, 0, 0, 870, 0, 0, 0, 0, 0,
	0, 850, 0, 0, 881, 0, 847, 848, 0, 867,
	868, 869, 877, 878, 879, 0, 0, 0, 0, 0,
	0, 0, 870, 0, 0, 849, 0, 1516, 0, 850,
	0, 864, 881, 0, 0, 847, 848, 0, 867, 868,
	869, 877, 878, 879, 0, 0, 0, 1532, 0, 0,
	0, 870, 0, 849, 0, 0, 0, 0, 850, 864,
	0, 881, 1531, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 855, 849, 1526, 0, 0, 0, 0, 864, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	874, 882, 0, 0, 0, 0, 0, 0, 0, 855,
	0, 0, 0, 0, 0, 0, 880, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 874, 882,
	0, 872, 0, 0, 0, 0, 0, 865, 855, 0,
	0, 0, 0, 0, 880, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1527, 0, 874, 882, 872,
	0, 0, 871, 0, 0, 865, 0, 0, 0, 0,
	0, 0, 0, 880, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 872, 0,
	871, 0, 0, 0, 865, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 866,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 871,
	0, 0, 0, 0, 875, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 866, 1522, 1523,
	1524, 0, 0, 1521, 1519, 1520, 1512, 1513, 1514, 1515,
	1517, 1518, 875, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 866, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 875, 0, 0, 0, 0, 0, 0, 0, 873,
	0, 0, 861, 862, 863, 876, 0, 860, 858, 859,
	851, 852, 853, 854, 856, 857, 0, 0, 0, 0,
	2001, 0, 0, 0, 0, 0, 0, 873, 0, 0,
	861, 862, 863, 876, 0, 860, 858, 859, 851, 852,
	853, 854, 856, 857, 0, 0, 0, 0, 1978, 0,
	0, 0, 0, 0, 0, 0, 873, 0, 0, 861,
	862, 863, 876, 0, 860, 858, 859, 851, 852, 853,
	854, 856, 857, 0, 0, 847, 848, 1909, 867, 868,
	869, 877, 878, 879, 0, 0, 0, 0, 0, 0,
	0, 870, 0, 0, 0, 0, 0, 0, 850, 0,
	0, 881, 0, 847, 848, 0, 867, 868, 869, 877,
	878, 879, 0, 0, 0, 0, 0, 0, 0, 870,
	0, 0, 849, 0, 0, 0, 850, 0, 864, 881,
	0, 0, 847, 848, 0, 867, 868, 869, 877, 878,
	879, 0, 0, 0, 0, 0, 0, 0, 870, 0,
	849, 0, 0, 0, 0, 850, 864, 0, 881, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 855, 849,
	0, 0, 0, 0, 0, 864, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 874, 882, 0,
	0, 0, 0, 0, 0, 0, 855, 0, 0, 0,
	0, 0, 0, 880, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 874, 882, 0, 872, 0,
	0, 0, 0, 0, 865, 855, 0, 0, 0, 0,
	0, 880, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 874, 882, 872, 0, 0, 871,
	0, 0, 865, 0, 0, 0, 0, 0, 0, 0,
	880, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 872, 0, 871, 0, 0,
	0, 865, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 866, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 871, 0, 0, 0,
	0, 875, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 866, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 875,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 866, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 875, 0,
	0, 0, 0, 0, 0, 0, 873, 0, 0, 861,
	862, 863, 876, 0, 860, 858, 859, 851, 852, 853,
	854, 856, 857, 0, 0, 0, 0, 1908, 0, 0,
	0, 0, 0, 0, 873, 0, 0, 861, 862, 863,
	876, 0, 860, 858, 859, 851, 852, 853, 854, 856,
	857, 0, 0, 0, 0, 1847, 0, 0, 0, 0,
	0, 0, 0, 873, 0, 0, 861, 862, 863, 876,
	0, 860, 858, 859, 851, 852, 853, 854, 856, 857,
	0, 0, 847, 848, 1800, 867, 868, 869, 877, 878,
	879, 0, 0, 0, 0, 0, 0, 0, 870, 0,
	0, 0, 0, 0, 0, 850, 0, 0, 881, 0,
	847, 848, 0, 867, 868, 869, 877, 878, 879, 0,
	0, 0, 0, 0, 0, 0, 870, 0, 0, 849,
	0, 0, 0, 850, 0, 864, 881, 0, 0, 847,
	848, 0, 867, 868, 869, 877, 878, 879, 0, 0,
	0, 0, 0, 0, 0, 870, 0, 849, 0, 0,
	0, 0, 850, 864, 0, 881, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 855, 849, 0, 0, 0,
	0, 0, 864, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 874, 882, 0, 0, 0, 0,
	0, 0, 0, 855, 0, 0, 0, 0, 0, 0,
	880, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 874, 882, 0, 872, 0, 0, 0, 0,
	0, 865, 855, 0, 0, 0, 0, 0, 880, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 874, 882, 872, 0, 0, 871, 0, 0, 865,
	0, 0, 0, 0, 0, 0, 0, 880, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 872, 0, 871, 0, 0, 0, 865, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 866, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 871, 0, 0, 0, 0, 875, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 866, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 875, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	866, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 875, 0, 0, 0, 0,
	0, 0, 0, 873, 0, 0, 861, 862, 863, 876,
	0, 860, 858, 859, 851, 852, 853, 854, 856, 857,
	0, 0, 0, 0, 1720, 0, 0, 0, 0, 0,
	0, 873, 0, 0, 861, 862, 863, 876, 0, 860,
	858, 859, 851, 852, 853, 854, 856, 857, 0, 0,
	0, 0, 1696, 0, 0, 0, 0, 0, 0, 0,
	873, 0, 0, 861, 862, 863, 876, 0, 860, 858,
	859, 851, 852, 853, 854, 856, 857, 0, 0, 847,
	848, 1228, 867, 868, 869, 877, 878, 879, 0, 0,
	0, 0, 0, 0, 0, 870, 0, 0, 0, 0,
	0, 0, 850, 0, 0, 881, 0, 847, 848, 0,
	867, 868, 869, 877, 878, 879, 0, 0, 0, 0,
	0, 0, 0, 870, 0, 0, 849, 0, 0, 0,
	850, 0, 864, 881, 0, 0, 847, 848, 0, 867,
	868, 869, 877, 878, 879, 0, 0, 0, 0, 0,
	0, 0, 870, 0, 849, 0, 0, 0, 0, 850,
	864, 0, 881, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 855, 849, 0, 0, 0, 0, 0, 864,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 874, 882, 0, 0, 0, 0, 0, 0, 0,
	855, 2178, 0, 0, 0, 0, 0, 880, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 874,
	882, 0, 872, 0, 0, 0, 0, 0, 865, 855,
	0, 1542, 0, 0, 1541, 880, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 874, 882,
	872, 0, 0, 871, 0, 0, 865, 0, 0, 0,
	0, 0, 0, 0, 880, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 872,
	0, 871, 0, 0, 0, 865, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2177, 0, 0, 0,
	866, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	871, 0, 0, 0, 0, 875, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 866, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 875, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 866, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 875, 0, 0, 0, 0, 0, 0, 0,
	873, 0, 0, 861, 862, 863, 876, 0, 860, 858,
	859, 851, 852, 853, 854, 856, 857, 0, 0, 1472,
	0, 0, 0, 0, 0, 0, 0, 0, 873, 0,
	0, 861, 862, 863, 876, 0, 860, 858, 859, 851,
	852, 853, 854, 856, 857, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 873, 0, 0,
	861, 862, 863, 876, 0, 860, 858, 859, 851, 852,
	853, 854, 856, 857, 847, 848, 0, 867, 868, 869,
	877, 878, 879, 0, 0, 0, 0, 0, 0, 0,
	870, 0, 0, 0, 0, 1392, 0, 850, 0, 0,
	881, 0, 0, 0, 0, 0, 1114, 0, 0, 0,
	0, 0, 847, 848, 0, 867, 868, 869, 877, 878,
	879, 849, 0, 0, 0, 0, 0, 864, 870, 0,
	0, 0, 1113, 0, 0, 850, 0, 0, 881, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1393, 0, 0, 0, 849,
	0, 0, 0, 0, 0, 864, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 855, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 874, 882, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 880, 0, 0, 855, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 872, 0, 0,
	0, 0, 0, 865, 874, 882, 35, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 36, 63, 0,
	880, 0, 0, 0, 0, 0, 0, 0, 871, 0,
	38, 0, 0, 0, 0, 872, 0, 0, 0, 0,
	0, 865, 0, 0, 65, 0, 0, 0, 0, 0,
	39, 0, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 871, 0, 0, 0,
	0, 52, 0, 0, 0, 866, 0, 0, 47, 0,
	0, 66, 0, 0, 0, 51, 0, 48, 0, 0,
	875, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 53, 0, 0, 0, 0, 0, 49,
	0, 0, 0, 866, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 875, 0,
	847, 848, 0, 867, 868, 869, 877, 878, 879, 0,
	0, 0, 0, 0, 0, 0, 870, 0, 0, 0,
	0, 0, 0, 850, 0, 873, 881, 0, 861, 862,
	863, 876, 0, 860, 858, 859, 851, 852, 853, 854,
	856, 857, 0, 0, 0, 0, 0, 849, 0, 0,
	0, 0, 0, 864, 0, 0, 0, 0, 0, 54,
	0, 0, 0, 873, 50, 0, 861, 862, 863, 876,
	0, 860, 858, 859, 851, 852, 853, 854, 856, 857,
	0, 0, 68, 69, 37, 0, 55, 0, 56, 0,
	67, 0, 0, 0, 0, 57, 0, 0, 0, 79,
	0, 0, 0, 855, 0, 60, 0, 0, 62, 0,
	0, 0, 0, 0, 0, 0, 0, 64, 0, 0,
	0, 0, 874, 882, 0, 0, 81, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 880, 0,
	0, 0, 0, 70, 0, 0, 0, 0, 0, 0,
	0, 0, 71, 872, 0, 0, 0, 0, 0, 865,
	82, 0, 0, 0, 0, 0, 0, 0, 77, 0,
	0, 0, 0, 0, 0, 78, 0, 0, 0, 0,
	0, 0, 0, 0, 871, 543, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 847, 848, 0, 867,
	868, 869, 877, 878, 879, 0, 0, 0, 0, 0,
	0, 0, 870, 0, 0, 0, 0, 0, 0, 850,
	0, 866, 881, 0, 847, 848, 0, 867, 868, 869,
	877, 878, 879, 0, 0, 0, 875, 0, 0, 0,
	870, 0, 0, 849, 0, 0, 0, 850, 0, 864,
	881, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 849, 0, 0, 0, 0, 0, 864, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 855,
	0, 873, 0, 0, 861, 862, 863, 876, 0, 860,
	858, 859, 851, 852, 853, 854, 856, 857, 874, 882,
	0, 0, 0, 0, 0, 0, 0, 855, 0, 0,
	0, 0, 1548, 0, 880, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 874, 882, 0, 872,
	0, 0, 0, 0, 0, 865, 0, 0, 0, 0,
	0, 0, 880, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 872, 0, 0,
	871, 0, 0, 865, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1510,
	1511, 0, 1528, 1529, 1530, 0, 0, 0, 871, 0,
	0, 0, 0, 0, 0, 1688, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 866, 0, 0,
	847, 848, 0, 867, 868, 869, 877, 878, 879, 0,
	0, 0, 875, 0, 0, 0, 870, 0, 0, 0,
	1543, 0, 1525, 850, 0, 866, 881, 0, 0, 0,
	0, 0, 0, 0, 0, 1700, 0, 0, 0, 0,
	875, 0, 0, 0, 0, 0, 0, 849, 0, 0,
	0, 0, 0, 864, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1516, 0, 0, 0, 0, 873, 0, 0,
	861, 862, 863, 876, 0, 860, 858, 859, 851, 852,
	853, 854, 856, 857, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 855, 0, 873, 0, 1531, 861, 862,
	863, 876, 0, 860, 858, 859, 851, 852, 853, 854,
	856, 857, 874, 882, 0, 0, 0, 0, 1526, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 880, 0,
	0, 0, 0, 0, 847, 848, 0, 867, 868, 869,
	877, 878, 879, 872, 0, 0, 0, 0, 0, 865,
	870, 0, 0, 0, 0, 0, 0, 850, 0, 0,
	881, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 871, 0, 0, 0, 0, 0,
	0, 849, 0, 0, 0, 0, 0, 864, 0, 0,
	1527, 0, 0, 0, 0, 0, 0, 847, 848, 0,
	867, 868, 869, 877, 878, 879, 0, 0, 0, 0,
	0, 0, 0, 870, 0, 0, 0, 1501, 0, 0,
	850, 866, 0, 881, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 875, 855, 0, 0,
	0, 0, 0, 0, 849, 0, 0, 0, 0, 0,
	864, 0, 0, 0, 0, 0, 874, 882, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 880, 1522, 1523, 1524, 0, 0, 1521, 1519,
	1520, 1512, 1513, 1514, 1515, 1517, 1518, 872, 0, 0,
	0, 0, 0, 865, 0, 0, 0, 0, 0, 0,
	855, 873, 0, 0, 861, 862, 863, 876, 0, 860,
	858, 859, 851, 852, 853, 854, 856, 857, 871, 874,
	882, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1508, 0, 0, 0, 880, 0, 0, 0, 0,
	0, 847, 848, 0, 867, 868, 869, 877, 878, 879,
	872, 0, 0, 0, 0, 0, 865, 870, 0, 0,
	0, 0, 0, 0, 850, 866, 0, 881, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	875, 871, 0, 0, 0, 0, 0, 0, 849, 0,
	0, 0, 0, 0, 864, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 866, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 875, 855, 873, 0, 0, 861, 862,
	863, 876, 0, 860, 858, 859, 851, 852, 853, 854,
	856, 857, 0, 874, 882, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 880,
	847, 848, 0, 867, 868, 869, 877, 878, 879, 0,
	0, 0, 0, 0, 872, 0, 870, 0, 0, 0,
	865, 0, 0, 850, 0, 0, 881, 0, 873, 0,
	0, 861, 862, 863, 876, 0, 860, 858, 859, 851,
	852, 853, 854, 856, 857, 871, 0, 849, 0, 0,
	0, 847, 848, 864, 867, 868, 869, 877, 878, 879,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 850, 0, 0, 881, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 866, 0, 0, 0, 0, 0, 849, 0,
	0, 0, 0, 855, 864, 847, 848, 875, 867, 868,
	869, 877, 878, 879, 0, 0, 0, 0, 0, 0,
	0, 0, 874, 882, 0, 0, 0, 0, 850, 0,
	0, 881, 0, 0, 0, 0, 0, 0, 880, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 849, 872, 855, 0, 0, 0, 864, 865,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 873, 874, 882, 861, 862, 863, 876, 0,
	860, 858, 859, 851, 852, 853, 854, 856, 857, 880,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 872, 0, 0, 0, 855, 0,
	865, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 874, 882, 0,
	0, 866, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 875, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 872, 0,
	0, 0, 0, 0, 865, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 866, 0, 0, 0, 998, 990, 1015, 982,
	1006, 1005, 0, 0, 984, 983, 0, 875, 0, 0,
	1017, 1016, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 873, 0, 0, 861, 862, 863, 876, 0, 860,
	858, 859, 851, 852, 853, 854, 856, 857, 0, 0,
	0, 0, 1011, 0, 1003, 1002, 866, 0, 0, 0,
	0, 0, 0, 1001, 0, 0, 0, 0, 0, 0,
	0, 875, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1000, 873, 0, 0, 861, 862, 863, 876, 0,
	860, 858, 859, 851, 852, 853, 854, 856, 857, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 993,
	992, 994, 995, 996, 0, 1014, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 873, 0, 0, 861,
	862, 863, 876, 986, 860, 858, 859, 851, 852, 853,
	854, 856, 857, 0, 0, 1004, 0, 0, 0, 991,
	998, 990, 1015, 982, 1006, 1005, 0, 0, 984, 983,
	0, 0, 0, 0, 1017, 1016, 0, 0, 0, 0,
	0, 0, 0, 466, 0, 0, 0, 999, 0, 0,
	0, 1163, 1161, 1162, 1165, 1164, 0, 0, 0, 0,
	0, 471, 0, 0, 0, 0, 1011, 0, 1003, 1002,
	0, 0, 0, 472, 0, 0, 987, 1001, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 997, 988, 0,
	0, 0, 0, 0, 473, 1000, 0, 1019, 0, 474,
	0, 0, 0, 0, 479, 480, 0, 985, 491, 0,
	1012, 1013, 0, 0, 0, 0, 0, 0, 0, 0,
	469, 475, 0, 993, 992, 994, 995, 996, 0, 1014,
	0, 0, 989, 0, 0, 0, 0, 1018, 0, 0,
	0, 0, 494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 986, 0, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 0, 1004,
	0, 0, 0, 991, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	484, 0, 0, 481, 486, 0, 0, 0, 0, 0,
	0, 999, 0, 0, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 467, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	987, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 997, 988, 0, 0, 0, 0, 0, 0, 0,
	0, 1019, 0, 482, 0, 0, 0, 0, 0, 0,
	0, 985, 0, 0, 1012, 1013, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 989, 0, 485, 487,
	468, 1018, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 488, 0, 493, 0, 0, 0, 489,
	0, 0, 0, 0, 470, 490, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	492,
}
var sqlPact = [...]int{

	29773, -1000, 33, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 645, 17315, 17315, 1013, 21585,
	-1000, -1000, -1000, -1000, -1000, -1000, 752, 770, 2139, 5409,
	21585, 21585, 21280, 977, 1166, 1160, 977, 23110, -1000, -1000,
	27075, -1000, 31309, 479, 496, 479, 479, 487, 23110, 1060,
	665, 14227, 653, 138, -1000, 789, 52, 26770, 21585, 1481,
	31, 19450, 250, 29773, 20975, 26465, 21585, 20670, 609, 28,
	17925, 21585, -1000, 36, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1299, 11022,
	11022, 298, 36, -1000, 1298, 1173, 1167, 19450, 26160, 25855,
	25550, 25245, 24940, -1000, 12957, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 825, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	295, 294, -1000, 20365, -1000, 1022, -1000, 30, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 11022, 11022, 1005, -1000,
	21585, -1000, -1000, 24635, 24330, 738, 292, 1016, -1000, -1000,
	540, 372, -1000, -1000, 13910, 43, -1000, -1000, -1000, -1000,
	1308, 1490, 17010, 795, 1297, -1000, 996, 1296, 1295, 1294,
	1293, 1292, -1000, 788, -1000, 632, 516, -1000, 1291, 370,
	831, 465, -1000, 1290, 1287, 1016, -1000, 1016, -1000, -1000,
	-1000, 585, 23110, -1000, -1000, -1000, -1000, -1000, 19450, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1722,
	-1000, -1000, -1000, -1000, 1736, -1000, -1000, -1000, -1000, 24025,
	21585, 21585, 1199, 23720, -1000, 789, -1000, -1000, -1000, 1103,
	1478, 1478, 1478, 1517, 148, 147, 138, 23, 21585, -1000,
	291, 23, 9371, 9371, -1000, -1000, 250, -1000, 191, 16388,
	-1000, 7721, -1000, 874, 1385, 459, 750, 1381, -148, 885,
	882, 1372, 17010, 17925, 28, 4, -1000, -1000, -1000, 5092,
	17010, 30701, -1000, 11022, 11022, 11022, 11022, 11022, 928, 318,
	-1000, 290, 289, 6387, -1000, -1000, 1733, -1000, -1000, -1000,
	153, -1000, -1000, 11022, 36, -1000, -1000, -1000, -1000, 285,
	1751, -1000, 486, -1000, -1000, -1000, 377, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1307, 282, 280, -1000,
	-1000, -1000, -1000, 279, 276, 275, 274, 269, 268, 267,
	261, 260, 259, 258, 256, 255, 254, 253, 910, -1000,
	426, -1000, -1000, 426, 426, -1000, 241, 241, 242, -1000,
	-1000, -1000, -1000, 241, -1000, -1000, -1000, 360, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 252, 30701, 724, 15460, 36,
	-1000, -1000, -1000, 19450, 21585, 21585, 758, 23415, -1000, 1369,
	123, 1368, -1000, 122, 1363, -1000, 122, 1358, 4, 1356,
	27, -1000, -1000, 250, 20060, 21585, 1557, 31253, -1000, 11022,
	-1000, -1000, 17315, 1148, 30701, 30701, 17315, -1000, -1000, 1556,
	-1000, 21585, 11022, 25, -1000, -1000, -1000, -1000, 1120, 1222,
	511, 13593, 13276, 1455, 1289, -1000, -1000, -1000, 42, 5409,
	296, 732, -1000, -1000, -1000, 19755, -1000, -1000, 21585, 1305,
	17315, 21585, 21585, 21585, 21585, 21585, -1000, -1000, -1000, 510,
	1304, 21585, -1000, 1119, -1000, -1000, 21585, 21585, 808, 662,
	-1000, 25, -1000, 23110, -1000, 126, -1000, -1000, -1000, -1000,
	245, 1088, 383, 154, 22805, 383, 1084, -1000, 1103, -1000,
	1031, 1171, 10032, 1174, 11022, 138, -1000, -1000, 138, 138,
	11022, -1000, -1000, 21585, 23, 1555, 21585, 79, -1000, 29662,
	-1000, 79, -1000, -1000, -1000, 21585, 21, -1000, 30701, -1000,
	-21, 743, -1000, 18840, 1499, 1497, 1467, 19450, 1533, 52,
	1282, 1532, 52, 1275, 581, 21585, 21585, 576, 574, 19450,
	353, -1000, 21585, -1000, -1000, 16, -1000, 31099, 31253, 5409,
	652, 11022, 11022, 11022, 11022, 11022, 11022, 11022, 11022, 11022,
	11022, 11022, 11022, 11022, 11022, 11022, 11022, 11022, 11022, 11022,
	11022, 11022, 11022, 1113, 11022, 572, 11022, 11022, 11022, 11022,
	1011, 956, 230, 1029, -1000, 1680, 1680, 1680, 30891, 30891,
	225, 318, -1000, 11022, -1000, 9702, 147, 28909, 17, -1000,
	-1000, -1000, 7378, 419, 30701, 36, 6056, -1000, 1731, 824,
	1314, 1247, 244, 128, 127, 11022, 11022, 11352, 11352, 11022,
	11682, 11022, 11022, 6717, 11022, 11022, 11022, 11022, 11022, 11022,
	-1000, 243, -1000, -1000, -1000, -1000, 1728, -1000, -1000, 1725,
	-1000, 644, 639, 1724, -1000, 1273, 15, -1000, -1000, 399,
	98, 1554, 98, 15770, -1000, 21585, 21585, -1000, 21585, -1000,
	-1000, 21585, -1000, 21585, 21585, -1000, 21585, 21585, 296, 18230,
	720, 1355, 780, 296, 6, -1000, 1576, -1000, -1000, -1000,
	-1000, 91, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	242, 910, 241, 241, 241, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 360, -1000, -1000, 426, 426, 426, -1000, -1000,
	1, 30701, 556, -1000, 1270, 478, -1000, 388, -7, 1016,
	949, -1000, -1000, -1000, -1000, -1000, -1000, 11, -1000, -1000,
	11, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1748, 5409, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 21585,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 296, -1000, -1000,
	-1000, -1000, 21585, 21585, 21585, -1000, -1000, 19450, 18535, 1552,
	1354, 919, -1000, 1550, 21585, 991, 1079, -1000, 629, 1345,
	-1000, -1000, -1000, -1000, 30701, -1000, 375, -1000, -1000, 30701,
	826, 1178, -1000, 1178, 5, -1000, 29624, -1000, 238, -11,
	399, 9371, 15151, 5409, -1000, 399, 124, 7721, -1000, 720,
	21585, 21585, 21585, -1000, -1000, 1078, 22500, 1077, 31253, 21585,
	-1000, 237, 236, 1142, 1136, 21585, 21585, 22195, 21890, 21585,
	812, 52, -1000, 235, 52, -1000, 234, 21585, 863, -1000,
	21585, 21585, 857, 1189, 1053, -1000, 386, 17010, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 369, 393,
	393, 596, 596, 596, 596, 1714, 2353, 2473, 2487, 184,
	184, 184, 1428, 685, 685, 184, 184, 184, 30891, 30840,
	331, 11022, 11022, 542, 912, 230, 331, 11022, 331, 331,
	331, 331, -1000, 1601, -1000, -1000, -1000, -1000, 1269, 229,
	11682, 11682, -1000, -1000, -1000, 6387, 12012, -1000, -1000, -1000,
	-1000, 227, 11022, -1000, 29239, -191, -16, -1000, -1000, 11022,
	-17, -18, -1000, -1000, 624, -1000, 11022, -1000, -13, 11022,
	11022, 11022, 121, 120, -1000, 539, -1000, 538, 529, 528,
	-1000, 226, 933, 223, 220, 11022, -1000, -1000, 30557, 4013,
	119, 1267, -115, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	118, 117, 30494, -115, 116, 28024, -1000, 11682, 11682, 11682,
	6387, 218, 115, 29296, -115, 30350, 9041, 9041, 9041, 106,
	30144, 11022, -115, 3912, 3663, 3631, -24, -40, -41, 1715,
	-42, 105, 363, 361, 104, 723, 1266, 21585, 819, 11022,
	877, -1000, 14842, 437, 21585, 819, 74, -1000, -1000, -1000,
	349, 21585, -1000, -1000, -1000, 123, -1000, 122, 122, 4,
	-1000, -1000, 19450, -1000, -1000, 31253, 317, 315, -1000, 1697,
	-1000, 11022, 21585, 21585, 1156, -1000, -1000, -1000, 707, -1000,
	902, -1000, 14227, -1000, -78, -1000, -1000, -1000, -1000, 353,
	-1000, 101, -49, -12, 31253, -1000, -1000, -1000, -1000, -1000,
	21585, 286, 21585, 52, 21585, -1000, 1746, 52, 21585, 1342,
	1395, 347, 21585, 826, -1000, 11022, 1673, -1000, -1000, -1000,
	11022, -1000, -1000, -1000, 296, -1000, 1245, -1000, -101, 1558,
	283, -155, 108, 358, -1000, 14533, -1000, 1245, -1000, -1000,
	-1000, -1000, 527, 526, 1336, -1000, 1073, -1000, 441, -1000,
	746, 11022, 12648, 217, 213, 916, -1000, 1335, 1059, 1331,
	1059, -1000, -21, 725, -1000, 11022, -1000, 11022, -1000, 523,
	-1000, -1000, 522, 386, 1264, 670, -1000, 976, -1000, 11022,
	331, 331, 11022, 11682, 11682, -1000, 331, -1000, -1000, -1000,
	-1000, -1000, 1263, 209, 11022, 31253, 30319, 4110, -50, -1000,
	8711, -38, -1000, 11022, -1000, 28880, -1000, -1000, 310, 1390,
	-1000, 11022, 30116, 95, 8381, -1000, 29910, -15, -15, -1000,
	1745, 1105, 931, 890, 753, 1660, -1000, 16079, 406, 958,
	28852, 31099, 31253, -1000, 11022, -1000, -1000, 1262, 11022, -1000,
	31099, 31253, 11682, 11682, 11682, 11682, 11682, 11682, 11682, 11682,
	11682, 11682, 11682, 11682, 11682, 11682, 11682, 11682, 11682, 11682,
	11682, 1158, 11682, 1629, 1629, 1629, -58, 8051, -1000, 1303,
	1262, 11022, 11022, 31253, 94, 93, 89, -1000, 11022, -115,
	11022, 11022, 11022, -1000, -1000, -1000, 88, -1000, 1644, -1000,
	-1000, -1000, -1000, -1000, 721, -1000, -1000, 7047, 30701, -1000,
	819, 1471, -51, -1000, -1000, -1000, 399, 15770, 15151, 7721,
	-56, -1000, -1000, -1000, 720, -1000, 550, 1618, 87, 30701,
	-78, -78, -1000, -1000, -1000, -1000, -1000, 21585, -1000, 1226,
	-1000, 18535, 207, 21585, 204, -1000, 203, -1000, -1000, 202,
	21585, 1117, 347, 17620, -1000, 383, 978, 28522, -1000, 86,
	1236, 1504, -1000, 15151, 1150, 1147, 15151, 1198, 935, 935,
	935, -1000, 200, 308, 358, 4444, 11022, 19145, 950, 59,
	85, 1558, 1236, 21585, 21585, 21585, 1327, -1000, 1165, -1000,
	28493, -57, -1000, 326, 1483, 11022, -1000, -1000, 199, 12648,
	21585, -1000, 1184, 1177, 470, 21585, -1000, 21585, -1000, 21585,
	21585, 21585, -63, -64, 21585, 21585, -1000, 17010, 626, 198,
	1716, 331, 4051, 3991, 11022, 31253, 30945, -65, 11022, 11022,
	-1000, -70, -1000, 11022, 306, 30701, -1000, -1000, -1000, 30701,
	11022, 1682, 11022, 81, 76, 75, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 73, -1000, -1000, 27380, 11022, 72,
	-1000, 70, 66, 30701, 1303, 30701, -1000, -1000, 442, 442,
	641, 641, 641, 641, 1629, 1944, 578, 995, 700, 700,
	700, 2592, 512, 512, 700, 700, 700, 1256, 1155, 196,
	2547, 11022, -76, -1000, -1000, -1000, 30701, 30701, 64, -1000,
	-1000, -1000, -115, 3242, 28465, 28135, -1000, 57, -1000, -84,
	-1000, -1000, 211, 52, 819, -1000, -85, -1000, 348, -1000,
	305, 304, -1000, -1000, -1000, 1179, -1000, 12648, 195, 21585,
	18535, 1544, 12648, 990, 1127, 347, 17620, -1000, 629, -1000,
	-1000, -1000, 395, 11022, 11022, 1558, 15151, 15151, 680, 1146,
	15151, -1000, -1000, -1000, -1000, 303, 373, 358, 19145, -1000,
	1616, 1162, -77, -1000, -1000, 21585, 194, -1000, 358, 395,
	-1000, -1000, -1000, 21585, -1000, 21585, -1000, 5409, 21585, 1248,
	1066, -1000, -1000, 1135, 192, 11682, 21585, -1000, 917, 12648,
	1485, 36, 5409, 1485, 28106, 6056, -87, -88, 1065, -1000,
	1061, 11022, -1000, 31253, 1059, 1059, -1000, 520, 514, 513,
	489, -1000, -1000, -86, 16705, 1744, 11022, 11022, 30945, -89,
	-1000, 331, 331, -1000, 28078, -1000, 30701, -1000, 29910, -1000,
	-1000, -1000, -1000, 921, -1000, 27748, -1000, -1000, -1000, -1000,
	11682, 1254, 187, 31253, 27719, -1000, -1000, 11022, -1000, -1000,
	-1000, 1402, 21585, 1463, -1000, -1000, 186, -1000, -1000, 924,
	-93, 12648, -99, 56, 52, -100, 21585, -1000, 347, 17620,
	-1000, 1395, -1000, 21585, 30701, -115, -1000, 680, -1000, 185,
	11022, 15151, -1000, -155, -1000, -105, -1000, 19145, -1000, 301,
	-185, -1000, 344, -1000, 358, 171, 21585, 19145, -1000, -1000,
	1183, -1000, -1000, 21585, 1072, -1000, -1000, 11022, 2547, 169,
	1226, 167, -1000, -1000, -1000, -1000, -1000, -1000, 1483, -13,
	-1000, 894, -1000, -1000, 30701, 1479, -1000, -1000, 21585, 21585,
	166, 163, -1000, 161, 36, -106, -1000, 333, 331, 331,
	-1000, -1000, 55, 958, 1502, -1000, 3545, 11682, 31253, -107,
	-1000, 27691, 604, -113, 21585, -1000, -1000, 5726, 21585, 917,
	-118, -1000, 1226, -1000, 917, 160, 17620, -1000, 1117, -97,
	-1000, 1539, -1000, 21585, 30701, -1000, 358, -1000, 1611, -1000,
	-1000, 1162, -1000, 4772, 19145, 21585, -119, -1000, -1000, -1000,
	1306, 151, 1109, 21585, -1000, 21585, 1485, 54, 21585, 455,
	5409, -1000, -1000, 11022, 11022, 11022, 1744, -1000, -1000, 1739,
	-1000, 846, 11022, 3545, -129, -1000, -1000, 751, -1000, 399,
	-1000, 158, 1226, 917, -1000, 1226, 12648, -1000, 1127, 21585,
	156, -133, 19145, -1000, -1000, -1000, 1608, -1000, -135, -1000,
	1317, -1000, 980, 985, 53, -139, -1000, -1000, 154, -1000,
	11022, -1000, -146, -152, -15, -1000, -1000, 48, 10692, 10692,
	-115, -1000, 15770, -1000, 21585, -1000, 1226, -1000, -156, -1000,
	-1000, -1000, -1000, -1000, 300, -1000, 21585, -1000, 984, 981,
	669, -1000, -1000, -1000, -1000, -1000, 1109, 30701, -1000, -1000,
	47, -1000, -1000, -1000, 12331, 1030, 774, 29267, -1000, -134,
	-164, -1000, 917, -1000, -1000, -1000, 1430, -1000, 463, 953,
	953, 980, 1682, 1580, -1000, -1000, -1000, -1000, -1000, -1000,
	1023, 1226, -1000, 1590, -1000, -1000, 1164, -1000, -1000, 10362,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2026, 2023, 1551, 1720, 2022, 2018, 2014, 1715, 2013,
	2012, 2011, 2010, 2009, 2008, 1711, 1705, 1664, 1657, 2007,
	136, 2006, 2003, 2002, 1655, 2000, 1998, 1993, 1992, 1991,
	1988, 141, 1987, 1986, 1653, 1630, 1553, 1549, 1984, 1982,
	1523, 1980, 1979, 14, 1978, 81, 1974, 25, 176, 2489,
	131, 1973, 1968, 1967, 21, 111, 67, 1962, 231, 1960,
	1959, 49, 34, 23, 19, 1956, 106, 1953, 1950, 1389,
	30, 1947, 1943, 135, 1941, 29, 26, 188, 151, 140,
	147, 120, 1940, 1939, 1936, 1933, 54, 1932, 1, 1929,
	1928, 10, 68, 17, 1924, 63, 24, 1922, 1918, 128,
	1917, 71, 108, 1522, 251, 126, 271, 1916, 80, 8,
	65, 1912, 1911, 153, 44, 1910, 35, 83, 134, 1909,
	41, 157, 64, 33, 45, 121, 1907, 1905, 1903, 110,
	1902, 117, 96, 1899, 1894, 77, 1889, 130, 129, 1885,
	1884, 99, 1881, 123, 1878, 1876, 139, 159, 1874, 152,
	1873, 1869, 154, 115, 5, 46, 57, 18, 1509, 1499,
	122, 73, 32, 20, 1868, 2039, 1337, 1225, 39, 104,
	75, 56, 107, 60, 76, 148, 42, 1865, 1863, 124,
	1862, 1861, 1860, 1859, 1855, 84, 1854, 1852, 62, 143,
	11, 22, 28, 98, 43, 59, 101, 133, 150, 112,
	1850, 103, 119, 1849, 97, 1842, 1837, 1647, 156, 1835,
	1833, 1831, 1577, 1077, 921, 31, 1830, 1829, 771, 27,
	1828, 1825, 70, 1824, 137, 113, 1821, 149, 132, 48,
	1818, 118, 74, 100, 1813, 114, 55, 0, 622, 474,
	1810, 127, 93, 1806, 1805, 1803, 1802, 16, 3, 9,
	6, 7, 2, 95, 94, 1801, 1800, 125, 89, 66,
	1798, 155, 1796, 1793, 1792, 47, 1787, 15, 1786, 12,
	1783, 1782, 13, 4, 1779, 1778, 145, 1777, 105, 1776,
	1544, 1775, 146, 1772, 1768, 1679, 36, 109,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 4, 56, 56,
	55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 55, 53, 53, 58, 58, 58,
	60, 60, 57, 57, 52, 52, 5, 5, 235, 235,
	236, 236, 42, 42, 46, 46, 43, 44, 44, 45,
	45, 7, 7, 7, 6, 6, 8, 8, 8, 8,
	8, 8, 15, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 105, 105, 104, 104, 107, 107, 17,
	17, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 203, 203, 202, 19, 177, 177,
	21, 130, 130, 22, 22, 22, 22, 23, 30, 276,
	276, 276, 280, 280, 281, 281, 282, 282, 282, 282,
	282, 282, 282, 278, 278, 28, 28, 28, 28, 41,
	33, 33, 33, 33, 33, 33, 150, 147, 147, 146,
	146, 146, 146, 148, 148, 148, 148, 151, 151, 85,
	85, 228, 227, 227, 233, 233, 233, 83, 83, 83,
	83, 83, 84, 84, 84, 226, 226, 226, 226, 234,
	234, 234, 234, 234, 234, 232, 232, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 18, 277,
	277, 279, 279, 25, 35, 35, 36, 36, 37, 37,
	37, 37, 11, 11, 12, 12, 86, 86, 87, 87,
	156, 156, 156, 156, 88, 88, 59, 59, 59, 155,
	245, 245, 246, 246, 246, 246, 246, 246, 247, 247,
	247, 247, 247, 247, 247, 243, 243, 244, 241, 241,
	242, 242, 242, 242, 283, 283, 154, 154, 91, 91,
	250, 250, 250, 250, 248, 248, 248, 248, 248, 251,
	249, 252, 252, 252, 252, 252, 189, 189, 189, 39,
	13, 65, 65, 14, 10, 10, 134, 134, 95, 95,
	194, 194, 194, 76, 76, 54, 54, 54, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 135,
	135, 136, 136, 26, 29, 32, 38, 38, 38, 38,
	38, 285, 285, 72, 72, 72, 72, 73, 73, 149,
	149, 152, 152, 153, 153, 153, 67, 66, 68, 68,
	9, 9, 61, 61, 62, 62, 63, 63, 64, 64,
	286, 286, 24, 24, 24, 79, 79, 143, 143, 143,
	145, 145, 144, 144, 144, 120, 120, 120, 40, 100,
	100, 109, 109, 110, 110, 200, 111, 111, 31, 31,
	49, 49, 47, 47, 47, 47, 47, 47, 48, 48,
	50, 50, 50, 50, 50, 50, 50, 258, 258, 258,
	261, 261, 257, 259, 259, 260, 260, 284, 284, 121,
	121, 121, 90, 89, 89, 93, 93, 92, 94, 94,
	193, 118, 118, 118, 118, 137, 137, 138, 138, 139,
	139, 140, 140, 140, 141, 141, 142, 142, 117, 117,
	173, 173, 51, 51, 99, 99, 101, 101, 163, 163,
	163, 164, 164, 162, 162, 162, 162, 195, 195, 195,
	195, 195, 195, 195, 274, 274, 274, 275, 275, 192,
	192, 196, 196, 196, 196, 196, 196, 190, 190, 190,
	190, 191, 191, 201, 201, 124, 124, 124, 124, 122,
	122, 123, 123, 197, 197, 197, 197, 119, 119, 198,
	198, 198, 157, 157, 204, 204, 204, 222, 222, 98,
	98, 98, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 206,
	206, 206, 206, 208, 208, 208, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	221, 221, 221, 221, 221, 209, 209, 216, 216, 217,
	217, 218, 219, 210, 210, 211, 211, 212, 213, 220,
	220, 220, 220, 224, 224, 214, 214, 214, 214, 214,
	215, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 132, 132, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 167,
	167, 167, 167, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 253, 253, 253, 253, 253, 253,
	253, 255, 255, 256, 256, 254, 254, 254, 254, 254,
	254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
	254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
	254, 254, 262, 262, 263, 263, 265, 265, 266, 266,
	267, 268, 268, 268, 269, 270, 270, 264, 264, 271,
	271, 271, 272, 272, 273, 273, 273, 273, 273, 179,
	179, 179, 180, 180, 181, 187, 187, 187, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 74, 74, 74, 74, 74, 106,
	106, 176, 176, 174, 174, 174, 178, 178, 125, 125,
	223, 223, 223, 223, 223, 223, 223, 126, 126, 126,
	133, 127, 127, 128, 128, 128, 128, 128, 128, 170,
	171, 129, 129, 129, 172, 172, 182, 186, 186, 185,
	184, 184, 183, 183, 160, 160, 161, 161, 159, 158,
	114, 114, 113, 113, 112, 112, 287, 287, 188, 188,
	115, 115, 116, 108, 108, 199, 199, 199, 199, 102,
	102, 81, 81, 103, 103, 77, 77, 80, 80, 78,
	78, 78, 78, 96, 96, 97, 97, 75, 75, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	225, 225, 225, 175, 69, 69, 69, 70, 70, 71,
	71, 230, 230, 230, 231, 231, 231, 231, 229, 229,
	229, 229, 229, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 4, 6, 1, 3,
	2, 5, 3, 6, 4, 6, 6, 6, 4, 8,
	3, 3, 3, 6, 4, 3, 2, 1, 1, 0,
	2, 0, 2, 0, 2, 0, 7, 6, 1, 1,
	1, 3, 3, 0, 2, 0, 2, 1, 3, 5,
	0, 4, 6, 7, 3, 3, 1, 1, 1, 1,
	1, 1, 6, 3, 5, 4, 6, 4, 6, 4,
	6, 3, 5, 1, 3, 1, 2, 2, 3, 2,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 5, 3, 0,
	3, 3, 0, 2, 3, 2, 3, 6, 6, 1,
	2, 2, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 2, 2, 2, 2,
	2, 3, 6, 3, 4, 1, 5, 2, 1, 3,
	3, 3, 3, 1, 3, 3, 1, 2, 2, 1,
	0, 1, 1, 3, 1, 1, 1, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 2, 3, 4, 4, 4, 4, 2, 4,
	4, 4, 4, 4, 4, 2, 3, 3, 2, 3,
	4, 4, 5, 2, 3, 3, 4, 2, 3, 4,
	3, 3, 4, 4, 2, 5, 5, 6, 2, 2,
	0, 2, 0, 3, 6, 6, 5, 5, 4, 12,
	4, 12, 7, 10, 6, 9, 1, 0, 1, 3,
	1, 1, 1, 1, 8, 0, 1, 1, 0, 3,
	2, 0, 3, 1, 2, 2, 3, 6, 2, 1,
	1, 2, 4, 2, 5, 7, 8, 5, 3, 1,
	4, 6, 5, 10, 1, 1, 4, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 1, 2, 1, 4,
	5, 2, 0, 6, 11, 14, 1, 0, 1, 3,
	3, 3, 5, 2, 0, 1, 1, 0, 6, 6,
	8, 6, 8, 6, 8, 8, 10, 8, 10, 1,
	0, 2, 0, 2, 3, 2, 3, 3, 2, 2,
	2, 1, 0, 1, 3, 2, 0, 2, 1, 1,
	0, 1, 3, 1, 1, 1, 2, 3, 2, 2,
	8, 11, 3, 0, 3, 0, 3, 0, 3, 0,
	1, 0, 6, 7, 6, 1, 3, 1, 4, 2,
	8, 5, 4, 3, 0, 2, 2, 0, 8, 2,
	0, 1, 3, 1, 1, 3, 5, 5, 1, 1,
	3, 3, 1, 2, 3, 2, 3, 4, 1, 1,
	8, 8, 1, 2, 4, 4, 4, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 3, 1, 3,
	2, 2, 2, 1, 1, 2, 5, 2, 3, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 3, 0,
	2, 0, 2, 3, 3, 0, 1, 3, 3, 5,
	1, 1, 3, 2, 4, 4, 0, 7, 4, 6,
	3, 1, 5, 5, 0, 2, 3, 1, 3, 2,
	0, 3, 4, 5, 4, 5, 4, 5, 2, 4,
	1, 1, 0, 5, 0, 2, 2, 2, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 0, 2, 5, 2, 1, 1, 3,
	4, 0, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 1, 1, 1,
	1, 5, 2, 1, 1, 1, 1, 4, 1, 2,
	2, 1, 1, 1, 0, 1, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 3, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 4,
	3, 4, 4, 5, 3, 3, 3, 3, 3, 4,
	3, 4, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 4,
	1, 3, 3, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 5, 6, 6, 7, 1,
	2, 1, 2, 1, 1, 2, 1, 3, 1, 1,
	2, 2, 1, 1, 3, 5, 6, 8, 6, 6,
	4, 4, 1, 1, 1, 5, 1, 3, 1, 3,
	1, 1, 1, 1, 6, 6, 4, 4, 4, 4,
	4, 6, 5, 5, 5, 4, 8, 6, 6, 4,
	4, 4, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 2,
	2, 0, 1, 4, 2, 2, 2, 2, 2, 4,
	3, 5, 4, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	3, 1, 3, 3, 3, 2, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 1,
	2, 3, 0, 3, 3, 2, 2, 1, 0, 2,
	2, 3, 2, 1, 1, 3, 5, 1, 2, 4,
	2, 0, 1, 0, 3, 5, 1, 0, 2, 2,
	1, 1, 1, 2, 1, 2, 1, 0, 1, 1,
	1, 3, 3, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 1, 3, 1, 2, 3, 1, 1,
	1, 2, 2, 1, 3, 3, 0, 1, 2, 1,
	1, 1, 1, 6, 2, 1, 5, 1, 1, 1,
	1, 2, 2, 3, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -8, -15,
	-16, -17, -18, -19, -21, -22, -23, -24, -25, -27,
	-29, -30, -32, -31, -33, -34, -35, -36, -37, -38,
	-26, -28, -39, -40, -41, 23, 34, 231, 47, 67,
	-9, -10, -11, -12, -13, -14, -260, 95, 104, 126,
	211, 102, 88, 120, 206, 233, 235, 242, -47, -49,
	252, -150, 255, 35, 264, 61, 98, 237, 229, 230,
	290, 299, 69, -258, -50, -48, 341, 315, 322, 246,
	-51, 273, 307, 344, 273, 135, 81, 310, -276, -103,
	273, 81, -78, -69, 334, 4, -237, -239, 20, 21,
	23, 33, 34, 35, 40, 44, 47, 48, 55, 60,
	61, 62, 64, 66, 67, 68, 71, 72, 79, 80,
	82, 84, 88, 90, 94, 95, 97, 102, 103, 104,
	110, 111, 114, 116, 121, 126, 127, 128, 129, 136,
	139, 141, 134, 149, 150, 151, 153, 154, 155, 158,
	157, 162, 165, 168, 170, 171, 172, 175, 173, 177,
	178, 180, 179, 185, 187, 188, 190, 193, 196, 199,
	202, 203, 204, 205, 206, 209, 211, 213, 214, 215,
	216, 217, 219, 220, 222, 223, 224, 225, 226, 229,
	227, 228, 230, 231, 232, 233, 235, 237, 238, 240,
	253, 254, 265, 242, 243, 244, 245, 248, 249, 250,
	252, 255, 257, 260, 263, 264, 266, 269, 267, 262,
	272, 274, 275, 276, 277, 278, 285, 286, 290, 291,
	292, 293, 296, 297, 298, 299, 301, 304, 305, 306,
	311, 316, 317, 318, 319, 320, 28, 36, 37, 38,
	39, 41, 42, 45, 46, 51, 52, 53, 56, 83,
	85, 86, 101, 105, 106, 112, 122, 124, 130, 131,
	140, 142, 143, 144, 146, 160, 174, 184, 186, 197,
	201, 208, 210, 218, 239, 247, 258, 259, 268, 270,
	280, 281, 282, 287, 288, 303, 307, 308, -276, 150,
	215, -77, -69, 81, 90, 139, 298, 297, 81, 135,
	273, 310, 300, -20, 341, -31, -8, -16, -4, -24,
	-40, -15, -34, -18, -35, -36, -37, -17, 23, -229,
	4, -237, -239, -238, -240, 58, 70, 119, 138, 132,
	148, 152, 161, 163, 176, 198, 200, 236, 256, 22,
	24, 25, 26, 27, 29, 30, 31, 32, 43, 49,
	50, 54, 57, 59, 65, 69, 73, 74, 75, 76,
	77, 78, 87, 89, 91, 92, 93, 96, 98, 100,
	107, 108, 109, 115, 117, 118, 120, 123, 125, 133,
	135, 137, 145, 147, 156, 159, 164, 166, 167, 181,
	182, 183, 189, 191, 192, 194, 195, 207, 212, 221,
	234, 246, 251, 261, 271, 273, 279, 283, 284, 289,
	294, 295, 300, 302, 309, 310, 312, 313, 314, 315,
	-69, -69, -69, 211, 22, -280, 22, -281, -282, 69,
	95, 120, 246, 139, 90, 297, 150, 150, -280, -73,
	242, -69, -147, 165, 249, 55, 239, 286, -148, -146,
	-228, 280, -151, -104, 175, -69, 4, 175, 251, 81,
	285, 22, 34, 55, 60, 82, 121, 135, 136, 65,
	66, 154, 214, 165, 151, 249, 155, 250, 274, 280,
	286, 69, 301, 276, 103, -285, 286, 286, -285, -285,
	-72, 286, 283, -73, 4, 81, 251, 175, -284, 273,
	-233, -226, -189, 9, 289, 107, 191, -232, 8, 333,
	-225, -231, 5, 7, 332, 4, -237, -239, -238, 273,
	300, 310, -134, 81, 295, -48, -50, -49, -92, -93,
	294, 145, 100, 195, -47, -49, -258, -261, 219, -257,
	-69, -261, -89, -90, 22, 92, 345, -197, -77, 192,
	-116, 341, -3, -197, 130, -77, -80, 130, -77, -69,
	-197, 130, 283, 345, -103, -96, -69, -159, -158, 343,
	118, -165, -167, 332, 333, 327, 181, 321, -179, -169,
	-182, 101, 239, 341, -77, -168, 346, 9, -255, -49,
	29, -180, -181, 49, -69, 7, 8, 5, 6, -75,
	-206, -175, -215, 289, 107, 183, -253, -254, 4, -237,
	-230, -207, -217, -211, -214, 146, 58, 74, 77, 75,
	78, 251, 300, 50, 28, 105, 106, 201, 208, 270,
	287, 288, 130, 184, 131, 56, 122, 160, 94, 37,
	39, 41, 42, 51, 52, 83, 85, 86, 112, 140,
	142, 143, 144, 186, 218, 258, 268, 281, 282, 308,
	-238, -218, -219, -212, -213, -220, -165, 118, 341, -113,
	-114, -158, -159, 118, 147, 147, -198, -197, -69, 130,
	-81, 130, -80, -105, 130, -104, -105, 130, -96, 130,
	-203, -202, -231, 307, 273, 135, -177, 341, -130, 341,
	-69, 22, 191, 345, -165, -165, 191, -69, -147, 53,
	-147, 253, 341, -152, -153, -66, -67, -68, 149, 213,
	217, 283, 326, 118, 320, -233, -85, 87, -107, 343,
	115, 55, -235, -232, 9, 253, 214, 250, 118, -277,
	191, 118, 118, 118, 118, 118, 214, 250, 285, 155,
	285, 118, 320, 149, 213, 265, 273, 310, 118, 118,
	-149, -152, -149, 283, -73, -119, -197, 8, 7, 7,
	-104, 130, -69, -104, 135, -69, 130, -92, -93, -118,
	-137, -138, 164, 109, 189, -121, 22, 92, -121, -121,
	44, 342, 342, 345, -261, -97, 341, -108, -199, -165,
	334, -108, -116, 334, -77, 341, -115, -188, -165, 87,
	-56, 227, -55, 21, 23, 95, 305, 101, 262, 277,
	243, 262, 277, 243, 227, 101, 346, 227, 227, 101,
	-235, -78, 345, -229, 334, -236, -235, 10, 11, 57,
	33, 332, 333, 334, 335, 113, 336, 337, 330, 331,
	329, 324, 325, 326, 63, 169, 241, 13, 14, 15,
	26, 194, 163, 321, 132, 256, 327, 16, 17, 18,
	148, 36, 133, -74, -82, -165, -165, -165, -165, -165,
	200, -112, -160, 339, -49, 341, -49, -165, -106, 7,
	-49, -174, 339, -183, -165, -113, 341, 5, 341, 5,
	-262, 316, 115, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	210, -224, 311, -224, -224, -208, 341, -208, -209, 341,
	-208, 317, 322, 341, 266, 342, -102, -77, -114, -198,
	-79, -77, -79, 252, -69, 30, 101, -58, 345, 48,
	232, 101, -58, 345, 101, -58, 101, 101, 342, 345,
	-197, 130, -80, 30, -176, -204, -205, -207, -216, -210,
	-214, -215, 40, 46, 45, 278, 174, 247, 259, 303,
	38, 190, 141, 140, 142, 143, 144, 258, 37, 218,
	112, 94, 86, 85, 186, 42, 41, -218, -219, -212,
	-213, 83, 281, 282, 146, 39, 52, 51, 308, 268,
	-106, -165, -276, -282, -276, 30, -146, -228, -106, 345,
	162, -84, 168, 180, 127, 192, 318, -227, 87, -233,
	-227, 87, 72, -234, 5, 4, -175, -189, 87, 165,
	-215, 343, -229, -20, 254, -104, 22, -228, -279, 115,
	-276, -228, -228, -228, -228, -228, 285, 115, -69, 162,
	-228, -228, 273, 135, 273, -73, -58, 345, 341, -91,
	181, -259, 315, -91, 341, -70, 130, -69, -259, 181,
	-118, -138, -137, -139, -165, 22, -142, 111, 177, -165,
	-167, -48, -48, -48, -94, -193, -165, -257, 30, -96,
	-99, 345, 118, 30, 4, -99, -77, 345, 342, 345,
	283, -135, 65, 59, -155, 130, 59, -241, -69, 65,
	-242, 54, 295, 212, 117, -135, 65, -135, 65, 65,
	-197, 33, -31, 118, 33, -31, 118, 283, -80, -69,
	283, 283, -197, -201, 323, -69, -201, 345, -222, -204,
	-221, 223, 224, 222, 226, 225, -204, -229, 280, -165,
	-165, -165, -165, -165, -165, -165, -165, -165, -165, -165,
	-165, -165, -165, -165, -165, -165, -165, -165, -165, -165,
	-165, 163, 132, 256, 36, 133, -165, 283, -165, -165,
	-165, -165, 173, 181, 183, 289, 107, 296, 92, 187,
	-287, 271, 32, -172, -49, 341, -187, 27, 261, 22,
	-179, 239, 341, -160, -165, -161, -106, 342, 342, 345,
	-106, -178, 340, -174, -186, -185, 312, 342, -106, 309,
	22, 92, 334, 7, -131, 319, 172, 84, 128, 171,
	-132, 245, -263, 110, 123, 341, 342, 342, -165, -165,
	-125, -223, -106, 4, 319, 172, 84, 128, 171, 245,
	-125, -126, -165, -106, -127, -166, -167, 332, 333, 327,
	341, 239, -128, -165, -106, -165, 43, 159, 284, -129,
	-165, 118, -106, -165, -165, -165, -106, -106, -106, 341,
	7, 7, 280, 280, 7, 118, 342, 345, -157, 313,
	-143, -31, 341, 87, 30, -143, -109, -110, -200, -111,
	-77, 341, -69, -69, -80, -81, -104, -105, -105, -96,
	-20, -202, 101, -20, 342, 345, -98, 29, -131, 341,
	342, 345, 283, 118, 286, 342, -153, -83, 217, 260,
	228, 248, 345, -229, -278, -69, -20, -77, -80, -77,
	-197, -86, -96, -87, -69, -156, -155, -243, -244, -241,
	135, 295, 108, 30, 101, -65, 205, 30, 191, 181,
	-61, 275, 101, -140, -225, 341, 333, -141, 239, 240,
	345, -54, 31, 91, 341, 342, -157, -199, -101, -195,
	339, -197, -77, -49, -196, 341, -229, -157, 342, -188,
	-55, -77, -69, -69, 181, -155, 130, -60, 181, -204,
	-69, 341, 341, 153, 153, -69, -69, 130, -69, 130,
	-69, -69, -56, 227, -31, 341, -31, 341, -69, 227,
	-69, -77, 227, -42, 129, 187, -45, 315, -235, 320,
	-165, -165, 283, -287, 271, -172, -165, 173, 183, 289,
	107, 296, 92, 187, 118, 341, -166, -166, -106, -169,
	341, -106, 340, 349, 342, -165, 340, 340, 345, -184,
	-185, 96, -165, -93, 345, -92, -165, -106, -106, 342,
	342, 283, 283, 283, 283, 341, -268, 199, 341, 341,
	-165, 30, 345, 342, 118, 342, 342, -133, 207, 342,
	10, 11, 332, 333, 334, 335, 113, 336, 337, 330,
	331, 329, 324, 325, 326, 63, 169, 241, 13, 14,
	15, 148, 133, -166, -166, -166, -106, 341, 342, -170,
	-171, 118, 115, 30, -129, -129, -129, 342, 118, -106,
	345, 345, 345, 342, 342, 342, 7, 342, 345, 342,
	320, 320, 342, 266, 118, -77, -120, 234, -165, -120,
	-145, 191, -102, 307, -69, -120, -100, 345, 118, 326,
	-102, -58, -58, -58, -197, -204, 339, 339, 7, -165,
	-278, -278, -66, 293, 62, 217, -233, 345, -201, 342,
	342, 345, -70, 135, -70, -31, -104, 5, -31, -77,
	101, -62, 97, -286, 326, -69, -141, -165, -193, -20,
	-117, 123, -201, 345, 70, -124, 152, 176, 119, 161,
	236, 138, 7, -20, -162, 346, 341, -192, 322, -49,
	-196, -195, -117, 283, 283, 101, 181, 304, -245, -242,
	-165, -95, -194, -69, -256, 341, -253, -254, -75, 341,
	341, -53, 95, 252, -136, 101, -58, 101, -58, 283,
	-135, 65, -106, -106, 283, 283, -45, 118, 272, 193,
	-165, -165, -166, -166, 118, 341, -165, -176, 26, 26,
	342, -106, 342, 345, -161, -165, 342, -174, 98, -165,
	279, 342, 309, -93, -93, -93, 5, 172, 128, 171,
	-132, 171, -132, -132, 7, -269, -69, 341, 313, -92,
	342, -222, -204, -165, -170, -165, -222, -204, -166, -166,
	-166, -166, -166, -166, -166, -166, -166, -166, -166, -166,
	-166, -166, -166, -166, -166, -166, -166, 92, 181, 187,
	-166, 345, -106, 342, -171, -170, -165, -165, -204, 342,
	342, 342, -106, -165, -165, -165, 342, 7, 266, -108,
	182, -120, 64, 342, -157, -110, -101, -188, 342, 340,
	7, 7, 342, -69, -88, 134, -156, 341, -70, 341,
	341, -91, 341, -69, -63, 158, -286, -232, -259, 192,
	342, 342, -173, 125, 44, -195, 152, 152, -195, -124,
	152, -122, 198, -122, -122, -274, 341, 340, -192, -229,
	339, 347, -106, -191, -190, 30, -69, 196, 342, -173,
	-69, -69, -155, 101, -246, 65, -247, 57, 108, 69,
	181, 183, 295, 212, 54, 87, 221, 342, 342, 345,
	-76, -113, 57, -76, -165, 341, -95, -96, 181, 87,
	181, 87, 80, 291, -69, -69, -77, -69, -69, 342,
	342, -69, -77, -236, 280, 341, 26, 26, -165, -176,
	342, -165, -165, 342, -165, 340, -165, 5, -165, 342,
	342, 342, 342, -270, -69, -165, 342, 342, 342, -171,
	118, 92, 187, 341, -165, 342, 342, 345, 342, 342,
	342, -144, 341, 191, -31, -120, 326, 340, 340, 133,
	-95, 341, -96, -86, 30, -95, 191, -64, 157, -286,
	-232, -61, -265, 314, -165, -106, -195, -195, -123, 302,
	191, 152, -195, 340, 342, -275, 7, -192, -191, 7,
	-164, -163, 116, 179, 342, -69, 341, -192, -265, -155,
	-69, -229, -69, 108, 130, 183, 153, 341, -166, -77,
	-154, -283, 68, 269, -194, -54, -229, -54, 342, -106,
	342, 342, 183, 183, -165, -204, -58, -58, 283, 283,
	283, 283, -168, -75, -69, -44, -43, 5, -165, -165,
	342, 342, -93, -264, 204, 342, -166, 118, 341, -176,
	342, -165, 93, -96, 65, -116, -49, 341, 202, 342,
	-95, 342, 342, -31, 342, -77, -286, -232, -62, -266,
	-267, -69, -123, 341, -165, -195, -162, 342, 345, -191,
	340, 345, 348, 326, -192, 341, -96, -190, -247, -70,
	181, -165, -71, 341, -88, 341, -76, -93, 221, -57,
	57, -69, -69, 341, 341, 341, 345, 342, -46, 326,
	342, -93, 44, -166, -176, 342, 342, 297, 182, 342,
	-69, -69, -154, 342, -88, -154, 341, -232, -63, 345,
	30, -96, -192, 7, -163, -229, 339, -191, -96, 342,
	101, 342, -250, 170, -69, -96, -54, 342, -77, -52,
	302, -229, -106, -106, -106, -43, 5, -271, 216, 240,
	-106, 342, 252, -157, 341, -88, -154, -88, -95, -64,
	-267, -269, 342, -190, 7, 342, 108, -248, -251, -249,
	191, 119, 203, 257, 342, 342, -91, -165, 342, 342,
	-93, 342, -272, -273, 36, 292, 72, -165, -272, -109,
	-96, -88, 342, 340, -69, -249, 191, -251, 191, 297,
	90, -250, 342, -273, 209, 114, 239, 209, 114, -157,
	342, -154, -252, 178, 232, 48, 252, -252, -248, 26,
	-59, 48, 232, -88, 20, 183, 87, -273,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 0, 0, 0, 0, 0,
	86, 87, 88, 89, 90, 91, 0, 0, 456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 428, -2,
	0, 165, 0, 372, 0, 372, 372, 376, 0, 0,
	458, 0, 337, 455, -2, 466, 0, 0, 0, 464,
	442, 0, 0, -2, 0, 0, 0, 0, 0, 139,
	0, 995, 923, 929, 930, 954, 955, 956, 973, 974,
	975, 976, 977, 978, 979, 980, 981, 982, 983, 984,
	985, 986, 987, 988, 989, 990, 991, 992, 993, 994,
	996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005,
	1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015,
	1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025,
	1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035,
	1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045,
	1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
	1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065,
	1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075,
	1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085,
	1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095,
	1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105,
	1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115,
	1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125,
	1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135,
	1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145,
	1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155,
	1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165,
	1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 0, 0,
	0, 0, 925, 995, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 0, 248,
	968, 969, 970, 971, 972, 1174, 1175, 1176, 1177, 1178,
	1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188,
	1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198,
	1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208,
	1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218,
	1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228,
	1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238,
	1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248,
	1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258,
	1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268,
	129, 132, 133, 1052, 135, 0, 142, 143, 144, 146,
	147, 148, 149, 150, 151, 152, 0, 0, 0, 365,
	1079, 378, 160, 1028, 1084, 983, 1160, 1103, 168, 173,
	0, 1166, 176, 181, -2, 105, 207, 208, 209, 210,
	211, 212, 0, 0, 0, 218, 250, 0, 0, 0,
	0, 0, 225, 0, 228, 0, 0, 233, 237, 0,
	0, 0, 244, 0, 0, 380, 371, 380, 368, 369,
	370, 373, 0, 363, 155, 156, 157, 158, 0, 457,
	159, 184, 185, 186, 195, 196, 197, 198, 326, 0,
	328, 205, 206, 950, 0, 964, 965, 966, 967, 0,
	0, 0, 0, 0, 336, -2, 438, 439, -2, 0,
	461, 461, 461, 0, 0, 439, 0, 447, 1058, 450,
	936, 448, 0, 0, 463, 462, 0, 443, 543, 0,
	492, 0, 2, 0, 1144, 543, 0, 1144, 928, 0,
	0, 1144, 0, 0, 140, 141, 933, 931, 932, 0,
	0, 84, 647, 0, 0, 0, 0, 0, 0, 739,
	741, 1138, 1160, 0, 743, 744, 0, 746, 748, 749,
	0, 752, 753, 893, 925, 939, 940, 941, 942, 0,
	0, 945, 0, 947, 948, 949, 793, 762, -2, -2,
	937, 579, 580, 581, 582, -2, 1174, 766, 768, 770,
	771, 772, 773, 0, 1122, 1139, 1140, 1156, 1157, 1165,
	1169, 1170, 1144, 1153, 1145, 1134, 1142, 1151, 1000, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	963, 609, 610, 615, 616, 618, 85, 0, 0, 926,
	902, 900, 901, 0, 0, 0, 0, 549, 93, 1144,
	59, 1144, 921, 59, 1144, 103, 59, 1144, 101, 1144,
	0, 124, 126, 1172, 0, 0, 0, 0, 130, 0,
	134, 136, 0, 0, 253, 364, 0, 377, 161, 1133,
	163, 0, 0, 167, 381, 383, 384, 385, 0, 0,
	0, 0, 0, 0, 0, 177, 178, 179, 106, 0,
	456, 0, 213, 68, 69, 0, 226, 234, 0, 252,
	0, 0, 0, 0, 0, 0, 227, 235, 229, 0,
	0, 0, 238, 0, 240, 241, 0, 0, 0, 0,
	366, 379, 367, 0, 375, 59, 547, 327, 952, 951,
	309, 1144, 454, 309, 958, 454, 1144, -2, 0, 434,
	473, 474, 0, 0, 0, 0, 459, 460, 0, 0,
	0, 430, 431, 0, 449, 0, 0, 495, 913, 917,
	918, 495, 493, 544, 545, 0, 0, 910, 908, 909,
	36, 360, 38, 0, 360, 360, 0, 0, 0, 0,
	258, 0, 0, 260, 0, 0, 0, 0, 0, 0,
	534, 924, 0, 898, 899, 534, 70, 0, 0, 0,
	0, 828, 829, 830, 831, 832, 833, 836, 837, 834,
	835, 838, 839, 840, 0, 0, 0, 841, 842, 843,
	0, 0, 845, 0, 847, 0, 0, 0, 0, 0,
	0, 907, 0, 0, 844, 652, 653, 654, 676, 677,
	0, 740, 904, 897, 742, 0, -2, 849, 0, 745,
	750, 751, 0, 0, 892, -2, 0, 944, 0, 644,
	795, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	872, 878, 0, 0, 0, 0, 0, 0, 0, 0,
	594, 612, 623, 620, 619, 596, 0, 595, 593, 0,
	597, 0, 0, 0, 81, 0, 0, 919, 903, 553,
	0, 405, 0, 0, 550, 0, 0, 95, 0, 57,
	58, 0, 97, 0, 0, 99, 0, 0, 456, 0,
	0, 1144, 0, 456, 0, 851, 561, 562, 563, 564,
	565, 644, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 578, 586, 587, 588, 589, 590, 591, 592,
	606, 0, 585, 585, 585, 598, 599, 607, 608, 613,
	614, 625, 626, 628, 630, 624, 624, 624, 621, 622,
	0, 849, 0, 145, 0, 0, 164, 0, 0, 0,
	0, 386, 192, 193, 194, 388, 389, 169, 171, 182,
	170, 172, 174, 175, 199, 200, 201, 202, 203, 204,
	0, 0, 107, 231, 216, 214, 215, 217, 219, 0,
	249, 220, 221, 222, 223, 224, 230, 456, 236, 239,
	242, 243, 0, 0, 0, 374, 329, 0, 267, 0,
	0, 332, 453, 0, 0, 0, 1144, 957, 393, 0,
	437, 471, 472, 475, 479, 480, 483, 486, 487, 477,
	647, 444, 445, 446, 467, 468, 347, 451, 0, 0,
	553, 0, 0, 0, 916, 553, 0, 0, 912, 0,
	0, 0, 0, 359, 40, 1144, 0, 61, 0, 0,
	299, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 0, 0, 257, 0, 0, 0, 927,
	0, 0, 0, 73, 0, 934, 80, 0, 648, 557,
	558, 600, 601, 602, 603, 604, 649, 650, 0, 655,
	656, 657, 658, 659, 660, 661, 662, 663, 664, -2,
	-2, -2, 668, 669, 670, -2, -2, -2, 674, 675,
	-2, 846, 848, 0, 907, 0, -2, 0, -2, -2,
	-2, -2, 688, 0, 690, 693, 695, 697, 0, 0,
	0, 0, 906, 707, 884, 0, 0, 825, 826, 827,
	692, 0, 0, 905, 896, 0, 0, -2, 747, 0,
	0, 0, 855, 856, 891, 887, 0, 754, 466, 0,
	0, 0, 0, 0, 953, 631, 632, 633, 634, 635,
	636, 645, 803, 0, 0, 0, 767, 769, 0, 0,
	0, 0, 859, -2, -2, -2, -2, -2, -2, -2,
	0, 0, 849, 869, 0, 0, 710, 0, 0, 0,
	0, 1160, 0, 849, 877, 0, 0, 0, 0, 0,
	849, 0, 883, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 417, 0,
	417, 407, 0, 0, 0, 417, 420, 421, 423, 424,
	0, 0, 551, 94, 922, 59, 104, 59, 59, 102,
	110, 125, 0, 127, 128, 0, 554, 556, 566, 0,
	131, 0, 0, 0, 0, 166, 382, 387, 0, 189,
	0, 191, 0, 108, 251, 153, 232, 245, 246, 534,
	548, 0, 0, 266, 933, 268, 270, 271, 272, 273,
	958, 0, 958, 0, 0, 330, 0, 0, 0, 0,
	395, 401, 0, 0, 481, 0, 0, 478, 484, 485,
	0, 470, 345, 346, 456, 935, 489, 914, 534, 496,
	456, 506, 543, 520, 511, 0, 915, 489, 546, 911,
	39, 349, 0, 0, 0, 42, 1144, 50, 0, 281,
	0, 0, 0, 0, 0, 362, 51, 1144, 59, 1144,
	59, 52, 37, 360, 254, 0, 255, 0, 353, 0,
	348, 351, 0, 80, 0, 0, 67, 0, 71, 0,
	-2, -2, 0, 0, 0, 708, -2, 689, 691, 694,
	696, 698, 0, 0, 0, 0, 0, 0, 0, 709,
	0, 0, 894, 897, -2, 850, 853, 854, 0, 0,
	888, 0, 0, 0, 0, 465, 466, 466, 466, 760,
	0, 0, 0, 0, 0, 0, 761, 0, 0, 0,
	0, 0, 0, 776, 0, 777, 778, 0, 0, 779,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 713, 714, 715, 0, 0, 780, 875,
	876, 0, 0, 0, 0, 0, 0, 785, 0, 882,
	0, 0, 0, 789, 790, 791, 0, 583, 0, 605,
	627, 629, 617, 82, 0, 920, 92, 0, 552, 402,
	417, 0, 0, 409, 406, 404, 553, 0, 0, 0,
	0, 96, 98, 100, 0, 852, 0, 0, 0, 850,
	137, 138, 162, 187, 188, 190, 183, 0, 247, 275,
	308, 0, 0, 958, 0, 264, 309, 331, 333, 0,
	0, 397, 401, 0, 400, 454, 0, 0, 469, 0,
	491, 0, 494, 0, 0, 0, 0, 0, 540, 540,
	540, 538, 514, 0, 520, 0, 0, 532, 0, -2,
	511, 0, 491, 0, 0, 0, 0, 60, 279, 298,
	0, 0, 338, 344, 344, 0, 763, 764, 0, 0,
	0, 44, 0, 0, 0, 0, 48, 0, 54, 0,
	0, 0, 0, 0, 0, 0, 66, 0, 0, 0,
	651, -2, 0, 0, 0, 0, -2, 0, 0, 0,
	885, 0, 820, 0, 0, 896, -2, 857, 886, 890,
	0, 755, 0, 0, 0, 0, 946, 637, 638, 639,
	640, 641, 642, 643, 0, 801, 802, 806, 0, 0,
	765, 0, 0, 858, 868, 870, 711, 712, 716, 717,
	718, 719, 720, 721, 722, 723, 724, 725, -2, -2,
	-2, 729, 730, 731, -2, -2, -2, 0, 0, 0,
	871, 0, 0, 823, 873, 874, 879, 880, 0, 782,
	783, 784, 881, 0, 0, 0, 611, 0, 83, 415,
	416, 403, 414, 0, 417, 422, 419, 425, 0, 559,
	0, 0, 567, 154, 262, 0, 269, 0, 0, 0,
	267, 0, 0, 0, 399, 401, 0, 392, 393, 476,
	482, 452, 797, 0, 0, 497, 0, 0, 0, 0,
	0, 535, 539, 536, 537, 0, 0, 520, 532, 503,
	0, 0, 0, 510, 531, 0, 530, 519, -2, 797,
	355, 357, 41, 0, 280, 0, 283, 0, 0, 0,
	0, 289, 290, 0, 0, 0, 0, 300, 307, 0,
	347, 938, 0, 347, 0, 0, 0, 0, 0, 56,
	0, 0, 361, 0, 59, 59, 350, 0, 0, 0,
	0, 354, 352, 72, 0, 0, 0, 0, -2, 0,
	701, -2, -2, 819, 850, 895, 889, 943, 466, 756,
	758, 759, 646, 808, 805, 0, 792, 774, 775, 867,
	0, 0, 0, 0, 850, 822, 781, 0, 787, 788,
	584, 0, 0, 0, 408, 418, 0, 560, 555, 0,
	0, 0, 0, 0, 0, 0, 0, 390, 401, 0,
	394, 395, 440, 0, 490, 488, 522, 0, 524, 0,
	0, 0, 526, 506, 515, 0, 517, 532, 508, 0,
	0, 501, 0, 500, 520, 528, 0, 0, 441, 43,
	0, 284, 285, 958, 0, 288, 291, 0, 293, 960,
	275, 0, 304, 305, 339, 340, 343, 341, 344, 466,
	302, 0, 45, 46, 55, 63, 47, 53, 0, 0,
	0, 0, 533, 0, 0, 0, 77, 75, -2, -2,
	702, 821, 0, 466, 0, 794, -2, 0, 0, 0,
	824, 0, 0, 0, 0, 426, 427, 0, 0, 307,
	0, 297, 275, 265, 307, 0, 0, 396, 397, 796,
	798, 0, 523, 0, 542, 525, 520, 516, 0, 513,
	504, 0, 505, 0, 532, 0, 0, 512, 282, 286,
	0, 0, 313, 0, 301, 0, 347, 0, 0, 65,
	0, 356, 358, 0, 0, 0, 0, 79, 76, 0,
	757, 811, 0, -2, 0, 737, 786, 0, 411, 553,
	413, 0, 275, 307, 263, 275, 0, 398, 399, 0,
	0, 0, 0, 518, 502, 498, 0, 509, 0, 529,
	0, 292, 318, 0, 0, 0, 342, 755, 309, 49,
	0, 62, 0, 0, 466, 78, 74, 0, 0, 0,
	807, 738, 0, 412, 0, 295, 275, 334, 0, 391,
	799, 800, 541, 507, 0, 527, 0, 294, 314, 315,
	0, 310, 311, 312, 959, 306, 313, 64, 259, 261,
	0, 804, 809, 812, -2, 1106, 992, 0, 810, 553,
	0, 296, 307, 499, 287, 316, 0, 317, 0, 0,
	0, 318, 0, 0, 814, 815, 816, 817, 818, 410,
	278, 275, 319, 0, 322, 323, 0, 320, 303, 0,
	274, 276, 277, 335, 321, 324, 325, 813,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 330, 3, 336, 331, 3,
	341, 342, 334, 332, 345, 333, 343, 335, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 349, 344,
	324, 326, 325, 3, 346, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 339, 3, 340, 337, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 347, 329, 348, 327,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 328, 57667, 338, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:794
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:800
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:806
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:835
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 35:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:850
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 36:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:856
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:860
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:866
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:870
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:877
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:882
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:887
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:892
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:897
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:906
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 47:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:909
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 48:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:919
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:929
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:939
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:942
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:949
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:958
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:968
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:972
		{
			sqlVAL.union.val = nil
		}
	case 57:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:978
		{
			sqlVAL.union.val = DropCascade
		}
	case 58:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:982
		{
			sqlVAL.union.val = DropRestrict
		}
	case 59:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:986
		{
			sqlVAL.union.val = DropDefault
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:992
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 61:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:996
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1001
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 63:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1002
		{
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1005
		{
			return unimplemented(sqllex, "alter using")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1006
		{
		}
	case 66:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1010
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1014
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1020
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 70:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1030
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1034
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1040
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 73:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1044
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 74:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1050
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 75:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1054
		{
			sqlVAL.str = ""
		}
	case 76:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 79:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1076
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 80:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1079
		{
		}
	case 81:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1083
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1091
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1098
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1102
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1118
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1175
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1179
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1185
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1195
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1230
		{ /* SKIP DOC */
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1234
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1248
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1262
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1269
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 132:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1328
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1332
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1346
		{
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1361
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1404
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1408
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1412
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1418
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1425
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1434
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1437
		{
			return unimplemented(sqllex, "set local")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 164:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1451
		{ /* SKIP DOC */
		}
	case 166:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[2].union.transactionModes()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1474
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1478
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1482
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1489
		{
			return unimplemented(sqllex, "set from current")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1492
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1501
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1505
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1509
		{
		}
	case 180:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1509
		{
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1520
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1534
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1542
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1546
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1550
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.union.val = Low
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = Normal
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = High
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1585
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1629
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "client_encoding"}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1633
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1637
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1641
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1649
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1653
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1657
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1661
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1665
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1673
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1677
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1681
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1693
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1697
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1709
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowJobs{}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1717
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1725
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1729
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1733
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1737
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1741
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1749
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1753
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1757
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1761
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1765
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1769
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1773
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1777
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1781
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1785
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1791
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1797
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 250:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1802
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1808
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1812
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1819
		{
			/* SKIP DOC */
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1825
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1829
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1835
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1839
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1845
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1849
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1853
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1857
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1864
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1868
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1878
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1895
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 274:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1928
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1932
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 278:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1936
		{
			sqlVAL.union.val = DropDefault
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1942
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 281:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1963
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1967
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1971
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1975
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1979
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1983
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2001
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2009
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2013
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2043
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 300:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2085
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2095
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2105
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2128
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 307:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2132
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2138
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 309:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2142
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2147
		{
			return unimplemented(sqllex, "match full")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2148
		{
			return unimplemented(sqllex, "match partial")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2149
		{
			return unimplemented(sqllex, "match simple")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2150
		{
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2156
		{
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2157
		{
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2158
		{
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2159
		{
		}
	case 318:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2160
		{
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2163
		{
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2166
		{
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2169
		{
			return unimplemented(sqllex, "no action")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2172
		{
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2173
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2174
		{
			return unimplemented(sqllex, "action set null")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2175
		{
			return unimplemented(sqllex, "action set default")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2179
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2187
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2194
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2201
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2207
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2211
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 333:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2242
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2256
		{
			sqlVAL.union.val = true
		}
	case 337:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2260
		{
			sqlVAL.union.val = false
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2266
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2270
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2279
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2282
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2283
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2286
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 344:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2287
		{
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2291
		{
			sqlVAL.union.val = Ascending
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2295
		{
			sqlVAL.union.val = Descending
		}
	case 347:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2299
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 348:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2306
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2310
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2318
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2322
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2326
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2334
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2338
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2341
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2342
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2346
		{
			sqlVAL.union.val = true
		}
	case 360:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2350
		{
			sqlVAL.union.val = false
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2355
		{
		}
	case 362:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2356
		{
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2360
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2367
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2380
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2384
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2388
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2392
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2396
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2405
		{
		}
	case 372:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2406
		{
		}
	case 373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2410
		{
			sqlVAL.str = ""
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2414
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2418
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 376:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2422
		{
			sqlVAL.str = ""
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2428
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2432
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2438
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2442
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2448
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2452
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2462
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2466
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2470
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2476
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2482
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = ReadOnly
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.union.val = ReadWrite
		}
	case 390:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2521
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 393:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2525
		{
			sqlVAL.str = ""
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2531
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2535
		{
			sqlVAL.str = ""
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2541
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2545
		{
			sqlVAL.str = ""
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 399:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2555
		{
			sqlVAL.str = ""
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2560
		{
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2561
		{
		}
	case 402:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 403:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2571
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 404:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2578
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2591
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2595
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2601
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2605
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2609
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2615
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2619
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2625
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2629
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2637
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2642
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 417:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2646
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 418:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2653
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2659
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 420:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2660
		{
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2668
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2678
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2694
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2738
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2744
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2748
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2763
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2767
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2771
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2775
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2779
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2783
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2817
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2851
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2860
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2887
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2888
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2889
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2892
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2893
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2896
		{
			return unimplemented(sqllex, "cte")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2899
		{
		}
	case 454:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2900
		{
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2903
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2904
		{
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2907
		{
		}
	case 458:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2908
		{
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = true
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = false
		}
	case 461:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = false
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = true
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2931
		{
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2932
		{
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 466:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2952
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2970
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2979
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2990
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2999
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3005
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3012
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3019
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3028
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3032
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 483:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3036
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3042
		{
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3043
		{
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3046
		{
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3047
		{
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3069
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 489:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3073
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3079
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3083
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3097
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3101
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3117
		{
			sqlVAL.union.val = &From{}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3127
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3137
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3144
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3150
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3155
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3178
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3182
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3188
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 506:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3192
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 507:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3199
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 512:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.union.val = nil
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3253
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3257
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3263
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = true
		}
	case 520:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.union.val = false
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3346
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3350
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.str = astFullJoin
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.str = astLeftJoin
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.str = astRightJoin
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.str = astInnerJoin
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3374
		{
		}
	case 540:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3375
		{
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3386
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3390
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3431
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3435
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3439
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 553:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3461
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3474
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3475
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3479
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3483
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3488
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3489
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 561:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3498
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3500
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3504
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3508
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3520
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3528
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3532
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3561
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3570
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3584
		{
			sqlVAL.union.val = nil
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3603
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3607
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3619
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3633
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3660
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3664
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3679
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3693
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3697
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3715
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3731
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 617:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3747
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3763
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3769
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3777
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3781
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3786
		{
		}
	case 624:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3787
		{
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 627:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 629:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3819
		{
			sqlVAL.union.val = year
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3823
		{
			sqlVAL.union.val = month
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3827
		{
			sqlVAL.union.val = day
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3831
		{
			sqlVAL.union.val = hour
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3835
		{
			sqlVAL.union.val = minute
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3839
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3845
		{
			sqlVAL.union.val = month
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3849
		{
			sqlVAL.union.val = hour
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = minute
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = minute
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = nil
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3879
		{
			sqlVAL.union.val = second
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3882
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3906
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3910
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3914
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3917
		{
			return unimplemented(sqllex, "at tz")
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3930
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3938
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3942
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3946
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3962
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3966
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3982
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3986
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3990
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3994
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3998
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4006
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4010
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4014
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4018
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4022
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4026
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4030
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4038
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4046
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4050
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4058
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4062
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4066
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4074
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4085
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4111
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4115
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4119
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4123
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4127
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4131
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4151
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4179
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4183
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4215
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4219
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4239
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4243
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4247
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4251
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4255
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4259
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4263
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4267
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4271
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4275
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4279
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4283
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4287
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4300
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4308
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4319
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4324
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4337
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4341
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4346
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4350
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4354
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4358
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4362
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4370
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4374
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4377
		{
			return unimplemented(sqllex, "variadic")
		}
	case 757:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4378
		{
			return unimplemented(sqllex, "variadic")
		}
	case 758:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4380
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4384
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4388
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4401
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4408
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4417
		{
			return unimplemented(sqllex, "func_application")
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4418
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 765:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4422
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4424
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4428
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4432
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4436
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4439
		{
			return unimplemented(sqllex, "current role")
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4440
		{
			return unimplemented(sqllex, "current user")
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4441
		{
			return unimplemented(sqllex, "session user")
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4442
		{
			return unimplemented(sqllex, "user")
		}
	case 774:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4444
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4448
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4452
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4456
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4460
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4464
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4468
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4471
		{
			return unimplemented(sqllex, "treat")
		}
	case 782:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4473
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4477
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4481
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4485
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4489
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4493
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4497
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4501
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4509
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4515
		{
			return unimplemented(sqllex, "within group")
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4516
		{
		}
	case 794:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4520
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 795:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4524
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4531
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 797:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4535
		{
			sqlVAL.union.val = Window(nil)
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4541
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4545
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4551
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4559
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4563
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4567
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 804:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4574
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4593
		{
			sqlVAL.str = ""
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4599
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 808:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4603
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4613
		{
			return unimplemented(sqllex, "frame range")
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4614
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 811:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4615
		{
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4618
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 813:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4619
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4625
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4626
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4627
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4628
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4629
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 819:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4640
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4644
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4648
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4654
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4658
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4664
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4670
		{
			sqlVAL.union.val = Any
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4674
		{
			sqlVAL.union.val = Some
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4678
		{
			sqlVAL.union.val = All
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4683
		{
			sqlVAL.union.val = Plus
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4684
		{
			sqlVAL.union.val = Minus
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4685
		{
			sqlVAL.union.val = Mult
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4686
		{
			sqlVAL.union.val = Div
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4687
		{
			sqlVAL.union.val = FloorDiv
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4688
		{
			sqlVAL.union.val = Mod
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4689
		{
			sqlVAL.union.val = Bitand
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4690
		{
			sqlVAL.union.val = Bitor
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4691
		{
			sqlVAL.union.val = Pow
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4692
		{
			sqlVAL.union.val = Bitxor
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4693
		{
			sqlVAL.union.val = LT
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4694
		{
			sqlVAL.union.val = GT
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4695
		{
			sqlVAL.union.val = EQ
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4696
		{
			sqlVAL.union.val = LE
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4697
		{
			sqlVAL.union.val = GE
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4698
		{
			sqlVAL.union.val = NE
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4702
		{
			sqlVAL.union.val = Like
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4703
		{
			sqlVAL.union.val = NotLike
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4704
		{
			sqlVAL.union.val = ILike
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = NotILike
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4716
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4720
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4726
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4730
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4736
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4740
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4744
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4750
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4754
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4760
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4764
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 867:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4786
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4790
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4794
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4800
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4807
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4811
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4828
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4832
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4836
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4840
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4844
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 878:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4848
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4854
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4860
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4866
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4870
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4874
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4880
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4884
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4895
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4902
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4906
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 889:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4912
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4918
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 891:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4922
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 893:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4929
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4935
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4939
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4946
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4952
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4958
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4964
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4968
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4974
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4978
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4984
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4988
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4993
		{
		}
	case 907:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4994
		{
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5003
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5009
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5013
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5022
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5028
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5032
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5038
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5047
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5051
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5055
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5063
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5067
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5073
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5077
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5083
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5087
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5098
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5102
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5108
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5112
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5125
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5129
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5133
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5137
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5143
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5147
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5153
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 936:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5156
		{
		}
	case 937:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5166
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5170
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5177
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 940:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5181
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 941:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5185
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5189
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5192
		{
			return unimplemented(sqllex, "func const")
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5194
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5198
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 946:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5201
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5203
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 948:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5207
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 949:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5211
		{
			sqlVAL.union.val = DNull
		}
	case 951:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5218
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5222
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5228
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 958:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5263
		{
			sqlVAL.str = ""
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5269
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 960:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5273
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
