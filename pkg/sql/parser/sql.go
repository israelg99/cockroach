// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:463
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CSV = 57413
const CUBE = 57414
const CURRENT = 57415
const CURRENT_CATALOG = 57416
const CURRENT_DATE = 57417
const CURRENT_SCHEMA = 57418
const CURRENT_ROLE = 57419
const CURRENT_TIME = 57420
const CURRENT_TIMESTAMP = 57421
const CURRENT_USER = 57422
const CYCLE = 57423
const DATA = 57424
const DATABASE = 57425
const DATABASES = 57426
const DATE = 57427
const DAY = 57428
const DEC = 57429
const DECIMAL = 57430
const DEFAULT = 57431
const DEALLOCATE = 57432
const DEFERRABLE = 57433
const DELETE = 57434
const DESC = 57435
const DISCARD = 57436
const DISTINCT = 57437
const DO = 57438
const DOUBLE = 57439
const DROP = 57440
const ELSE = 57441
const ENCODING = 57442
const END = 57443
const ESCAPE = 57444
const EXCEPT = 57445
const EXISTS = 57446
const EXECUTE = 57447
const EXPERIMENTAL_FINGERPRINTS = 57448
const EXPLAIN = 57449
const EXTRACT = 57450
const EXTRACT_DURATION = 57451
const FALSE = 57452
const FAMILY = 57453
const FETCH = 57454
const FILTER = 57455
const FIRST = 57456
const FLOAT = 57457
const FLOAT4 = 57458
const FLOAT8 = 57459
const FLOORDIV = 57460
const FOLLOWING = 57461
const FOR = 57462
const FORCE_INDEX = 57463
const FOREIGN = 57464
const FROM = 57465
const FULL = 57466
const GRANT = 57467
const GRANTS = 57468
const GREATEST = 57469
const GROUP = 57470
const GROUPING = 57471
const HAVING = 57472
const HELP = 57473
const HIGH = 57474
const HOUR = 57475
const IMPORT = 57476
const INCREMENTAL = 57477
const IF = 57478
const IFNULL = 57479
const ILIKE = 57480
const IN = 57481
const INTERLEAVE = 57482
const INDEX = 57483
const INDEXES = 57484
const INITIALLY = 57485
const INNER = 57486
const INSERT = 57487
const INT = 57488
const INT2VECTOR = 57489
const INT2 = 57490
const INT4 = 57491
const INT8 = 57492
const INT64 = 57493
const INTEGER = 57494
const INTERSECT = 57495
const INTERVAL = 57496
const INTO = 57497
const IS = 57498
const ISOLATION = 57499
const JOB = 57500
const JOBS = 57501
const JOIN = 57502
const KEY = 57503
const KEYS = 57504
const KV = 57505
const LATERAL = 57506
const LC_CTYPE = 57507
const LC_COLLATE = 57508
const LEADING = 57509
const LEAST = 57510
const LEFT = 57511
const LEVEL = 57512
const LIKE = 57513
const LIMIT = 57514
const LOCAL = 57515
const LOCALTIME = 57516
const LOCALTIMESTAMP = 57517
const LOW = 57518
const LSHIFT = 57519
const MATCH = 57520
const MINUTE = 57521
const MONTH = 57522
const NAN = 57523
const NAME = 57524
const NAMES = 57525
const NATURAL = 57526
const NEXT = 57527
const NO = 57528
const NO_INDEX_JOIN = 57529
const NORMAL = 57530
const NOT = 57531
const NOTHING = 57532
const NULL = 57533
const NULLIF = 57534
const NULLS = 57535
const NUMERIC = 57536
const OF = 57537
const OFF = 57538
const OFFSET = 57539
const OID = 57540
const ON = 57541
const ONLY = 57542
const OPTIONS = 57543
const OR = 57544
const ORDER = 57545
const ORDINALITY = 57546
const OUT = 57547
const OUTER = 57548
const OVER = 57549
const OVERLAPS = 57550
const OVERLAY = 57551
const PARENT = 57552
const PARTIAL = 57553
const PARTITION = 57554
const PASSWORD = 57555
const PAUSE = 57556
const PLACING = 57557
const PLANS = 57558
const POSITION = 57559
const PRECEDING = 57560
const PRECISION = 57561
const PREPARE = 57562
const PRIMARY = 57563
const PRIORITY = 57564
const QUERIES = 57565
const QUERY = 57566
const RANGE = 57567
const READ = 57568
const REAL = 57569
const RECURSIVE = 57570
const REF = 57571
const REFERENCES = 57572
const REGCLASS = 57573
const REGPROC = 57574
const REGPROCEDURE = 57575
const REGNAMESPACE = 57576
const REGTYPE = 57577
const RENAME = 57578
const REPEATABLE = 57579
const RELEASE = 57580
const RESET = 57581
const RESTORE = 57582
const RESTRICT = 57583
const RESUME = 57584
const RETURNING = 57585
const REVOKE = 57586
const RIGHT = 57587
const ROLLBACK = 57588
const ROLLUP = 57589
const ROW = 57590
const ROWS = 57591
const RSHIFT = 57592
const SAVEPOINT = 57593
const SCATTER = 57594
const SEARCH = 57595
const SECOND = 57596
const SELECT = 57597
const SEQUENCES = 57598
const SERIAL = 57599
const SERIALIZABLE = 57600
const SESSION = 57601
const SESSIONS = 57602
const SESSION_USER = 57603
const SET = 57604
const SETTING = 57605
const SETTINGS = 57606
const SHOW = 57607
const SIMILAR = 57608
const SIMPLE = 57609
const SMALLINT = 57610
const SMALLSERIAL = 57611
const SNAPSHOT = 57612
const SOME = 57613
const SPLIT = 57614
const SQL = 57615
const START = 57616
const STATUS = 57617
const STDIN = 57618
const STRICT = 57619
const STRING = 57620
const STORE = 57621
const STORING = 57622
const SUBSTRING = 57623
const SYMMETRIC = 57624
const SYSTEM = 57625
const TABLE = 57626
const TABLES = 57627
const TEMP = 57628
const TEMPLATE = 57629
const TEMPORARY = 57630
const TESTING_RANGES = 57631
const TESTING_RELOCATE = 57632
const TEXT = 57633
const THEN = 57634
const TIME = 57635
const TIMESTAMP = 57636
const TIMESTAMPTZ = 57637
const TO = 57638
const TRAILING = 57639
const TRACE = 57640
const TRANSACTION = 57641
const TREAT = 57642
const TRIM = 57643
const TRUE = 57644
const TRUNCATE = 57645
const TYPE = 57646
const UNBOUNDED = 57647
const UNCOMMITTED = 57648
const UNION = 57649
const UNIQUE = 57650
const UNKNOWN = 57651
const UPDATE = 57652
const UPSERT = 57653
const USE = 57654
const USER = 57655
const USERS = 57656
const USING = 57657
const UUID = 57658
const VALID = 57659
const VALIDATE = 57660
const VALUE = 57661
const VALUES = 57662
const VARCHAR = 57663
const VARIADIC = 57664
const VIEW = 57665
const VARYING = 57666
const WHEN = 57667
const WHERE = 57668
const WINDOW = 57669
const WITH = 57670
const WITHIN = 57671
const WITHOUT = 57672
const WRITE = 57673
const YEAR = 57674
const ZONE = 57675
const NOT_LA = 57676
const WITH_LA = 57677
const AS_LA = 57678
const POSTFIXOP = 57679
const UMINUS = 57680
const HELPTOKEN = 57681

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6543

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 53,
	358, 53,
	-2, 681,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 50,
	141, 533,
	-2, 0,
	-1, 63,
	92, 681,
	145, 681,
	310, 681,
	311, 681,
	-2, 0,
	-1, 73,
	103, 656,
	112, 656,
	153, 656,
	172, 656,
	197, 656,
	203, 656,
	307, 656,
	-2, 645,
	-1, 105,
	4, 683,
	20, 683,
	21, 683,
	23, 683,
	28, 683,
	33, 683,
	34, 683,
	35, 683,
	36, 683,
	37, 683,
	38, 683,
	39, 683,
	40, 683,
	41, 683,
	42, 683,
	44, 683,
	45, 683,
	46, 683,
	47, 683,
	48, 683,
	51, 683,
	52, 683,
	53, 683,
	55, 683,
	56, 683,
	60, 683,
	61, 683,
	62, 683,
	64, 683,
	66, 683,
	67, 683,
	68, 683,
	71, 683,
	72, 683,
	73, 683,
	81, 683,
	82, 683,
	83, 683,
	84, 683,
	85, 683,
	86, 683,
	87, 683,
	88, 683,
	90, 683,
	92, 683,
	94, 683,
	97, 683,
	98, 683,
	100, 683,
	104, 683,
	105, 683,
	106, 683,
	107, 683,
	108, 683,
	109, 683,
	113, 683,
	114, 683,
	115, 683,
	116, 683,
	117, 683,
	119, 683,
	121, 683,
	126, 683,
	127, 683,
	129, 683,
	132, 683,
	133, 683,
	134, 683,
	135, 683,
	136, 683,
	137, 683,
	140, 683,
	142, 683,
	145, 683,
	146, 683,
	147, 683,
	148, 683,
	149, 683,
	150, 683,
	151, 683,
	152, 683,
	154, 683,
	157, 683,
	158, 683,
	159, 683,
	161, 683,
	162, 683,
	163, 683,
	165, 683,
	166, 683,
	168, 683,
	170, 683,
	173, 683,
	176, 683,
	178, 683,
	179, 683,
	180, 683,
	181, 683,
	182, 683,
	183, 683,
	185, 683,
	186, 683,
	187, 683,
	188, 683,
	192, 683,
	193, 683,
	194, 683,
	195, 683,
	196, 683,
	198, 683,
	200, 683,
	201, 683,
	204, 683,
	205, 683,
	207, 683,
	209, 683,
	210, 683,
	211, 683,
	212, 683,
	213, 683,
	214, 683,
	216, 683,
	217, 683,
	218, 683,
	219, 683,
	220, 683,
	222, 683,
	223, 683,
	224, 683,
	225, 683,
	226, 683,
	227, 683,
	228, 683,
	229, 683,
	231, 683,
	232, 683,
	233, 683,
	234, 683,
	235, 683,
	236, 683,
	237, 683,
	238, 683,
	239, 683,
	240, 683,
	241, 683,
	242, 683,
	244, 683,
	246, 683,
	247, 683,
	248, 683,
	249, 683,
	251, 683,
	252, 683,
	253, 683,
	254, 683,
	256, 683,
	257, 683,
	258, 683,
	259, 683,
	260, 683,
	262, 683,
	263, 683,
	264, 683,
	265, 683,
	267, 683,
	268, 683,
	269, 683,
	270, 683,
	272, 683,
	273, 683,
	274, 683,
	275, 683,
	276, 683,
	277, 683,
	278, 683,
	279, 683,
	280, 683,
	281, 683,
	283, 683,
	285, 683,
	286, 683,
	287, 683,
	288, 683,
	289, 683,
	290, 683,
	291, 683,
	293, 683,
	294, 683,
	295, 683,
	298, 683,
	299, 683,
	300, 683,
	301, 683,
	303, 683,
	304, 683,
	305, 683,
	306, 683,
	309, 683,
	310, 683,
	311, 683,
	312, 683,
	314, 683,
	316, 683,
	317, 683,
	318, 683,
	319, 683,
	320, 683,
	321, 683,
	324, 683,
	329, 683,
	330, 683,
	331, 683,
	332, 683,
	333, 683,
	-2, 0,
	-1, 118,
	103, 655,
	112, 655,
	153, 655,
	172, 655,
	197, 655,
	203, 655,
	307, 655,
	-2, 648,
	-1, 123,
	1, 582,
	157, 582,
	222, 582,
	226, 582,
	357, 582,
	358, 582,
	-2, 0,
	-1, 125,
	1, 582,
	357, 582,
	358, 582,
	-2, 0,
	-1, 126,
	1, 582,
	357, 582,
	358, 582,
	-2, 0,
	-1, 127,
	1, 586,
	357, 586,
	358, 586,
	-2, 0,
	-1, 134,
	4, 689,
	5, 689,
	6, 689,
	7, 689,
	8, 689,
	9, 689,
	20, 689,
	21, 689,
	23, 689,
	28, 689,
	29, 689,
	33, 689,
	34, 689,
	35, 689,
	36, 689,
	37, 689,
	38, 689,
	39, 689,
	40, 689,
	41, 689,
	42, 689,
	44, 689,
	45, 689,
	46, 689,
	47, 689,
	48, 689,
	49, 689,
	50, 689,
	51, 689,
	52, 689,
	53, 689,
	55, 689,
	56, 689,
	58, 689,
	60, 689,
	61, 689,
	62, 689,
	64, 689,
	66, 689,
	67, 689,
	68, 689,
	70, 689,
	71, 689,
	72, 689,
	73, 689,
	75, 689,
	76, 689,
	77, 689,
	79, 689,
	80, 689,
	81, 689,
	82, 689,
	83, 689,
	84, 689,
	85, 689,
	86, 689,
	87, 689,
	88, 689,
	90, 689,
	92, 689,
	94, 689,
	97, 689,
	98, 689,
	100, 689,
	104, 689,
	105, 689,
	106, 689,
	107, 689,
	108, 689,
	109, 689,
	110, 689,
	113, 689,
	114, 689,
	115, 689,
	116, 689,
	117, 689,
	119, 689,
	121, 689,
	124, 689,
	126, 689,
	127, 689,
	129, 689,
	132, 689,
	133, 689,
	134, 689,
	135, 689,
	136, 689,
	137, 689,
	138, 689,
	140, 689,
	142, 689,
	144, 689,
	145, 689,
	146, 689,
	147, 689,
	148, 689,
	149, 689,
	150, 689,
	151, 689,
	152, 689,
	154, 689,
	156, 689,
	157, 689,
	158, 689,
	159, 689,
	160, 689,
	161, 689,
	162, 689,
	163, 689,
	165, 689,
	166, 689,
	168, 689,
	169, 689,
	170, 689,
	171, 689,
	173, 689,
	176, 689,
	178, 689,
	179, 689,
	180, 689,
	181, 689,
	182, 689,
	183, 689,
	184, 689,
	185, 689,
	186, 689,
	187, 689,
	188, 689,
	189, 689,
	191, 689,
	192, 689,
	193, 689,
	194, 689,
	195, 689,
	196, 689,
	198, 689,
	201, 689,
	204, 689,
	205, 689,
	206, 689,
	207, 689,
	208, 689,
	209, 689,
	210, 689,
	211, 689,
	212, 689,
	213, 689,
	214, 689,
	216, 689,
	217, 689,
	218, 689,
	219, 689,
	220, 689,
	222, 689,
	223, 689,
	224, 689,
	225, 689,
	226, 689,
	227, 689,
	228, 689,
	229, 689,
	231, 689,
	232, 689,
	233, 689,
	234, 689,
	235, 689,
	236, 689,
	237, 689,
	238, 689,
	239, 689,
	240, 689,
	241, 689,
	242, 689,
	244, 689,
	245, 689,
	246, 689,
	247, 689,
	248, 689,
	249, 689,
	251, 689,
	252, 689,
	253, 689,
	254, 689,
	256, 689,
	257, 689,
	258, 689,
	259, 689,
	260, 689,
	261, 689,
	262, 689,
	263, 689,
	264, 689,
	265, 689,
	266, 689,
	267, 689,
	268, 689,
	269, 689,
	270, 689,
	272, 689,
	273, 689,
	274, 689,
	275, 689,
	276, 689,
	277, 689,
	278, 689,
	279, 689,
	280, 689,
	281, 689,
	283, 689,
	285, 689,
	286, 689,
	287, 689,
	288, 689,
	289, 689,
	290, 689,
	291, 689,
	293, 689,
	294, 689,
	295, 689,
	298, 689,
	299, 689,
	300, 689,
	301, 689,
	302, 689,
	303, 689,
	304, 689,
	305, 689,
	306, 689,
	309, 689,
	310, 689,
	311, 689,
	312, 689,
	313, 689,
	314, 689,
	316, 689,
	317, 689,
	318, 689,
	319, 689,
	320, 689,
	321, 689,
	324, 689,
	329, 689,
	330, 689,
	331, 689,
	332, 689,
	333, 689,
	334, 689,
	340, 689,
	345, 689,
	346, 689,
	347, 689,
	354, 689,
	360, 689,
	-2, 0,
	-1, 137,
	1, 53,
	358, 53,
	-2, 681,
	-1, 500,
	123, 1280,
	296, 1280,
	339, 1280,
	356, 1280,
	-2, 0,
	-1, 501,
	123, 1233,
	296, 1233,
	339, 1233,
	356, 1233,
	-2, 0,
	-1, 503,
	123, 1338,
	296, 1338,
	339, 1338,
	356, 1338,
	-2, 0,
	-1, 505,
	123, 1360,
	296, 1360,
	339, 1360,
	356, 1360,
	-2, 0,
	-1, 512,
	123, 1285,
	296, 1285,
	339, 1285,
	356, 1285,
	-2, 325,
	-1, 538,
	1, 402,
	353, 402,
	355, 402,
	357, 402,
	358, 402,
	-2, 0,
	-1, 539,
	1, 449,
	120, 449,
	353, 449,
	355, 449,
	357, 449,
	358, 449,
	-2, 0,
	-1, 545,
	1, 416,
	353, 416,
	355, 416,
	357, 416,
	358, 416,
	-2, 0,
	-1, 547,
	1, 420,
	353, 420,
	355, 420,
	357, 420,
	358, 420,
	-2, 0,
	-1, 550,
	1, 428,
	353, 428,
	355, 428,
	357, 428,
	358, 428,
	-2, 0,
	-1, 551,
	1, 433,
	353, 433,
	355, 433,
	357, 433,
	358, 433,
	-2, 0,
	-1, 554,
	1, 443,
	353, 443,
	355, 443,
	357, 443,
	358, 443,
	-2, 0,
	-1, 568,
	112, 691,
	172, 691,
	197, 691,
	-2, 651,
	-1, 571,
	112, 690,
	172, 690,
	197, 690,
	-2, 649,
	-1, 628,
	354, 1211,
	-2, 1204,
	-1, 629,
	354, 1212,
	-2, 1205,
	-1, 635,
	5, 866,
	354, 866,
	-2, 1411,
	-1, 660,
	5, 825,
	-2, 1381,
	-1, 661,
	5, 860,
	354, 860,
	-2, 1383,
	-1, 662,
	5, 835,
	-2, 1384,
	-1, 663,
	5, 834,
	-2, 1385,
	-1, 664,
	5, 860,
	354, 860,
	-2, 1388,
	-1, 665,
	5, 860,
	354, 860,
	-2, 1389,
	-1, 666,
	5, 861,
	-2, 1392,
	-1, 667,
	5, 817,
	-2, 1393,
	-1, 668,
	5, 817,
	-2, 1394,
	-1, 669,
	5, 842,
	-2, 1398,
	-1, 670,
	5, 827,
	-2, 1399,
	-1, 671,
	5, 828,
	-2, 1400,
	-1, 672,
	5, 818,
	-2, 1405,
	-1, 673,
	5, 819,
	-2, 1406,
	-1, 674,
	5, 820,
	-2, 1407,
	-1, 675,
	5, 821,
	-2, 1408,
	-1, 676,
	5, 822,
	-2, 1409,
	-1, 677,
	5, 823,
	-2, 1410,
	-1, 678,
	5, 817,
	-2, 1415,
	-1, 679,
	5, 826,
	-2, 1420,
	-1, 680,
	5, 824,
	-2, 1423,
	-1, 681,
	5, 858,
	354, 858,
	-2, 1425,
	-1, 682,
	5, 862,
	-2, 1428,
	-1, 683,
	5, 864,
	-2, 1429,
	-1, 684,
	5, 857,
	354, 857,
	-2, 1434,
	-1, 783,
	213, 679,
	-2, 526,
	-1, 787,
	199, 1208,
	-2, 0,
	-1, 822,
	1, 216,
	353, 216,
	355, 216,
	357, 216,
	358, 216,
	-2, 654,
	-1, 829,
	4, 1433,
	10, 1433,
	11, 1433,
	13, 1433,
	14, 1433,
	15, 1433,
	16, 1433,
	17, 1433,
	18, 1433,
	20, 1433,
	21, 1433,
	23, 1433,
	26, 1433,
	28, 1433,
	30, 1433,
	33, 1433,
	34, 1433,
	35, 1433,
	36, 1433,
	37, 1433,
	38, 1433,
	39, 1433,
	40, 1433,
	41, 1433,
	42, 1433,
	44, 1433,
	45, 1433,
	46, 1433,
	47, 1433,
	48, 1433,
	51, 1433,
	52, 1433,
	53, 1433,
	55, 1433,
	56, 1433,
	57, 1433,
	60, 1433,
	61, 1433,
	62, 1433,
	63, 1433,
	64, 1433,
	66, 1433,
	67, 1433,
	68, 1433,
	70, 1433,
	71, 1433,
	72, 1433,
	73, 1433,
	81, 1433,
	82, 1433,
	83, 1433,
	84, 1433,
	85, 1433,
	86, 1433,
	87, 1433,
	88, 1433,
	90, 1433,
	92, 1433,
	94, 1433,
	97, 1433,
	98, 1433,
	100, 1433,
	104, 1433,
	105, 1433,
	106, 1433,
	107, 1433,
	108, 1433,
	109, 1433,
	113, 1433,
	114, 1433,
	115, 1433,
	116, 1433,
	117, 1433,
	118, 1433,
	119, 1433,
	121, 1433,
	124, 1433,
	126, 1433,
	127, 1433,
	129, 1433,
	132, 1433,
	133, 1433,
	134, 1433,
	135, 1433,
	136, 1433,
	137, 1433,
	138, 1433,
	139, 1433,
	140, 1433,
	142, 1433,
	144, 1433,
	145, 1433,
	146, 1433,
	147, 1433,
	148, 1433,
	149, 1433,
	150, 1433,
	151, 1433,
	152, 1433,
	154, 1433,
	156, 1433,
	157, 1433,
	158, 1433,
	159, 1433,
	160, 1433,
	161, 1433,
	162, 1433,
	163, 1433,
	165, 1433,
	166, 1433,
	168, 1433,
	169, 1433,
	170, 1433,
	171, 1433,
	173, 1433,
	176, 1433,
	177, 1433,
	178, 1433,
	179, 1433,
	180, 1433,
	181, 1433,
	182, 1433,
	183, 1433,
	184, 1433,
	185, 1433,
	186, 1433,
	187, 1433,
	188, 1433,
	192, 1433,
	193, 1433,
	194, 1433,
	195, 1433,
	196, 1433,
	198, 1433,
	201, 1433,
	202, 1433,
	204, 1433,
	205, 1433,
	207, 1433,
	209, 1433,
	210, 1433,
	211, 1433,
	212, 1433,
	213, 1433,
	214, 1433,
	216, 1433,
	217, 1433,
	218, 1433,
	219, 1433,
	220, 1433,
	222, 1433,
	223, 1433,
	224, 1433,
	225, 1433,
	226, 1433,
	227, 1433,
	228, 1433,
	229, 1433,
	231, 1433,
	232, 1433,
	233, 1433,
	234, 1433,
	235, 1433,
	236, 1433,
	237, 1433,
	238, 1433,
	239, 1433,
	240, 1433,
	241, 1433,
	242, 1433,
	244, 1433,
	245, 1433,
	246, 1433,
	247, 1433,
	248, 1433,
	249, 1433,
	250, 1433,
	251, 1433,
	252, 1433,
	253, 1433,
	254, 1433,
	256, 1433,
	257, 1433,
	258, 1433,
	259, 1433,
	260, 1433,
	262, 1433,
	263, 1433,
	264, 1433,
	265, 1433,
	266, 1433,
	267, 1433,
	268, 1433,
	269, 1433,
	270, 1433,
	272, 1433,
	273, 1433,
	274, 1433,
	275, 1433,
	276, 1433,
	277, 1433,
	278, 1433,
	279, 1433,
	280, 1433,
	281, 1433,
	283, 1433,
	285, 1433,
	286, 1433,
	287, 1433,
	288, 1433,
	289, 1433,
	290, 1433,
	291, 1433,
	293, 1433,
	294, 1433,
	295, 1433,
	298, 1433,
	299, 1433,
	300, 1433,
	301, 1433,
	303, 1433,
	304, 1433,
	305, 1433,
	306, 1433,
	309, 1433,
	310, 1433,
	311, 1433,
	312, 1433,
	314, 1433,
	316, 1433,
	317, 1433,
	318, 1433,
	319, 1433,
	320, 1433,
	321, 1433,
	324, 1433,
	329, 1433,
	330, 1433,
	331, 1433,
	332, 1433,
	333, 1433,
	334, 1433,
	335, 1433,
	337, 1433,
	338, 1433,
	339, 1433,
	340, 1433,
	342, 1433,
	343, 1433,
	344, 1433,
	345, 1433,
	346, 1433,
	347, 1433,
	348, 1433,
	349, 1433,
	350, 1433,
	352, 1433,
	355, 1433,
	356, 1433,
	359, 1433,
	360, 1433,
	-2, 0,
	-1, 843,
	123, 1338,
	296, 1338,
	339, 1338,
	356, 1338,
	-2, 0,
	-1, 860,
	123, 1360,
	296, 1360,
	339, 1360,
	356, 1360,
	-2, 0,
	-1, 861,
	157, 594,
	222, 594,
	226, 594,
	-2, 313,
	-1, 930,
	112, 690,
	172, 690,
	197, 690,
	-2, 652,
	-1, 999,
	103, 656,
	112, 656,
	153, 656,
	172, 656,
	197, 656,
	203, 656,
	307, 656,
	-2, 985,
	-1, 1009,
	354, 1188,
	-2, 1176,
	-1, 1027,
	355, 1128,
	-2, 0,
	-1, 1051,
	157, 594,
	222, 594,
	226, 594,
	-2, 589,
	-1, 1083,
	103, 656,
	112, 656,
	153, 656,
	172, 656,
	197, 656,
	203, 656,
	307, 656,
	-2, 752,
	-1, 1305,
	157, 594,
	222, 594,
	226, 594,
	-2, 315,
	-1, 1403,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 901,
	-1, 1404,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 902,
	-1, 1405,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 903,
	-1, 1409,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 907,
	-1, 1410,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 908,
	-1, 1411,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 909,
	-1, 1414,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 914,
	-1, 1420,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 916,
	-1, 1422,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 920,
	-1, 1423,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 921,
	-1, 1424,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 922,
	-1, 1425,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 923,
	-1, 1451,
	208, 1070,
	-2, 1073,
	-1, 1495,
	123, 1110,
	354, 1211,
	-2, 1204,
	-1, 1496,
	123, 1111,
	-2, 1377,
	-1, 1497,
	123, 1112,
	-2, 1284,
	-1, 1498,
	123, 1113,
	-2, 1248,
	-1, 1499,
	123, 1114,
	-2, 1264,
	-1, 1500,
	123, 1115,
	-2, 1283,
	-1, 1501,
	123, 1116,
	-2, 1335,
	-1, 1577,
	1, 753,
	70, 753,
	103, 753,
	112, 753,
	124, 753,
	128, 753,
	130, 753,
	144, 753,
	153, 753,
	160, 753,
	169, 753,
	172, 753,
	184, 753,
	197, 753,
	199, 753,
	203, 753,
	243, 753,
	245, 753,
	307, 753,
	315, 753,
	326, 753,
	327, 753,
	336, 753,
	353, 753,
	355, 753,
	357, 753,
	358, 753,
	359, 753,
	-2, 752,
	-1, 1717,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 915,
	-1, 1718,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 917,
	-1, 1723,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 918,
	-1, 1741,
	208, 1069,
	-2, 1072,
	-1, 1966,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 919,
	-1, 1971,
	156, 0,
	-2, 935,
	-1, 1981,
	208, 1071,
	-2, 1074,
	-1, 2023,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 962,
	-1, 2024,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 963,
	-1, 2025,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 964,
	-1, 2029,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 968,
	-1, 2030,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 969,
	-1, 2031,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 970,
	-1, 2156,
	156, 0,
	-2, 936,
	-1, 2159,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 939,
	-1, 2160,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 941,
	-1, 2276,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 940,
	-1, 2277,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 942,
	-1, 2284,
	156, 0,
	-2, 971,
	-1, 2361,
	156, 0,
	-2, 972,
	-1, 2438,
	36, 0,
	138, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 1380,
}

const sqlPrivate = 57344

const sqlLast = 41890

var sqlAct = [...]int{

	629, 2112, 2437, 2446, 2412, 2310, 2485, 2447, 1648, 1948,
	2448, 1207, 2000, 1640, 2366, 2436, 2210, 2257, 1299, 1620,
	2122, 72, 1214, 588, 2083, 1572, 2224, 1711, 2146, 2144,
	731, 605, 1300, 1914, 627, 2084, 572, 1916, 1637, 777,
	175, 1807, 619, 2290, 1922, 1077, 175, 1619, 1855, 881,
	2138, 1249, 2190, 1834, 175, 1649, 1081, 1060, 1210, 1581,
	1590, 626, 1623, 175, 2054, 1806, 1573, 1613, 175, 175,
	1624, 1842, 175, 443, 1752, 175, 1382, 1377, 1005, 1449,
	864, 933, 1707, 175, 1089, 1203, 1524, 1695, 1227, 1112,
	1091, 458, 25, 1061, 1459, 511, 599, 622, 1437, 1326,
	1434, 812, 863, 1475, 580, 117, 1037, 1469, 1621, 809,
	1041, 440, 1642, 883, 1068, 737, 740, 1330, 1627, 823,
	1559, 1546, 719, 491, 1491, 994, 118, 598, 934, 175,
	175, 932, 166, 119, 802, 508, 1329, 175, 1051, 621,
	469, 1221, 577, 504, 799, 717, 171, 1050, 938, 2225,
	532, 2068, 1740, 2481, 2069, 1641, 1229, 1111, 1229, 1078,
	576, 576, 1229, 175, 175, 175, 175, 1964, 117, 2462,
	175, 175, 2458, 2223, 2457, 2454, 1663, 2434, 1663, 1111,
	2433, 1678, 604, 2407, 1678, 949, 950, 1671, 1931, 2402,
	761, 2398, 2390, 2271, 571, 1111, 2223, 1932, 2363, 2341,
	2338, 483, 1671, 2223, 1111, 2336, 1777, 1778, 952, 2223,
	2321, 2320, 2298, 2295, 1111, 2223, 1111, 1111, 2278, 1086,
	2245, 2243, 1671, 2222, 1663, 1663, 2203, 2223, 397, 25,
	1111, 2183, 951, 1614, 1108, 1663, 1663, 1250, 966, 2161,
	586, 2158, 117, 1663, 569, 1671, 2137, 1548, 1744, 2132,
	1618, 568, 176, 1618, 1745, 687, 2057, 949, 950, 1792,
	969, 970, 971, 979, 980, 981, 2408, 755, 686, 723,
	1527, 724, 581, 972, 1678, 721, 2271, 2064, 745, 749,
	952, 2065, 1975, 983, 1942, 1903, 1663, 1858, 1904, 1111,
	1831, 1663, 1824, 957, 1111, 1822, 1825, 1821, 1820, 1663,
	1743, 1663, 1663, 1741, 951, 1682, 1663, 1663, 1670, 1663,
	966, 1614, 1671, 2057, 1783, 38, 1663, 1751, 1662, 738,
	1547, 1959, 1663, 1579, 949, 950, 39, 969, 970, 971,
	979, 980, 981, 1617, 1678, 2036, 1978, 1618, 1553, 44,
	972, 1111, 1552, 1904, 1710, 747, 751, 952, 757, 1230,
	983, 1230, 967, 949, 950, 1230, 734, 1693, 1242, 1308,
	1055, 50, 1243, 1453, 759, 957, 845, 137, 2226, 1472,
	842, 951, 841, 1793, 1327, 134, 952, 966, 840, 839,
	838, 837, 836, 835, 834, 976, 984, 833, 832, 831,
	61, 1777, 1778, 725, 722, 564, 563, 62, 562, 63,
	951, 1777, 1778, 982, 136, 175, 530, 175, 175, 529,
	175, 528, 527, 526, 525, 175, 1473, 524, 974, 523,
	522, 175, 521, 520, 967, 968, 65, 519, 518, 517,
	516, 765, 957, 1931, 175, 175, 175, 175, 175, 515,
	135, 514, 499, 826, 498, 497, 1794, 496, 495, 973,
	431, 430, 976, 984, 429, 1645, 428, 816, 427, 412,
	411, 957, 1474, 1471, 577, 175, 403, 1235, 402, 1228,
	982, 1777, 1778, 1361, 120, 401, 400, 1850, 175, 391,
	390, 1488, 389, 1547, 388, 974, 160, 159, 158, 157,
	156, 967, 1777, 1778, 175, 155, 154, 968, 153, 1783,
	781, 152, 151, 785, 175, 150, 66, 149, 148, 1783,
	147, 146, 145, 977, 144, 143, 973, 962, 960, 961,
	953, 954, 955, 956, 958, 959, 142, 141, 140, 805,
	805, 121, 68, 139, 69, 826, 801, 1476, 1788, 1786,
	1787, 1779, 1780, 1781, 1782, 1784, 1785, 134, 776, 138,
	1082, 1697, 1906, 1333, 464, 1486, 824, 101, 1793, 1484,
	876, 579, 1482, 2480, 968, 2453, 175, 879, 1793, 806,
	945, 2435, 2417, 846, 2358, 2339, 136, 2264, 2189, 1783,
	977, 975, 2188, 2184, 963, 964, 965, 978, 2176, 962,
	960, 961, 953, 954, 955, 956, 958, 959, 2175, 2174,
	1783, 2170, 1445, 751, 2169, 931, 2185, 2168, 2167, 2143,
	2051, 2046, 135, 2045, 2044, 1470, 1986, 1902, 757, 1862,
	128, 134, 1829, 1826, 1814, 577, 1805, 129, 1776, 1773,
	874, 1794, 1772, 1770, 1757, 1756, 1577, 1676, 1793, 945,
	732, 1794, 1246, 930, 861, 944, 120, 858, 975, 1013,
	136, 963, 964, 965, 978, 1213, 962, 960, 961, 953,
	954, 955, 956, 958, 959, 1080, 2002, 765, 1006, 774,
	997, 2425, 1079, 1819, 2393, 2387, 2386, 2385, 2377, 2375,
	685, 929, 2353, 2352, 877, 2351, 135, 2307, 953, 954,
	955, 956, 958, 959, 128, 827, 2286, 1673, 2272, 2251,
	2229, 129, 2181, 2120, 2118, 1777, 1778, 569, 1446, 2117,
	2115, 1794, 1328, 1706, 568, 2092, 2091, 175, 2072, 175,
	1644, 1705, 2060, 941, 942, 1787, 1779, 1780, 1781, 1782,
	1784, 1785, 2263, 946, 1786, 1787, 1779, 1780, 1781, 1782,
	1784, 1785, 175, 175, 1970, 2369, 1946, 1893, 751, 1888,
	1875, 1874, 1860, 134, 1830, 1059, 1804, 1066, 1766, 826,
	175, 1765, 1762, 577, 1009, 1875, 1115, 1737, 1732, 1439,
	1042, 1039, 1040, 1045, 1564, 1536, 175, 949, 950, 1043,
	1480, 1206, 136, 733, 1058, 1064, 1049, 827, 175, 1046,
	1035, 1109, 949, 950, 175, 1034, 175, 1212, 175, 1033,
	952, 1032, 175, 1788, 1786, 1787, 1779, 1780, 1781, 1782,
	1784, 1785, 1031, 1783, 134, 952, 1205, 1030, 135, 1029,
	1028, 1027, 1026, 1025, 951, 1848, 128, 1779, 1780, 1781,
	1782, 1784, 1785, 129, 1487, 1024, 1080, 1023, 1022, 951,
	1054, 117, 1021, 136, 175, 175, 1020, 1218, 1076, 1019,
	1018, 826, 120, 175, 1017, 1052, 175, 1010, 1084, 998,
	997, 857, 849, 820, 1056, 2270, 2163, 2142, 2067, 2063,
	1565, 1006, 1944, 995, 1001, 1681, 1917, 1115, 873, 135,
	1777, 1778, 634, 2274, 2273, 957, 175, 128, 2267, 2070,
	1933, 175, 1614, 1082, 129, 1232, 175, 175, 1234, 175,
	775, 175, 1237, 175, 927, 175, 1110, 1828, 1485, 801,
	1827, 1099, 1483, 120, 1716, 1481, 175, 870, 1680, 38,
	1949, 1047, 175, 175, 738, 1087, 1048, 1247, 1015, 1314,
	39, 1097, 1211, 2291, 1641, 2003, 1748, 1460, 1220, 1223,
	1038, 1927, 2079, 44, 921, 689, 2420, 1256, 175, 1098,
	688, 1667, 1115, 2478, 2237, 2477, 712, 1956, 1204, 913,
	1092, 1683, 1093, 710, 2397, 50, 1334, 2331, 1323, 1092,
	714, 1093, 2330, 708, 2329, 631, 751, 1244, 1222, 705,
	1222, 1335, 2328, 922, 1583, 1301, 1245, 858, 2107, 1583,
	2103, 1302, 733, 2105, 61, 1582, 405, 2076, 1012, 1305,
	432, 62, 2075, 63, 1761, 1472, 1080, 1760, 1759, 1331,
	1319, 827, 1758, 1719, 1666, 117, 1364, 1360, 1116, 577,
	1674, 1610, 1349, 1092, 577, 1093, 1339, 417, 1342, 1606,
	65, 1604, 1343, 1421, 1344, 2248, 1345, 1094, 1346, 1053,
	1347, 1391, 1781, 1782, 1784, 1785, 1094, 1256, 1256, 1205,
	758, 871, 1473, 1540, 175, 1539, 175, 1353, 1355, 175,
	1315, 161, 1363, 1362, 1392, 569, 1638, 1358, 569, 569,
	175, 1359, 1373, 566, 592, 1374, 1375, 409, 1545, 1115,
	418, 436, 175, 1381, 2396, 1457, 175, 2110, 478, 175,
	2111, 1240, 1945, 175, 872, 1777, 1778, 175, 1474, 1471,
	1094, 1436, 175, 827, 2312, 1287, 1899, 577, 175, 1115,
	66, 1201, 175, 948, 955, 956, 958, 959, 1286, 1447,
	1444, 2218, 575, 828, 1591, 856, 1436, 2431, 1303, 1116,
	392, 1224, 959, 1338, 1566, 121, 68, 1686, 69, 435,
	1443, 1476, 164, 1318, 1317, 1441, 1327, 1324, 1688, 1502,
	2094, 134, 2404, 1595, 1597, 1348, 2219, 2469, 464, 1895,
	907, 101, 1460, 1584, 1708, 1709, 949, 950, 1567, 1689,
	1890, 2477, 574, 1476, 1996, 1886, 2405, 1542, 1543, 1925,
	136, 1687, 1102, 1924, 1090, 1557, 1551, 1383, 1390, 952,
	1602, 1100, 1594, 1561, 1562, 886, 1608, 908, 1612, 2380,
	165, 1955, 1084, 1783, 1116, 1287, 1287, 175, 2493, 1611,
	1357, 1587, 1600, 951, 175, 828, 135, 1605, 1286, 1286,
	1785, 2101, 576, 1924, 128, 175, 1580, 175, 1321, 175,
	1957, 129, 175, 1229, 175, 926, 175, 175, 1633, 175,
	175, 2450, 1036, 2282, 826, 420, 419, 1106, 175, 1476,
	120, 1470, 738, 706, 867, 912, 2214, 1095, 2215, 1661,
	706, 1509, 1793, 1105, 716, 2335, 1095, 715, 738, 1450,
	707, 1578, 992, 1001, 957, 1764, 706, 1454, 404, 751,
	2468, 1462, 434, 1103, 751, 1560, 393, 1576, 2217, 1556,
	757, 1593, 576, 1293, 1494, 1494, 1507, 2220, 1519, 2150,
	2488, 1104, 410, 2449, 1531, 1532, 1534, 406, 2476, 1306,
	937, 437, 1322, 1643, 2095, 1643, 2313, 407, 920, 868,
	1095, 433, 1669, 869, 1655, 1729, 573, 805, 2451, 805,
	894, 1116, 2474, 967, 1115, 1794, 1647, 1658, 1898, 2256,
	1727, 1418, 175, 162, 1993, 614, 1659, 117, 470, 1635,
	1570, 1721, 394, 117, 1664, 567, 1668, 824, 175, 175,
	175, 1116, 175, 1665, 1675, 852, 1656, 1677, 1657, 844,
	477, 475, 2323, 2322, 947, 2216, 1435, 471, 1592, 2467,
	2305, 175, 163, 2372, 2452, 172, 855, 396, 2179, 1442,
	1994, 398, 1043, 1067, 1046, 1337, 2078, 862, 2233, 413,
	1992, 2494, 1040, 1039, 472, 1871, 968, 1652, 438, 1071,
	1684, 1724, 1867, 481, 172, 2499, 887, 489, 757, 757,
	494, 1725, 1636, 1694, 474, 1730, 1230, 395, 513, 1074,
	1779, 1780, 1781, 1782, 1784, 1785, 1219, 2218, 2486, 828,
	2211, 1369, 1208, 1416, 1419, 1558, 1117, 1071, 2209, 2413,
	779, 778, 2213, 888, 1072, 117, 885, 1352, 426, 2236,
	1700, 577, 1698, 936, 867, 1476, 2235, 1074, 1704, 1309,
	2123, 1067, 2219, 917, 720, 720, 1415, 1702, 421, 2032,
	1856, 2306, 398, 1069, 1328, 1325, 168, 936, 2180, 2258,
	1877, 1876, 1072, 2487, 2212, 1714, 827, 1845, 2232, 1750,
	961, 953, 954, 955, 956, 958, 959, 1070, 398, 398,
	753, 398, 1370, 1555, 2489, 172, 762, 2498, 1722, 1720,
	1432, 1554, 1844, 935, 867, 1071, 486, 895, 480, 868,
	1073, 828, 1726, 869, 473, 1430, 577, 1736, 918, 1728,
	1699, 757, 1701, 798, 751, 1074, 1857, 935, 937, 175,
	1115, 796, 867, 1747, 787, 175, 175, 1117, 574, 175,
	1832, 1069, 2113, 1715, 175, 1838, 2234, 175, 1073, 2249,
	1072, 1417, 2214, 2033, 2215, 175, 1839, 1897, 3, 2034,
	2191, 175, 175, 175, 911, 1070, 1116, 175, 2055, 476,
	175, 919, 1852, 1313, 557, 1479, 175, 175, 175, 175,
	175, 2303, 463, 33, 2217, 175, 1426, 175, 1811, 1812,
	1813, 175, 585, 2220, 1427, 2285, 1428, 868, 2178, 175,
	1433, 869, 1851, 763, 764, 2109, 2304, 1808, 488, 175,
	1847, 175, 1117, 175, 1861, 1969, 175, 1311, 1843, 1837,
	175, 1833, 1900, 1771, 1731, 175, 1073, 175, 467, 1312,
	704, 1905, 1679, 1907, 175, 1616, 760, 1868, 462, 32,
	1609, 1603, 925, 924, 1809, 850, 577, 175, 826, 1478,
	1863, 1350, 422, 558, 461, 29, 460, 78, 1341, 826,
	175, 1016, 485, 2445, 479, 1885, 1256, 2410, 916, 2207,
	2099, 2216, 1929, 1887, 905, 470, 797, 459, 77, 1892,
	1941, 2097, 910, 2077, 795, 456, 21, 903, 901, 1913,
	1735, 1950, 423, 899, 1639, 175, 743, 1738, 475, 1632,
	1256, 897, 1920, 1908, 471, 1239, 1911, 1429, 1909, 891,
	1926, 738, 1255, 1238, 1431, 1754, 1755, 738, 738, 1934,
	33, 738, 424, 1236, 425, 1935, 1936, 794, 1937, 1938,
	513, 472, 783, 513, 1940, 788, 457, 22, 1233, 1117,
	791, 455, 27, 1864, 1954, 175, 398, 1951, 1836, 1256,
	1231, 474, 1107, 559, 1840, 1841, 709, 711, 1846, 513,
	513, 398, 813, 762, 1972, 1803, 1960, 1889, 1962, 1117,
	1988, 1989, 1990, 1101, 1096, 1289, 32, 1816, 1952, 1953,
	1288, 1901, 1116, 454, 19, 452, 18, 453, 17, 915,
	513, 1958, 29, 1983, 78, 904, 447, 14, 1912, 2346,
	1979, 448, 15, 513, 1982, 1252, 1872, 1204, 902, 900,
	1256, 1915, 1255, 1255, 898, 77, 1204, 446, 13, 853,
	2009, 2004, 896, 21, 1287, 2006, 175, 2478, 2039, 513,
	890, 560, 175, 2269, 2011, 2268, 1332, 1286, 451, 11,
	1872, 175, 175, 1995, 1997, 1998, 1256, 1256, 793, 939,
	728, 445, 9, 2040, 2139, 1256, 1256, 2066, 1287, 2348,
	2073, 473, 1599, 561, 465, 450, 7, 1712, 449, 6,
	729, 1286, 444, 5, 22, 1289, 1289, 1963, 2131, 27,
	1288, 1288, 2056, 2058, 2053, 175, 2108, 175, 1256, 1943,
	2089, 398, 2382, 2059, 175, 2071, 1583, 826, 2090, 2226,
	827, 2119, 1598, 2360, 828, 1252, 1252, 1287, 2074, 2116,
	889, 827, 175, 175, 2081, 117, 476, 2088, 949, 950,
	1286, 19, 940, 18, 2133, 17, 2102, 949, 950, 1713,
	175, 2192, 1583, 2124, 14, 487, 943, 2136, 1596, 15,
	175, 952, 1607, 730, 2127, 1115, 2125, 2114, 2128, 1601,
	2098, 2409, 2100, 2254, 1646, 13, 1634, 2126, 1631, 1544,
	1304, 1248, 2129, 2484, 2497, 951, 2135, 2134, 1287, 1777,
	1778, 2152, 2297, 2140, 951, 2197, 11, 949, 950, 1691,
	1690, 1286, 2141, 175, 2052, 1999, 1383, 2007, 1976, 9,
	1691, 1947, 1372, 1853, 1117, 1383, 2012, 1823, 1692, 1541,
	1538, 1537, 2157, 7, 1287, 1287, 6, 1468, 738, 1003,
	5, 2165, 1991, 1287, 1287, 1910, 1013, 1286, 1286, 1011,
	923, 914, 909, 906, 892, 854, 1286, 1286, 2043, 1307,
	565, 2177, 2311, 468, 2153, 1340, 893, 1849, 175, 1563,
	2403, 175, 494, 2171, 720, 2062, 1287, 1763, 1256, 2365,
	2281, 1115, 175, 175, 1477, 2037, 175, 175, 175, 1286,
	2195, 1014, 54, 2086, 608, 2208, 2047, 398, 398, 2080,
	1626, 1625, 2202, 175, 1118, 1316, 630, 2201, 175, 1493,
	175, 1510, 175, 175, 175, 172, 175, 1384, 175, 2196,
	826, 2194, 2231, 2227, 1652, 738, 2230, 2198, 175, 175,
	703, 398, 632, 1253, 633, 826, 2089, 1254, 2247, 1044,
	620, 1251, 821, 1217, 2090, 1650, 1320, 2252, 1440, 398,
	2250, 398, 1458, 398, 1746, 2255, 1007, 1225, 2206, 600,
	2089, 612, 1836, 2088, 611, 2089, 1455, 848, 2090, 2104,
	2199, 2259, 1854, 2090, 2106, 2261, 2253, 1923, 2262, 827,
	1368, 1703, 1365, 1919, 2260, 2096, 408, 2088, 2266, 1774,
	819, 2275, 2088, 1516, 1508, 1504, 928, 609, 73, 513,
	172, 1065, 993, 1651, 875, 1930, 1672, 1057, 172, 1376,
	727, 513, 726, 2280, 1310, 1685, 986, 985, 175, 713,
	175, 2374, 1115, 175, 866, 865, 1209, 1116, 1870, 2492,
	2381, 175, 2093, 2419, 2265, 133, 1287, 1115, 130, 132,
	1117, 513, 131, 2287, 1896, 81, 513, 31, 2294, 1286,
	738, 172, 513, 30, 513, 100, 513, 99, 513, 98,
	513, 73, 2315, 2296, 97, 2317, 96, 175, 2089, 2314,
	826, 1351, 95, 94, 175, 1205, 2090, 513, 513, 93,
	92, 91, 175, 175, 826, 826, 2337, 2193, 2299, 1256,
	2332, 90, 89, 2347, 2240, 2088, 2089, 88, 2244, 87,
	86, 2333, 175, 513, 2090, 2345, 2343, 175, 2349, 85,
	2354, 2301, 2355, 84, 175, 570, 2356, 2357, 578, 2344,
	83, 509, 2376, 2088, 506, 80, 2316, 2370, 2359, 79,
	28, 24, 2368, 1116, 739, 73, 2371, 2326, 2327, 175,
	175, 104, 23, 76, 75, 1256, 175, 26, 2362, 16,
	10, 2391, 2389, 20, 826, 2378, 2340, 2392, 828, 175,
	59, 60, 58, 826, 826, 57, 2379, 56, 12, 828,
	52, 51, 827, 1241, 49, 48, 2395, 47, 878, 46,
	557, 2400, 2401, 577, 8, 1066, 175, 827, 175, 103,
	43, 175, 42, 1115, 1256, 41, 40, 102, 585, 115,
	112, 2426, 114, 2394, 2428, 111, 2427, 2415, 113, 494,
	116, 720, 108, 2309, 762, 109, 2416, 110, 107, 175,
	106, 37, 2432, 2430, 36, 398, 35, 34, 2429, 2,
	1, 2442, 2444, 2443, 0, 0, 175, 1575, 2089, 2461,
	2455, 398, 175, 0, 398, 0, 2090, 1287, 1588, 2342,
	2463, 2466, 398, 2464, 2465, 2460, 175, 398, 0, 558,
	1286, 0, 0, 398, 0, 2088, 2475, 1615, 2473, 0,
	2479, 2459, 0, 2293, 1116, 0, 0, 0, 2482, 0,
	0, 1255, 2421, 0, 0, 2325, 0, 2483, 0, 1116,
	0, 0, 0, 2491, 2495, 2490, 590, 2496, 0, 0,
	0, 0, 0, 1287, 0, 0, 0, 0, 0, 0,
	2319, 0, 0, 0, 0, 1255, 1286, 0, 0, 1510,
	1510, 466, 827, 0, 0, 0, 0, 0, 2388, 0,
	0, 0, 0, 0, 0, 0, 827, 827, 0, 0,
	0, 467, 0, 0, 1289, 0, 0, 0, 0, 1288,
	0, 0, 1287, 0, 0, 0, 0, 0, 0, 559,
	0, 0, 1622, 0, 1255, 1286, 583, 0, 557, 762,
	0, 0, 0, 2418, 1252, 0, 0, 0, 1289, 0,
	398, 0, 1654, 1288, 513, 0, 585, 513, 470, 513,
	0, 398, 398, 0, 1660, 762, 1510, 1510, 1510, 0,
	0, 0, 0, 1588, 0, 0, 827, 828, 1252, 0,
	0, 475, 0, 0, 0, 827, 827, 471, 0, 584,
	0, 0, 0, 0, 1652, 1255, 0, 1289, 0, 0,
	0, 0, 1288, 0, 0, 0, 0, 560, 0, 0,
	578, 2406, 0, 0, 472, 1116, 0, 558, 0, 0,
	0, 0, 0, 0, 0, 1117, 0, 1252, 0, 0,
	0, 1255, 1255, 0, 474, 0, 2422, 2423, 2424, 561,
	1255, 1255, 0, 0, 0, 0, 0, 0, 1777, 1778,
	0, 1795, 1796, 1797, 0, 0, 0, 0, 1289, 0,
	0, 0, 0, 1288, 2155, 0, 0, 1696, 0, 0,
	0, 0, 0, 1255, 0, 0, 1733, 1734, 0, 0,
	0, 0, 0, 398, 398, 398, 0, 398, 1252, 0,
	0, 0, 0, 0, 1289, 1289, 0, 0, 0, 1288,
	1288, 1792, 0, 1289, 1289, 0, 398, 0, 1288, 1288,
	0, 0, 949, 950, 0, 0, 0, 559, 0, 0,
	0, 0, 0, 0, 1252, 1252, 0, 0, 0, 0,
	0, 1117, 0, 1252, 1252, 952, 1289, 766, 768, 770,
	772, 1288, 0, 0, 473, 0, 0, 0, 570, 949,
	950, 0, 0, 1800, 1801, 1802, 1783, 0, 0, 951,
	0, 0, 0, 0, 0, 0, 1252, 0, 0, 996,
	828, 999, 952, 0, 0, 1510, 1510, 0, 1004, 0,
	0, 0, 0, 0, 0, 828, 0, 0, 0, 0,
	0, 0, 0, 582, 1798, 560, 951, 0, 0, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1793, 0, 0, 0, 0,
	957, 0, 0, 847, 0, 0, 0, 561, 0, 851,
	0, 0, 0, 1255, 1510, 1510, 1510, 1510, 1510, 1510,
	1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510,
	1510, 1510, 1510, 0, 1510, 0, 590, 957, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1117, 0, 398, 0, 0, 0, 0, 967,
	398, 398, 0, 0, 398, 0, 0, 1117, 1794, 1575,
	0, 0, 1575, 0, 0, 0, 1289, 0, 0, 0,
	1859, 1288, 0, 0, 73, 0, 398, 1865, 1866, 1083,
	0, 0, 1588, 0, 0, 1873, 967, 0, 0, 0,
	828, 1878, 1879, 1881, 1883, 1884, 1252, 0, 0, 0,
	398, 0, 1891, 0, 828, 828, 1894, 987, 988, 989,
	990, 991, 0, 0, 398, 0, 0, 1000, 0, 0,
	0, 0, 968, 0, 1217, 0, 1217, 1008, 513, 0,
	0, 398, 1967, 1968, 0, 1918, 0, 0, 0, 0,
	398, 0, 1928, 0, 0, 1789, 1790, 1791, 0, 398,
	1788, 1786, 1787, 1779, 1780, 1781, 1782, 1784, 1785, 968,
	0, 0, 1696, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 828, 1696, 0, 0, 0, 0,
	0, 0, 0, 828, 828, 1777, 1778, 0, 1795, 1796,
	1797, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021,
	2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031,
	398, 2035, 0, 1117, 1255, 960, 961, 953, 954, 955,
	956, 958, 959, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1792, 0,
	1062, 1062, 0, 0, 0, 0, 0, 590, 73, 0,
	0, 962, 960, 961, 953, 954, 955, 956, 958, 959,
	2001, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1255, 0, 0, 0, 0, 0, 570, 1289, 0, 570,
	570, 0, 1288, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1783, 0, 0, 0, 0, 0, 1075,
	0, 0, 0, 0, 0, 0, 0, 1252, 0, 0,
	0, 0, 0, 0, 1799, 38, 0, 0, 0, 1255,
	0, 0, 1438, 0, 1777, 1778, 39, 1795, 1796, 1797,
	0, 1798, 0, 1289, 0, 578, 0, 0, 1288, 44,
	999, 398, 0, 0, 0, 0, 0, 1575, 0, 0,
	0, 0, 1793, 0, 0, 0, 762, 1575, 0, 0,
	0, 50, 0, 1252, 0, 0, 0, 0, 0, 0,
	0, 2085, 0, 0, 0, 0, 0, 1792, 0, 0,
	0, 0, 1289, 0, 0, 590, 590, 1288, 949, 950,
	61, 0, 0, 0, 0, 0, 0, 62, 0, 63,
	1588, 0, 1217, 1510, 0, 0, 0, 739, 0, 2121,
	0, 952, 1252, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1083, 0, 1794, 65, 398, 398, 0,
	0, 0, 1783, 0, 0, 951, 73, 0, 0, 0,
	0, 0, 73, 0, 1510, 2147, 0, 0, 0, 1366,
	0, 1371, 0, 0, 0, 2149, 0, 1378, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1393, 1394, 1395,
	1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405,
	1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 0,
	1420, 1793, 1422, 1423, 1424, 1425, 957, 0, 2172, 0,
	0, 0, 0, 0, 0, 0, 66, 0, 0, 1448,
	1510, 0, 1789, 1790, 1791, 0, 1000, 1788, 1786, 1787,
	1779, 1780, 1781, 1782, 1784, 1785, 0, 0, 0, 0,
	0, 121, 68, 0, 69, 1489, 1490, 0, 0, 1506,
	0, 1518, 1520, 1525, 1528, 1529, 1530, 134, 0, 0,
	0, 0, 0, 398, 464, 967, 762, 101, 0, 73,
	0, 73, 0, 0, 1794, 0, 0, 1575, 762, 0,
	0, 2204, 2205, 1588, 0, 0, 136, 0, 0, 0,
	73, 0, 0, 0, 0, 0, 73, 2085, 762, 0,
	2284, 0, 0, 2238, 0, 2239, 0, 398, 2241, 2242,
	0, 398, 0, 2246, 0, 0, 0, 0, 0, 0,
	0, 2085, 135, 762, 1622, 0, 2085, 0, 0, 0,
	128, 0, 0, 0, 0, 0, 0, 129, 968, 0,
	0, 2308, 0, 0, 0, 0, 0, 39, 0, 0,
	0, 0, 0, 0, 0, 0, 120, 0, 0, 0,
	44, 1789, 1790, 1791, 0, 0, 1788, 1786, 1787, 1779,
	1780, 1781, 1782, 1784, 1785, 0, 0, 0, 949, 950,
	0, 969, 970, 971, 979, 980, 981, 0, 0, 0,
	0, 0, 0, 0, 972, 0, 0, 0, 73, 0,
	0, 952, 0, 0, 983, 0, 0, 2361, 0, 0,
	0, 0, 0, 1588, 0, 2300, 0, 0, 2302, 0,
	0, 0, 0, 0, 0, 951, 398, 0, 0, 2085,
	0, 966, 0, 953, 954, 955, 956, 958, 959, 0,
	0, 0, 0, 0, 0, 0, 0, 65, 0, 0,
	0, 0, 0, 0, 2334, 0, 0, 2085, 0, 0,
	0, 0, 398, 0, 0, 0, 0, 1438, 0, 762,
	0, 0, 0, 0, 0, 0, 0, 2147, 2147, 1777,
	1778, 0, 1795, 1796, 1797, 0, 957, 999, 0, 0,
	0, 0, 0, 0, 0, 2154, 0, 2367, 0, 0,
	0, 0, 1575, 0, 0, 0, 976, 984, 0, 1217,
	0, 0, 0, 0, 949, 950, 0, 969, 970, 971,
	979, 980, 981, 0, 982, 0, 0, 66, 0, 0,
	972, 0, 1792, 0, 2383, 2384, 0, 952, 0, 974,
	983, 398, 0, 0, 0, 967, 0, 0, 0, 0,
	0, 0, 121, 68, 2399, 69, 0, 0, 0, 0,
	0, 951, 999, 0, 0, 0, 0, 966, 134, 0,
	973, 0, 0, 0, 0, 464, 0, 0, 101, 0,
	0, 2414, 0, 762, 0, 0, 398, 1783, 0, 0,
	0, 0, 0, 0, 0, 0, 739, 136, 0, 2085,
	0, 0, 739, 739, 0, 0, 739, 0, 0, 0,
	0, 0, 0, 0, 2367, 0, 0, 0, 968, 0,
	0, 0, 957, 0, 0, 1798, 0, 0, 0, 0,
	0, 762, 0, 135, 977, 0, 0, 398, 0, 1717,
	1718, 128, 976, 984, 0, 1723, 1793, 0, 129, 73,
	0, 2472, 0, 0, 0, 73, 0, 0, 0, 0,
	982, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	0, 0, 0, 0, 0, 974, 0, 1742, 0, 73,
	0, 967, 73, 0, 1749, 0, 0, 1753, 0, 0,
	0, 0, 578, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 975, 0, 1767, 963, 964, 965, 978, 0,
	962, 960, 961, 953, 954, 955, 956, 958, 959, 1794,
	0, 0, 0, 0, 0, 0, 0, 1818, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1000, 0,
	0, 0, 0, 0, 0, 1525, 1525, 1525, 0, 0,
	0, 0, 949, 950, 968, 969, 970, 971, 979, 980,
	981, 0, 0, 0, 0, 0, 0, 0, 972, 0,
	977, 1062, 0, 0, 0, 952, 590, 0, 983, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 951,
	0, 0, 0, 0, 0, 966, 1789, 1790, 1791, 0,
	0, 1788, 1786, 1787, 1779, 1780, 1781, 1782, 1784, 1785,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 975, 0,
	0, 963, 964, 965, 978, 0, 962, 960, 961, 953,
	954, 955, 956, 958, 959, 0, 0, 0, 0, 0,
	957, 0, 0, 0, 0, 1921, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 73, 0,
	976, 984, 0, 0, 0, 0, 0, 1939, 0, 0,
	0, 0, 0, 739, 0, 0, 0, 0, 982, 0,
	0, 0, 0, 0, 590, 590, 0, 0, 0, 0,
	0, 0, 0, 974, 0, 0, 0, 590, 0, 967,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1961,
	0, 0, 0, 0, 1378, 0, 0, 0, 0, 0,
	1965, 0, 0, 1966, 973, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1971, 0, 0, 0, 0,
	0, 0, 0, 0, 1980, 0, 0, 0, 0, 0,
	0, 0, 1984, 0, 0, 1939, 0, 0, 0, 0,
	739, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 968, 0, 0, 2008, 0, 0, 0, 2010,
	0, 0, 0, 0, 0, 0, 0, 0, 977, 0,
	0, 0, 949, 950, 0, 969, 970, 971, 979, 980,
	981, 0, 0, 0, 0, 0, 0, 0, 972, 0,
	0, 0, 2041, 2042, 0, 952, 0, 0, 983, 0,
	0, 2048, 2049, 2050, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 951,
	0, 0, 0, 0, 0, 966, 0, 0, 2061, 0,
	0, 0, 0, 0, 0, 0, 975, 0, 0, 963,
	964, 965, 978, 0, 962, 960, 961, 953, 954, 955,
	956, 958, 959, 0, 0, 0, 0, 0, 2082, 0,
	0, 1817, 0, 0, 0, 739, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	957, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	976, 984, 0, 0, 0, 0, 0, 0, 1062, 0,
	0, 0, 0, 0, 0, 0, 0, 590, 982, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 441, 0,
	0, 0, 38, 974, 0, 0, 0, 0, 0, 967,
	73, 0, 0, 39, 123, 0, 0, 0, 0, 38,
	0, 0, 0, 2156, 0, 0, 44, 2159, 2160, 0,
	39, 0, 2162, 0, 973, 0, 0, 0, 0, 2164,
	125, 2166, 0, 44, 0, 0, 45, 0, 50, 0,
	0, 0, 0, 0, 0, 949, 950, 2173, 969, 970,
	971, 979, 980, 981, 0, 50, 0, 0, 0, 53,
	0, 972, 0, 55, 0, 0, 0, 61, 952, 0,
	126, 983, 968, 0, 62, 0, 63, 0, 0, 0,
	2182, 0, 0, 0, 61, 0, 0, 0, 977, 949,
	950, 62, 951, 63, 64, 979, 980, 981, 966, 0,
	0, 0, 0, 65, 0, 0, 0, 0, 0, 0,
	0, 0, 952, 0, 0, 983, 0, 0, 0, 0,
	65, 0, 73, 0, 0, 0, 0, 0, 0, 0,
	0, 2228, 0, 0, 0, 2350, 951, 0, 0, 0,
	0, 0, 966, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 957, 0, 0, 975, 0, 0, 963,
	964, 965, 978, 0, 962, 960, 961, 953, 954, 955,
	956, 958, 959, 976, 984, 0, 0, 0, 0, 0,
	0, 1769, 0, 66, 0, 0, 0, 0, 0, 67,
	0, 982, 0, 0, 0, 0, 0, 957, 2276, 2277,
	66, 0, 0, 0, 0, 0, 974, 74, 121, 68,
	0, 69, 967, 70, 0, 127, 0, 976, 984, 999,
	71, 0, 0, 0, 134, 121, 68, 0, 69, 2289,
	0, 82, 0, 0, 101, 2292, 0, 973, 0, 0,
	0, 134, 0, 124, 0, 0, 0, 0, 464, 0,
	974, 101, 0, 136, 0, 0, 967, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 0, 105, 0, 0, 0, 0, 0, 0, 2324,
	0, 122, 0, 0, 0, 968, 0, 0, 0, 135,
	0, 0, 0, 0, 0, 0, 0, 128, 0, 0,
	0, 977, 0, 0, 129, 0, 135, 0, 0, 0,
	0, 0, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 129, 0, 120, 0, 0, 4, 0, 0, 968,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	442, 0, 0, 0, 0, 977, 0, 0, 0, 0,
	0, 2373, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 975,
	0, 0, 963, 964, 965, 978, 0, 962, 960, 961,
	953, 954, 955, 956, 958, 959, 0, 0, 0, 0,
	2411, 0, 0, 0, 0, 590, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 975, 0, 0, 0, 0, 0, 978,
	0, 962, 960, 961, 953, 954, 955, 956, 958, 959,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2441, 2441,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2456, 0, 0, 0, 0, 1114,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2441, 0, 0, 177, 178, 1119, 179, 1120,
	1121, 1122, 1123, 332, 1124, 1125, 1126, 1127, 180, 181,
	182, 333, 334, 335, 336, 183, 337, 338, 1128, 184,
	339, 340, 185, 186, 1129, 1130, 341, 342, 343, 1131,
	187, 344, 1132, 830, 1133, 188, 189, 190, 2441, 191,
	1134, 192, 193, 194, 1135, 690, 195, 196, 197, 1136,
	1137, 1139, 1138, 1140, 1141, 1142, 198, 199, 399, 200,
	345, 201, 346, 347, 1143, 202, 1144, 203, 1145, 204,
	1146, 1147, 205, 206, 1148, 207, 1149, 0, 1150, 348,
	208, 209, 210, 349, 350, 1151, 1152, 1153, 211, 212,
	351, 352, 353, 0, 213, 1154, 214, 1155, 1156, 691,
	1157, 215, 354, 1158, 355, 1159, 0, 216, 217, 218,
	219, 356, 357, 693, 1160, 223, 1161, 220, 1162, 692,
	221, 358, 222, 359, 360, 361, 362, 363, 1163, 364,
	1164, 694, 224, 225, 226, 695, 227, 228, 229, 1165,
	231, 230, 1166, 365, 696, 232, 697, 1167, 233, 1168,
	1169, 234, 0, 235, 236, 237, 239, 366, 238, 698,
	240, 241, 243, 242, 1170, 1171, 1172, 367, 244, 368,
	245, 246, 1173, 247, 1174, 1175, 248, 1176, 1177, 249,
	369, 699, 250, 700, 370, 251, 252, 253, 254, 255,
	1178, 256, 371, 257, 372, 258, 1179, 259, 260, 261,
	262, 263, 373, 264, 265, 1180, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 1181, 278,
	701, 279, 280, 374, 281, 0, 285, 286, 287, 288,
	1182, 290, 375, 289, 291, 292, 1183, 293, 282, 283,
	294, 702, 295, 376, 377, 296, 1184, 303, 297, 298,
	284, 299, 302, 378, 300, 301, 379, 1185, 304, 1186,
	305, 306, 307, 308, 309, 310, 311, 1187, 380, 381,
	382, 1188, 1189, 312, 313, 383, 384, 1190, 314, 315,
	316, 317, 1191, 1192, 318, 319, 320, 321, 1193, 322,
	1194, 385, 323, 324, 325, 386, 387, 1195, 1196, 326,
	1197, 1198, 1199, 1200, 327, 328, 329, 330, 331, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1114, 0, 0, 0, 0, 0, 1568, 0, 0,
	0, 0, 0, 0, 0, 0, 1569, 177, 178, 1119,
	179, 1120, 1121, 1122, 1123, 332, 1124, 1125, 1126, 1127,
	180, 181, 182, 333, 334, 335, 336, 183, 337, 338,
	1128, 184, 339, 340, 185, 186, 1129, 1130, 341, 342,
	343, 1131, 187, 344, 1132, 830, 1133, 188, 189, 190,
	0, 191, 1134, 192, 193, 194, 1135, 690, 195, 196,
	197, 1136, 1137, 1139, 1138, 1140, 1141, 1142, 198, 199,
	399, 200, 345, 201, 346, 347, 1143, 202, 1144, 203,
	1145, 204, 1146, 1147, 205, 206, 1148, 207, 1149, 0,
	1150, 348, 208, 209, 210, 349, 350, 1151, 1152, 1153,
	211, 212, 351, 352, 353, 0, 213, 1154, 214, 1155,
	1156, 691, 1157, 215, 354, 1158, 355, 1159, 0, 216,
	217, 218, 219, 356, 357, 693, 1160, 223, 1161, 220,
	1162, 692, 221, 358, 222, 359, 360, 361, 362, 363,
	1163, 364, 1164, 694, 224, 225, 226, 695, 227, 228,
	229, 1165, 231, 230, 1166, 365, 696, 232, 697, 1167,
	233, 1168, 1169, 234, 0, 235, 236, 237, 239, 366,
	238, 698, 240, 241, 243, 242, 1170, 1171, 1172, 367,
	244, 368, 245, 246, 1173, 247, 1174, 1175, 248, 1176,
	1177, 249, 369, 699, 250, 700, 370, 251, 252, 253,
	254, 255, 1178, 256, 371, 257, 372, 258, 1179, 259,
	260, 261, 262, 263, 373, 264, 265, 1180, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	1181, 278, 701, 279, 280, 374, 281, 0, 285, 286,
	287, 288, 1182, 290, 375, 289, 291, 292, 1183, 293,
	282, 283, 294, 702, 295, 376, 377, 296, 1184, 303,
	297, 298, 284, 299, 302, 378, 300, 301, 379, 1185,
	304, 1186, 305, 306, 307, 308, 309, 310, 311, 1187,
	380, 381, 382, 1188, 1189, 312, 313, 383, 384, 1190,
	314, 315, 316, 317, 1191, 1192, 318, 319, 320, 321,
	1193, 322, 1194, 385, 323, 324, 325, 386, 387, 1195,
	1196, 326, 1197, 1198, 1199, 1200, 327, 328, 329, 330,
	331, 0, 0, 0, 1114, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2200,
	177, 178, 1119, 179, 1120, 1121, 1122, 1123, 332, 1124,
	1125, 1126, 1127, 180, 181, 182, 333, 334, 335, 336,
	183, 337, 338, 1128, 184, 339, 340, 185, 186, 1129,
	1130, 341, 342, 343, 1131, 187, 344, 1132, 830, 1133,
	188, 189, 190, 0, 191, 1134, 192, 193, 194, 1135,
	690, 195, 196, 197, 1136, 1137, 1139, 1138, 1140, 1141,
	1142, 198, 199, 399, 200, 345, 201, 346, 347, 1143,
	202, 1144, 203, 1145, 204, 1146, 1147, 205, 206, 1148,
	207, 1149, 0, 1150, 348, 208, 209, 210, 349, 350,
	1151, 1152, 1153, 211, 212, 351, 352, 353, 0, 213,
	1154, 214, 1155, 1156, 691, 1157, 215, 354, 1158, 355,
	1159, 0, 216, 217, 218, 219, 356, 357, 693, 1160,
	223, 1161, 220, 1162, 692, 221, 358, 222, 359, 360,
	361, 362, 363, 1163, 364, 1164, 694, 224, 225, 226,
	695, 227, 228, 229, 1165, 231, 230, 1166, 365, 696,
	232, 697, 1167, 233, 1168, 1169, 234, 0, 235, 236,
	237, 239, 366, 238, 698, 240, 241, 243, 242, 1170,
	1171, 1172, 367, 244, 368, 245, 246, 1173, 247, 1174,
	1175, 248, 1176, 1177, 249, 369, 699, 250, 700, 370,
	251, 252, 253, 254, 255, 1178, 256, 371, 257, 372,
	258, 1179, 259, 260, 261, 262, 263, 373, 264, 265,
	1180, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 1181, 278, 701, 279, 280, 374, 281,
	0, 285, 286, 287, 288, 1182, 290, 375, 289, 291,
	292, 1183, 293, 282, 283, 294, 702, 295, 376, 377,
	296, 1184, 303, 297, 298, 284, 299, 302, 378, 300,
	301, 379, 1185, 304, 1186, 305, 306, 307, 308, 309,
	310, 311, 1187, 380, 381, 382, 1188, 1189, 312, 313,
	383, 384, 1190, 314, 315, 316, 317, 1191, 1192, 318,
	319, 320, 321, 1193, 322, 1194, 385, 323, 324, 325,
	386, 387, 1195, 1196, 326, 1197, 1198, 1199, 1200, 327,
	328, 329, 330, 331, 1114, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1113, 0, 0,
	177, 178, 1119, 179, 1120, 1121, 1122, 1123, 332, 1124,
	1125, 1126, 1127, 180, 181, 182, 333, 334, 335, 336,
	183, 337, 338, 1128, 184, 339, 340, 185, 186, 1129,
	1130, 341, 342, 343, 1131, 187, 344, 1132, 830, 1133,
	188, 189, 190, 0, 191, 1134, 192, 193, 194, 1135,
	690, 195, 196, 197, 1136, 1137, 1139, 1138, 1140, 1141,
	1142, 198, 199, 399, 200, 345, 201, 346, 347, 1143,
	202, 1144, 203, 1145, 204, 1146, 1147, 205, 206, 1148,
	207, 1149, 0, 1150, 348, 208, 209, 210, 349, 350,
	1151, 1152, 1153, 211, 212, 351, 352, 353, 0, 213,
	1154, 214, 1155, 1156, 691, 1157, 215, 354, 1158, 355,
	1159, 0, 216, 217, 218, 219, 356, 357, 693, 1160,
	223, 1161, 220, 1162, 692, 221, 358, 222, 359, 360,
	361, 362, 363, 1163, 364, 1164, 694, 224, 225, 226,
	695, 227, 228, 229, 1165, 231, 230, 1166, 365, 696,
	232, 697, 1167, 233, 1168, 1169, 234, 0, 235, 236,
	237, 239, 366, 238, 698, 240, 241, 243, 242, 1170,
	1171, 1172, 367, 244, 368, 245, 246, 1173, 247, 1174,
	1175, 248, 1176, 1177, 249, 369, 699, 250, 700, 370,
	251, 252, 253, 254, 255, 1178, 256, 371, 257, 372,
	258, 1179, 259, 260, 261, 262, 263, 373, 264, 265,
	1180, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 1181, 278, 701, 279, 280, 374, 281,
	0, 285, 286, 287, 288, 1182, 290, 375, 289, 291,
	292, 1183, 293, 282, 283, 294, 702, 295, 376, 377,
	296, 1184, 303, 297, 298, 284, 299, 302, 378, 300,
	301, 379, 1185, 304, 1186, 305, 306, 307, 308, 309,
	310, 311, 1187, 380, 381, 382, 1188, 1189, 312, 313,
	383, 384, 1190, 314, 315, 316, 317, 1191, 1192, 318,
	319, 320, 321, 1193, 322, 1194, 385, 323, 324, 325,
	386, 387, 1195, 1196, 326, 1197, 1198, 1199, 1200, 327,
	328, 329, 330, 331, 1467, 0, 628, 617, 618, 615,
	616, 607, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 177, 178, 1464, 179, 0, 0, 0, 0,
	645, 610, 0, 0, 0, 180, 181, 182, 333, 660,
	335, 661, 183, 662, 663, 0, 184, 339, 340, 185,
	186, 613, 644, 664, 665, 343, 0, 187, 656, 0,
	636, 0, 188, 189, 190, 0, 191, 0, 192, 193,
	194, 0, 690, 195, 196, 197, 0, 637, 638, 640,
	0, 639, 641, 198, 199, 399, 200, 666, 201, 667,
	668, 0, 202, 0, 203, 0, 204, 1465, 0, 659,
	206, 0, 207, 0, 0, 0, 601, 208, 209, 210,
	646, 647, 624, 0, 0, 211, 212, 669, 670, 671,
	0, 213, 0, 214, 0, 0, 691, 0, 215, 657,
	0, 355, 0, 0, 216, 217, 218, 219, 653, 655,
	693, 0, 223, 0, 220, 0, 692, 221, 672, 222,
	673, 674, 675, 676, 677, 0, 635, 0, 694, 224,
	225, 226, 695, 227, 228, 229, 0, 231, 230, 0,
	658, 696, 232, 697, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 698, 240, 241, 243,
	242, 596, 0, 625, 654, 244, 678, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 699, 250,
	700, 648, 251, 252, 253, 254, 255, 0, 256, 649,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 679,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 701, 279, 280,
	602, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 642, 293, 282, 283, 294, 702, 295,
	680, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	681, 300, 301, 650, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 682, 683, 0, 0,
	312, 313, 651, 652, 623, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 643, 322, 0, 385, 323,
	324, 325, 386, 684, 1463, 0, 326, 0, 0, 0,
	0, 327, 328, 329, 330, 331, 597, 0, 0, 0,
	0, 0, 595, 0, 0, 0, 0, 593, 594, 1466,
	628, 617, 618, 615, 616, 607, 603, 1461, 0, 0,
	0, 0, 606, 0, 0, 0, 177, 178, 0, 179,
	0, 0, 0, 0, 645, 610, 0, 0, 0, 180,
	181, 182, 333, 660, 335, 661, 183, 662, 663, 0,
	184, 339, 340, 185, 186, 613, 644, 664, 665, 343,
	0, 187, 656, 0, 636, 0, 188, 189, 190, 0,
	191, 0, 192, 193, 194, 0, 690, 195, 196, 197,
	0, 637, 638, 640, 0, 639, 641, 198, 199, 399,
	200, 666, 201, 667, 668, 591, 202, 0, 203, 0,
	204, 0, 0, 659, 206, 0, 207, 0, 0, 0,
	601, 208, 209, 210, 646, 647, 624, 0, 0, 211,
	212, 669, 670, 671, 0, 213, 0, 214, 0, 0,
	691, 0, 215, 657, 0, 355, 0, 0, 216, 217,
	218, 219, 653, 655, 693, 0, 223, 0, 220, 0,
	692, 221, 672, 222, 673, 674, 675, 676, 677, 0,
	635, 0, 694, 224, 225, 226, 695, 227, 228, 229,
	0, 231, 230, 0, 658, 696, 232, 697, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	698, 240, 241, 243, 242, 596, 0, 625, 654, 244,
	678, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 699, 250, 700, 648, 251, 252, 253, 254,
	255, 0, 256, 649, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 679, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 701, 279, 280, 602, 281, 0, 285, 286, 287,
	288, 134, 290, 375, 289, 291, 292, 642, 293, 282,
	283, 294, 702, 295, 680, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 681, 300, 301, 650, 0, 304,
	136, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	682, 683, 0, 0, 312, 313, 651, 652, 623, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 643,
	322, 0, 385, 323, 324, 325, 829, 684, 0, 0,
	326, 0, 0, 0, 128, 327, 328, 329, 330, 331,
	597, 129, 0, 0, 0, 0, 595, 0, 0, 0,
	0, 593, 594, 0, 0, 0, 0, 0, 0, 0,
	1002, 0, 0, 0, 0, 579, 606, 628, 617, 618,
	615, 616, 607, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 177, 178, 0, 179, 0, 0, 0,
	0, 645, 610, 0, 0, 0, 180, 181, 182, 333,
	660, 335, 661, 183, 662, 663, 0, 184, 339, 340,
	185, 186, 613, 644, 664, 665, 343, 0, 187, 656,
	0, 636, 0, 188, 189, 190, 0, 191, 0, 192,
	193, 194, 0, 690, 195, 196, 197, 0, 637, 638,
	640, 0, 639, 641, 198, 199, 399, 200, 666, 201,
	667, 668, 0, 202, 0, 203, 0, 204, 0, 0,
	659, 206, 0, 207, 0, 0, 0, 601, 208, 209,
	210, 646, 647, 624, 0, 0, 211, 212, 669, 670,
	671, 0, 213, 0, 214, 0, 0, 691, 0, 215,
	657, 0, 355, 0, 0, 216, 217, 218, 219, 653,
	655, 693, 0, 223, 0, 220, 0, 692, 221, 672,
	222, 673, 674, 675, 676, 677, 0, 635, 0, 694,
	224, 225, 226, 695, 227, 228, 229, 0, 231, 230,
	0, 658, 696, 232, 697, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 698, 240, 241,
	243, 242, 596, 0, 625, 654, 244, 678, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 699,
	250, 700, 648, 251, 252, 253, 254, 255, 0, 256,
	649, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	679, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 701, 279,
	280, 602, 281, 0, 285, 286, 287, 288, 134, 290,
	375, 289, 291, 292, 642, 293, 282, 283, 294, 702,
	295, 680, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 681, 300, 301, 650, 0, 304, 136, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 682, 683, 0,
	0, 312, 313, 651, 652, 623, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 643, 322, 0, 385,
	323, 324, 325, 829, 684, 0, 0, 326, 0, 0,
	0, 128, 327, 328, 329, 330, 331, 597, 129, 0,
	0, 0, 0, 595, 0, 0, 0, 0, 593, 594,
	628, 617, 618, 615, 616, 607, 0, 1002, 0, 0,
	0, 0, 0, 606, 0, 0, 177, 178, 0, 179,
	0, 0, 0, 0, 645, 610, 0, 0, 0, 180,
	181, 182, 333, 660, 335, 661, 183, 662, 663, 0,
	184, 339, 340, 185, 186, 613, 644, 664, 665, 343,
	0, 187, 656, 0, 636, 0, 188, 189, 190, 0,
	191, 0, 192, 193, 194, 0, 690, 195, 196, 197,
	0, 637, 638, 640, 0, 639, 641, 198, 199, 399,
	200, 666, 201, 667, 668, 0, 202, 0, 203, 0,
	204, 0, 0, 659, 206, 0, 207, 0, 0, 0,
	601, 208, 209, 210, 646, 647, 624, 0, 0, 211,
	212, 669, 670, 671, 0, 213, 0, 214, 0, 0,
	691, 0, 215, 657, 0, 355, 0, 0, 216, 217,
	218, 219, 653, 655, 693, 0, 223, 0, 220, 0,
	692, 221, 672, 222, 673, 674, 675, 676, 677, 0,
	635, 0, 694, 224, 225, 226, 695, 227, 228, 229,
	0, 231, 230, 0, 658, 696, 232, 697, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	698, 240, 241, 243, 242, 596, 0, 625, 654, 244,
	678, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 699, 250, 700, 648, 251, 252, 253, 254,
	255, 0, 256, 649, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 679, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 701, 279, 280, 602, 281, 0, 285, 286, 287,
	288, 134, 290, 375, 289, 291, 292, 642, 293, 282,
	283, 294, 702, 295, 680, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 681, 300, 301, 650, 0, 304,
	136, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	682, 683, 0, 0, 312, 313, 651, 652, 623, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 643,
	322, 0, 385, 323, 324, 325, 829, 684, 0, 0,
	326, 0, 0, 0, 128, 327, 328, 329, 330, 331,
	597, 129, 0, 0, 0, 0, 595, 0, 0, 0,
	0, 593, 594, 628, 617, 618, 615, 616, 607, 0,
	1002, 0, 0, 0, 0, 0, 606, 0, 0, 177,
	178, 0, 179, 0, 0, 0, 0, 645, 610, 0,
	0, 0, 180, 181, 182, 333, 660, 335, 661, 183,
	662, 663, 1521, 184, 339, 340, 185, 186, 613, 644,
	664, 665, 343, 0, 187, 656, 0, 636, 0, 188,
	189, 190, 0, 191, 0, 192, 193, 194, 0, 690,
	195, 196, 197, 0, 637, 638, 640, 0, 639, 641,
	198, 199, 399, 200, 666, 201, 667, 668, 0, 202,
	0, 203, 0, 204, 0, 0, 659, 206, 0, 207,
	0, 0, 0, 601, 208, 209, 210, 646, 647, 624,
	0, 0, 211, 212, 669, 670, 671, 0, 213, 0,
	214, 0, 1526, 691, 0, 215, 657, 0, 355, 0,
	0, 216, 217, 218, 219, 653, 655, 693, 0, 223,
	0, 220, 0, 692, 221, 672, 222, 673, 674, 675,
	676, 677, 0, 635, 0, 694, 224, 225, 226, 695,
	227, 228, 229, 0, 231, 230, 1522, 658, 696, 232,
	697, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 698, 240, 241, 243, 242, 596, 0,
	625, 654, 244, 678, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 699, 250, 700, 648, 251,
	252, 253, 254, 255, 0, 256, 649, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 679, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 701, 279, 280, 602, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	642, 293, 282, 283, 294, 702, 295, 680, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 681, 300, 301,
	650, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 682, 683, 0, 1523, 312, 313, 651,
	652, 623, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 643, 322, 0, 385, 323, 324, 325, 386,
	684, 0, 0, 326, 0, 0, 0, 0, 327, 328,
	329, 330, 331, 597, 0, 0, 0, 0, 0, 595,
	0, 0, 0, 0, 593, 594, 0, 0, 0, 0,
	0, 0, 0, 603, 0, 0, 0, 0, 587, 606,
	628, 617, 618, 615, 616, 607, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 177, 178, 0, 179,
	0, 0, 0, 0, 645, 610, 0, 0, 0, 180,
	181, 182, 333, 660, 335, 661, 183, 662, 663, 0,
	184, 339, 340, 185, 186, 613, 644, 664, 665, 343,
	0, 187, 656, 0, 636, 0, 188, 189, 190, 0,
	191, 0, 192, 193, 194, 0, 690, 195, 196, 197,
	0, 637, 638, 640, 0, 639, 641, 198, 199, 399,
	200, 666, 201, 667, 668, 591, 202, 0, 203, 0,
	204, 0, 0, 659, 206, 0, 207, 0, 0, 0,
	601, 208, 209, 210, 646, 647, 624, 0, 0, 211,
	212, 669, 670, 671, 0, 213, 0, 214, 0, 0,
	691, 0, 215, 657, 0, 355, 0, 0, 216, 217,
	218, 219, 653, 655, 693, 0, 223, 0, 220, 0,
	692, 221, 672, 222, 673, 674, 675, 676, 677, 0,
	635, 0, 694, 224, 225, 226, 695, 227, 228, 229,
	0, 231, 230, 0, 658, 696, 232, 697, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	698, 240, 241, 243, 242, 596, 0, 625, 654, 244,
	678, 245, 246, 0, 247, 589, 0, 248, 0, 0,
	249, 369, 699, 250, 700, 648, 251, 252, 253, 254,
	255, 0, 256, 649, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 679, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 701, 279, 280, 602, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 642, 293, 282,
	283, 294, 702, 295, 680, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 681, 300, 301, 650, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	682, 683, 0, 0, 312, 313, 651, 652, 623, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 643,
	322, 0, 385, 323, 324, 325, 386, 684, 0, 0,
	326, 0, 0, 0, 0, 327, 328, 329, 330, 331,
	597, 0, 0, 0, 0, 0, 595, 0, 0, 0,
	0, 593, 594, 628, 617, 618, 615, 616, 607, 0,
	603, 0, 0, 0, 0, 0, 606, 0, 0, 177,
	178, 0, 179, 0, 0, 0, 0, 645, 610, 0,
	0, 0, 180, 181, 182, 333, 660, 335, 661, 183,
	662, 663, 0, 184, 339, 340, 185, 186, 613, 644,
	664, 665, 343, 0, 187, 656, 0, 636, 0, 188,
	189, 190, 0, 191, 0, 192, 193, 194, 0, 690,
	195, 196, 197, 0, 637, 638, 640, 0, 639, 641,
	198, 199, 399, 200, 666, 201, 667, 668, 0, 202,
	0, 203, 0, 204, 0, 0, 659, 206, 0, 207,
	0, 0, 0, 601, 208, 209, 210, 646, 647, 624,
	0, 0, 211, 212, 669, 670, 671, 0, 213, 0,
	214, 0, 0, 691, 0, 215, 657, 0, 355, 0,
	0, 216, 217, 218, 219, 653, 655, 693, 0, 223,
	0, 220, 0, 692, 221, 672, 222, 673, 674, 675,
	676, 677, 0, 635, 0, 694, 224, 225, 226, 695,
	227, 228, 229, 0, 231, 230, 0, 658, 696, 232,
	697, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 698, 240, 241, 243, 242, 596, 2130,
	625, 654, 244, 678, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 699, 250, 700, 648, 251,
	252, 253, 254, 255, 0, 256, 649, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 679, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 701, 279, 280, 602, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	642, 293, 282, 283, 294, 702, 295, 680, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 681, 300, 301,
	650, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 682, 683, 0, 0, 312, 313, 651,
	652, 623, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 643, 322, 0, 385, 323, 324, 325, 386,
	684, 0, 0, 326, 0, 0, 0, 0, 327, 328,
	329, 330, 331, 597, 0, 0, 0, 0, 0, 595,
	0, 0, 0, 0, 593, 594, 1063, 628, 617, 618,
	615, 616, 607, 603, 0, 0, 0, 0, 0, 606,
	0, 0, 0, 177, 178, 0, 179, 0, 0, 0,
	0, 645, 610, 0, 0, 0, 180, 181, 182, 333,
	660, 335, 661, 183, 662, 663, 0, 184, 339, 340,
	185, 186, 613, 644, 664, 665, 343, 0, 187, 656,
	0, 636, 0, 188, 189, 190, 0, 191, 0, 192,
	193, 194, 0, 690, 195, 196, 197, 0, 637, 638,
	640, 0, 639, 641, 198, 199, 399, 200, 666, 201,
	667, 668, 0, 202, 0, 203, 0, 204, 0, 0,
	659, 206, 0, 207, 0, 0, 0, 601, 208, 209,
	210, 646, 647, 624, 0, 0, 211, 212, 669, 670,
	671, 0, 213, 0, 214, 0, 0, 691, 0, 215,
	657, 0, 355, 0, 0, 216, 217, 218, 219, 653,
	655, 693, 0, 223, 1380, 220, 0, 692, 221, 672,
	222, 673, 674, 675, 676, 677, 0, 635, 0, 694,
	224, 225, 226, 695, 227, 228, 229, 0, 231, 230,
	0, 658, 696, 232, 697, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 698, 240, 241,
	243, 242, 596, 0, 625, 654, 244, 678, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 699,
	250, 700, 648, 251, 252, 253, 254, 255, 0, 256,
	649, 257, 372, 258, 1379, 259, 260, 261, 262, 263,
	679, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 701, 279,
	280, 602, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 642, 293, 282, 283, 294, 702,
	295, 680, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 681, 300, 301, 650, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 682, 683, 0,
	0, 312, 313, 651, 652, 623, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 643, 322, 0, 385,
	323, 324, 325, 386, 684, 0, 0, 326, 0, 0,
	0, 0, 327, 328, 329, 330, 331, 597, 0, 0,
	0, 0, 0, 595, 0, 0, 0, 0, 593, 594,
	628, 617, 618, 615, 616, 607, 0, 603, 0, 0,
	0, 0, 0, 606, 0, 0, 177, 178, 0, 179,
	0, 0, 0, 0, 645, 610, 0, 0, 0, 180,
	181, 182, 333, 660, 335, 661, 183, 662, 663, 0,
	184, 339, 340, 185, 186, 613, 644, 664, 665, 343,
	0, 187, 656, 0, 636, 0, 188, 189, 190, 0,
	191, 0, 192, 193, 194, 0, 690, 195, 196, 197,
	0, 637, 638, 640, 0, 639, 641, 198, 199, 399,
	200, 666, 201, 667, 668, 591, 202, 0, 203, 0,
	204, 0, 0, 659, 206, 0, 207, 0, 0, 0,
	601, 208, 209, 210, 646, 647, 624, 0, 0, 211,
	212, 669, 670, 671, 0, 213, 0, 214, 0, 0,
	691, 0, 215, 657, 0, 355, 0, 0, 216, 217,
	218, 219, 653, 655, 693, 0, 223, 0, 220, 0,
	692, 221, 672, 222, 673, 674, 675, 676, 677, 0,
	635, 0, 694, 224, 225, 226, 695, 227, 228, 229,
	0, 231, 230, 0, 658, 696, 232, 697, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	698, 240, 241, 243, 242, 596, 0, 625, 654, 244,
	678, 245, 246, 0, 247, 589, 0, 248, 0, 0,
	249, 369, 699, 250, 700, 648, 251, 252, 253, 254,
	255, 0, 256, 649, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 679, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 701, 279, 280, 602, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 642, 293, 282,
	283, 294, 702, 295, 680, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 681, 300, 301, 650, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	682, 683, 0, 0, 312, 313, 651, 652, 623, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 643,
	322, 0, 385, 323, 324, 325, 386, 684, 0, 0,
	326, 0, 0, 0, 0, 327, 328, 329, 330, 331,
	597, 0, 0, 0, 0, 0, 595, 0, 0, 0,
	0, 593, 594, 628, 617, 618, 615, 616, 607, 0,
	603, 0, 0, 0, 0, 0, 606, 0, 0, 177,
	178, 0, 179, 0, 0, 0, 0, 645, 610, 0,
	0, 0, 180, 181, 182, 333, 660, 335, 661, 183,
	662, 663, 0, 184, 339, 340, 185, 186, 613, 644,
	664, 665, 343, 0, 187, 656, 0, 636, 0, 188,
	189, 190, 0, 191, 0, 192, 193, 194, 0, 690,
	195, 196, 197, 0, 637, 638, 640, 0, 639, 641,
	198, 199, 399, 200, 666, 201, 667, 668, 0, 202,
	0, 203, 0, 204, 0, 0, 659, 206, 0, 207,
	0, 0, 0, 601, 208, 209, 210, 646, 647, 624,
	0, 0, 211, 212, 669, 670, 671, 0, 213, 0,
	214, 0, 0, 691, 0, 215, 657, 0, 355, 0,
	0, 216, 217, 218, 219, 653, 655, 693, 0, 223,
	0, 220, 0, 692, 221, 672, 222, 673, 674, 675,
	676, 677, 0, 635, 0, 694, 224, 225, 226, 695,
	227, 228, 229, 0, 231, 230, 0, 658, 696, 232,
	697, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 698, 240, 241, 243, 242, 596, 0,
	625, 654, 244, 678, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 699, 250, 700, 648, 251,
	252, 253, 254, 255, 0, 256, 649, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 679, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 701, 279, 280, 602, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	642, 293, 282, 283, 294, 702, 295, 680, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 681, 300, 301,
	650, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 682, 683, 0, 0, 312, 313, 651,
	652, 623, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 643, 322, 0, 385, 323, 324, 325, 386,
	684, 0, 0, 326, 0, 0, 0, 0, 327, 328,
	329, 330, 331, 597, 0, 0, 0, 0, 0, 595,
	0, 0, 0, 0, 593, 594, 0, 0, 0, 0,
	0, 1006, 1456, 603, 0, 0, 0, 0, 0, 606,
	628, 617, 618, 615, 616, 607, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 177, 178, 0, 179,
	0, 0, 0, 0, 645, 610, 0, 0, 0, 180,
	181, 182, 333, 660, 335, 661, 183, 662, 663, 0,
	184, 339, 340, 185, 186, 613, 644, 664, 665, 343,
	0, 187, 656, 0, 636, 0, 188, 189, 190, 0,
	191, 0, 192, 193, 194, 0, 690, 195, 196, 197,
	0, 637, 638, 640, 0, 639, 641, 198, 199, 399,
	200, 666, 201, 667, 668, 591, 202, 0, 203, 0,
	204, 0, 0, 659, 206, 0, 207, 0, 0, 0,
	601, 208, 209, 210, 646, 647, 624, 0, 0, 211,
	212, 669, 670, 671, 0, 213, 0, 214, 0, 0,
	691, 0, 215, 657, 0, 355, 0, 0, 216, 217,
	218, 219, 653, 655, 693, 0, 223, 0, 220, 0,
	692, 221, 672, 222, 673, 674, 675, 676, 677, 0,
	635, 0, 694, 224, 225, 226, 695, 227, 228, 229,
	0, 231, 230, 0, 658, 696, 232, 697, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	698, 240, 241, 243, 242, 596, 0, 625, 654, 244,
	678, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 699, 250, 700, 648, 251, 252, 253, 254,
	255, 0, 256, 649, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 679, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 701, 279, 280, 602, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 642, 293, 282,
	283, 294, 702, 295, 680, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 681, 300, 301, 650, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	682, 683, 0, 0, 312, 313, 651, 652, 623, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 643,
	322, 0, 385, 323, 324, 325, 386, 684, 0, 0,
	326, 0, 0, 0, 0, 327, 328, 329, 330, 331,
	597, 0, 0, 0, 0, 0, 595, 0, 0, 0,
	0, 593, 594, 628, 617, 618, 615, 616, 607, 0,
	603, 0, 0, 0, 0, 0, 606, 0, 0, 177,
	178, 0, 179, 0, 0, 0, 0, 645, 610, 0,
	0, 0, 180, 181, 182, 333, 660, 335, 661, 183,
	662, 663, 0, 184, 339, 340, 185, 186, 613, 644,
	664, 665, 343, 0, 187, 656, 0, 636, 0, 188,
	189, 190, 0, 191, 0, 192, 193, 194, 0, 690,
	195, 196, 197, 0, 637, 638, 640, 0, 639, 641,
	198, 199, 399, 200, 666, 201, 667, 668, 0, 202,
	0, 203, 0, 204, 0, 0, 659, 206, 0, 207,
	0, 0, 0, 601, 208, 209, 210, 646, 647, 624,
	0, 0, 211, 212, 669, 670, 671, 0, 213, 0,
	214, 0, 0, 691, 0, 215, 657, 0, 355, 0,
	0, 216, 217, 218, 219, 653, 655, 693, 0, 223,
	0, 220, 0, 692, 221, 672, 222, 673, 674, 675,
	676, 677, 0, 635, 0, 694, 224, 225, 226, 695,
	227, 228, 229, 0, 231, 230, 0, 658, 696, 232,
	697, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 698, 240, 241, 243, 242, 596, 0,
	625, 654, 244, 678, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 699, 250, 700, 648, 251,
	252, 253, 254, 255, 0, 256, 649, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 679, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 701, 279, 280, 602, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	642, 293, 282, 283, 294, 702, 295, 680, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 681, 300, 301,
	650, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 682, 683, 0, 0, 312, 313, 651,
	652, 623, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 643, 322, 0, 385, 323, 324, 325, 386,
	684, 0, 0, 326, 0, 0, 0, 0, 327, 328,
	329, 330, 331, 597, 0, 0, 0, 0, 0, 595,
	0, 0, 0, 0, 593, 594, 628, 617, 618, 615,
	616, 607, 0, 603, 2038, 0, 0, 0, 0, 606,
	0, 0, 177, 178, 0, 179, 0, 0, 0, 0,
	645, 610, 0, 0, 0, 180, 181, 182, 333, 660,
	335, 661, 183, 662, 663, 0, 184, 339, 340, 185,
	186, 613, 644, 664, 665, 343, 0, 187, 656, 0,
	636, 0, 188, 189, 190, 0, 191, 0, 192, 193,
	194, 0, 690, 195, 196, 197, 0, 637, 638, 640,
	0, 639, 641, 198, 199, 399, 200, 666, 201, 667,
	668, 0, 202, 0, 203, 0, 204, 0, 0, 659,
	206, 0, 207, 0, 0, 0, 601, 208, 209, 210,
	646, 647, 624, 0, 0, 211, 212, 669, 670, 671,
	0, 213, 0, 214, 0, 0, 691, 0, 215, 657,
	0, 355, 0, 0, 216, 217, 218, 219, 653, 655,
	693, 0, 223, 0, 220, 0, 692, 221, 672, 222,
	673, 674, 675, 676, 677, 0, 635, 0, 694, 224,
	225, 226, 695, 227, 228, 229, 0, 231, 230, 0,
	658, 696, 232, 697, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 698, 240, 241, 243,
	242, 596, 0, 625, 654, 244, 678, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 699, 250,
	700, 648, 251, 252, 253, 254, 255, 0, 256, 649,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 679,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 701, 279, 280,
	602, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 642, 293, 282, 283, 294, 702, 295,
	680, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	681, 300, 301, 650, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 682, 683, 0, 0,
	312, 313, 651, 652, 623, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 643, 322, 0, 385, 323,
	324, 325, 386, 684, 1987, 0, 326, 0, 0, 0,
	0, 327, 328, 329, 330, 331, 597, 0, 0, 0,
	0, 0, 595, 0, 0, 0, 0, 593, 594, 628,
	617, 618, 615, 616, 607, 0, 603, 0, 0, 0,
	0, 0, 606, 0, 0, 177, 178, 0, 179, 0,
	0, 0, 0, 645, 610, 0, 0, 0, 180, 181,
	182, 333, 660, 335, 661, 183, 662, 663, 0, 184,
	339, 340, 185, 186, 613, 644, 664, 665, 343, 0,
	187, 656, 0, 636, 0, 188, 189, 190, 0, 191,
	0, 192, 193, 194, 0, 690, 195, 196, 197, 0,
	637, 638, 640, 0, 639, 641, 198, 199, 399, 200,
	666, 201, 667, 668, 0, 202, 0, 203, 0, 204,
	0, 0, 659, 206, 0, 207, 0, 0, 0, 601,
	208, 209, 210, 646, 647, 624, 0, 0, 211, 212,
	669, 670, 671, 0, 213, 0, 214, 0, 0, 691,
	0, 215, 657, 0, 355, 0, 0, 216, 217, 218,
	219, 653, 655, 693, 0, 223, 0, 220, 0, 692,
	221, 672, 222, 673, 674, 675, 676, 677, 0, 635,
	0, 694, 224, 225, 226, 695, 227, 228, 229, 0,
	231, 230, 0, 658, 696, 232, 697, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 698,
	240, 241, 243, 242, 596, 0, 625, 654, 244, 678,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 699, 250, 700, 648, 251, 252, 253, 254, 255,
	0, 256, 649, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 679, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	701, 279, 280, 602, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 642, 293, 282, 283,
	294, 702, 295, 680, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 681, 300, 301, 650, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 682,
	683, 0, 0, 312, 313, 651, 652, 623, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 643, 322,
	0, 385, 323, 324, 325, 386, 684, 0, 0, 326,
	0, 0, 0, 0, 327, 328, 329, 330, 331, 597,
	0, 0, 0, 0, 0, 595, 0, 0, 0, 0,
	593, 594, 628, 617, 618, 615, 616, 607, 0, 603,
	1977, 0, 0, 0, 0, 606, 0, 0, 177, 178,
	0, 179, 0, 0, 0, 0, 645, 610, 0, 0,
	0, 180, 181, 182, 333, 660, 335, 661, 183, 662,
	663, 0, 184, 339, 340, 185, 186, 613, 644, 664,
	665, 343, 0, 187, 656, 0, 636, 0, 188, 189,
	190, 0, 191, 0, 192, 193, 194, 0, 690, 195,
	196, 197, 0, 637, 638, 640, 0, 639, 641, 198,
	199, 399, 200, 666, 201, 667, 668, 0, 202, 0,
	203, 0, 204, 0, 0, 659, 206, 0, 207, 0,
	0, 0, 601, 208, 209, 210, 646, 647, 624, 0,
	0, 211, 212, 669, 670, 671, 0, 213, 0, 214,
	0, 0, 691, 0, 215, 657, 0, 355, 0, 0,
	216, 217, 218, 219, 653, 655, 693, 0, 223, 0,
	220, 0, 692, 221, 672, 222, 673, 674, 675, 676,
	677, 0, 635, 0, 694, 224, 225, 226, 695, 227,
	228, 229, 0, 231, 230, 0, 658, 696, 232, 697,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 698, 240, 241, 243, 242, 596, 0, 625,
	654, 244, 678, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 699, 250, 700, 648, 251, 252,
	253, 254, 255, 0, 256, 649, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 679, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 701, 279, 280, 602, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 642,
	293, 282, 283, 294, 702, 295, 680, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 681, 300, 301, 650,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 682, 683, 0, 0, 312, 313, 651, 652,
	623, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 643, 322, 0, 385, 323, 324, 325, 386, 684,
	0, 0, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 597, 0, 0, 0, 0, 0, 595, 0,
	0, 0, 0, 593, 594, 1063, 628, 617, 618, 615,
	616, 607, 603, 0, 0, 0, 0, 0, 606, 0,
	0, 0, 177, 178, 0, 179, 0, 0, 0, 0,
	645, 610, 0, 0, 0, 180, 181, 182, 333, 660,
	335, 661, 183, 662, 663, 0, 184, 339, 340, 185,
	186, 613, 644, 664, 665, 343, 0, 187, 656, 0,
	636, 0, 188, 189, 190, 0, 191, 0, 192, 193,
	194, 0, 690, 195, 196, 197, 0, 637, 638, 640,
	0, 639, 641, 198, 199, 399, 200, 666, 201, 667,
	668, 0, 202, 0, 203, 0, 204, 0, 0, 659,
	206, 0, 207, 0, 0, 0, 601, 208, 209, 210,
	646, 647, 624, 0, 0, 211, 212, 669, 670, 671,
	0, 213, 0, 214, 0, 1526, 691, 0, 215, 657,
	0, 355, 0, 0, 216, 217, 218, 219, 653, 655,
	693, 0, 223, 0, 220, 0, 692, 221, 672, 222,
	673, 674, 675, 676, 677, 0, 635, 0, 694, 224,
	225, 226, 695, 227, 228, 229, 0, 231, 230, 0,
	658, 696, 232, 697, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 698, 240, 241, 243,
	242, 596, 0, 625, 654, 244, 678, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 699, 250,
	700, 648, 251, 252, 253, 254, 255, 0, 256, 649,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 679,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 701, 279, 280,
	602, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 642, 293, 282, 283, 294, 702, 295,
	680, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	681, 300, 301, 650, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 682, 683, 0, 0,
	312, 313, 651, 652, 623, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 643, 322, 0, 385, 323,
	324, 325, 386, 684, 0, 0, 326, 0, 0, 0,
	0, 327, 328, 329, 330, 331, 597, 0, 0, 0,
	0, 0, 595, 0, 0, 0, 0, 593, 594, 0,
	0, 0, 0, 0, 0, 0, 603, 0, 0, 0,
	0, 1571, 606, 628, 617, 618, 615, 616, 607, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 177,
	178, 0, 179, 0, 0, 0, 0, 645, 610, 0,
	0, 0, 180, 181, 182, 333, 660, 335, 661, 183,
	662, 663, 0, 184, 339, 340, 185, 186, 613, 644,
	664, 665, 343, 0, 187, 656, 0, 636, 0, 188,
	189, 190, 0, 191, 0, 192, 193, 194, 0, 690,
	195, 196, 197, 0, 637, 638, 640, 0, 639, 641,
	198, 199, 399, 200, 666, 201, 667, 668, 0, 202,
	0, 203, 0, 204, 0, 0, 659, 206, 0, 207,
	0, 0, 0, 601, 208, 209, 210, 646, 647, 624,
	0, 0, 211, 212, 669, 670, 671, 0, 213, 0,
	214, 0, 0, 691, 0, 215, 657, 0, 355, 0,
	0, 216, 217, 218, 219, 653, 655, 693, 0, 223,
	0, 220, 0, 692, 221, 672, 222, 673, 674, 675,
	676, 677, 0, 635, 0, 694, 224, 225, 226, 695,
	227, 228, 229, 0, 231, 230, 0, 658, 696, 232,
	697, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 698, 240, 241, 243, 242, 596, 0,
	625, 654, 244, 678, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 699, 250, 700, 648, 251,
	252, 253, 254, 255, 0, 256, 649, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 679, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 701, 279, 280, 602, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	642, 293, 282, 283, 294, 702, 295, 680, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 681, 300, 301,
	650, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 682, 683, 0, 0, 312, 313, 651,
	652, 623, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 643, 322, 0, 385, 323, 324, 325, 386,
	684, 0, 0, 326, 0, 0, 0, 0, 327, 328,
	329, 330, 331, 597, 0, 0, 0, 0, 0, 595,
	0, 0, 0, 0, 593, 594, 0, 0, 0, 0,
	0, 0, 0, 603, 0, 0, 0, 0, 1535, 606,
	628, 617, 618, 615, 616, 607, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 177, 178, 0, 179,
	0, 0, 0, 0, 645, 610, 0, 0, 0, 180,
	181, 182, 333, 660, 335, 661, 183, 662, 663, 0,
	184, 339, 340, 185, 186, 613, 644, 664, 665, 343,
	0, 187, 656, 0, 636, 0, 188, 189, 190, 0,
	191, 0, 192, 193, 194, 0, 690, 195, 196, 197,
	0, 637, 638, 640, 0, 639, 641, 198, 199, 399,
	200, 666, 201, 667, 668, 0, 202, 0, 203, 0,
	204, 0, 0, 659, 206, 0, 207, 0, 0, 0,
	601, 208, 209, 210, 646, 647, 624, 0, 0, 211,
	212, 669, 670, 671, 0, 213, 0, 214, 0, 0,
	691, 0, 215, 657, 0, 355, 0, 0, 216, 217,
	218, 219, 653, 655, 693, 0, 223, 0, 220, 0,
	692, 221, 672, 222, 673, 674, 675, 676, 677, 0,
	635, 0, 694, 224, 225, 226, 695, 227, 228, 229,
	0, 231, 230, 0, 658, 696, 232, 697, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	698, 240, 241, 243, 242, 596, 0, 625, 654, 244,
	678, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 699, 250, 700, 648, 251, 252, 253, 254,
	255, 0, 256, 649, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 679, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 701, 279, 280, 602, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 642, 293, 282,
	283, 294, 702, 295, 680, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 681, 300, 301, 650, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	682, 683, 0, 0, 312, 313, 651, 652, 623, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 643,
	322, 0, 385, 323, 324, 325, 386, 684, 0, 0,
	326, 0, 0, 0, 0, 327, 328, 329, 330, 331,
	597, 0, 0, 0, 0, 0, 595, 0, 0, 0,
	0, 593, 594, 0, 0, 0, 0, 0, 0, 0,
	603, 0, 0, 0, 0, 1533, 606, 628, 617, 618,
	615, 616, 607, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 177, 178, 0, 179, 0, 0, 0,
	0, 645, 610, 0, 0, 0, 180, 181, 182, 333,
	660, 335, 661, 183, 662, 663, 0, 184, 339, 340,
	185, 186, 613, 644, 664, 665, 343, 0, 187, 656,
	0, 636, 0, 188, 189, 190, 0, 191, 0, 192,
	193, 194, 0, 690, 195, 196, 197, 0, 637, 638,
	640, 0, 639, 641, 198, 199, 399, 200, 666, 201,
	667, 668, 0, 202, 0, 203, 0, 204, 0, 0,
	659, 206, 0, 207, 0, 0, 0, 601, 208, 209,
	210, 646, 647, 624, 0, 0, 211, 212, 669, 670,
	671, 0, 213, 0, 214, 0, 0, 691, 0, 215,
	657, 0, 355, 0, 0, 216, 217, 218, 219, 653,
	655, 693, 0, 223, 0, 220, 0, 692, 221, 672,
	222, 673, 674, 675, 676, 677, 0, 635, 0, 694,
	224, 225, 226, 695, 227, 228, 229, 0, 231, 230,
	0, 658, 696, 232, 697, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 698, 240, 241,
	243, 242, 596, 0, 625, 654, 244, 678, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 699,
	250, 700, 648, 251, 252, 253, 254, 255, 0, 256,
	649, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	679, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 701, 279,
	280, 602, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 642, 293, 282, 283, 294, 702,
	295, 680, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 681, 300, 301, 650, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 682, 683, 0,
	0, 312, 313, 651, 652, 623, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 643, 322, 0, 385,
	323, 324, 325, 386, 684, 0, 0, 326, 0, 0,
	0, 0, 327, 328, 329, 330, 331, 597, 0, 0,
	0, 0, 0, 595, 0, 0, 0, 0, 593, 594,
	0, 0, 0, 0, 0, 0, 0, 603, 0, 0,
	0, 0, 1517, 606, 628, 617, 618, 615, 616, 607,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	177, 178, 0, 179, 0, 0, 0, 0, 645, 610,
	0, 0, 0, 180, 181, 182, 333, 660, 335, 661,
	183, 662, 663, 0, 184, 339, 340, 185, 186, 613,
	644, 664, 665, 343, 0, 187, 656, 0, 636, 0,
	188, 189, 190, 0, 191, 0, 192, 193, 194, 0,
	690, 195, 196, 197, 0, 637, 638, 640, 0, 639,
	641, 198, 199, 399, 200, 666, 201, 667, 668, 0,
	202, 0, 203, 0, 204, 0, 0, 659, 206, 0,
	207, 0, 0, 0, 601, 208, 209, 210, 646, 647,
	624, 0, 0, 211, 212, 669, 670, 671, 0, 213,
	0, 214, 0, 0, 691, 0, 215, 657, 0, 355,
	0, 0, 216, 217, 218, 219, 653, 655, 693, 0,
	223, 0, 220, 0, 692, 221, 672, 222, 673, 674,
	675, 676, 677, 0, 635, 0, 694, 224, 225, 226,
	695, 227, 228, 229, 0, 231, 230, 0, 658, 696,
	232, 697, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 366, 238, 698, 240, 241, 243, 242, 596,
	0, 625, 654, 244, 678, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 369, 699, 250, 700, 648,
	251, 252, 253, 254, 255, 0, 256, 649, 257, 372,
	258, 0, 259, 260, 261, 262, 263, 679, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 701, 279, 280, 602, 281,
	0, 285, 286, 287, 288, 0, 290, 375, 289, 291,
	292, 642, 293, 282, 283, 294, 702, 295, 680, 377,
	296, 0, 303, 297, 298, 284, 299, 302, 681, 300,
	301, 650, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 0, 380, 682, 683, 0, 0, 312, 313,
	651, 652, 623, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 643, 322, 0, 385, 323, 324, 325,
	386, 684, 0, 0, 326, 0, 0, 0, 0, 327,
	328, 329, 330, 331, 597, 0, 0, 0, 0, 0,
	595, 0, 0, 0, 0, 593, 594, 0, 0, 0,
	0, 0, 0, 0, 603, 0, 0, 0, 0, 1505,
	606, 628, 617, 618, 615, 616, 607, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 177, 178, 0,
	179, 0, 0, 0, 0, 645, 610, 0, 0, 0,
	180, 181, 182, 333, 660, 335, 661, 183, 662, 663,
	0, 184, 339, 340, 185, 186, 613, 644, 664, 665,
	343, 0, 187, 656, 0, 636, 0, 188, 189, 190,
	0, 191, 0, 192, 193, 194, 0, 690, 195, 196,
	197, 0, 637, 638, 640, 0, 639, 641, 198, 199,
	399, 200, 666, 201, 667, 668, 0, 202, 0, 203,
	0, 204, 0, 0, 659, 206, 0, 207, 0, 0,
	0, 601, 208, 209, 210, 646, 647, 624, 0, 0,
	211, 212, 669, 670, 671, 0, 213, 0, 214, 0,
	0, 691, 0, 215, 657, 0, 355, 0, 0, 216,
	217, 218, 219, 653, 655, 693, 0, 223, 0, 220,
	0, 692, 221, 672, 222, 673, 674, 675, 676, 677,
	0, 635, 0, 694, 224, 225, 226, 695, 227, 228,
	229, 0, 231, 230, 0, 658, 696, 232, 697, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 698, 240, 241, 243, 242, 596, 0, 625, 654,
	244, 678, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 369, 699, 250, 700, 648, 251, 252, 253,
	254, 255, 0, 256, 649, 257, 372, 258, 0, 259,
	260, 261, 262, 263, 679, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 701, 279, 280, 602, 281, 0, 285, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 642, 293,
	282, 283, 294, 702, 295, 680, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 681, 300, 301, 650, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 682, 683, 0, 0, 312, 313, 651, 652, 623,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	643, 322, 0, 385, 323, 324, 325, 386, 684, 0,
	0, 326, 0, 0, 0, 0, 327, 328, 329, 330,
	331, 597, 0, 0, 0, 0, 0, 595, 0, 0,
	0, 0, 593, 594, 0, 0, 0, 0, 0, 0,
	0, 603, 0, 0, 0, 0, 1503, 606, 1495, 617,
	618, 615, 616, 607, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 177, 178, 0, 179, 0, 0,
	0, 0, 645, 610, 0, 0, 0, 180, 181, 182,
	333, 660, 335, 661, 183, 662, 663, 0, 184, 339,
	340, 185, 186, 613, 644, 664, 665, 343, 0, 187,
	656, 0, 636, 0, 188, 189, 190, 0, 191, 0,
	192, 193, 194, 0, 690, 195, 196, 197, 0, 637,
	638, 640, 0, 639, 641, 198, 199, 399, 200, 666,
	1498, 667, 668, 0, 202, 0, 203, 0, 204, 0,
	0, 659, 206, 0, 207, 0, 0, 0, 601, 208,
	209, 210, 646, 647, 624, 0, 0, 211, 212, 669,
	670, 671, 0, 213, 0, 214, 0, 0, 691, 0,
	215, 657, 0, 355, 0, 0, 216, 1499, 218, 219,
	653, 655, 693, 0, 223, 0, 220, 0, 692, 221,
	672, 222, 673, 674, 675, 676, 677, 0, 635, 0,
	694, 224, 225, 226, 695, 227, 228, 229, 0, 231,
	230, 0, 658, 696, 232, 697, 0, 233, 0, 0,
	234, 0, 235, 1500, 1497, 239, 366, 238, 698, 240,
	241, 243, 242, 596, 0, 625, 654, 244, 678, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 369,
	699, 250, 700, 648, 251, 252, 253, 254, 255, 0,
	256, 649, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 679, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 701,
	279, 280, 602, 281, 0, 285, 286, 287, 1501, 0,
	290, 375, 289, 291, 292, 642, 293, 282, 283, 294,
	702, 295, 680, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 681, 300, 301, 650, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 682, 683,
	0, 0, 312, 313, 651, 652, 623, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 643, 322, 0,
	385, 323, 324, 325, 386, 684, 0, 0, 326, 0,
	0, 0, 0, 327, 328, 329, 1496, 331, 597, 0,
	0, 0, 0, 0, 595, 0, 0, 0, 0, 593,
	594, 0, 0, 0, 0, 0, 0, 0, 603, 0,
	0, 0, 0, 1492, 606, 1495, 617, 618, 615, 616,
	607, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 177, 178, 0, 179, 0, 0, 0, 0, 645,
	610, 0, 0, 0, 180, 181, 182, 333, 660, 335,
	661, 183, 662, 663, 0, 184, 339, 340, 185, 186,
	613, 644, 664, 665, 343, 0, 187, 656, 0, 636,
	0, 188, 189, 190, 0, 191, 0, 192, 193, 194,
	0, 690, 195, 196, 197, 0, 637, 638, 640, 0,
	639, 641, 198, 199, 399, 200, 666, 1498, 667, 668,
	0, 202, 0, 203, 0, 204, 0, 0, 659, 206,
	0, 207, 0, 0, 0, 601, 208, 209, 210, 646,
	647, 624, 0, 0, 211, 212, 669, 670, 671, 0,
	213, 0, 214, 0, 0, 691, 0, 215, 657, 0,
	355, 0, 0, 216, 1499, 218, 219, 653, 655, 693,
	0, 223, 0, 220, 0, 692, 221, 672, 222, 673,
	674, 675, 676, 677, 0, 635, 0, 694, 224, 225,
	226, 695, 227, 228, 229, 0, 231, 230, 0, 658,
	696, 232, 697, 0, 233, 0, 0, 234, 0, 235,
	1500, 1497, 239, 366, 238, 698, 240, 241, 243, 242,
	596, 0, 625, 654, 244, 678, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 369, 699, 250, 700,
	648, 251, 252, 253, 254, 255, 0, 256, 649, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 679, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 701, 279, 280, 602,
	281, 0, 285, 286, 287, 1501, 0, 290, 375, 289,
	291, 292, 642, 293, 282, 283, 294, 702, 295, 680,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 681,
	300, 301, 650, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 682, 683, 0, 0, 312,
	313, 651, 652, 623, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 643, 322, 0, 385, 323, 324,
	325, 386, 684, 0, 0, 326, 0, 0, 0, 0,
	327, 328, 329, 1496, 331, 597, 0, 0, 0, 0,
	0, 595, 0, 0, 0, 0, 593, 594, 628, 617,
	618, 615, 616, 607, 0, 603, 0, 0, 0, 0,
	0, 606, 0, 0, 177, 178, 0, 179, 0, 0,
	0, 0, 645, 610, 0, 0, 0, 180, 181, 182,
	333, 660, 335, 661, 183, 662, 663, 0, 184, 339,
	340, 185, 186, 613, 644, 664, 665, 343, 0, 187,
	656, 0, 636, 0, 188, 189, 190, 0, 191, 0,
	192, 193, 194, 0, 690, 195, 196, 197, 0, 637,
	638, 640, 0, 639, 641, 198, 199, 399, 200, 666,
	201, 667, 668, 0, 202, 0, 203, 0, 204, 0,
	0, 659, 206, 0, 207, 0, 0, 0, 601, 208,
	209, 210, 646, 647, 624, 0, 0, 211, 212, 669,
	670, 671, 0, 213, 0, 214, 0, 0, 691, 0,
	215, 657, 0, 355, 0, 0, 216, 217, 218, 219,
	653, 655, 693, 0, 223, 0, 220, 0, 692, 221,
	672, 222, 673, 674, 675, 676, 677, 0, 635, 0,
	694, 224, 225, 226, 695, 227, 228, 229, 0, 231,
	230, 0, 658, 696, 232, 697, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 698, 240,
	241, 243, 242, 596, 0, 625, 654, 244, 678, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 369,
	699, 250, 700, 648, 251, 252, 253, 254, 255, 0,
	256, 649, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 679, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 701,
	279, 280, 602, 281, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 642, 293, 282, 283, 294,
	702, 295, 680, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 681, 300, 301, 650, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 682, 683,
	0, 0, 312, 313, 651, 652, 623, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 643, 322, 0,
	385, 323, 324, 325, 386, 684, 0, 0, 326, 0,
	0, 0, 0, 327, 328, 329, 330, 331, 597, 0,
	0, 0, 0, 0, 595, 0, 0, 0, 0, 593,
	594, 628, 617, 618, 615, 616, 607, 0, 603, 1451,
	0, 0, 0, 0, 606, 0, 0, 177, 178, 1367,
	179, 0, 0, 0, 0, 645, 610, 0, 0, 0,
	180, 181, 182, 333, 660, 335, 661, 183, 662, 663,
	0, 184, 339, 340, 185, 186, 613, 644, 664, 665,
	343, 0, 187, 656, 0, 636, 0, 188, 189, 190,
	0, 191, 0, 192, 193, 194, 0, 690, 195, 196,
	197, 0, 637, 638, 640, 0, 639, 641, 198, 199,
	399, 200, 666, 201, 667, 668, 0, 202, 0, 203,
	0, 204, 0, 0, 659, 206, 0, 207, 0, 0,
	0, 601, 208, 209, 210, 646, 647, 624, 0, 0,
	211, 212, 669, 670, 671, 0, 213, 0, 214, 0,
	0, 691, 0, 215, 657, 0, 355, 0, 0, 216,
	217, 218, 219, 653, 655, 693, 0, 223, 0, 220,
	0, 692, 221, 672, 222, 673, 674, 675, 676, 677,
	0, 635, 0, 694, 224, 225, 226, 695, 227, 228,
	229, 0, 231, 230, 0, 658, 696, 232, 697, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 698, 240, 241, 243, 242, 596, 0, 625, 654,
	244, 678, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 369, 699, 250, 700, 648, 251, 252, 253,
	254, 255, 0, 256, 649, 257, 372, 258, 0, 259,
	260, 261, 262, 263, 679, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 701, 279, 280, 602, 281, 0, 285, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 642, 293,
	282, 283, 294, 702, 295, 680, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 681, 300, 301, 650, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 682, 683, 0, 0, 312, 313, 651, 652, 623,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	643, 322, 0, 385, 323, 324, 325, 386, 684, 0,
	0, 326, 0, 0, 0, 0, 327, 328, 329, 330,
	331, 597, 0, 0, 0, 0, 0, 595, 0, 0,
	0, 0, 593, 594, 0, 0, 0, 0, 0, 0,
	0, 603, 0, 0, 0, 0, 773, 606, 628, 617,
	618, 615, 616, 607, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 177, 178, 0, 179, 0, 0,
	0, 0, 645, 610, 0, 0, 0, 180, 181, 182,
	333, 660, 335, 661, 183, 662, 663, 0, 184, 339,
	340, 185, 186, 613, 644, 664, 665, 343, 0, 187,
	656, 0, 636, 0, 188, 189, 190, 0, 191, 0,
	192, 193, 194, 0, 690, 195, 196, 197, 0, 637,
	638, 640, 0, 639, 641, 198, 199, 399, 200, 666,
	201, 667, 668, 0, 202, 0, 203, 0, 204, 0,
	0, 659, 206, 0, 207, 0, 0, 0, 601, 208,
	209, 210, 646, 647, 624, 0, 0, 211, 212, 669,
	670, 671, 0, 213, 0, 214, 0, 0, 691, 0,
	215, 657, 0, 355, 0, 0, 216, 217, 218, 219,
	653, 655, 693, 0, 223, 0, 220, 0, 692, 221,
	672, 222, 673, 674, 675, 676, 677, 0, 635, 0,
	694, 224, 225, 226, 695, 227, 228, 229, 0, 231,
	230, 0, 658, 696, 232, 697, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 698, 240,
	241, 243, 242, 596, 0, 625, 654, 244, 678, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 369,
	699, 250, 700, 648, 251, 252, 253, 254, 255, 0,
	256, 649, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 679, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 701,
	279, 280, 602, 281, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 642, 293, 282, 283, 294,
	702, 295, 680, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 681, 300, 301, 650, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 682, 683,
	0, 0, 312, 313, 651, 652, 623, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 643, 322, 0,
	385, 323, 324, 325, 386, 684, 0, 0, 326, 0,
	0, 0, 0, 327, 328, 329, 330, 331, 597, 0,
	0, 0, 0, 0, 595, 0, 0, 0, 0, 593,
	594, 0, 0, 0, 0, 0, 0, 0, 603, 0,
	0, 0, 0, 771, 606, 628, 617, 618, 615, 616,
	607, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 177, 178, 0, 179, 0, 0, 0, 0, 645,
	610, 0, 0, 0, 180, 181, 182, 333, 660, 335,
	661, 183, 662, 663, 0, 184, 339, 340, 185, 186,
	613, 644, 664, 665, 343, 0, 187, 656, 0, 636,
	0, 188, 189, 190, 0, 191, 0, 192, 193, 194,
	0, 690, 195, 196, 197, 0, 637, 638, 640, 0,
	639, 641, 198, 199, 399, 200, 666, 201, 667, 668,
	0, 202, 0, 203, 0, 204, 0, 0, 659, 206,
	0, 207, 0, 0, 0, 601, 208, 209, 210, 646,
	647, 624, 0, 0, 211, 212, 669, 670, 671, 0,
	213, 0, 214, 0, 0, 691, 0, 215, 657, 0,
	355, 0, 0, 216, 217, 218, 219, 653, 655, 693,
	0, 223, 0, 220, 0, 692, 221, 672, 222, 673,
	674, 675, 676, 677, 0, 635, 0, 694, 224, 225,
	226, 695, 227, 228, 229, 0, 231, 230, 0, 658,
	696, 232, 697, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 698, 240, 241, 243, 242,
	596, 0, 625, 654, 244, 678, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 369, 699, 250, 700,
	648, 251, 252, 253, 254, 255, 0, 256, 649, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 679, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 701, 279, 280, 602,
	281, 0, 285, 286, 287, 288, 0, 290, 375, 289,
	291, 292, 642, 293, 282, 283, 294, 702, 295, 680,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 681,
	300, 301, 650, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 682, 683, 0, 0, 312,
	313, 651, 652, 623, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 643, 322, 0, 385, 323, 324,
	325, 386, 684, 0, 0, 326, 0, 0, 0, 0,
	327, 328, 329, 330, 331, 597, 0, 0, 0, 0,
	0, 595, 0, 0, 0, 0, 593, 594, 0, 0,
	0, 0, 0, 0, 0, 603, 0, 0, 0, 0,
	769, 606, 628, 617, 618, 615, 616, 607, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 177, 178,
	0, 179, 0, 0, 0, 0, 645, 610, 0, 0,
	0, 180, 181, 182, 333, 660, 335, 661, 183, 662,
	663, 0, 184, 339, 340, 185, 186, 613, 644, 664,
	665, 343, 0, 187, 656, 0, 636, 0, 188, 189,
	190, 0, 191, 0, 192, 193, 194, 0, 690, 195,
	196, 197, 0, 637, 638, 640, 0, 639, 641, 198,
	199, 399, 200, 666, 201, 667, 668, 0, 202, 0,
	203, 0, 204, 0, 0, 659, 206, 0, 207, 0,
	0, 0, 601, 208, 209, 210, 646, 647, 624, 0,
	0, 211, 212, 669, 670, 671, 0, 213, 0, 214,
	0, 0, 691, 0, 215, 657, 0, 355, 0, 0,
	216, 217, 218, 219, 653, 655, 693, 0, 223, 0,
	220, 0, 692, 221, 672, 222, 673, 674, 675, 676,
	677, 0, 635, 0, 694, 224, 225, 226, 695, 227,
	228, 229, 0, 231, 230, 0, 658, 696, 232, 697,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 698, 240, 241, 243, 242, 596, 0, 625,
	654, 244, 678, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 699, 250, 700, 648, 251, 252,
	253, 254, 255, 0, 256, 649, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 679, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 701, 279, 280, 602, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 642,
	293, 282, 283, 294, 702, 295, 680, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 681, 300, 301, 650,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 682, 683, 0, 0, 312, 313, 651, 652,
	623, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 643, 322, 0, 385, 323, 324, 325, 386, 684,
	0, 0, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 597, 0, 0, 0, 0, 0, 595, 0,
	0, 0, 0, 593, 594, 0, 0, 0, 0, 0,
	0, 0, 603, 0, 0, 0, 0, 767, 606, 628,
	617, 618, 615, 616, 607, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 177, 178, 0, 179, 0,
	0, 0, 0, 645, 610, 0, 0, 0, 180, 181,
	182, 333, 660, 335, 661, 183, 662, 663, 0, 184,
	339, 340, 185, 186, 613, 644, 664, 665, 343, 0,
	187, 656, 0, 636, 0, 188, 189, 190, 0, 191,
	0, 192, 193, 194, 0, 690, 195, 196, 197, 0,
	637, 638, 640, 0, 639, 641, 198, 199, 399, 200,
	666, 201, 667, 668, 0, 202, 0, 203, 0, 204,
	0, 0, 659, 206, 0, 207, 0, 0, 0, 601,
	208, 209, 210, 646, 647, 624, 0, 0, 211, 212,
	669, 670, 671, 0, 213, 0, 214, 0, 0, 691,
	0, 215, 657, 0, 355, 0, 0, 216, 217, 218,
	219, 653, 655, 693, 0, 223, 0, 220, 0, 692,
	221, 672, 222, 673, 674, 675, 676, 677, 0, 635,
	0, 694, 224, 225, 226, 695, 227, 228, 229, 0,
	231, 230, 0, 658, 696, 232, 697, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 698,
	240, 241, 243, 242, 596, 0, 625, 654, 244, 678,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 699, 250, 700, 648, 251, 252, 253, 254, 255,
	0, 256, 649, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 679, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	701, 279, 280, 602, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 642, 293, 282, 283,
	294, 702, 295, 680, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 681, 300, 301, 650, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 682,
	683, 0, 0, 312, 313, 651, 652, 623, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 643, 322,
	0, 385, 323, 324, 325, 386, 684, 0, 0, 326,
	0, 0, 0, 0, 327, 328, 329, 330, 331, 597,
	0, 0, 0, 0, 0, 595, 0, 0, 0, 0,
	593, 594, 628, 617, 618, 615, 616, 607, 0, 603,
	0, 0, 0, 0, 0, 606, 0, 0, 177, 178,
	0, 179, 0, 0, 0, 0, 645, 610, 0, 0,
	0, 180, 181, 182, 333, 660, 335, 661, 183, 662,
	663, 0, 184, 339, 340, 185, 186, 613, 644, 664,
	665, 343, 0, 187, 656, 0, 636, 0, 188, 189,
	190, 0, 191, 0, 192, 193, 194, 0, 690, 195,
	196, 2440, 0, 637, 638, 640, 0, 639, 641, 198,
	199, 399, 200, 666, 201, 667, 668, 0, 202, 0,
	203, 0, 204, 0, 0, 659, 206, 0, 207, 0,
	0, 0, 601, 208, 209, 210, 646, 647, 624, 0,
	0, 211, 212, 669, 670, 671, 0, 213, 0, 214,
	0, 0, 691, 0, 215, 657, 0, 355, 0, 0,
	216, 217, 218, 219, 653, 655, 693, 0, 223, 0,
	220, 0, 692, 221, 672, 222, 673, 674, 675, 676,
	677, 0, 635, 0, 694, 224, 225, 226, 695, 227,
	228, 229, 0, 231, 230, 0, 658, 696, 232, 697,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 698, 240, 241, 243, 242, 596, 0, 625,
	654, 244, 678, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 699, 250, 700, 648, 251, 252,
	253, 254, 255, 0, 256, 649, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 679, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 701, 279, 280, 602, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 642,
	293, 282, 283, 294, 702, 295, 680, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 681, 300, 301, 650,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 682, 683, 0, 0, 312, 313, 651, 652,
	623, 314, 315, 2439, 317, 0, 0, 318, 319, 320,
	321, 643, 322, 0, 385, 323, 324, 325, 386, 684,
	0, 0, 326, 0, 0, 0, 0, 327, 328, 329,
	330, 331, 597, 0, 0, 0, 0, 0, 595, 0,
	0, 0, 0, 593, 594, 628, 617, 618, 615, 616,
	607, 0, 603, 0, 0, 0, 0, 0, 606, 0,
	0, 177, 178, 0, 179, 0, 0, 0, 0, 645,
	610, 0, 0, 0, 180, 181, 182, 333, 660, 335,
	661, 183, 662, 663, 0, 184, 339, 340, 185, 186,
	613, 644, 664, 665, 343, 0, 187, 656, 0, 636,
	0, 188, 189, 190, 0, 191, 0, 192, 193, 194,
	0, 690, 195, 196, 197, 0, 637, 638, 640, 0,
	639, 641, 198, 199, 399, 200, 666, 201, 667, 668,
	0, 202, 0, 203, 0, 204, 0, 0, 659, 206,
	0, 207, 0, 0, 0, 601, 208, 209, 210, 646,
	647, 624, 0, 0, 211, 212, 669, 670, 671, 0,
	213, 0, 214, 0, 0, 691, 0, 215, 657, 0,
	355, 0, 0, 216, 217, 218, 219, 653, 655, 693,
	0, 223, 0, 220, 0, 692, 221, 672, 222, 673,
	674, 675, 676, 677, 0, 635, 0, 694, 224, 225,
	226, 695, 227, 228, 229, 0, 231, 230, 0, 658,
	696, 232, 697, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 698, 240, 241, 243, 242,
	596, 0, 625, 654, 244, 678, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 369, 699, 250, 700,
	648, 251, 252, 253, 254, 255, 0, 256, 649, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 679, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 701, 279, 280, 602,
	281, 0, 285, 286, 287, 288, 0, 290, 375, 289,
	291, 292, 642, 293, 282, 283, 294, 702, 295, 680,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 681,
	300, 301, 650, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 682, 683, 0, 0, 312,
	313, 651, 652, 623, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 643, 322, 0, 385, 323, 324,
	325, 386, 684, 0, 0, 326, 0, 0, 0, 0,
	327, 328, 329, 330, 331, 597, 0, 0, 0, 0,
	0, 595, 0, 0, 0, 0, 593, 594, 628, 617,
	618, 615, 616, 607, 0, 603, 0, 0, 0, 0,
	0, 606, 0, 0, 177, 178, 0, 179, 0, 0,
	0, 0, 645, 610, 0, 0, 0, 180, 181, 182,
	2438, 660, 335, 661, 183, 662, 663, 0, 184, 339,
	340, 185, 186, 613, 644, 664, 665, 343, 0, 187,
	656, 0, 636, 0, 188, 189, 190, 0, 191, 0,
	192, 193, 194, 0, 690, 195, 196, 2440, 0, 637,
	638, 640, 0, 639, 641, 198, 199, 399, 200, 666,
	201, 667, 668, 0, 202, 0, 203, 0, 204, 0,
	0, 659, 206, 0, 207, 0, 0, 0, 601, 208,
	209, 210, 646, 647, 624, 0, 0, 211, 212, 669,
	670, 671, 0, 213, 0, 214, 0, 0, 691, 0,
	215, 657, 0, 355, 0, 0, 216, 217, 218, 219,
	653, 655, 693, 0, 223, 0, 220, 0, 692, 221,
	672, 222, 673, 674, 675, 676, 677, 0, 635, 0,
	694, 224, 225, 226, 695, 227, 228, 229, 0, 231,
	230, 0, 658, 696, 232, 697, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 698, 240,
	241, 243, 242, 596, 0, 625, 654, 244, 678, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 369,
	699, 250, 700, 648, 251, 252, 253, 254, 255, 0,
	256, 649, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 679, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 701,
	279, 280, 602, 281, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 642, 293, 282, 283, 294,
	702, 295, 680, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 681, 300, 301, 650, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 682, 683,
	0, 0, 312, 313, 651, 652, 623, 314, 315, 2439,
	317, 0, 0, 318, 319, 320, 321, 643, 322, 0,
	385, 323, 324, 325, 386, 684, 0, 0, 326, 0,
	0, 0, 0, 327, 328, 329, 330, 331, 597, 0,
	0, 0, 0, 0, 595, 0, 0, 0, 0, 593,
	594, 628, 617, 618, 615, 616, 607, 0, 603, 0,
	0, 0, 0, 0, 606, 0, 0, 177, 178, 0,
	179, 0, 0, 0, 0, 645, 610, 0, 0, 0,
	180, 181, 182, 333, 660, 335, 661, 183, 662, 663,
	0, 184, 339, 340, 185, 186, 613, 644, 664, 665,
	343, 0, 187, 656, 0, 636, 0, 188, 189, 190,
	0, 191, 0, 192, 193, 194, 0, 690, 195, 196,
	197, 0, 637, 638, 640, 0, 639, 641, 198, 199,
	399, 200, 666, 201, 667, 668, 0, 202, 0, 203,
	0, 204, 0, 0, 659, 206, 0, 207, 0, 0,
	0, 601, 208, 209, 210, 646, 647, 624, 0, 0,
	211, 212, 669, 670, 671, 0, 213, 0, 214, 0,
	0, 691, 0, 215, 657, 0, 355, 0, 0, 216,
	217, 218, 219, 653, 655, 693, 0, 223, 0, 220,
	0, 692, 221, 672, 222, 673, 674, 675, 676, 677,
	0, 635, 0, 694, 224, 225, 226, 695, 227, 228,
	229, 0, 231, 230, 0, 658, 696, 232, 697, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 698, 240, 241, 243, 242, 0, 0, 625, 654,
	244, 678, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 369, 699, 250, 700, 648, 251, 252, 253,
	254, 255, 0, 256, 649, 257, 372, 258, 0, 259,
	260, 261, 262, 263, 679, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 701, 279, 280, 1515, 281, 0, 285, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 642, 293,
	282, 283, 294, 702, 295, 680, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 681, 300, 301, 650, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 682, 683, 0, 0, 312, 313, 651, 652, 623,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	643, 322, 0, 385, 323, 324, 325, 386, 684, 0,
	0, 326, 0, 0, 0, 0, 327, 328, 329, 330,
	331, 628, 617, 618, 615, 616, 607, 1513, 0, 0,
	0, 0, 1511, 1512, 0, 0, 0, 177, 178, 0,
	179, 1514, 0, 0, 0, 645, 610, 606, 0, 0,
	180, 181, 182, 333, 660, 335, 661, 183, 662, 663,
	0, 184, 339, 340, 185, 186, 0, 644, 664, 665,
	343, 0, 187, 656, 0, 636, 0, 188, 189, 190,
	0, 191, 0, 192, 193, 194, 0, 690, 195, 196,
	197, 0, 637, 638, 640, 0, 639, 641, 198, 199,
	399, 200, 666, 201, 667, 668, 0, 202, 0, 203,
	0, 204, 0, 0, 659, 206, 0, 207, 0, 0,
	0, 348, 208, 209, 210, 646, 647, 624, 0, 0,
	211, 212, 669, 670, 671, 0, 213, 0, 214, 0,
	0, 691, 0, 215, 657, 0, 355, 0, 0, 216,
	217, 218, 219, 653, 655, 693, 0, 223, 0, 220,
	0, 692, 221, 672, 222, 673, 674, 675, 676, 677,
	0, 635, 0, 694, 224, 225, 226, 695, 227, 228,
	229, 0, 231, 230, 0, 658, 696, 232, 697, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 698, 240, 241, 243, 242, 0, 0, 625, 654,
	244, 678, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 369, 699, 250, 700, 648, 251, 252, 253,
	254, 255, 0, 256, 649, 257, 372, 258, 0, 259,
	260, 261, 262, 263, 679, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 701, 279, 280, 1515, 281, 0, 285, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 642, 293,
	282, 283, 294, 702, 295, 680, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 681, 300, 301, 650, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 682, 683, 0, 0, 312, 313, 651, 652, 623,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	643, 322, 0, 385, 323, 324, 325, 386, 684, 0,
	0, 326, 0, 0, 0, 0, 327, 328, 329, 330,
	331, 628, 617, 618, 615, 616, 607, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 177, 178, 0,
	179, 1514, 0, 0, 0, 645, 610, 606, 0, 0,
	180, 181, 182, 0, 660, 335, 661, 183, 662, 663,
	0, 184, 339, 340, 185, 186, 613, 644, 664, 665,
	343, 0, 187, 656, 0, 636, 0, 188, 189, 190,
	0, 191, 0, 192, 193, 194, 0, 690, 195, 196,
	2440, 0, 637, 638, 640, 0, 639, 641, 198, 199,
	399, 200, 666, 201, 667, 668, 0, 202, 0, 203,
	0, 204, 0, 0, 659, 206, 0, 207, 0, 0,
	0, 601, 208, 209, 210, 646, 647, 624, 0, 0,
	211, 212, 669, 670, 671, 0, 213, 0, 214, 0,
	0, 691, 0, 215, 657, 0, 355, 0, 0, 216,
	217, 218, 219, 653, 655, 0, 0, 223, 0, 220,
	0, 692, 221, 672, 222, 673, 674, 675, 676, 677,
	0, 635, 0, 0, 224, 225, 226, 695, 227, 228,
	229, 0, 231, 230, 0, 658, 696, 232, 0, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 698, 240, 241, 243, 242, 596, 0, 625, 654,
	244, 678, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 369, 699, 250, 700, 648, 251, 252, 253,
	254, 255, 0, 256, 649, 257, 372, 258, 0, 259,
	260, 261, 262, 263, 679, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 701, 279, 280, 602, 281, 0, 285, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 642, 293,
	282, 283, 294, 0, 295, 680, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 681, 300, 301, 650, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 682, 683, 0, 0, 312, 313, 651, 652, 623,
	314, 315, 2439, 317, 0, 0, 318, 319, 320, 321,
	643, 322, 0, 385, 323, 324, 325, 386, 684, 0,
	0, 326, 0, 0, 0, 0, 327, 328, 329, 330,
	331, 628, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 593, 594, 0, 0, 0, 177, 178, 0,
	179, 603, 0, 0, 0, 645, 0, 606, 0, 0,
	180, 181, 182, 333, 334, 335, 336, 183, 337, 338,
	0, 184, 339, 340, 185, 186, 0, 644, 341, 342,
	343, 0, 187, 656, 0, 636, 0, 188, 189, 190,
	0, 191, 0, 192, 193, 194, 0, 690, 195, 196,
	197, 0, 637, 638, 640, 0, 639, 641, 198, 199,
	399, 200, 345, 201, 346, 347, 0, 202, 0, 203,
	0, 204, 0, 0, 205, 206, 0, 207, 0, 0,
	0, 348, 208, 209, 210, 646, 647, 0, 0, 0,
	211, 212, 351, 352, 353, 0, 213, 0, 214, 0,
	0, 691, 0, 215, 657, 0, 355, 0, 0, 216,
	217, 218, 219, 653, 655, 693, 0, 223, 0, 220,
	0, 692, 221, 358, 222, 359, 360, 361, 362, 363,
	0, 364, 0, 694, 224, 225, 226, 695, 227, 228,
	229, 0, 231, 230, 0, 658, 696, 232, 697, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 698, 240, 241, 243, 242, 0, 0, 0, 654,
	244, 368, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 369, 699, 250, 700, 648, 251, 252, 253,
	254, 255, 0, 256, 649, 257, 372, 258, 0, 259,
	260, 261, 262, 263, 373, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 701, 279, 280, 374, 281, 0, 285, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 642, 293,
	282, 283, 294, 702, 295, 376, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 378, 300, 301, 650, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 381, 382, 0, 0, 312, 313, 651, 652, 0,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	643, 322, 0, 385, 323, 324, 325, 386, 387, 0,
	0, 326, 822, 0, 825, 0, 327, 328, 329, 330,
	331, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	177, 178, 0, 179, 0, 0, 0, 0, 332, 0,
	0, 2087, 0, 180, 181, 182, 333, 334, 335, 336,
	183, 337, 338, 0, 184, 339, 340, 185, 186, 0,
	0, 341, 342, 343, 0, 187, 344, 0, 830, 0,
	188, 189, 190, 0, 191, 0, 192, 193, 194, 0,
	690, 195, 196, 197, 0, 0, 0, 0, 0, 0,
	0, 198, 199, 399, 200, 345, 201, 346, 347, 0,
	202, 0, 203, 0, 204, 0, 0, 205, 206, 0,
	207, 0, 0, 0, 348, 208, 209, 210, 349, 350,
	0, 0, 0, 211, 212, 351, 352, 353, 0, 213,
	0, 214, 0, 0, 691, 0, 215, 354, 0, 355,
	0, 0, 216, 217, 218, 219, 356, 357, 693, 0,
	223, 0, 220, 0, 692, 221, 358, 222, 359, 360,
	361, 362, 363, 0, 364, 0, 694, 224, 225, 226,
	695, 227, 228, 229, 0, 231, 230, 0, 365, 696,
	232, 697, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 366, 238, 698, 240, 241, 243, 242, 0,
	0, 0, 367, 244, 368, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 369, 699, 250, 700, 370,
	251, 252, 253, 254, 255, 0, 256, 371, 257, 372,
	258, 0, 259, 260, 261, 262, 263, 373, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 701, 279, 280, 374, 281,
	0, 285, 286, 287, 288, 134, 290, 375, 289, 291,
	292, 0, 293, 282, 283, 294, 702, 295, 376, 377,
	296, 0, 303, 297, 298, 284, 299, 302, 378, 300,
	301, 379, 0, 304, 136, 305, 306, 307, 308, 309,
	310, 311, 0, 380, 381, 382, 0, 0, 312, 313,
	383, 384, 0, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 322, 0, 385, 323, 324, 325,
	829, 387, 0, 0, 326, 579, 0, 174, 128, 327,
	328, 329, 330, 331, 0, 129, 0, 0, 0, 0,
	0, 0, 0, 177, 178, 0, 179, 0, 0, 0,
	0, 332, 0, 0, 120, 0, 180, 181, 182, 333,
	334, 335, 336, 183, 337, 338, 0, 184, 339, 340,
	185, 186, 0, 0, 341, 342, 343, 0, 187, 344,
	0, 0, 0, 188, 189, 190, 0, 191, 0, 192,
	193, 194, 0, 0, 195, 196, 197, 0, 0, 0,
	0, 0, 0, 0, 198, 199, 399, 200, 345, 201,
	346, 347, 0, 202, 0, 203, 0, 204, 0, 0,
	205, 206, 0, 207, 0, 0, 0, 348, 208, 209,
	210, 349, 350, 0, 0, 0, 211, 212, 351, 352,
	353, 0, 213, 0, 214, 0, 0, 0, 0, 215,
	354, 0, 355, 0, 0, 216, 217, 218, 219, 356,
	357, 0, 0, 223, 0, 220, 0, 0, 221, 358,
	222, 359, 360, 361, 362, 363, 0, 364, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 365, 0, 232, 0, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 367, 244, 368, 245, 246,
	0, 247, 0, 742, 248, 0, 0, 249, 369, 0,
	250, 0, 370, 251, 252, 253, 254, 255, 0, 256,
	371, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	373, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 374, 281, 0, 285, 286, 287, 288, 134, 290,
	375, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 376, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 378, 300, 301, 379, 0, 304, 136, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 381, 382, 0,
	0, 312, 313, 383, 384, 0, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 322, 0, 385,
	323, 324, 325, 829, 387, 0, 0, 326, 0, 174,
	0, 128, 327, 328, 329, 330, 331, 0, 129, 0,
	0, 0, 0, 0, 0, 177, 178, 0, 179, 0,
	0, 0, 0, 332, 0, 736, 0, 1085, 180, 181,
	182, 333, 334, 335, 336, 183, 337, 338, 0, 184,
	339, 340, 185, 186, 0, 0, 341, 342, 343, 0,
	187, 344, 0, 0, 0, 188, 189, 190, 0, 191,
	0, 192, 193, 194, 0, 0, 195, 196, 197, 0,
	0, 0, 0, 0, 0, 0, 198, 199, 399, 200,
	345, 201, 346, 347, 0, 202, 0, 203, 0, 204,
	0, 0, 205, 206, 0, 207, 0, 0, 0, 348,
	208, 209, 210, 349, 350, 0, 0, 0, 211, 212,
	351, 352, 353, 0, 213, 0, 214, 0, 0, 0,
	0, 215, 354, 0, 355, 0, 0, 216, 217, 218,
	219, 356, 357, 0, 0, 223, 0, 220, 0, 0,
	221, 358, 222, 359, 360, 361, 362, 363, 0, 364,
	0, 0, 224, 225, 226, 0, 227, 228, 229, 0,
	231, 230, 0, 365, 0, 232, 0, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 0,
	240, 241, 243, 242, 0, 0, 0, 367, 244, 368,
	245, 246, 0, 247, 0, 742, 248, 0, 0, 249,
	369, 0, 250, 0, 370, 251, 252, 253, 254, 255,
	0, 256, 371, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 373, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 374, 281, 0, 285, 286, 287, 288,
	134, 290, 375, 289, 291, 292, 0, 293, 282, 283,
	294, 0, 295, 376, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 378, 300, 301, 379, 0, 304, 136,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 381,
	382, 0, 0, 312, 313, 383, 384, 0, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 322,
	0, 385, 323, 324, 325, 829, 387, 0, 0, 326,
	579, 0, 174, 128, 327, 328, 329, 330, 331, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 177, 178,
	0, 179, 0, 0, 0, 0, 332, 736, 0, 1085,
	0, 180, 181, 182, 333, 334, 335, 336, 183, 337,
	338, 0, 184, 339, 340, 185, 186, 0, 0, 341,
	342, 343, 0, 187, 344, 0, 0, 0, 188, 189,
	190, 0, 191, 0, 192, 193, 194, 0, 0, 195,
	196, 197, 0, 0, 0, 0, 0, 0, 0, 198,
	199, 399, 200, 345, 201, 346, 347, 0, 202, 0,
	203, 0, 204, 0, 0, 205, 206, 0, 207, 0,
	0, 0, 348, 208, 209, 210, 349, 350, 0, 0,
	0, 211, 212, 351, 352, 353, 0, 213, 0, 214,
	0, 0, 0, 0, 215, 354, 0, 355, 0, 0,
	216, 217, 218, 219, 356, 357, 0, 0, 223, 0,
	220, 0, 0, 221, 358, 222, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 224, 225, 226, 0, 227,
	228, 229, 0, 231, 230, 0, 365, 0, 232, 0,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	367, 244, 368, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 0, 250, 0, 370, 251, 252,
	253, 254, 255, 0, 256, 371, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 373, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 374, 281, 0, 285,
	286, 287, 288, 134, 290, 375, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 376, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	0, 304, 136, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 381, 382, 0, 0, 312, 313, 383, 384,
	0, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 322, 0, 385, 323, 324, 325, 829, 387,
	0, 0, 326, 1835, 0, 174, 128, 327, 328, 329,
	330, 331, 0, 129, 0, 0, 0, 0, 0, 0,
	0, 177, 178, 0, 179, 0, 0, 0, 0, 332,
	0, 0, 120, 0, 180, 181, 182, 333, 334, 335,
	336, 183, 337, 338, 0, 184, 339, 340, 185, 186,
	0, 0, 341, 342, 343, 0, 187, 344, 0, 0,
	0, 188, 189, 190, 0, 191, 0, 192, 193, 194,
	0, 0, 195, 196, 197, 0, 0, 0, 0, 0,
	0, 0, 198, 199, 399, 200, 345, 201, 346, 347,
	0, 202, 0, 203, 0, 204, 0, 0, 205, 206,
	0, 207, 0, 0, 0, 348, 208, 209, 210, 349,
	350, 0, 0, 0, 211, 212, 351, 352, 353, 0,
	213, 0, 214, 0, 0, 0, 0, 215, 354, 0,
	355, 0, 0, 216, 217, 218, 219, 356, 357, 0,
	0, 223, 0, 220, 0, 0, 221, 358, 222, 359,
	360, 361, 362, 363, 0, 364, 0, 0, 224, 225,
	226, 0, 227, 228, 229, 0, 231, 230, 0, 365,
	0, 232, 0, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 0, 240, 241, 243, 242,
	0, 0, 0, 367, 244, 368, 245, 246, 0, 247,
	0, 742, 248, 0, 0, 249, 369, 0, 250, 0,
	370, 251, 252, 253, 254, 255, 0, 256, 371, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 373, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 374,
	281, 0, 285, 286, 287, 288, 0, 290, 375, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 376,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 378,
	300, 301, 379, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 381, 382, 0, 0, 312,
	313, 383, 384, 0, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 385, 323, 324,
	325, 386, 387, 0, 0, 326, 735, 0, 174, 0,
	327, 328, 329, 330, 331, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 177, 178, 0, 179, 0, 0,
	0, 0, 332, 736, 0, 741, 0, 180, 181, 182,
	333, 334, 335, 336, 183, 337, 338, 0, 184, 339,
	340, 185, 186, 0, 0, 341, 342, 343, 0, 187,
	344, 0, 0, 0, 188, 189, 190, 0, 191, 0,
	192, 193, 194, 0, 0, 195, 196, 197, 0, 0,
	0, 0, 0, 0, 0, 198, 199, 399, 200, 345,
	201, 346, 347, 0, 202, 0, 203, 0, 204, 0,
	0, 205, 206, 0, 207, 0, 0, 0, 348, 208,
	209, 210, 349, 350, 0, 0, 0, 211, 212, 351,
	352, 353, 0, 213, 0, 214, 0, 0, 0, 0,
	215, 354, 0, 355, 0, 0, 216, 217, 218, 219,
	356, 357, 0, 0, 223, 0, 220, 0, 0, 221,
	358, 222, 359, 360, 361, 362, 363, 0, 364, 0,
	0, 224, 225, 226, 0, 227, 228, 229, 0, 231,
	230, 0, 365, 0, 232, 0, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 367, 244, 368, 245,
	246, 0, 247, 0, 742, 248, 0, 0, 249, 369,
	0, 250, 0, 370, 251, 252, 253, 254, 255, 0,
	256, 371, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 373, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 374, 281, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 376, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 378, 300, 301, 379, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 381, 382,
	0, 0, 312, 313, 383, 384, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	385, 323, 324, 325, 386, 387, 0, 0, 326, 0,
	174, 0, 0, 327, 328, 329, 330, 331, 0, 0,
	0, 0, 0, 0, 0, 0, 177, 178, 0, 179,
	0, 0, 0, 0, 332, 0, 736, 0, 741, 180,
	181, 182, 333, 334, 335, 336, 183, 337, 338, 0,
	184, 339, 340, 185, 186, 0, 0, 341, 342, 343,
	0, 187, 344, 0, 0, 0, 188, 189, 190, 0,
	191, 0, 192, 193, 194, 0, 0, 195, 196, 197,
	0, 0, 0, 0, 0, 0, 0, 198, 199, 399,
	200, 345, 201, 346, 347, 0, 202, 0, 203, 0,
	204, 0, 0, 205, 206, 0, 207, 0, 0, 0,
	348, 208, 209, 210, 349, 350, 0, 0, 0, 211,
	212, 351, 352, 353, 0, 213, 0, 214, 0, 0,
	0, 0, 215, 354, 0, 355, 0, 0, 216, 217,
	218, 219, 356, 357, 0, 0, 223, 0, 220, 0,
	0, 221, 358, 222, 359, 360, 361, 362, 363, 0,
	364, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 365, 0, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 367, 244,
	368, 245, 246, 0, 247, 0, 742, 248, 0, 0,
	249, 369, 0, 250, 0, 370, 251, 252, 253, 254,
	255, 0, 256, 371, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 373, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 374, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 376, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 378, 300, 301, 379, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	381, 382, 0, 0, 312, 313, 383, 384, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 385, 323, 324, 325, 386, 387, 0, 0,
	326, 0, 174, 0, 0, 327, 328, 329, 330, 331,
	0, 0, 0, 0, 0, 0, 0, 0, 177, 178,
	0, 179, 0, 0, 0, 0, 332, 0, 736, 0,
	741, 180, 181, 182, 333, 334, 335, 336, 183, 337,
	338, 0, 184, 339, 340, 185, 186, 0, 0, 341,
	342, 343, 0, 187, 344, 0, 0, 0, 188, 189,
	190, 0, 191, 0, 192, 193, 194, 0, 0, 195,
	196, 197, 0, 0, 0, 0, 0, 0, 0, 198,
	199, 399, 200, 345, 201, 346, 347, 0, 202, 0,
	203, 0, 204, 0, 0, 205, 206, 0, 207, 0,
	0, 0, 348, 208, 209, 210, 349, 350, 0, 0,
	0, 211, 212, 351, 352, 353, 0, 213, 0, 214,
	0, 0, 0, 0, 215, 354, 0, 355, 0, 0,
	216, 217, 218, 219, 356, 357, 0, 0, 223, 0,
	220, 0, 0, 221, 358, 222, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 224, 225, 226, 0, 227,
	228, 229, 0, 231, 230, 0, 365, 0, 232, 0,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	367, 244, 368, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 0, 250, 0, 370, 251, 252,
	253, 254, 255, 0, 256, 371, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 373, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 374, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 376, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 381, 382, 0, 0, 312, 313, 383, 384,
	0, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 322, 0, 385, 323, 324, 325, 386, 387,
	0, 0, 326, 0, 0, 174, 0, 327, 328, 329,
	330, 331, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 177, 178, 0, 179, 0, 0, 0, 0, 332,
	0, 0, 0, 1202, 180, 181, 182, 333, 334, 335,
	336, 183, 337, 338, 0, 184, 339, 340, 185, 186,
	0, 0, 341, 342, 343, 0, 187, 344, 0, 0,
	0, 188, 189, 190, 0, 191, 0, 192, 193, 194,
	0, 0, 195, 196, 197, 0, 0, 0, 0, 0,
	0, 0, 198, 199, 399, 200, 345, 201, 346, 347,
	0, 202, 0, 203, 0, 204, 0, 0, 205, 206,
	0, 207, 0, 0, 0, 348, 208, 209, 210, 349,
	350, 0, 0, 0, 211, 212, 351, 352, 353, 0,
	213, 0, 214, 0, 0, 0, 0, 215, 354, 0,
	355, 0, 0, 216, 217, 218, 219, 356, 357, 0,
	0, 223, 0, 220, 0, 0, 221, 358, 222, 359,
	360, 361, 362, 363, 0, 364, 0, 0, 224, 225,
	226, 0, 227, 228, 229, 0, 231, 230, 0, 365,
	0, 232, 0, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 0, 240, 241, 243, 242,
	0, 0, 0, 367, 244, 368, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 369, 0, 250, 0,
	370, 251, 252, 253, 254, 255, 0, 256, 371, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 373, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 374,
	281, 0, 285, 286, 287, 288, 0, 290, 375, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 376,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 378,
	300, 301, 379, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 381, 382, 0, 0, 312,
	313, 383, 384, 0, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 385, 323, 324,
	325, 386, 387, 0, 0, 326, 0, 174, 0, 0,
	327, 328, 329, 330, 331, 0, 0, 0, 0, 0,
	0, 0, 0, 177, 178, 0, 179, 0, 0, 0,
	0, 332, 0, 0, 0, 1653, 180, 181, 182, 333,
	334, 335, 336, 183, 337, 338, 0, 184, 339, 340,
	185, 186, 0, 0, 341, 342, 343, 0, 187, 344,
	0, 0, 0, 188, 189, 190, 0, 191, 0, 192,
	193, 194, 0, 0, 195, 196, 197, 0, 0, 0,
	0, 0, 0, 0, 198, 199, 399, 200, 345, 201,
	346, 347, 0, 202, 0, 203, 0, 204, 0, 0,
	205, 206, 0, 207, 0, 0, 0, 348, 208, 209,
	210, 349, 350, 0, 0, 0, 211, 212, 351, 352,
	353, 0, 213, 0, 214, 0, 0, 0, 0, 215,
	354, 0, 355, 0, 0, 216, 217, 218, 219, 356,
	357, 0, 0, 223, 0, 220, 0, 0, 221, 358,
	222, 359, 360, 361, 362, 363, 0, 364, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 365, 0, 232, 0, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 367, 244, 368, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 0,
	250, 0, 370, 251, 252, 253, 254, 255, 0, 256,
	371, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	373, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 374, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 376, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 378, 300, 301, 379, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 381, 382, 0,
	0, 312, 313, 383, 384, 0, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 322, 0, 385,
	323, 324, 325, 386, 387, 0, 0, 326, 0, 174,
	0, 0, 327, 328, 329, 330, 331, 0, 0, 0,
	0, 0, 0, 0, 0, 177, 178, 0, 179, 0,
	0, 0, 0, 332, 0, 0, 0, 2002, 180, 181,
	182, 333, 334, 335, 336, 183, 337, 338, 0, 184,
	339, 340, 185, 186, 0, 0, 341, 342, 343, 0,
	187, 344, 0, 0, 0, 188, 189, 190, 0, 191,
	0, 192, 193, 194, 0, 0, 195, 196, 197, 0,
	0, 0, 0, 0, 0, 0, 198, 199, 399, 200,
	345, 201, 346, 347, 0, 202, 0, 203, 0, 204,
	0, 0, 205, 206, 0, 207, 0, 0, 0, 348,
	208, 209, 210, 349, 350, 0, 0, 0, 211, 212,
	351, 352, 353, 0, 213, 0, 214, 0, 0, 0,
	0, 215, 354, 0, 355, 0, 0, 216, 217, 218,
	219, 356, 357, 0, 0, 223, 0, 220, 0, 0,
	221, 358, 222, 359, 360, 361, 362, 363, 0, 364,
	0, 0, 224, 225, 226, 0, 227, 228, 229, 0,
	231, 230, 0, 365, 0, 232, 0, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 0,
	240, 241, 243, 242, 0, 0, 0, 367, 244, 368,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 0, 250, 0, 370, 251, 252, 253, 254, 255,
	0, 256, 371, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 373, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 374, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 0, 293, 282, 283,
	294, 0, 295, 376, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 378, 300, 301, 379, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 381,
	382, 0, 0, 312, 313, 383, 384, 0, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 322,
	0, 385, 323, 324, 325, 386, 387, 0, 0, 326,
	0, 0, 0, 0, 327, 328, 329, 330, 331, 628,
	617, 618, 615, 616, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 177, 178, 0, 179, 1088,
	0, 0, 0, 332, 0, 0, 0, 0, 180, 181,
	182, 333, 660, 335, 661, 183, 662, 663, 0, 184,
	339, 340, 185, 186, 0, 0, 664, 665, 343, 0,
	187, 344, 0, 830, 0, 188, 189, 190, 0, 191,
	0, 192, 193, 194, 0, 690, 195, 196, 197, 0,
	0, 0, 0, 0, 0, 0, 198, 199, 399, 200,
	666, 201, 667, 668, 0, 202, 0, 203, 0, 204,
	0, 0, 659, 206, 0, 207, 0, 0, 0, 348,
	208, 209, 210, 349, 350, 624, 0, 0, 211, 212,
	669, 670, 671, 0, 213, 0, 214, 0, 0, 691,
	0, 215, 354, 0, 355, 0, 0, 216, 217, 218,
	219, 356, 357, 693, 0, 223, 0, 220, 0, 692,
	221, 672, 222, 673, 674, 675, 676, 677, 0, 635,
	0, 694, 224, 225, 226, 695, 227, 228, 229, 0,
	231, 230, 0, 365, 696, 232, 697, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 698,
	240, 241, 243, 242, 0, 0, 625, 367, 244, 678,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 699, 250, 700, 370, 251, 252, 253, 254, 255,
	0, 256, 371, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 679, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	701, 279, 280, 374, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 0, 293, 282, 283,
	294, 702, 295, 680, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 681, 300, 301, 379, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 682,
	683, 0, 0, 312, 313, 383, 384, 623, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 322,
	0, 385, 323, 324, 325, 386, 684, 0, 0, 326,
	0, 0, 0, 0, 327, 328, 329, 330, 331, 880,
	0, 825, 884, 0, 0, 0, 882, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 177, 178, 0,
	179, 0, 0, 0, 0, 332, 0, 0, 0, 0,
	180, 181, 182, 333, 334, 335, 336, 183, 337, 338,
	0, 184, 339, 340, 185, 186, 0, 0, 341, 342,
	343, 0, 187, 344, 0, 830, 0, 188, 189, 190,
	0, 191, 0, 192, 193, 194, 0, 690, 195, 196,
	197, 0, 0, 0, 0, 0, 0, 0, 198, 199,
	399, 200, 345, 201, 346, 347, 0, 202, 0, 203,
	0, 204, 0, 0, 205, 206, 0, 207, 0, 0,
	0, 348, 208, 209, 210, 349, 350, 0, 0, 0,
	211, 212, 351, 352, 353, 0, 213, 0, 214, 0,
	0, 691, 0, 215, 354, 0, 355, 0, 0, 216,
	217, 218, 219, 356, 357, 693, 0, 223, 0, 220,
	0, 692, 221, 358, 222, 359, 360, 361, 362, 363,
	0, 364, 0, 694, 224, 225, 226, 695, 227, 228,
	229, 0, 231, 230, 0, 365, 696, 232, 697, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 698, 240, 241, 243, 242, 0, 0, 0, 367,
	244, 368, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 369, 699, 250, 700, 370, 251, 252, 253,
	254, 255, 0, 256, 371, 257, 372, 258, 0, 259,
	260, 261, 262, 263, 373, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 701, 279, 280, 374, 281, 0, 285, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 0, 293,
	282, 283, 294, 702, 295, 376, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 378, 300, 301, 379, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 381, 382, 0, 0, 312, 313, 383, 384, 0,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 322, 0, 385, 323, 324, 325, 386, 387, 0,
	484, 326, 174, 0, 0, 0, 327, 328, 329, 330,
	331, 0, 0, 0, 0, 0, 0, 0, 177, 178,
	0, 179, 0, 0, 0, 0, 332, 0, 0, 0,
	0, 180, 181, 182, 333, 334, 335, 336, 183, 337,
	338, 0, 184, 339, 340, 185, 186, 0, 0, 341,
	342, 343, 0, 187, 344, 0, 0, 0, 188, 189,
	190, 0, 191, 0, 192, 193, 194, 0, 0, 195,
	196, 197, 0, 0, 0, 0, 0, 0, 0, 198,
	199, 170, 200, 345, 201, 346, 347, 0, 202, 0,
	203, 0, 204, 0, 0, 205, 206, 0, 207, 0,
	0, 0, 348, 208, 209, 210, 349, 350, 0, 0,
	0, 211, 212, 351, 352, 353, 0, 213, 0, 214,
	0, 0, 0, 0, 215, 354, 0, 355, 0, 0,
	216, 217, 218, 219, 356, 357, 0, 0, 223, 0,
	220, 0, 0, 221, 358, 222, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 224, 225, 226, 0, 227,
	228, 229, 0, 231, 230, 0, 365, 0, 232, 0,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	367, 244, 368, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 0, 250, 0, 370, 251, 252,
	253, 254, 255, 0, 256, 371, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 373, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 374, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 376, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	0, 304, 169, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 381, 382, 0, 0, 312, 313, 383, 384,
	0, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 322, 0, 385, 323, 324, 325, 386, 387,
	0, 167, 326, 174, 0, 0, 0, 327, 328, 329,
	330, 331, 0, 0, 0, 0, 0, 0, 0, 177,
	178, 0, 179, 0, 0, 173, 0, 332, 0, 0,
	0, 0, 180, 181, 182, 333, 334, 335, 336, 183,
	337, 338, 0, 184, 339, 340, 185, 186, 0, 0,
	341, 342, 343, 0, 187, 344, 0, 0, 0, 188,
	189, 190, 0, 191, 0, 192, 193, 194, 0, 0,
	195, 196, 197, 0, 0, 0, 0, 0, 0, 0,
	198, 199, 170, 200, 345, 201, 346, 347, 0, 202,
	0, 203, 0, 204, 0, 0, 205, 206, 0, 207,
	0, 0, 0, 348, 208, 209, 210, 349, 350, 0,
	0, 0, 211, 212, 351, 352, 353, 0, 213, 0,
	214, 0, 0, 0, 0, 215, 354, 0, 355, 0,
	0, 216, 217, 218, 219, 356, 357, 0, 0, 223,
	0, 220, 0, 0, 221, 358, 222, 359, 360, 361,
	362, 363, 0, 364, 0, 0, 224, 225, 226, 0,
	227, 228, 229, 0, 231, 230, 0, 365, 0, 232,
	0, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 0, 240, 241, 243, 242, 0, 0,
	0, 367, 244, 368, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 0, 250, 0, 370, 251,
	252, 253, 254, 255, 0, 256, 371, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 373, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 374, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 376, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 378, 300, 301,
	379, 0, 304, 169, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 381, 382, 0, 0, 312, 313, 383,
	384, 0, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 322, 0, 385, 323, 324, 325, 386,
	387, 825, 884, 326, 0, 0, 882, 0, 327, 328,
	329, 330, 331, 0, 0, 0, 0, 177, 178, 0,
	179, 0, 0, 0, 0, 332, 173, 0, 0, 0,
	180, 181, 182, 333, 334, 335, 336, 183, 337, 338,
	0, 184, 339, 340, 185, 186, 0, 0, 341, 342,
	343, 0, 187, 344, 0, 830, 0, 188, 189, 190,
	0, 191, 0, 192, 193, 194, 0, 690, 195, 196,
	197, 0, 0, 0, 0, 0, 0, 0, 198, 199,
	399, 200, 345, 201, 346, 347, 0, 202, 0, 203,
	0, 204, 0, 0, 205, 206, 0, 207, 0, 0,
	0, 348, 208, 209, 210, 349, 350, 0, 0, 0,
	211, 212, 351, 352, 353, 0, 213, 0, 214, 0,
	0, 691, 0, 215, 354, 0, 355, 0, 0, 216,
	217, 218, 219, 356, 357, 693, 0, 223, 0, 220,
	0, 692, 221, 358, 222, 359, 360, 361, 362, 363,
	0, 364, 0, 694, 224, 225, 226, 695, 227, 228,
	229, 0, 231, 230, 0, 365, 696, 232, 697, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 698, 240, 241, 243, 242, 0, 0, 0, 367,
	244, 368, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 369, 699, 250, 700, 370, 251, 252, 253,
	254, 255, 0, 256, 371, 257, 372, 258, 0, 259,
	260, 261, 262, 263, 373, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 701, 279, 280, 374, 281, 0, 285, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 0, 293,
	282, 283, 294, 702, 295, 376, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 378, 300, 301, 379, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 381, 382, 0, 0, 312, 313, 383, 384, 0,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 322, 0, 385, 323, 324, 325, 386, 387, 174,
	0, 326, 0, 0, 0, 0, 327, 328, 329, 330,
	331, 0, 0, 0, 0, 177, 178, 0, 179, 0,
	0, 0, 0, 332, 0, 0, 0, 0, 180, 181,
	182, 333, 334, 335, 336, 183, 337, 338, 0, 184,
	339, 340, 185, 186, 0, 0, 341, 342, 343, 0,
	187, 344, 0, 0, 0, 188, 189, 190, 0, 191,
	0, 192, 193, 194, 0, 0, 195, 196, 197, 0,
	0, 0, 0, 0, 0, 0, 198, 199, 170, 200,
	345, 201, 346, 347, 0, 202, 0, 203, 0, 204,
	0, 0, 205, 206, 0, 207, 0, 0, 0, 348,
	208, 209, 210, 349, 350, 0, 0, 0, 211, 212,
	351, 352, 353, 0, 213, 0, 214, 0, 0, 0,
	0, 215, 354, 0, 355, 0, 0, 216, 217, 218,
	219, 356, 357, 0, 0, 223, 0, 220, 0, 0,
	221, 358, 222, 359, 360, 361, 362, 363, 0, 364,
	0, 0, 224, 225, 226, 0, 227, 228, 229, 0,
	231, 230, 0, 365, 0, 232, 0, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 0,
	240, 241, 243, 242, 0, 0, 0, 367, 244, 368,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 0, 250, 0, 370, 251, 252, 253, 254, 255,
	0, 256, 371, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 373, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 374, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 0, 293, 282, 283,
	294, 0, 295, 376, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 378, 300, 301, 379, 0, 304, 169,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 381,
	382, 0, 0, 312, 313, 383, 384, 0, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 322,
	0, 385, 323, 324, 325, 386, 387, 825, 884, 326,
	0, 0, 0, 0, 327, 328, 329, 330, 331, 0,
	0, 0, 0, 177, 178, 0, 179, 0, 0, 0,
	0, 332, 173, 0, 0, 0, 180, 181, 182, 333,
	334, 335, 336, 183, 337, 338, 0, 184, 339, 340,
	185, 186, 0, 0, 341, 342, 343, 0, 187, 344,
	0, 830, 0, 188, 189, 190, 0, 191, 0, 192,
	193, 194, 0, 690, 195, 196, 197, 0, 0, 0,
	0, 0, 0, 0, 198, 199, 399, 200, 345, 201,
	346, 347, 0, 202, 0, 203, 0, 204, 0, 0,
	205, 206, 0, 207, 0, 0, 0, 348, 208, 209,
	210, 349, 350, 0, 0, 0, 211, 212, 351, 352,
	353, 0, 213, 0, 214, 0, 0, 691, 0, 215,
	354, 0, 355, 0, 0, 216, 217, 218, 219, 356,
	357, 693, 0, 223, 0, 220, 0, 692, 221, 358,
	222, 359, 360, 361, 362, 363, 0, 364, 0, 694,
	224, 225, 226, 695, 227, 228, 229, 0, 231, 230,
	0, 365, 696, 232, 697, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 698, 240, 241,
	243, 242, 0, 0, 0, 367, 244, 368, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 699,
	250, 700, 370, 251, 252, 253, 254, 255, 0, 256,
	371, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	373, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 701, 279,
	280, 374, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 0, 293, 282, 283, 294, 702,
	295, 376, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 378, 300, 301, 379, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 381, 382, 0,
	0, 312, 313, 383, 384, 0, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 322, 0, 385,
	323, 324, 325, 386, 387, 174, 0, 326, 0, 0,
	0, 0, 327, 328, 329, 330, 331, 0, 0, 0,
	0, 177, 178, 0, 179, 0, 0, 0, 0, 332,
	0, 0, 0, 0, 180, 181, 182, 333, 334, 335,
	336, 183, 337, 338, 0, 184, 339, 340, 185, 186,
	0, 0, 341, 342, 343, 0, 187, 344, 0, 0,
	0, 188, 189, 190, 0, 191, 0, 192, 193, 194,
	0, 0, 195, 196, 197, 0, 0, 0, 0, 0,
	0, 0, 198, 199, 399, 200, 345, 201, 346, 347,
	0, 202, 0, 203, 0, 204, 0, 0, 205, 206,
	0, 207, 0, 0, 0, 348, 208, 209, 210, 349,
	350, 0, 0, 0, 211, 212, 351, 352, 353, 0,
	213, 0, 214, 0, 0, 0, 0, 215, 354, 0,
	355, 0, 0, 216, 217, 218, 219, 356, 357, 0,
	0, 223, 0, 220, 0, 0, 221, 358, 222, 359,
	360, 361, 362, 363, 0, 364, 0, 0, 224, 225,
	226, 0, 227, 228, 229, 0, 231, 230, 0, 365,
	0, 232, 0, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 0, 240, 241, 243, 242,
	0, 0, 0, 367, 244, 368, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 369, 0, 250, 0,
	370, 251, 252, 253, 254, 255, 0, 256, 371, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 373, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 374,
	281, 0, 285, 286, 287, 288, 0, 290, 375, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 376,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 378,
	300, 301, 379, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 381, 382, 0, 0, 312,
	313, 383, 384, 0, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 385, 323, 324,
	325, 386, 387, 825, 0, 326, 0, 0, 0, 0,
	327, 328, 329, 330, 331, 0, 0, 0, 0, 177,
	178, 0, 179, 0, 0, 0, 0, 332, 173, 0,
	0, 0, 180, 181, 182, 333, 334, 335, 336, 183,
	337, 338, 0, 184, 339, 340, 185, 186, 0, 0,
	341, 342, 343, 0, 187, 344, 0, 830, 0, 188,
	189, 190, 0, 191, 0, 192, 193, 194, 0, 690,
	195, 196, 197, 0, 0, 0, 0, 0, 0, 0,
	198, 199, 399, 200, 345, 201, 346, 347, 0, 202,
	0, 203, 0, 204, 0, 0, 205, 206, 0, 207,
	0, 0, 0, 348, 208, 209, 210, 349, 350, 0,
	0, 0, 211, 212, 351, 352, 353, 0, 213, 0,
	214, 0, 0, 691, 0, 215, 354, 0, 355, 0,
	0, 216, 217, 218, 219, 356, 357, 693, 0, 223,
	0, 220, 0, 692, 221, 358, 222, 359, 360, 361,
	362, 363, 0, 364, 0, 694, 224, 225, 226, 695,
	227, 228, 229, 0, 231, 230, 0, 365, 696, 232,
	697, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 698, 240, 241, 243, 242, 0, 0,
	0, 367, 244, 368, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 699, 250, 700, 370, 251,
	252, 253, 254, 255, 0, 256, 371, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 373, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 701, 279, 280, 374, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	0, 293, 282, 283, 294, 702, 295, 376, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 378, 300, 301,
	379, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 381, 382, 0, 0, 312, 313, 383,
	384, 0, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 322, 0, 385, 323, 324, 325, 386,
	387, 174, 0, 326, 0, 0, 0, 0, 327, 328,
	329, 330, 331, 0, 0, 0, 0, 177, 178, 0,
	179, 0, 0, 0, 0, 332, 0, 0, 0, 0,
	180, 181, 182, 333, 334, 335, 336, 183, 337, 338,
	0, 184, 339, 340, 185, 186, 0, 0, 341, 342,
	343, 1591, 187, 344, 0, 0, 0, 188, 189, 190,
	0, 191, 1589, 192, 193, 194, 0, 0, 195, 196,
	197, 0, 0, 0, 0, 0, 0, 0, 198, 199,
	399, 200, 345, 201, 346, 347, 0, 202, 0, 203,
	0, 204, 0, 0, 205, 206, 0, 207, 0, 0,
	0, 348, 208, 209, 210, 349, 350, 0, 1630, 0,
	211, 212, 351, 352, 353, 0, 213, 0, 214, 1594,
	0, 0, 0, 215, 354, 0, 355, 0, 0, 216,
	217, 218, 219, 356, 357, 0, 0, 223, 1628, 220,
	0, 0, 221, 358, 222, 359, 360, 361, 362, 363,
	0, 364, 0, 0, 224, 225, 226, 0, 227, 228,
	229, 0, 231, 230, 0, 365, 0, 232, 0, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 0, 240, 241, 243, 242, 0, 0, 0, 367,
	244, 368, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 369, 0, 250, 0, 370, 251, 252, 253,
	254, 255, 0, 256, 371, 257, 372, 258, 1593, 259,
	260, 261, 262, 263, 373, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 0, 279, 280, 374, 281, 0, 285, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 0, 293,
	282, 283, 294, 0, 295, 376, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 378, 300, 301, 379, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 381, 382, 0, 0, 312, 313, 383, 384, 0,
	314, 315, 316, 317, 0, 1629, 318, 319, 320, 321,
	0, 322, 0, 385, 323, 324, 325, 386, 387, 174,
	0, 326, 0, 0, 0, 0, 327, 328, 329, 330,
	331, 0, 0, 0, 0, 177, 178, 0, 179, 0,
	0, 0, 0, 332, 0, 0, 0, 0, 180, 181,
	182, 333, 334, 335, 336, 183, 337, 338, 0, 184,
	339, 340, 185, 186, 0, 0, 341, 342, 343, 1591,
	187, 344, 0, 0, 1586, 188, 189, 190, 0, 191,
	1589, 192, 193, 194, 0, 0, 195, 196, 197, 0,
	0, 0, 0, 0, 0, 0, 198, 199, 399, 200,
	345, 201, 346, 347, 0, 202, 0, 203, 0, 204,
	0, 0, 205, 206, 0, 207, 0, 0, 0, 348,
	208, 209, 210, 349, 350, 0, 0, 0, 211, 212,
	351, 352, 353, 0, 213, 0, 214, 1594, 0, 0,
	0, 215, 354, 0, 355, 0, 0, 216, 217, 218,
	219, 1585, 357, 0, 0, 223, 0, 220, 0, 0,
	221, 358, 222, 359, 360, 361, 362, 363, 0, 364,
	0, 0, 224, 225, 226, 0, 227, 228, 229, 0,
	231, 230, 0, 365, 0, 232, 0, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 0,
	240, 241, 243, 242, 0, 0, 0, 367, 244, 368,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 0, 250, 0, 370, 251, 252, 253, 254, 255,
	0, 256, 371, 257, 372, 258, 1593, 259, 260, 261,
	262, 263, 373, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 374, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 0, 293, 282, 283,
	294, 0, 295, 376, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 378, 300, 301, 379, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 381,
	382, 0, 0, 312, 313, 383, 384, 0, 314, 315,
	316, 317, 0, 1592, 318, 319, 320, 321, 0, 322,
	0, 385, 323, 324, 325, 386, 387, 0, 800, 326,
	174, 0, 0, 0, 327, 328, 329, 330, 331, 0,
	0, 0, 0, 0, 0, 0, 177, 178, 0, 179,
	0, 0, 0, 0, 332, 0, 0, 0, 0, 180,
	181, 182, 333, 334, 335, 336, 183, 337, 338, 0,
	184, 339, 340, 185, 186, 0, 0, 341, 342, 343,
	0, 187, 344, 0, 0, 0, 188, 189, 190, 0,
	191, 0, 192, 193, 194, 0, 0, 195, 196, 197,
	0, 0, 0, 0, 0, 0, 0, 198, 199, 399,
	200, 345, 201, 346, 347, 0, 202, 0, 203, 0,
	204, 0, 0, 205, 206, 0, 207, 0, 0, 0,
	348, 208, 209, 210, 349, 350, 0, 0, 0, 211,
	212, 351, 352, 353, 0, 213, 0, 214, 0, 0,
	0, 0, 215, 354, 0, 355, 0, 0, 216, 217,
	218, 219, 356, 357, 0, 0, 223, 0, 220, 0,
	0, 221, 358, 222, 359, 360, 361, 362, 363, 0,
	364, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 365, 0, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 367, 244,
	368, 245, 246, 0, 247, 0, 742, 248, 0, 0,
	249, 369, 0, 250, 0, 370, 251, 252, 253, 254,
	255, 0, 256, 371, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 373, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 374, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 376, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 378, 300, 301, 379, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	381, 382, 0, 0, 312, 313, 383, 384, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 385, 323, 324, 325, 386, 387, 0, 748,
	326, 174, 0, 0, 0, 327, 328, 329, 330, 331,
	0, 0, 0, 0, 0, 0, 0, 177, 178, 0,
	179, 0, 0, 0, 0, 332, 0, 0, 0, 0,
	180, 181, 182, 333, 334, 335, 336, 183, 337, 338,
	0, 184, 339, 340, 185, 186, 0, 0, 341, 342,
	343, 0, 187, 344, 0, 0, 0, 188, 189, 190,
	0, 191, 0, 192, 193, 194, 0, 0, 195, 196,
	197, 0, 0, 0, 0, 0, 0, 0, 198, 199,
	399, 200, 345, 201, 346, 347, 0, 202, 0, 203,
	0, 204, 0, 0, 205, 206, 0, 207, 0, 0,
	0, 348, 208, 209, 210, 349, 350, 0, 0, 0,
	211, 212, 351, 352, 353, 0, 213, 0, 214, 0,
	0, 0, 0, 215, 354, 0, 355, 0, 0, 216,
	217, 218, 219, 750, 357, 0, 0, 223, 0, 220,
	0, 0, 221, 358, 222, 359, 360, 361, 362, 363,
	0, 364, 0, 0, 224, 225, 226, 0, 227, 228,
	229, 0, 231, 230, 0, 365, 0, 232, 0, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 0, 240, 241, 243, 242, 0, 0, 0, 367,
	244, 368, 245, 246, 0, 247, 0, 742, 248, 0,
	0, 249, 369, 0, 250, 0, 370, 251, 252, 253,
	254, 255, 0, 256, 371, 257, 372, 258, 0, 259,
	260, 261, 262, 263, 373, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 0, 279, 280, 374, 281, 0, 285, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 0, 293,
	282, 283, 294, 0, 295, 376, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 378, 300, 301, 379, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 381, 382, 0, 0, 312, 313, 383, 384, 0,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 322, 0, 385, 323, 324, 325, 386, 387, 0,
	744, 326, 174, 0, 0, 0, 327, 328, 329, 330,
	331, 0, 0, 0, 0, 0, 0, 0, 177, 178,
	0, 179, 0, 0, 0, 0, 332, 0, 0, 0,
	0, 180, 181, 182, 333, 334, 335, 336, 183, 337,
	338, 0, 184, 339, 340, 185, 186, 0, 0, 341,
	342, 343, 0, 187, 344, 0, 0, 0, 188, 189,
	190, 0, 191, 0, 192, 193, 194, 0, 0, 195,
	196, 197, 0, 0, 0, 0, 0, 0, 0, 198,
	199, 399, 200, 345, 201, 346, 347, 0, 202, 0,
	203, 0, 204, 0, 0, 205, 206, 0, 207, 0,
	0, 0, 348, 208, 209, 210, 349, 350, 0, 0,
	0, 211, 212, 351, 352, 353, 0, 213, 0, 214,
	0, 0, 0, 0, 215, 354, 0, 355, 0, 0,
	216, 217, 218, 219, 746, 357, 0, 0, 223, 0,
	220, 0, 0, 221, 358, 222, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 224, 225, 226, 0, 227,
	228, 229, 0, 231, 230, 0, 365, 0, 232, 0,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	367, 244, 368, 245, 246, 0, 247, 0, 742, 248,
	0, 0, 249, 369, 0, 250, 0, 370, 251, 252,
	253, 254, 255, 0, 256, 371, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 373, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 374, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 376, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 381, 382, 0, 0, 312, 313, 383, 384,
	0, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 322, 0, 385, 323, 324, 325, 386, 387,
	0, 416, 326, 174, 0, 0, 0, 327, 328, 329,
	330, 331, 0, 0, 0, 0, 0, 0, 0, 177,
	178, 415, 179, 0, 0, 0, 0, 332, 0, 0,
	0, 0, 180, 181, 182, 333, 334, 335, 336, 183,
	337, 338, 0, 184, 339, 340, 185, 186, 0, 0,
	341, 342, 343, 0, 187, 344, 0, 0, 0, 188,
	189, 190, 0, 191, 0, 192, 193, 194, 0, 0,
	195, 196, 197, 0, 0, 0, 0, 0, 0, 0,
	198, 199, 399, 200, 345, 201, 346, 347, 0, 202,
	0, 203, 0, 204, 0, 0, 205, 206, 0, 207,
	0, 0, 0, 348, 208, 209, 210, 349, 350, 0,
	0, 0, 211, 212, 351, 352, 353, 0, 213, 0,
	214, 0, 0, 0, 0, 215, 354, 0, 355, 0,
	0, 216, 217, 218, 219, 356, 357, 0, 0, 223,
	0, 220, 0, 0, 221, 358, 222, 359, 360, 361,
	362, 363, 0, 364, 0, 0, 224, 225, 226, 0,
	227, 228, 229, 0, 231, 230, 0, 365, 0, 232,
	0, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 0, 240, 241, 243, 242, 0, 0,
	0, 367, 244, 368, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 0, 250, 0, 370, 251,
	252, 253, 254, 255, 0, 256, 371, 257, 372, 414,
	0, 259, 260, 261, 262, 263, 373, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 374, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 376, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 378, 300, 301,
	379, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 381, 382, 0, 0, 312, 313, 383,
	384, 0, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 322, 0, 385, 323, 324, 325, 386,
	387, 174, 0, 326, 0, 0, 0, 0, 327, 328,
	329, 330, 331, 0, 0, 0, 0, 177, 178, 0,
	179, 0, 0, 0, 0, 332, 0, 1574, 0, 0,
	180, 181, 182, 333, 334, 335, 336, 183, 337, 338,
	0, 184, 339, 340, 185, 186, 0, 0, 341, 342,
	343, 0, 187, 344, 0, 0, 0, 188, 189, 190,
	0, 191, 0, 192, 193, 194, 0, 0, 195, 196,
	197, 0, 0, 0, 0, 0, 0, 0, 198, 199,
	399, 200, 345, 201, 346, 347, 0, 202, 0, 203,
	0, 204, 0, 0, 205, 206, 0, 207, 0, 0,
	0, 348, 208, 209, 210, 349, 350, 0, 0, 0,
	211, 212, 351, 352, 353, 0, 213, 0, 214, 0,
	0, 0, 0, 215, 354, 0, 355, 0, 0, 216,
	217, 218, 219, 356, 357, 0, 0, 223, 0, 220,
	0, 0, 221, 358, 222, 359, 360, 361, 362, 363,
	0, 364, 0, 0, 224, 225, 226, 0, 227, 228,
	229, 0, 231, 230, 0, 365, 0, 232, 0, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 0, 240, 241, 243, 242, 0, 0, 0, 367,
	244, 368, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 369, 0, 250, 0, 370, 251, 252, 253,
	254, 255, 0, 256, 371, 257, 372, 258, 0, 259,
	260, 261, 262, 263, 373, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 0, 279, 280, 374, 281, 0, 285, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 0, 293,
	282, 283, 294, 0, 295, 376, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 378, 300, 301, 379, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 381, 382, 0, 0, 312, 313, 383, 384, 0,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 322, 0, 385, 323, 324, 325, 386, 387, 174,
	2148, 326, 0, 0, 0, 0, 327, 328, 329, 330,
	331, 0, 0, 0, 0, 177, 178, 0, 179, 0,
	0, 0, 0, 332, 0, 0, 0, 0, 180, 181,
	182, 333, 334, 335, 336, 183, 337, 338, 0, 184,
	339, 340, 185, 186, 0, 0, 341, 342, 343, 0,
	187, 344, 0, 0, 0, 188, 189, 190, 0, 191,
	0, 192, 193, 194, 0, 0, 195, 196, 197, 0,
	0, 0, 0, 0, 0, 0, 198, 199, 399, 200,
	345, 201, 346, 347, 0, 202, 0, 203, 0, 204,
	0, 0, 205, 206, 0, 207, 0, 0, 0, 348,
	208, 209, 210, 349, 350, 0, 0, 0, 211, 212,
	351, 352, 353, 0, 213, 0, 214, 0, 0, 0,
	0, 215, 354, 0, 355, 0, 0, 216, 217, 218,
	219, 356, 357, 0, 0, 223, 0, 220, 0, 0,
	221, 358, 222, 359, 360, 361, 362, 363, 0, 364,
	0, 0, 224, 225, 226, 0, 227, 228, 229, 0,
	231, 230, 0, 365, 0, 232, 0, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 0,
	240, 241, 243, 242, 0, 0, 0, 367, 244, 368,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 0, 250, 0, 370, 251, 252, 253, 254, 255,
	0, 256, 371, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 373, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 374, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 0, 293, 282, 283,
	294, 0, 295, 376, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 378, 300, 301, 379, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 381,
	382, 0, 0, 312, 313, 383, 384, 0, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 322,
	0, 385, 323, 324, 325, 386, 387, 174, 2148, 326,
	0, 0, 0, 0, 327, 328, 329, 330, 331, 0,
	0, 0, 0, 177, 178, 0, 179, 0, 0, 0,
	0, 332, 0, 0, 0, 0, 180, 181, 182, 333,
	334, 335, 336, 183, 337, 338, 0, 184, 339, 340,
	185, 186, 0, 0, 341, 342, 343, 0, 187, 344,
	0, 0, 0, 188, 189, 190, 0, 191, 0, 192,
	193, 194, 0, 0, 195, 196, 197, 0, 0, 0,
	0, 0, 0, 0, 198, 199, 399, 200, 345, 201,
	346, 347, 0, 202, 0, 203, 0, 204, 0, 0,
	205, 206, 0, 207, 0, 0, 0, 348, 208, 209,
	210, 349, 350, 0, 0, 0, 211, 212, 351, 352,
	353, 0, 213, 0, 214, 0, 0, 0, 0, 215,
	354, 0, 355, 0, 0, 216, 217, 218, 219, 356,
	357, 0, 0, 223, 0, 220, 0, 0, 221, 358,
	222, 359, 360, 361, 362, 363, 0, 364, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 365, 0, 232, 0, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 367, 244, 368, 245, 246,
	0, 247, 0, 0, 2145, 0, 0, 249, 369, 0,
	250, 0, 370, 251, 252, 253, 254, 255, 0, 256,
	371, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	373, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 374, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 376, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 378, 300, 301, 379, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 381, 382, 0,
	0, 312, 313, 383, 384, 0, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 322, 0, 385,
	323, 324, 325, 386, 387, 174, 0, 326, 0, 0,
	0, 0, 327, 328, 329, 330, 331, 0, 0, 0,
	0, 177, 178, 0, 179, 0, 0, 0, 0, 332,
	0, 0, 0, 0, 180, 181, 182, 333, 334, 335,
	336, 183, 337, 338, 0, 184, 339, 340, 185, 186,
	0, 0, 341, 342, 343, 0, 187, 344, 0, 0,
	0, 188, 189, 190, 0, 191, 0, 192, 193, 194,
	0, 0, 195, 196, 197, 0, 0, 0, 0, 0,
	0, 0, 198, 199, 399, 200, 345, 201, 346, 347,
	0, 202, 0, 203, 0, 204, 0, 0, 205, 206,
	0, 207, 0, 0, 0, 348, 208, 209, 210, 349,
	350, 0, 0, 0, 211, 212, 351, 352, 353, 0,
	213, 0, 214, 0, 0, 0, 0, 215, 354, 0,
	355, 0, 0, 216, 217, 218, 219, 356, 357, 0,
	0, 223, 0, 220, 0, 0, 221, 358, 222, 359,
	360, 361, 362, 363, 0, 364, 0, 0, 224, 225,
	226, 0, 227, 228, 229, 0, 231, 230, 0, 365,
	0, 232, 0, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 0, 240, 241, 243, 242,
	0, 0, 0, 367, 244, 368, 245, 246, 0, 247,
	0, 742, 248, 0, 0, 249, 369, 0, 250, 0,
	370, 251, 252, 253, 254, 255, 0, 256, 371, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 373, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 374,
	281, 0, 285, 286, 287, 288, 0, 290, 375, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 376,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 378,
	300, 301, 379, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 381, 382, 0, 0, 312,
	313, 383, 384, 0, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 385, 323, 324,
	325, 386, 387, 0, 1356, 326, 174, 0, 0, 0,
	327, 328, 329, 330, 331, 0, 0, 0, 0, 0,
	0, 0, 177, 178, 0, 179, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 180, 181, 182, 333, 334,
	335, 336, 183, 337, 338, 0, 184, 339, 340, 185,
	186, 0, 0, 341, 342, 343, 0, 187, 344, 0,
	0, 0, 188, 189, 190, 0, 191, 0, 192, 193,
	194, 0, 0, 195, 196, 197, 0, 0, 0, 0,
	0, 0, 0, 198, 199, 399, 200, 345, 201, 346,
	347, 0, 202, 0, 203, 0, 204, 0, 0, 205,
	206, 0, 207, 0, 0, 0, 348, 208, 209, 210,
	349, 350, 0, 0, 0, 211, 212, 351, 352, 353,
	0, 213, 0, 214, 0, 0, 0, 0, 215, 354,
	0, 355, 0, 0, 216, 217, 218, 219, 356, 357,
	0, 0, 223, 0, 220, 0, 0, 221, 358, 222,
	359, 360, 361, 362, 363, 0, 364, 0, 0, 224,
	225, 226, 0, 227, 228, 229, 0, 231, 230, 0,
	365, 0, 232, 0, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 367, 244, 368, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 0, 250,
	0, 370, 251, 252, 253, 254, 255, 0, 256, 371,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 373,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	374, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	376, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	378, 300, 301, 379, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 381, 382, 0, 0,
	312, 313, 383, 384, 0, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 322, 0, 385, 323,
	324, 325, 386, 387, 0, 1354, 326, 174, 0, 0,
	0, 327, 328, 329, 330, 331, 0, 0, 0, 0,
	0, 0, 0, 177, 178, 0, 179, 0, 0, 0,
	0, 332, 0, 0, 0, 0, 180, 181, 182, 333,
	334, 335, 336, 183, 337, 338, 0, 184, 339, 340,
	185, 186, 0, 0, 341, 342, 343, 0, 187, 344,
	0, 0, 0, 188, 189, 190, 0, 191, 0, 192,
	193, 194, 0, 0, 195, 196, 197, 0, 0, 0,
	0, 0, 0, 0, 198, 199, 399, 200, 345, 201,
	346, 347, 0, 202, 0, 203, 0, 204, 0, 0,
	205, 206, 0, 207, 0, 0, 0, 348, 208, 209,
	210, 349, 350, 0, 0, 0, 211, 212, 351, 352,
	353, 0, 213, 0, 214, 0, 0, 0, 0, 215,
	354, 0, 355, 0, 0, 216, 217, 218, 219, 356,
	357, 0, 0, 223, 0, 220, 0, 0, 221, 358,
	222, 359, 360, 361, 362, 363, 0, 364, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 365, 0, 232, 0, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 367, 244, 368, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 0,
	250, 0, 370, 251, 252, 253, 254, 255, 0, 256,
	371, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	373, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 374, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 376, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 378, 300, 301, 379, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 381, 382, 0,
	0, 312, 313, 383, 384, 0, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 322, 0, 385,
	323, 324, 325, 386, 387, 174, 0, 326, 0, 0,
	0, 0, 327, 328, 329, 330, 331, 0, 0, 0,
	0, 177, 178, 1336, 179, 0, 0, 0, 0, 332,
	0, 0, 0, 0, 180, 181, 182, 333, 334, 335,
	336, 183, 337, 338, 0, 184, 339, 340, 185, 186,
	0, 0, 341, 342, 343, 0, 187, 344, 0, 0,
	0, 188, 189, 190, 0, 191, 0, 192, 193, 194,
	0, 0, 195, 196, 197, 0, 0, 0, 0, 0,
	0, 0, 198, 199, 399, 200, 345, 201, 346, 347,
	0, 202, 0, 203, 0, 204, 0, 0, 205, 206,
	0, 207, 0, 0, 0, 348, 208, 209, 210, 349,
	350, 0, 0, 0, 211, 212, 351, 352, 353, 0,
	213, 0, 214, 0, 0, 0, 0, 215, 354, 0,
	355, 0, 0, 216, 217, 218, 219, 356, 357, 0,
	0, 223, 0, 220, 0, 0, 221, 358, 222, 359,
	360, 361, 362, 363, 0, 364, 0, 0, 224, 225,
	226, 0, 227, 228, 229, 0, 231, 230, 0, 365,
	0, 232, 0, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 0, 240, 241, 243, 242,
	0, 0, 0, 367, 244, 368, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 369, 0, 250, 0,
	370, 251, 252, 253, 254, 255, 0, 256, 371, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 373, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 374,
	281, 0, 285, 286, 287, 288, 0, 290, 375, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 376,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 378,
	300, 301, 379, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 381, 382, 0, 0, 312,
	313, 383, 384, 0, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 385, 323, 324,
	325, 386, 387, 0, 510, 326, 174, 0, 0, 0,
	327, 328, 329, 330, 331, 0, 0, 0, 0, 0,
	0, 0, 177, 178, 0, 179, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 180, 181, 182, 333, 334,
	335, 336, 183, 337, 338, 0, 184, 339, 340, 185,
	186, 0, 0, 341, 342, 859, 0, 187, 344, 0,
	0, 0, 188, 189, 190, 0, 191, 0, 192, 193,
	194, 0, 0, 195, 196, 197, 0, 0, 0, 0,
	0, 0, 0, 198, 199, 399, 200, 345, 201, 346,
	347, 0, 202, 0, 203, 0, 204, 0, 0, 205,
	206, 0, 207, 0, 0, 0, 348, 208, 209, 210,
	349, 350, 0, 0, 0, 211, 212, 351, 352, 353,
	0, 213, 0, 214, 0, 0, 0, 0, 215, 354,
	0, 355, 0, 0, 216, 217, 218, 219, 356, 357,
	0, 0, 223, 0, 220, 0, 0, 221, 358, 222,
	359, 360, 361, 362, 363, 0, 364, 0, 0, 224,
	225, 226, 0, 227, 228, 229, 0, 231, 230, 0,
	365, 0, 232, 0, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 512, 0, 240, 241, 243,
	242, 0, 0, 0, 367, 244, 368, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 0, 250,
	0, 370, 251, 252, 253, 254, 255, 0, 256, 371,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 373,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	374, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	376, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	378, 300, 301, 379, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 507, 381, 382, 0, 0,
	312, 313, 383, 384, 0, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 322, 0, 385, 323,
	324, 325, 386, 387, 0, 1216, 326, 174, 0, 0,
	0, 327, 328, 329, 330, 331, 0, 0, 0, 0,
	0, 0, 0, 177, 178, 0, 179, 0, 0, 0,
	0, 332, 0, 0, 0, 0, 180, 181, 182, 333,
	334, 335, 336, 183, 337, 338, 0, 184, 339, 340,
	185, 186, 0, 0, 341, 342, 343, 0, 187, 344,
	0, 0, 0, 188, 189, 190, 0, 191, 0, 192,
	193, 194, 0, 0, 195, 196, 197, 0, 0, 0,
	0, 0, 0, 0, 198, 199, 399, 200, 345, 201,
	346, 347, 0, 202, 0, 203, 0, 204, 0, 0,
	205, 206, 0, 207, 0, 0, 0, 348, 208, 209,
	210, 349, 350, 0, 0, 0, 211, 212, 351, 352,
	353, 0, 213, 0, 214, 0, 0, 0, 0, 215,
	354, 0, 355, 0, 0, 216, 217, 218, 219, 1215,
	357, 0, 0, 223, 0, 220, 0, 0, 221, 358,
	222, 359, 360, 361, 362, 363, 0, 364, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 365, 0, 232, 0, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 367, 244, 368, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 0,
	250, 0, 370, 251, 252, 253, 254, 255, 0, 256,
	371, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	373, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 374, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 376, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 378, 300, 301, 379, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 381, 382, 0,
	0, 312, 313, 383, 384, 0, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 322, 0, 385,
	323, 324, 325, 386, 387, 0, 510, 326, 174, 0,
	0, 0, 327, 328, 329, 330, 331, 0, 0, 0,
	0, 0, 0, 0, 177, 178, 0, 179, 0, 0,
	0, 0, 332, 0, 0, 0, 0, 180, 181, 182,
	333, 334, 335, 336, 183, 337, 338, 0, 184, 339,
	340, 185, 186, 0, 0, 341, 342, 859, 0, 187,
	344, 0, 0, 0, 188, 189, 190, 0, 191, 0,
	192, 193, 194, 0, 0, 195, 196, 197, 0, 0,
	0, 0, 0, 0, 0, 198, 199, 399, 200, 345,
	201, 346, 347, 0, 202, 0, 203, 0, 204, 0,
	0, 205, 206, 0, 207, 0, 0, 0, 348, 208,
	209, 210, 349, 350, 0, 0, 0, 211, 212, 351,
	352, 353, 0, 213, 0, 214, 0, 0, 0, 0,
	215, 354, 0, 355, 0, 0, 216, 217, 218, 219,
	356, 357, 0, 0, 223, 0, 220, 0, 0, 221,
	358, 222, 359, 360, 361, 362, 363, 0, 364, 0,
	0, 224, 225, 226, 0, 227, 228, 229, 0, 231,
	230, 0, 365, 0, 232, 0, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 512, 0, 240,
	241, 243, 242, 0, 0, 0, 367, 244, 368, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 369,
	0, 250, 0, 370, 251, 252, 253, 254, 255, 0,
	256, 371, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 373, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 374, 281, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 376, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 378, 300, 301, 379, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 507, 381, 382,
	0, 0, 312, 860, 383, 384, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	385, 323, 324, 325, 386, 387, 0, 510, 326, 174,
	0, 0, 0, 327, 328, 329, 330, 331, 0, 0,
	0, 0, 0, 0, 0, 177, 178, 0, 179, 0,
	0, 0, 0, 332, 0, 0, 0, 0, 180, 181,
	182, 333, 334, 335, 336, 183, 337, 338, 0, 184,
	339, 340, 185, 186, 0, 0, 341, 342, 343, 0,
	501, 344, 0, 0, 0, 188, 189, 190, 0, 191,
	0, 192, 193, 194, 0, 0, 195, 196, 197, 0,
	0, 0, 0, 0, 0, 0, 198, 199, 399, 200,
	345, 201, 346, 347, 0, 202, 0, 203, 0, 204,
	0, 0, 205, 206, 0, 207, 0, 0, 0, 348,
	208, 209, 210, 349, 350, 0, 0, 0, 211, 212,
	351, 352, 353, 0, 213, 0, 214, 0, 0, 0,
	0, 215, 354, 0, 355, 0, 0, 216, 217, 218,
	219, 356, 357, 0, 0, 223, 0, 220, 0, 0,
	221, 358, 222, 359, 360, 361, 362, 363, 0, 364,
	0, 0, 224, 225, 226, 0, 227, 228, 229, 0,
	231, 230, 0, 365, 0, 232, 0, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 512, 0,
	240, 241, 243, 242, 0, 0, 0, 367, 244, 368,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 0, 250, 0, 370, 251, 252, 253, 254, 255,
	0, 256, 371, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 373, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 374, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 843, 292, 0, 293, 282, 283,
	294, 0, 295, 376, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 378, 300, 301, 379, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 507, 381,
	382, 0, 0, 312, 313, 383, 384, 0, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 322,
	0, 385, 323, 324, 325, 386, 387, 0, 818, 326,
	174, 0, 0, 0, 327, 328, 329, 330, 331, 0,
	0, 0, 0, 0, 0, 0, 177, 178, 0, 179,
	0, 0, 0, 0, 332, 0, 0, 0, 0, 180,
	181, 182, 333, 334, 335, 336, 183, 337, 338, 0,
	184, 339, 340, 185, 186, 0, 0, 341, 342, 343,
	0, 187, 344, 0, 0, 0, 188, 189, 190, 0,
	191, 0, 192, 193, 194, 0, 0, 195, 196, 197,
	0, 0, 0, 0, 0, 0, 0, 198, 199, 399,
	200, 345, 201, 346, 347, 0, 202, 0, 203, 0,
	204, 0, 0, 205, 206, 0, 207, 0, 0, 0,
	348, 208, 209, 210, 349, 350, 0, 0, 0, 211,
	212, 351, 352, 353, 0, 213, 0, 214, 0, 0,
	0, 0, 215, 354, 0, 355, 0, 0, 216, 217,
	218, 219, 817, 357, 0, 0, 223, 0, 220, 0,
	0, 221, 358, 222, 359, 360, 361, 362, 363, 0,
	364, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 365, 0, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 367, 244,
	368, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 0, 250, 0, 370, 251, 252, 253, 254,
	255, 0, 256, 371, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 373, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 374, 281, 0, 285, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 376, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 378, 300, 301, 379, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	381, 382, 0, 0, 312, 313, 383, 384, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 385, 323, 324, 325, 386, 387, 0, 815,
	326, 174, 0, 0, 0, 327, 328, 329, 330, 331,
	0, 0, 0, 0, 0, 0, 0, 177, 178, 0,
	179, 0, 0, 0, 0, 332, 0, 0, 0, 0,
	180, 181, 182, 333, 334, 335, 336, 183, 337, 338,
	0, 184, 339, 340, 185, 186, 0, 0, 341, 342,
	343, 0, 187, 344, 0, 0, 0, 188, 189, 190,
	0, 191, 0, 192, 193, 194, 0, 0, 195, 196,
	197, 0, 0, 0, 0, 0, 0, 0, 198, 199,
	399, 200, 345, 201, 346, 347, 0, 202, 0, 203,
	0, 204, 0, 0, 205, 206, 0, 207, 0, 0,
	0, 348, 208, 209, 210, 349, 350, 0, 0, 0,
	211, 212, 351, 352, 353, 0, 213, 0, 214, 0,
	0, 0, 0, 215, 354, 0, 355, 0, 0, 216,
	217, 218, 219, 814, 357, 0, 0, 223, 0, 220,
	0, 0, 221, 358, 222, 359, 360, 361, 362, 363,
	0, 364, 0, 0, 224, 225, 226, 0, 227, 228,
	229, 0, 231, 230, 0, 365, 0, 232, 0, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 0, 240, 241, 243, 242, 0, 0, 0, 367,
	244, 368, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 369, 0, 250, 0, 370, 251, 252, 253,
	254, 255, 0, 256, 371, 257, 372, 258, 0, 259,
	260, 261, 262, 263, 373, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 0, 279, 280, 374, 281, 0, 285, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 0, 293,
	282, 283, 294, 0, 295, 376, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 378, 300, 301, 379, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 381, 382, 0, 0, 312, 313, 383, 384, 0,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 322, 0, 385, 323, 324, 325, 386, 387, 0,
	811, 326, 174, 0, 0, 0, 327, 328, 329, 330,
	331, 0, 0, 0, 0, 0, 0, 0, 177, 178,
	0, 179, 0, 0, 0, 0, 332, 0, 0, 0,
	0, 180, 181, 182, 333, 334, 335, 336, 183, 337,
	338, 0, 184, 339, 340, 185, 186, 0, 0, 341,
	342, 343, 0, 187, 344, 0, 0, 0, 188, 189,
	190, 0, 191, 0, 192, 193, 194, 0, 0, 195,
	196, 197, 0, 0, 0, 0, 0, 0, 0, 198,
	199, 399, 200, 345, 201, 346, 347, 0, 202, 0,
	203, 0, 204, 0, 0, 205, 206, 0, 207, 0,
	0, 0, 348, 208, 209, 210, 349, 350, 0, 0,
	0, 211, 212, 351, 352, 353, 0, 213, 0, 214,
	0, 0, 0, 0, 215, 354, 0, 355, 0, 0,
	216, 217, 218, 219, 810, 357, 0, 0, 223, 0,
	220, 0, 0, 221, 358, 222, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 224, 225, 226, 0, 227,
	228, 229, 0, 231, 230, 0, 365, 0, 232, 0,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	367, 244, 368, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 0, 250, 0, 370, 251, 252,
	253, 254, 255, 0, 256, 371, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 373, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 374, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 376, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 381, 382, 0, 0, 312, 313, 383, 384,
	0, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 322, 0, 385, 323, 324, 325, 386, 387,
	0, 808, 326, 174, 0, 0, 0, 327, 328, 329,
	330, 331, 0, 0, 0, 0, 0, 0, 0, 177,
	178, 0, 179, 0, 0, 0, 0, 332, 0, 0,
	0, 0, 180, 181, 182, 333, 334, 335, 336, 183,
	337, 338, 0, 184, 339, 340, 185, 186, 0, 0,
	341, 342, 343, 0, 187, 344, 0, 0, 0, 188,
	189, 190, 0, 191, 0, 192, 193, 194, 0, 0,
	195, 196, 197, 0, 0, 0, 0, 0, 0, 0,
	198, 199, 399, 200, 345, 201, 346, 347, 0, 202,
	0, 203, 0, 204, 0, 0, 205, 206, 0, 207,
	0, 0, 0, 348, 208, 209, 210, 349, 350, 0,
	0, 0, 211, 212, 351, 352, 353, 0, 213, 0,
	214, 0, 0, 0, 0, 215, 354, 0, 355, 0,
	0, 216, 217, 218, 219, 807, 357, 0, 0, 223,
	0, 220, 0, 0, 221, 358, 222, 359, 360, 361,
	362, 363, 0, 364, 0, 0, 224, 225, 226, 0,
	227, 228, 229, 0, 231, 230, 0, 365, 0, 232,
	0, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 0, 240, 241, 243, 242, 0, 0,
	0, 367, 244, 368, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 0, 250, 0, 370, 251,
	252, 253, 254, 255, 0, 256, 371, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 373, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 374, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 376, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 378, 300, 301,
	379, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 381, 382, 0, 0, 312, 313, 383,
	384, 0, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 322, 0, 385, 323, 324, 325, 386,
	387, 0, 804, 326, 174, 0, 0, 0, 327, 328,
	329, 330, 331, 0, 0, 0, 0, 0, 0, 0,
	177, 178, 0, 179, 0, 0, 0, 0, 332, 0,
	0, 0, 0, 180, 181, 182, 333, 334, 335, 336,
	183, 337, 338, 0, 184, 339, 340, 185, 186, 0,
	0, 341, 342, 343, 0, 187, 344, 0, 0, 0,
	188, 189, 190, 0, 191, 0, 192, 193, 194, 0,
	0, 195, 196, 197, 0, 0, 0, 0, 0, 0,
	0, 198, 199, 399, 200, 345, 201, 346, 347, 0,
	202, 0, 203, 0, 204, 0, 0, 205, 206, 0,
	207, 0, 0, 0, 348, 208, 209, 210, 349, 350,
	0, 0, 0, 211, 212, 351, 352, 353, 0, 213,
	0, 214, 0, 0, 0, 0, 215, 354, 0, 355,
	0, 0, 216, 217, 218, 219, 803, 357, 0, 0,
	223, 0, 220, 0, 0, 221, 358, 222, 359, 360,
	361, 362, 363, 0, 364, 0, 0, 224, 225, 226,
	0, 227, 228, 229, 0, 231, 230, 0, 365, 0,
	232, 0, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 366, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 367, 244, 368, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 369, 0, 250, 0, 370,
	251, 252, 253, 254, 255, 0, 256, 371, 257, 372,
	258, 0, 259, 260, 261, 262, 263, 373, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 0, 279, 280, 374, 281,
	0, 285, 286, 287, 288, 0, 290, 375, 289, 291,
	292, 0, 293, 282, 283, 294, 0, 295, 376, 377,
	296, 0, 303, 297, 298, 284, 299, 302, 378, 300,
	301, 379, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 0, 380, 381, 382, 0, 0, 312, 313,
	383, 384, 0, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 322, 0, 385, 323, 324, 325,
	386, 387, 174, 0, 326, 0, 0, 0, 0, 327,
	328, 329, 330, 331, 0, 0, 0, 0, 177, 178,
	792, 179, 0, 0, 0, 0, 332, 0, 0, 0,
	0, 180, 181, 182, 333, 334, 335, 336, 183, 337,
	338, 0, 184, 339, 340, 185, 186, 0, 0, 341,
	342, 343, 0, 187, 344, 0, 0, 0, 188, 189,
	190, 0, 191, 0, 192, 193, 194, 0, 0, 195,
	196, 197, 0, 0, 0, 0, 0, 0, 0, 198,
	199, 399, 200, 345, 201, 346, 347, 0, 202, 0,
	203, 0, 204, 0, 0, 205, 206, 0, 207, 0,
	0, 0, 348, 208, 209, 210, 349, 350, 0, 0,
	0, 211, 212, 351, 352, 353, 0, 213, 0, 214,
	0, 0, 0, 0, 215, 354, 0, 355, 0, 0,
	216, 217, 218, 219, 356, 357, 0, 0, 223, 0,
	220, 0, 0, 221, 358, 222, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 224, 225, 226, 0, 227,
	228, 229, 0, 231, 230, 0, 365, 0, 232, 0,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	367, 244, 368, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 0, 250, 0, 370, 251, 252,
	253, 254, 255, 0, 256, 371, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 373, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 374, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 376, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 381, 382, 0, 0, 312, 313, 383, 384,
	0, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 322, 0, 385, 323, 324, 325, 386, 387,
	0, 790, 326, 174, 0, 0, 0, 327, 328, 329,
	330, 331, 0, 0, 0, 0, 0, 0, 0, 177,
	178, 0, 179, 0, 0, 0, 0, 332, 0, 0,
	0, 0, 180, 181, 182, 333, 334, 335, 336, 183,
	337, 338, 0, 184, 339, 340, 185, 186, 0, 0,
	341, 342, 343, 0, 187, 344, 0, 0, 0, 188,
	189, 190, 0, 191, 0, 192, 193, 194, 0, 0,
	195, 196, 197, 0, 0, 0, 0, 0, 0, 0,
	198, 199, 399, 200, 345, 201, 346, 347, 0, 202,
	0, 203, 0, 204, 0, 0, 205, 206, 0, 207,
	0, 0, 0, 348, 208, 209, 210, 349, 350, 0,
	0, 0, 211, 212, 351, 352, 353, 0, 213, 0,
	214, 0, 0, 0, 0, 215, 354, 0, 355, 0,
	0, 216, 217, 218, 219, 789, 357, 0, 0, 223,
	0, 220, 0, 0, 221, 358, 222, 359, 360, 361,
	362, 363, 0, 364, 0, 0, 224, 225, 226, 0,
	227, 228, 229, 0, 231, 230, 0, 365, 0, 232,
	0, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 0, 240, 241, 243, 242, 0, 0,
	0, 367, 244, 368, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 0, 250, 0, 370, 251,
	252, 253, 254, 255, 0, 256, 371, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 373, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 374, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 376, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 378, 300, 301,
	379, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 381, 382, 0, 0, 312, 313, 383,
	384, 0, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 322, 0, 385, 323, 324, 325, 386,
	387, 0, 786, 326, 174, 0, 0, 0, 327, 328,
	329, 330, 331, 0, 0, 0, 0, 0, 0, 0,
	177, 178, 0, 179, 0, 0, 0, 0, 332, 0,
	0, 0, 0, 180, 181, 182, 333, 334, 335, 336,
	183, 337, 338, 0, 184, 339, 340, 185, 186, 0,
	0, 341, 342, 343, 0, 187, 344, 0, 0, 0,
	188, 189, 190, 0, 191, 0, 192, 193, 194, 0,
	0, 195, 196, 197, 0, 0, 0, 0, 0, 0,
	0, 198, 199, 399, 200, 345, 201, 346, 347, 0,
	202, 0, 203, 0, 204, 0, 0, 205, 206, 0,
	207, 0, 0, 0, 348, 208, 209, 210, 349, 350,
	0, 0, 0, 211, 212, 351, 352, 353, 0, 213,
	0, 214, 0, 0, 0, 0, 215, 354, 0, 355,
	0, 0, 216, 217, 218, 219, 356, 357, 0, 0,
	223, 0, 220, 0, 0, 221, 358, 222, 359, 360,
	361, 362, 363, 0, 364, 0, 0, 224, 225, 226,
	0, 227, 228, 229, 0, 231, 230, 0, 365, 0,
	232, 0, 0, 233, 0, 0, 234, 0, 235, 236,
	237, 239, 366, 238, 0, 240, 241, 243, 242, 0,
	0, 0, 367, 244, 368, 245, 246, 0, 247, 0,
	0, 248, 0, 0, 249, 369, 0, 250, 0, 370,
	251, 252, 253, 254, 255, 0, 256, 371, 257, 372,
	258, 0, 259, 260, 261, 262, 263, 373, 264, 265,
	0, 266, 267, 268, 269, 270, 272, 273, 271, 274,
	275, 276, 277, 0, 278, 0, 279, 280, 374, 281,
	0, 285, 286, 287, 288, 0, 290, 375, 289, 291,
	292, 0, 293, 282, 283, 294, 0, 295, 376, 377,
	296, 0, 303, 297, 298, 284, 299, 302, 378, 300,
	301, 379, 0, 304, 0, 305, 306, 307, 308, 309,
	310, 311, 0, 380, 381, 382, 0, 0, 312, 313,
	383, 384, 0, 314, 315, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 322, 0, 385, 323, 324, 325,
	386, 387, 0, 784, 326, 174, 0, 0, 0, 327,
	328, 329, 330, 331, 0, 0, 0, 0, 0, 0,
	0, 177, 178, 0, 179, 0, 0, 0, 0, 332,
	0, 0, 0, 0, 180, 181, 182, 333, 334, 335,
	336, 183, 337, 338, 0, 184, 339, 340, 185, 186,
	0, 0, 341, 342, 343, 0, 187, 344, 0, 0,
	0, 188, 189, 190, 0, 191, 0, 192, 193, 194,
	0, 0, 195, 196, 197, 0, 0, 0, 0, 0,
	0, 0, 198, 199, 399, 200, 345, 201, 346, 347,
	0, 202, 0, 203, 0, 204, 0, 0, 205, 206,
	0, 207, 0, 0, 0, 348, 208, 209, 210, 349,
	350, 0, 0, 0, 211, 212, 351, 352, 353, 0,
	213, 0, 214, 0, 0, 0, 0, 215, 354, 0,
	355, 0, 0, 216, 217, 218, 219, 356, 357, 0,
	0, 223, 0, 220, 0, 0, 221, 358, 222, 359,
	360, 361, 362, 363, 0, 364, 0, 0, 224, 225,
	226, 0, 227, 228, 229, 0, 231, 230, 0, 365,
	0, 232, 0, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 0, 240, 241, 243, 242,
	0, 0, 0, 367, 244, 368, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 369, 0, 250, 0,
	370, 251, 252, 253, 254, 255, 0, 256, 371, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 373, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 374,
	281, 0, 285, 286, 287, 288, 0, 290, 375, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 376,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 378,
	300, 301, 379, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 381, 382, 0, 0, 312,
	313, 383, 384, 0, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 385, 323, 324,
	325, 386, 387, 0, 780, 326, 174, 0, 0, 0,
	327, 328, 329, 330, 331, 0, 0, 0, 0, 0,
	0, 0, 177, 178, 0, 179, 0, 0, 0, 0,
	332, 0, 0, 0, 0, 180, 181, 182, 333, 334,
	335, 336, 183, 337, 338, 0, 184, 339, 340, 185,
	186, 0, 0, 341, 342, 343, 0, 187, 344, 0,
	0, 0, 188, 189, 190, 0, 191, 0, 192, 193,
	194, 0, 0, 195, 196, 197, 0, 0, 0, 0,
	0, 0, 0, 198, 199, 399, 200, 345, 201, 346,
	347, 0, 202, 0, 203, 0, 204, 0, 0, 205,
	206, 0, 207, 0, 0, 0, 348, 208, 209, 210,
	349, 350, 0, 0, 0, 211, 212, 351, 352, 353,
	0, 213, 0, 214, 0, 0, 0, 0, 215, 354,
	0, 355, 0, 0, 216, 217, 218, 219, 782, 357,
	0, 0, 223, 0, 220, 0, 0, 221, 358, 222,
	359, 360, 361, 362, 363, 0, 364, 0, 0, 224,
	225, 226, 0, 227, 228, 229, 0, 231, 230, 0,
	365, 0, 232, 0, 0, 233, 0, 0, 234, 0,
	235, 236, 237, 239, 366, 238, 0, 240, 241, 243,
	242, 0, 0, 0, 367, 244, 368, 245, 246, 0,
	247, 0, 0, 248, 0, 0, 249, 369, 0, 250,
	0, 370, 251, 252, 253, 254, 255, 0, 256, 371,
	257, 372, 258, 0, 259, 260, 261, 262, 263, 373,
	264, 265, 0, 266, 267, 268, 269, 270, 272, 273,
	271, 274, 275, 276, 277, 0, 278, 0, 279, 280,
	374, 281, 0, 285, 286, 287, 288, 0, 290, 375,
	289, 291, 292, 0, 293, 282, 283, 294, 0, 295,
	376, 377, 296, 0, 303, 297, 298, 284, 299, 302,
	378, 300, 301, 379, 0, 304, 0, 305, 306, 307,
	308, 309, 310, 311, 0, 380, 381, 382, 0, 0,
	312, 313, 383, 384, 0, 314, 315, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 322, 0, 385, 323,
	324, 325, 386, 387, 0, 754, 326, 174, 0, 0,
	0, 327, 328, 329, 330, 331, 0, 0, 0, 0,
	0, 0, 0, 177, 178, 0, 179, 0, 0, 0,
	0, 332, 0, 0, 0, 0, 180, 181, 182, 333,
	334, 335, 336, 183, 337, 338, 0, 184, 339, 340,
	185, 186, 0, 0, 341, 342, 343, 0, 187, 344,
	0, 0, 0, 188, 189, 190, 0, 191, 0, 192,
	193, 194, 0, 0, 195, 196, 197, 0, 0, 0,
	0, 0, 0, 0, 198, 199, 399, 200, 345, 201,
	346, 347, 0, 202, 0, 203, 0, 204, 0, 0,
	205, 206, 0, 207, 0, 0, 0, 348, 208, 209,
	210, 349, 350, 0, 0, 0, 211, 212, 351, 352,
	353, 0, 213, 0, 214, 0, 0, 0, 0, 215,
	354, 0, 355, 0, 0, 216, 217, 218, 219, 756,
	357, 0, 0, 223, 0, 220, 0, 0, 221, 358,
	222, 359, 360, 361, 362, 363, 0, 364, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 365, 0, 232, 0, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 367, 244, 368, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 0,
	250, 0, 370, 251, 252, 253, 254, 255, 0, 256,
	371, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	373, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 374, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 376, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 378, 300, 301, 379, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 381, 382, 0,
	0, 312, 313, 383, 384, 0, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 322, 0, 385,
	323, 324, 325, 386, 387, 0, 752, 326, 174, 0,
	0, 0, 327, 328, 329, 330, 331, 0, 0, 0,
	0, 0, 0, 0, 177, 178, 0, 179, 0, 0,
	0, 0, 332, 0, 0, 0, 0, 180, 181, 182,
	333, 334, 335, 336, 183, 337, 338, 0, 184, 339,
	340, 185, 186, 0, 0, 341, 342, 343, 0, 187,
	344, 0, 0, 0, 188, 189, 190, 0, 191, 0,
	192, 193, 194, 0, 0, 195, 196, 197, 0, 0,
	0, 0, 0, 0, 0, 198, 199, 399, 200, 345,
	201, 346, 347, 0, 202, 0, 203, 0, 204, 0,
	0, 205, 206, 0, 207, 0, 0, 0, 348, 208,
	209, 210, 349, 350, 0, 0, 0, 211, 212, 351,
	352, 353, 0, 213, 0, 214, 0, 0, 0, 0,
	215, 354, 0, 355, 0, 0, 216, 217, 218, 219,
	356, 357, 0, 0, 223, 0, 220, 0, 0, 221,
	358, 222, 359, 360, 361, 362, 363, 0, 364, 0,
	0, 224, 225, 226, 0, 227, 228, 229, 0, 231,
	230, 0, 365, 0, 232, 0, 0, 233, 0, 0,
	234, 0, 235, 236, 237, 239, 366, 238, 0, 240,
	241, 243, 242, 0, 0, 0, 367, 244, 368, 245,
	246, 0, 247, 0, 0, 248, 0, 0, 249, 369,
	0, 250, 0, 370, 251, 252, 253, 254, 255, 0,
	256, 371, 257, 372, 258, 0, 259, 260, 261, 262,
	263, 373, 264, 265, 0, 266, 267, 268, 269, 270,
	272, 273, 271, 274, 275, 276, 277, 0, 278, 0,
	279, 280, 374, 281, 0, 285, 286, 287, 288, 0,
	290, 375, 289, 291, 292, 0, 293, 282, 283, 294,
	0, 295, 376, 377, 296, 0, 303, 297, 298, 284,
	299, 302, 378, 300, 301, 379, 0, 304, 0, 305,
	306, 307, 308, 309, 310, 311, 0, 380, 381, 382,
	0, 0, 312, 313, 383, 384, 0, 314, 315, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 322, 0,
	385, 323, 324, 325, 386, 387, 0, 510, 326, 174,
	0, 0, 0, 327, 328, 329, 330, 331, 0, 0,
	0, 0, 0, 0, 0, 177, 178, 0, 179, 0,
	0, 0, 0, 332, 0, 0, 0, 0, 180, 181,
	182, 333, 334, 335, 336, 183, 337, 338, 0, 184,
	339, 340, 185, 186, 0, 0, 341, 342, 343, 0,
	501, 344, 0, 0, 0, 188, 189, 190, 0, 191,
	0, 192, 193, 194, 0, 0, 195, 196, 197, 0,
	0, 0, 0, 0, 0, 0, 198, 199, 399, 200,
	345, 201, 346, 347, 0, 202, 0, 203, 0, 204,
	0, 0, 205, 206, 0, 207, 0, 0, 0, 348,
	208, 209, 210, 349, 350, 0, 0, 0, 211, 212,
	351, 352, 353, 0, 213, 0, 214, 0, 0, 0,
	0, 215, 354, 0, 355, 0, 0, 216, 217, 218,
	219, 356, 357, 0, 0, 223, 0, 220, 0, 0,
	221, 358, 222, 359, 360, 361, 362, 363, 0, 364,
	0, 0, 224, 225, 226, 0, 227, 228, 229, 0,
	231, 230, 0, 365, 0, 232, 0, 0, 500, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 512, 0,
	240, 241, 243, 242, 0, 0, 0, 367, 244, 368,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 0, 250, 0, 370, 251, 252, 253, 254, 255,
	0, 256, 371, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 373, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 502, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 503, 292, 0, 293, 282, 283,
	294, 0, 295, 376, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 378, 300, 301, 379, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 507, 381,
	382, 0, 0, 312, 505, 383, 384, 0, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 322,
	0, 385, 323, 324, 325, 386, 387, 0, 492, 326,
	174, 0, 0, 0, 327, 328, 329, 330, 331, 0,
	0, 0, 0, 0, 0, 0, 177, 178, 0, 179,
	0, 0, 0, 0, 332, 0, 0, 0, 0, 180,
	181, 182, 333, 334, 335, 336, 183, 337, 338, 0,
	184, 339, 340, 185, 186, 0, 0, 341, 342, 343,
	0, 187, 344, 0, 0, 0, 188, 189, 190, 0,
	191, 0, 192, 193, 194, 0, 0, 195, 196, 197,
	0, 0, 0, 0, 0, 0, 0, 198, 199, 399,
	200, 345, 201, 346, 347, 0, 202, 0, 203, 0,
	204, 0, 0, 205, 206, 0, 207, 0, 0, 0,
	348, 208, 209, 210, 349, 350, 0, 0, 0, 211,
	212, 351, 352, 353, 0, 213, 0, 214, 0, 0,
	0, 0, 215, 354, 0, 355, 0, 0, 216, 217,
	218, 219, 356, 357, 0, 0, 223, 0, 220, 0,
	0, 221, 358, 222, 359, 360, 361, 362, 363, 0,
	364, 0, 0, 224, 225, 226, 0, 227, 228, 229,
	0, 231, 230, 0, 365, 0, 232, 0, 0, 233,
	0, 0, 234, 0, 235, 236, 237, 239, 366, 238,
	0, 240, 241, 243, 242, 0, 0, 0, 367, 244,
	368, 245, 246, 0, 247, 0, 0, 248, 0, 0,
	249, 369, 0, 250, 0, 370, 251, 252, 253, 254,
	255, 0, 256, 371, 257, 372, 258, 0, 259, 260,
	261, 262, 263, 373, 264, 265, 0, 266, 267, 268,
	269, 270, 272, 273, 271, 274, 275, 276, 277, 0,
	278, 0, 279, 280, 374, 281, 0, 493, 286, 287,
	288, 0, 290, 375, 289, 291, 292, 0, 293, 282,
	283, 294, 0, 295, 376, 377, 296, 0, 303, 297,
	298, 284, 299, 302, 378, 300, 301, 379, 0, 304,
	0, 305, 306, 307, 308, 309, 310, 311, 0, 380,
	381, 382, 0, 0, 312, 313, 383, 384, 0, 314,
	315, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	322, 0, 385, 323, 324, 325, 386, 387, 0, 490,
	326, 174, 0, 0, 0, 327, 328, 329, 330, 331,
	0, 0, 0, 0, 0, 0, 0, 177, 178, 0,
	179, 0, 0, 0, 0, 332, 0, 0, 0, 0,
	180, 181, 182, 333, 334, 335, 336, 183, 337, 338,
	0, 184, 339, 340, 185, 186, 0, 0, 341, 342,
	343, 0, 187, 344, 0, 0, 0, 188, 189, 190,
	0, 191, 0, 192, 193, 194, 0, 0, 195, 196,
	197, 0, 0, 0, 0, 0, 0, 0, 198, 199,
	399, 200, 345, 201, 346, 347, 0, 202, 0, 203,
	0, 204, 0, 0, 205, 206, 0, 207, 0, 0,
	0, 348, 208, 209, 210, 349, 350, 0, 0, 0,
	211, 212, 351, 352, 353, 0, 213, 0, 214, 0,
	0, 0, 0, 215, 354, 0, 355, 0, 0, 216,
	217, 218, 219, 356, 357, 0, 0, 223, 0, 220,
	0, 0, 221, 358, 222, 359, 360, 361, 362, 363,
	0, 364, 0, 0, 224, 225, 226, 0, 227, 228,
	229, 0, 231, 230, 0, 365, 0, 232, 0, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 0, 240, 241, 243, 242, 0, 0, 0, 367,
	244, 368, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 369, 0, 250, 0, 370, 251, 252, 253,
	254, 255, 0, 256, 371, 257, 372, 258, 0, 259,
	260, 261, 262, 263, 373, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 0, 279, 280, 374, 281, 0, 285, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 0, 293,
	282, 283, 294, 0, 295, 376, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 378, 300, 301, 379, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 381, 382, 0, 0, 312, 313, 383, 384, 0,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 322, 0, 385, 323, 324, 325, 386, 387, 0,
	482, 326, 174, 0, 0, 0, 327, 328, 329, 330,
	331, 0, 0, 0, 0, 0, 0, 0, 177, 178,
	0, 179, 0, 0, 0, 0, 332, 0, 0, 0,
	0, 180, 181, 182, 333, 334, 335, 336, 183, 337,
	338, 0, 184, 339, 340, 185, 186, 0, 0, 341,
	342, 343, 0, 187, 344, 0, 0, 0, 188, 189,
	190, 0, 191, 0, 192, 193, 194, 0, 0, 195,
	196, 197, 0, 0, 0, 0, 0, 0, 0, 198,
	199, 399, 200, 345, 201, 346, 347, 0, 202, 0,
	203, 0, 204, 0, 0, 205, 206, 0, 207, 0,
	0, 0, 348, 208, 209, 210, 349, 350, 0, 0,
	0, 211, 212, 351, 352, 353, 0, 213, 0, 214,
	0, 0, 0, 0, 215, 354, 0, 355, 0, 0,
	216, 217, 218, 219, 356, 357, 0, 0, 223, 0,
	220, 0, 0, 221, 358, 222, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 224, 225, 226, 0, 227,
	228, 229, 0, 231, 230, 0, 365, 0, 232, 0,
	0, 233, 0, 0, 234, 0, 235, 236, 237, 239,
	366, 238, 0, 240, 241, 243, 242, 0, 0, 0,
	367, 244, 368, 245, 246, 0, 247, 0, 0, 248,
	0, 0, 249, 369, 0, 250, 0, 370, 251, 252,
	253, 254, 255, 0, 256, 371, 257, 372, 258, 0,
	259, 260, 261, 262, 263, 373, 264, 265, 0, 266,
	267, 268, 269, 270, 272, 273, 271, 274, 275, 276,
	277, 0, 278, 0, 279, 280, 374, 281, 0, 285,
	286, 287, 288, 0, 290, 375, 289, 291, 292, 0,
	293, 282, 283, 294, 0, 295, 376, 377, 296, 0,
	303, 297, 298, 284, 299, 302, 378, 300, 301, 379,
	0, 304, 0, 305, 306, 307, 308, 309, 310, 311,
	0, 380, 381, 382, 0, 0, 312, 313, 383, 384,
	0, 314, 315, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 322, 0, 385, 323, 324, 325, 386, 387,
	0, 439, 326, 174, 0, 0, 0, 327, 328, 329,
	330, 331, 0, 0, 0, 0, 0, 0, 0, 177,
	178, 0, 179, 0, 0, 0, 0, 332, 0, 0,
	0, 0, 180, 181, 182, 333, 334, 335, 336, 183,
	337, 338, 0, 184, 339, 340, 185, 186, 0, 0,
	341, 342, 343, 0, 187, 344, 0, 0, 0, 188,
	189, 190, 0, 191, 0, 192, 193, 194, 0, 0,
	195, 196, 197, 0, 0, 0, 0, 0, 0, 0,
	198, 199, 399, 200, 345, 201, 346, 347, 0, 202,
	0, 203, 0, 204, 0, 0, 205, 206, 0, 207,
	0, 0, 0, 348, 208, 209, 210, 349, 350, 0,
	0, 0, 211, 212, 351, 352, 353, 0, 213, 0,
	214, 0, 0, 0, 0, 215, 354, 0, 355, 0,
	0, 216, 217, 218, 219, 356, 357, 0, 0, 223,
	0, 220, 0, 0, 221, 358, 222, 359, 360, 361,
	362, 363, 0, 364, 0, 0, 224, 225, 226, 0,
	227, 228, 229, 0, 231, 230, 0, 365, 0, 232,
	0, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 0, 240, 241, 243, 242, 0, 0,
	0, 367, 244, 368, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 0, 250, 0, 370, 251,
	252, 253, 254, 255, 0, 256, 371, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 373, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 374, 281, 0,
	285, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 376, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 378, 300, 301,
	379, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 381, 382, 0, 0, 312, 313, 383,
	384, 0, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 322, 0, 385, 323, 324, 325, 386,
	387, 174, 0, 326, 0, 0, 0, 0, 327, 328,
	329, 330, 331, 0, 0, 0, 0, 177, 178, 0,
	179, 0, 0, 0, 0, 332, 0, 0, 0, 0,
	180, 181, 182, 333, 334, 335, 336, 183, 337, 338,
	0, 184, 339, 340, 185, 186, 0, 0, 341, 342,
	343, 0, 187, 344, 0, 0, 0, 188, 189, 190,
	0, 191, 0, 192, 193, 194, 0, 0, 195, 196,
	197, 0, 0, 0, 0, 0, 0, 0, 198, 199,
	399, 200, 345, 201, 346, 347, 0, 202, 0, 203,
	0, 204, 0, 0, 205, 206, 0, 207, 0, 0,
	0, 348, 208, 209, 210, 349, 350, 0, 0, 0,
	211, 212, 351, 352, 353, 0, 213, 0, 214, 0,
	0, 0, 0, 215, 354, 0, 355, 0, 0, 216,
	217, 218, 219, 356, 357, 0, 0, 223, 0, 220,
	0, 0, 221, 358, 222, 359, 360, 361, 362, 363,
	0, 364, 0, 0, 224, 225, 226, 0, 227, 228,
	229, 0, 231, 230, 0, 365, 0, 232, 0, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 0, 240, 241, 243, 242, 0, 0, 0, 367,
	244, 368, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 369, 0, 250, 0, 370, 251, 252, 253,
	254, 255, 0, 256, 371, 257, 372, 258, 0, 259,
	260, 261, 262, 263, 373, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 0, 279, 280, 374, 281, 0, 285, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 0, 293,
	282, 283, 294, 0, 295, 376, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 378, 300, 301, 379, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 381, 382, 0, 0, 312, 313, 383, 384, 0,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 322, 0, 385, 323, 324, 325, 386, 387, 174,
	0, 326, 0, 0, 0, 0, 327, 328, 329, 330,
	331, 0, 0, 0, 0, 177, 178, 0, 179, 0,
	0, 0, 0, 332, 0, 0, 0, 0, 180, 181,
	182, 333, 334, 335, 336, 183, 337, 338, 0, 184,
	339, 340, 185, 186, 0, 0, 341, 342, 343, 0,
	187, 344, 0, 0, 0, 188, 189, 190, 0, 191,
	0, 192, 193, 194, 0, 0, 195, 196, 197, 0,
	0, 0, 0, 0, 0, 0, 198, 199, 399, 200,
	345, 201, 346, 347, 0, 202, 0, 203, 0, 204,
	0, 0, 205, 206, 0, 207, 0, 0, 0, 348,
	208, 209, 210, 349, 350, 0, 0, 0, 211, 212,
	351, 352, 353, 0, 213, 0, 214, 0, 0, 0,
	0, 215, 354, 0, 355, 0, 0, 216, 217, 218,
	219, 1882, 357, 0, 0, 223, 0, 220, 0, 0,
	221, 358, 222, 359, 360, 361, 362, 363, 0, 364,
	0, 0, 224, 225, 226, 0, 227, 228, 229, 0,
	231, 230, 0, 365, 0, 232, 0, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 0,
	240, 241, 243, 242, 0, 0, 0, 367, 244, 368,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 0, 250, 0, 370, 251, 252, 253, 254, 255,
	0, 256, 371, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 373, 264, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 374, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 0, 293, 282, 283,
	294, 0, 295, 376, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 378, 300, 301, 379, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 381,
	382, 0, 0, 312, 313, 383, 384, 0, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 322,
	0, 385, 323, 324, 325, 386, 387, 174, 0, 326,
	0, 0, 0, 0, 327, 328, 329, 330, 331, 0,
	0, 0, 0, 177, 178, 0, 179, 0, 0, 0,
	0, 332, 0, 0, 0, 0, 180, 181, 182, 333,
	334, 335, 336, 183, 337, 338, 0, 184, 339, 340,
	185, 186, 0, 0, 341, 342, 343, 0, 187, 344,
	0, 0, 0, 188, 189, 190, 0, 191, 0, 192,
	193, 194, 0, 0, 195, 196, 197, 0, 0, 0,
	0, 0, 0, 0, 198, 199, 399, 200, 345, 201,
	346, 347, 0, 202, 0, 203, 0, 204, 0, 0,
	205, 206, 0, 207, 0, 0, 0, 348, 208, 209,
	210, 349, 350, 0, 0, 0, 211, 212, 351, 352,
	353, 0, 213, 0, 214, 0, 0, 0, 0, 215,
	354, 0, 355, 0, 0, 216, 217, 218, 219, 1880,
	357, 0, 0, 223, 0, 220, 0, 0, 221, 358,
	222, 359, 360, 361, 362, 363, 0, 364, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 365, 0, 232, 0, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 367, 244, 368, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 0,
	250, 0, 370, 251, 252, 253, 254, 255, 0, 256,
	371, 257, 372, 258, 0, 259, 260, 261, 262, 263,
	373, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 374, 281, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 376, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 378, 300, 301, 379, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 381, 382, 0,
	0, 312, 313, 383, 384, 0, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 322, 0, 385,
	323, 324, 325, 386, 387, 174, 0, 326, 0, 0,
	0, 0, 327, 328, 329, 330, 331, 0, 0, 0,
	0, 177, 178, 0, 179, 0, 0, 0, 0, 332,
	0, 0, 0, 0, 180, 181, 182, 333, 334, 335,
	336, 183, 337, 338, 0, 184, 339, 340, 185, 186,
	0, 0, 341, 342, 343, 0, 187, 344, 0, 0,
	0, 188, 189, 190, 0, 191, 0, 192, 193, 194,
	0, 0, 195, 196, 197, 0, 0, 0, 0, 0,
	0, 0, 198, 199, 399, 200, 345, 201, 346, 347,
	0, 202, 0, 203, 0, 204, 0, 0, 205, 206,
	0, 207, 0, 0, 0, 348, 208, 209, 210, 349,
	350, 0, 0, 0, 211, 212, 351, 352, 353, 0,
	213, 0, 214, 0, 0, 0, 0, 215, 354, 0,
	355, 0, 0, 216, 217, 218, 219, 1869, 357, 0,
	0, 223, 0, 220, 0, 0, 221, 358, 222, 359,
	360, 361, 362, 363, 0, 364, 0, 0, 224, 225,
	226, 0, 227, 228, 229, 0, 231, 230, 0, 365,
	0, 232, 0, 0, 233, 0, 0, 234, 0, 235,
	236, 237, 239, 366, 238, 0, 240, 241, 243, 242,
	0, 0, 0, 367, 244, 368, 245, 246, 0, 247,
	0, 0, 248, 0, 0, 249, 369, 0, 250, 0,
	370, 251, 252, 253, 254, 255, 0, 256, 371, 257,
	372, 258, 0, 259, 260, 261, 262, 263, 373, 264,
	265, 0, 266, 267, 268, 269, 270, 272, 273, 271,
	274, 275, 276, 277, 0, 278, 0, 279, 280, 374,
	281, 0, 285, 286, 287, 288, 0, 290, 375, 289,
	291, 292, 0, 293, 282, 283, 294, 0, 295, 376,
	377, 296, 0, 303, 297, 298, 284, 299, 302, 378,
	300, 301, 379, 0, 304, 0, 305, 306, 307, 308,
	309, 310, 311, 0, 380, 381, 382, 0, 0, 312,
	313, 383, 384, 0, 314, 315, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 322, 0, 385, 323, 324,
	325, 386, 387, 174, 0, 326, 0, 0, 0, 0,
	327, 328, 329, 330, 331, 0, 0, 0, 0, 177,
	178, 0, 179, 0, 0, 0, 0, 332, 0, 0,
	0, 0, 180, 181, 182, 333, 334, 335, 336, 183,
	337, 338, 0, 184, 339, 340, 185, 186, 0, 0,
	341, 342, 343, 0, 187, 344, 0, 0, 0, 188,
	189, 190, 0, 191, 0, 192, 193, 194, 0, 0,
	195, 196, 197, 0, 0, 0, 0, 0, 0, 0,
	198, 199, 399, 200, 345, 201, 346, 347, 0, 202,
	0, 203, 0, 204, 0, 0, 205, 206, 0, 207,
	0, 0, 0, 348, 208, 209, 210, 349, 350, 0,
	0, 0, 211, 212, 351, 352, 353, 0, 213, 0,
	214, 0, 0, 0, 0, 215, 354, 0, 355, 0,
	0, 216, 217, 218, 219, 356, 357, 0, 0, 223,
	0, 220, 0, 0, 221, 358, 222, 359, 360, 361,
	362, 363, 0, 364, 0, 0, 224, 225, 226, 0,
	227, 228, 229, 0, 231, 230, 0, 365, 0, 232,
	0, 0, 233, 0, 0, 234, 0, 235, 236, 237,
	239, 366, 238, 0, 240, 241, 243, 242, 0, 0,
	0, 367, 244, 368, 245, 246, 0, 247, 0, 0,
	248, 0, 0, 249, 369, 0, 250, 0, 370, 251,
	252, 253, 254, 255, 0, 256, 371, 257, 372, 258,
	0, 259, 260, 261, 262, 263, 373, 264, 265, 0,
	266, 267, 268, 269, 270, 272, 273, 271, 274, 275,
	276, 277, 0, 278, 0, 279, 280, 374, 281, 0,
	493, 286, 287, 288, 0, 290, 375, 289, 291, 292,
	0, 293, 282, 283, 294, 0, 295, 376, 377, 296,
	0, 303, 297, 298, 284, 299, 302, 378, 300, 301,
	379, 0, 304, 0, 305, 306, 307, 308, 309, 310,
	311, 0, 380, 381, 382, 0, 0, 312, 313, 383,
	384, 0, 314, 315, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 322, 0, 385, 323, 324, 325, 386,
	387, 174, 0, 326, 0, 0, 0, 0, 327, 328,
	329, 330, 331, 0, 0, 0, 0, 177, 178, 0,
	179, 0, 0, 0, 0, 332, 0, 1226, 0, 0,
	180, 181, 182, 333, 334, 335, 336, 183, 337, 338,
	0, 184, 339, 340, 185, 186, 0, 0, 341, 342,
	343, 0, 187, 344, 0, 0, 0, 188, 189, 190,
	0, 191, 0, 192, 193, 194, 0, 0, 195, 196,
	197, 0, 0, 0, 0, 0, 0, 0, 198, 199,
	399, 200, 345, 201, 346, 347, 0, 202, 0, 203,
	0, 204, 0, 0, 205, 206, 0, 207, 0, 0,
	0, 348, 208, 209, 210, 349, 350, 0, 0, 0,
	211, 212, 351, 352, 353, 0, 213, 0, 214, 0,
	0, 0, 0, 215, 354, 0, 355, 0, 0, 216,
	217, 218, 219, 356, 357, 0, 0, 223, 0, 220,
	0, 0, 221, 358, 222, 359, 360, 361, 362, 363,
	0, 364, 0, 0, 224, 225, 226, 0, 227, 228,
	229, 0, 231, 230, 0, 365, 0, 232, 0, 0,
	233, 0, 0, 234, 0, 235, 236, 237, 239, 366,
	238, 0, 240, 241, 243, 242, 0, 0, 0, 367,
	244, 368, 245, 246, 0, 247, 0, 0, 248, 0,
	0, 249, 369, 0, 250, 0, 370, 251, 252, 253,
	254, 255, 0, 256, 371, 257, 372, 258, 0, 259,
	260, 261, 262, 263, 373, 264, 265, 0, 266, 267,
	268, 269, 270, 272, 273, 271, 274, 275, 276, 277,
	0, 278, 0, 279, 280, 374, 281, 0, 285, 286,
	287, 288, 0, 290, 375, 289, 291, 292, 0, 0,
	282, 283, 294, 0, 295, 376, 377, 296, 0, 303,
	297, 298, 284, 299, 302, 378, 300, 301, 379, 0,
	304, 0, 305, 306, 307, 308, 309, 310, 311, 0,
	380, 381, 382, 0, 0, 312, 313, 383, 384, 0,
	314, 315, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 322, 0, 385, 323, 324, 325, 386, 387, 174,
	0, 326, 0, 0, 0, 0, 327, 328, 329, 330,
	331, 0, 0, 0, 0, 177, 178, 0, 179, 0,
	0, 0, 0, 332, 0, 0, 0, 0, 180, 181,
	182, 333, 334, 335, 336, 183, 337, 338, 0, 184,
	339, 340, 185, 186, 0, 0, 341, 342, 343, 0,
	187, 344, 0, 0, 0, 188, 189, 190, 0, 191,
	0, 192, 193, 194, 0, 0, 195, 196, 197, 0,
	0, 0, 0, 0, 0, 0, 198, 199, 399, 200,
	345, 201, 346, 347, 0, 202, 0, 203, 0, 204,
	0, 0, 205, 206, 0, 207, 0, 0, 0, 348,
	208, 209, 210, 349, 350, 0, 0, 0, 211, 212,
	351, 352, 353, 0, 213, 0, 214, 0, 0, 0,
	0, 215, 354, 0, 355, 0, 0, 216, 217, 218,
	219, 356, 357, 0, 0, 223, 0, 220, 0, 0,
	221, 358, 222, 359, 360, 361, 362, 363, 0, 364,
	0, 0, 224, 225, 226, 0, 227, 228, 229, 0,
	231, 230, 0, 365, 0, 232, 0, 0, 233, 0,
	0, 234, 0, 235, 236, 237, 239, 366, 238, 0,
	240, 241, 243, 242, 0, 0, 0, 367, 244, 368,
	245, 246, 0, 247, 0, 0, 248, 0, 0, 249,
	369, 0, 250, 0, 370, 251, 252, 253, 254, 255,
	0, 256, 371, 257, 372, 258, 0, 259, 260, 261,
	262, 263, 373, 718, 265, 0, 266, 267, 268, 269,
	270, 272, 273, 271, 274, 275, 276, 277, 0, 278,
	0, 279, 280, 374, 281, 0, 285, 286, 287, 288,
	0, 290, 375, 289, 291, 292, 0, 293, 282, 283,
	294, 0, 295, 376, 377, 296, 0, 303, 297, 298,
	284, 299, 302, 378, 300, 301, 379, 0, 304, 0,
	305, 306, 307, 308, 309, 310, 311, 0, 380, 381,
	382, 0, 0, 312, 313, 383, 384, 0, 314, 315,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 322,
	0, 385, 323, 324, 325, 386, 387, 174, 0, 326,
	0, 0, 0, 0, 327, 328, 329, 330, 331, 0,
	0, 0, 0, 177, 178, 0, 179, 0, 0, 0,
	0, 332, 0, 0, 0, 0, 180, 181, 182, 333,
	334, 335, 336, 183, 337, 338, 0, 184, 339, 340,
	185, 186, 0, 0, 341, 342, 343, 0, 187, 344,
	0, 0, 0, 188, 189, 190, 0, 191, 0, 192,
	193, 194, 0, 0, 195, 196, 197, 0, 0, 0,
	0, 0, 0, 0, 198, 199, 399, 200, 345, 201,
	346, 347, 0, 202, 0, 203, 0, 204, 0, 0,
	205, 206, 0, 207, 0, 0, 0, 348, 208, 209,
	210, 349, 350, 0, 0, 0, 211, 212, 351, 352,
	353, 0, 213, 0, 214, 0, 0, 0, 0, 215,
	354, 0, 355, 0, 0, 216, 217, 218, 219, 356,
	357, 0, 0, 223, 0, 220, 0, 0, 221, 358,
	222, 359, 360, 361, 362, 363, 0, 364, 0, 0,
	224, 225, 226, 0, 227, 228, 229, 0, 231, 230,
	0, 365, 0, 232, 0, 0, 233, 0, 0, 234,
	0, 235, 236, 237, 239, 366, 238, 0, 240, 241,
	243, 242, 0, 0, 0, 367, 244, 368, 245, 246,
	0, 247, 0, 0, 248, 0, 0, 249, 369, 0,
	250, 0, 370, 251, 252, 0, 254, 255, 0, 256,
	371, 257, 372, 258, 0, 259, 260, 261, 0, 263,
	373, 264, 265, 0, 266, 267, 268, 269, 270, 272,
	273, 271, 274, 275, 276, 277, 0, 278, 0, 279,
	280, 374, 0, 0, 285, 286, 287, 288, 0, 290,
	375, 289, 291, 292, 0, 293, 282, 283, 294, 0,
	295, 376, 377, 296, 0, 303, 297, 298, 284, 299,
	302, 378, 300, 301, 379, 0, 304, 0, 305, 306,
	307, 308, 309, 310, 311, 0, 380, 381, 382, 0,
	0, 312, 313, 383, 384, 0, 314, 315, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 322, 0, 385,
	323, 324, 325, 386, 387, 0, 0, 326, 0, 0,
	0, 0, 327, 328, 329, 330, 331, 949, 950, 0,
	969, 970, 971, 979, 980, 981, 0, 0, 0, 0,
	0, 0, 0, 972, 0, 0, 0, 0, 0, 0,
	952, 0, 0, 983, 0, 949, 950, 0, 969, 970,
	971, 979, 980, 981, 0, 0, 0, 0, 0, 0,
	0, 972, 0, 0, 951, 0, 0, 0, 952, 0,
	966, 983, 0, 949, 950, 0, 969, 970, 971, 979,
	980, 981, 0, 0, 0, 0, 0, 0, 0, 972,
	0, 0, 951, 0, 0, 0, 952, 0, 966, 983,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	951, 0, 0, 0, 0, 957, 966, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 976, 984, 0, 0, 0,
	0, 0, 0, 957, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 982, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 976, 984, 0, 0, 0, 974, 0,
	0, 957, 0, 0, 967, 0, 0, 0, 0, 0,
	0, 982, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 976, 984, 0, 0, 0, 974, 0, 0, 973,
	0, 0, 967, 0, 0, 0, 0, 0, 0, 982,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 974, 0, 0, 973, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 968, 0, 0,
	0, 0, 0, 0, 0, 973, 0, 0, 0, 0,
	0, 0, 0, 977, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 968, 949, 950, 0, 969,
	970, 971, 979, 980, 981, 0, 0, 0, 0, 0,
	0, 977, 972, 0, 0, 0, 0, 0, 0, 952,
	0, 0, 983, 968, 949, 950, 0, 969, 970, 971,
	979, 980, 981, 0, 0, 0, 0, 0, 0, 977,
	972, 0, 0, 951, 0, 0, 0, 952, 0, 966,
	983, 975, 0, 0, 963, 964, 965, 978, 0, 962,
	960, 961, 953, 954, 955, 956, 958, 959, 0, 0,
	0, 951, 2364, 0, 0, 0, 0, 966, 0, 975,
	0, 0, 963, 964, 965, 978, 0, 962, 960, 961,
	953, 954, 955, 956, 958, 959, 0, 0, 0, 0,
	2318, 0, 0, 0, 957, 0, 0, 975, 0, 0,
	963, 964, 965, 978, 0, 962, 960, 961, 953, 954,
	955, 956, 958, 959, 976, 984, 0, 0, 2288, 0,
	0, 0, 957, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 982, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 976, 984, 0, 0, 0, 974, 0, 0,
	0, 0, 0, 967, 0, 0, 0, 0, 0, 0,
	982, 0, 0, 0, 0, 0, 949, 950, 0, 969,
	970, 971, 979, 980, 981, 974, 0, 0, 973, 0,
	0, 967, 972, 0, 0, 0, 0, 0, 0, 952,
	0, 0, 983, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 973, 0, 0, 0,
	0, 0, 0, 951, 0, 0, 0, 0, 0, 966,
	0, 0, 0, 38, 0, 0, 968, 0, 0, 0,
	0, 0, 949, 950, 39, 969, 970, 971, 979, 980,
	981, 0, 977, 0, 0, 0, 0, 44, 972, 0,
	0, 0, 0, 0, 968, 952, 0, 0, 983, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	977, 0, 0, 0, 957, 0, 0, 0, 0, 951,
	0, 0, 0, 949, 950, 966, 969, 970, 971, 979,
	980, 981, 0, 0, 976, 984, 0, 0, 61, 972,
	0, 0, 0, 0, 0, 62, 952, 63, 0, 983,
	975, 0, 982, 963, 964, 965, 978, 0, 962, 960,
	961, 953, 954, 955, 956, 958, 959, 974, 0, 0,
	951, 2283, 0, 967, 65, 0, 966, 0, 975, 0,
	957, 963, 964, 965, 978, 0, 962, 960, 961, 953,
	954, 955, 956, 958, 959, 0, 0, 0, 973, 2279,
	976, 984, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 982, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 957, 0, 974, 0, 0, 0, 0, 0, 967,
	0, 0, 0, 0, 0, 0, 968, 0, 0, 0,
	0, 976, 984, 0, 66, 0, 0, 0, 0, 0,
	0, 0, 977, 0, 973, 0, 0, 0, 0, 982,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	68, 0, 69, 0, 974, 0, 0, 0, 0, 0,
	967, 0, 0, 0, 0, 134, 0, 0, 0, 0,
	0, 0, 464, 0, 0, 101, 0, 0, 0, 0,
	0, 0, 968, 0, 0, 973, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 0, 977, 0,
	975, 0, 0, 963, 964, 965, 978, 0, 962, 960,
	961, 953, 954, 955, 956, 958, 959, 0, 0, 0,
	0, 2221, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 0, 0, 968, 0, 0, 949, 950, 128, 969,
	970, 971, 979, 980, 981, 129, 0, 0, 0, 977,
	0, 0, 972, 0, 0, 0, 0, 0, 0, 952,
	0, 0, 983, 0, 120, 0, 975, 0, 0, 963,
	964, 965, 978, 0, 962, 960, 961, 953, 954, 955,
	956, 958, 959, 951, 0, 0, 0, 2187, 0, 966,
	949, 950, 0, 969, 970, 971, 979, 980, 981, 0,
	0, 0, 0, 0, 0, 0, 972, 0, 0, 0,
	0, 0, 0, 952, 0, 0, 983, 975, 0, 0,
	963, 964, 965, 978, 0, 962, 960, 961, 953, 954,
	955, 956, 958, 959, 0, 0, 0, 951, 2186, 0,
	0, 0, 0, 966, 957, 0, 0, 0, 0, 0,
	0, 0, 949, 950, 0, 969, 970, 971, 979, 980,
	981, 0, 0, 0, 976, 984, 0, 0, 972, 0,
	0, 0, 0, 0, 0, 952, 0, 0, 983, 0,
	0, 0, 982, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 974, 957, 951,
	0, 0, 0, 967, 0, 966, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 976, 984,
	0, 0, 0, 0, 0, 0, 0, 0, 973, 0,
	0, 0, 0, 0, 0, 0, 982, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 974, 0, 0, 0, 0, 0, 967, 0, 0,
	957, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 968, 0, 0, 0,
	976, 984, 973, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 977, 0, 0, 0, 0, 0, 982, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 974, 0, 0, 0, 0, 0, 967,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	968, 0, 949, 950, 0, 969, 970, 971, 979, 980,
	981, 0, 0, 0, 973, 0, 977, 0, 972, 0,
	0, 0, 0, 0, 0, 952, 0, 0, 983, 0,
	975, 0, 0, 963, 964, 965, 978, 0, 962, 960,
	961, 953, 954, 955, 956, 958, 959, 0, 0, 951,
	0, 2151, 0, 0, 0, 966, 0, 0, 0, 0,
	949, 950, 968, 969, 970, 971, 979, 980, 981, 0,
	0, 0, 0, 0, 0, 0, 972, 0, 977, 0,
	0, 0, 0, 952, 975, 0, 983, 963, 964, 965,
	978, 0, 962, 960, 961, 953, 954, 955, 956, 958,
	959, 0, 0, 0, 0, 2005, 0, 951, 0, 0,
	957, 0, 0, 966, 0, 0, 0, 949, 950, 0,
	969, 970, 971, 979, 980, 981, 0, 0, 0, 0,
	976, 984, 0, 972, 0, 0, 0, 0, 0, 0,
	952, 0, 0, 983, 0, 0, 975, 0, 982, 963,
	964, 965, 978, 0, 962, 960, 961, 953, 954, 955,
	956, 958, 959, 974, 951, 0, 0, 1981, 957, 967,
	966, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 976, 984,
	0, 0, 0, 0, 973, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 982, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 974, 0, 0, 0, 957, 2471, 967, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 968, 0, 0, 976, 984, 0, 0, 0,
	0, 0, 973, 0, 0, 0, 0, 0, 977, 0,
	0, 0, 0, 982, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 974, 0,
	0, 0, 0, 0, 967, 0, 0, 0, 0, 0,
	0, 0, 0, 1777, 1778, 0, 1795, 1796, 1797, 0,
	968, 0, 0, 0, 0, 0, 0, 0, 0, 973,
	0, 0, 0, 0, 0, 0, 977, 0, 0, 0,
	0, 0, 0, 0, 0, 2470, 975, 0, 0, 963,
	964, 965, 978, 0, 962, 960, 961, 953, 954, 955,
	956, 958, 959, 0, 0, 0, 1792, 1452, 0, 0,
	0, 0, 0, 0, 0, 949, 950, 968, 969, 970,
	971, 979, 980, 981, 0, 0, 0, 0, 0, 0,
	0, 972, 0, 977, 0, 0, 0, 0, 952, 0,
	0, 983, 0, 0, 975, 0, 0, 963, 964, 965,
	978, 0, 962, 960, 961, 953, 954, 955, 956, 958,
	959, 1783, 951, 1739, 0, 0, 0, 0, 966, 0,
	0, 949, 950, 0, 969, 970, 971, 979, 980, 981,
	0, 0, 0, 0, 0, 0, 0, 972, 0, 0,
	0, 0, 1712, 0, 952, 0, 0, 983, 0, 1798,
	0, 975, 0, 0, 963, 964, 965, 978, 0, 962,
	960, 961, 953, 954, 955, 956, 958, 959, 951, 0,
	1793, 0, 0, 957, 966, 1809, 0, 1550, 1808, 0,
	0, 0, 0, 949, 950, 0, 969, 970, 971, 979,
	980, 981, 0, 976, 984, 0, 0, 0, 0, 972,
	0, 0, 0, 1549, 1713, 0, 952, 0, 0, 983,
	0, 982, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 974, 0, 0, 957,
	951, 0, 967, 0, 0, 0, 966, 0, 0, 0,
	0, 0, 0, 1794, 0, 0, 0, 0, 0, 976,
	984, 0, 0, 0, 0, 0, 0, 973, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 982, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 974, 0, 0, 0, 0, 0, 967, 0,
	0, 957, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 968, 0, 0, 0, 0,
	0, 976, 984, 973, 0, 0, 0, 0, 0, 0,
	0, 977, 0, 0, 0, 0, 0, 0, 0, 982,
	1789, 1790, 1791, 0, 0, 1788, 1786, 1787, 1779, 1780,
	1781, 1782, 1784, 1785, 974, 0, 0, 0, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 968, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 973, 0, 977, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 975,
	0, 0, 963, 964, 965, 978, 0, 962, 960, 961,
	953, 954, 955, 956, 958, 959, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 949, 950, 968, 969, 970, 971, 979, 980, 981,
	0, 0, 0, 0, 0, 0, 0, 972, 0, 977,
	0, 0, 0, 0, 952, 975, 0, 983, 963, 964,
	965, 978, 0, 962, 960, 961, 953, 954, 955, 956,
	958, 959, 0, 0, 0, 0, 0, 0, 951, 0,
	0, 0, 0, 0, 966, 0, 0, 0, 0, 0,
	0, 0, 0, 949, 950, 0, 969, 970, 971, 979,
	980, 981, 0, 0, 0, 0, 0, 0, 0, 972,
	0, 0, 0, 0, 0, 0, 952, 975, 0, 983,
	963, 964, 965, 978, 0, 962, 960, 961, 953, 954,
	955, 956, 958, 959, 0, 0, 0, 0, 0, 957,
	951, 0, 0, 0, 0, 0, 966, 0, 0, 949,
	950, 0, 969, 970, 971, 979, 980, 981, 0, 976,
	984, 0, 0, 0, 0, 972, 0, 0, 0, 0,
	0, 0, 952, 0, 0, 983, 0, 982, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 974, 0, 0, 0, 951, 0, 967, 0,
	0, 957, 966, 0, 0, 0, 0, 0, 0, 0,
	0, 949, 950, 0, 969, 970, 971, 979, 980, 981,
	0, 976, 984, 973, 576, 0, 0, 972, 0, 0,
	0, 1810, 0, 0, 952, 0, 0, 983, 0, 982,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 974, 0, 0, 957, 951, 0,
	967, 0, 1815, 0, 966, 0, 0, 0, 0, 0,
	0, 968, 0, 0, 0, 0, 0, 976, 984, 0,
	0, 0, 0, 0, 0, 973, 0, 977, 0, 0,
	0, 0, 0, 0, 0, 982, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	974, 0, 0, 0, 0, 0, 967, 0, 0, 957,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 968, 0, 0, 0, 0, 0, 976,
	984, 973, 0, 0, 0, 0, 0, 0, 0, 977,
	0, 0, 0, 0, 0, 975, 0, 982, 963, 964,
	965, 978, 0, 962, 960, 961, 953, 954, 955, 956,
	958, 959, 974, 0, 0, 1985, 0, 0, 967, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 968,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 973, 0, 977, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 975, 0, 0,
	963, 964, 965, 978, 0, 962, 960, 961, 953, 954,
	955, 956, 958, 959, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 949,
	950, 968, 969, 970, 971, 979, 980, 981, 0, 0,
	0, 0, 0, 0, 0, 972, 0, 977, 0, 0,
	0, 0, 952, 975, 0, 983, 963, 964, 965, 978,
	0, 962, 960, 961, 953, 954, 955, 956, 958, 959,
	0, 0, 0, 0, 0, 0, 951, 0, 0, 0,
	0, 0, 966, 0, 0, 949, 950, 0, 969, 970,
	971, 979, 980, 981, 0, 0, 0, 0, 0, 0,
	0, 972, 0, 0, 0, 1768, 0, 0, 952, 0,
	0, 983, 0, 0, 0, 975, 0, 0, 963, 964,
	965, 978, 0, 962, 960, 961, 953, 954, 955, 956,
	958, 959, 951, 0, 0, 0, 0, 957, 966, 0,
	0, 0, 0, 0, 0, 949, 950, 0, 969, 970,
	971, 979, 980, 981, 0, 0, 0, 976, 984, 0,
	0, 972, 0, 0, 0, 0, 0, 0, 952, 0,
	0, 983, 0, 0, 0, 982, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	974, 0, 951, 957, 0, 0, 967, 0, 966, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 976, 984, 0, 0, 0, 0, 0,
	0, 973, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 982, 0, 0, 1775, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 974, 0, 0, 0,
	0, 0, 967, 957, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 968,
	0, 0, 0, 976, 984, 0, 0, 973, 0, 0,
	0, 0, 0, 1777, 1778, 977, 1795, 1796, 1797, 0,
	0, 982, 0, 0, 0, 0, 0, 0, 0, 1974,
	0, 0, 0, 0, 0, 0, 974, 0, 0, 0,
	0, 0, 967, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 968, 949, 950, 0, 969,
	970, 971, 979, 980, 981, 0, 1792, 973, 0, 0,
	0, 977, 0, 0, 0, 0, 0, 0, 0, 952,
	0, 0, 983, 975, 0, 0, 963, 964, 965, 978,
	0, 962, 960, 961, 953, 954, 955, 956, 958, 959,
	0, 0, 0, 951, 0, 0, 0, 0, 0, 966,
	0, 0, 0, 0, 0, 968, 0, 0, 0, 0,
	0, 1783, 0, 0, 0, 1777, 1778, 0, 1795, 1796,
	1797, 977, 0, 0, 0, 0, 0, 0, 0, 975,
	0, 1973, 963, 964, 965, 978, 0, 962, 960, 961,
	953, 954, 955, 956, 958, 959, 0, 0, 0, 1798,
	0, 0, 0, 0, 957, 0, 0, 0, 0, 949,
	950, 0, 969, 970, 971, 979, 980, 981, 1792, 0,
	1793, 0, 0, 0, 976, 984, 0, 0, 0, 0,
	0, 0, 952, 0, 0, 983, 0, 0, 0, 975,
	0, 0, 963, 964, 965, 978, 0, 962, 960, 961,
	953, 954, 955, 956, 958, 959, 951, 974, 0, 0,
	0, 0, 966, 967, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1783, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1794, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1798, 0, 0, 0, 0, 0, 957, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1793, 0, 0, 0, 968, 976, 984, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 977, 0, 0, 982, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	974, 0, 0, 0, 0, 0, 967, 0, 0, 0,
	1789, 1790, 1791, 0, 0, 1788, 1786, 1787, 1779, 1780,
	1781, 1782, 1784, 1785, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1794, 0, 1275, 1265, 1294,
	1257, 1285, 1284, 0, 0, 1259, 1258, 0, 0, 0,
	975, 1296, 1295, 963, 964, 965, 978, 0, 962, 960,
	961, 953, 954, 955, 956, 958, 959, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 968,
	0, 0, 0, 0, 0, 1290, 0, 1282, 1281, 0,
	0, 0, 0, 0, 0, 977, 0, 1280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1279, 1277, 1278, 0, 0,
	0, 0, 1789, 1790, 1791, 0, 0, 1788, 1786, 1787,
	1779, 1780, 1781, 1782, 1784, 1785, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1268, 1267, 1269, 1270,
	1271, 1272, 1273, 0, 1293, 0, 0, 0, 0, 0,
	0, 0, 0, 975, 0, 0, 963, 964, 965, 978,
	0, 962, 960, 961, 953, 954, 955, 956, 958, 959,
	0, 0, 1261, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1283, 0, 0, 0, 1266, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1276, 0, 0,
	0, 1387, 1385, 1386, 1389, 1388, 0, 0, 0, 1275,
	1265, 1294, 1257, 1285, 1284, 0, 0, 1259, 1258, 0,
	0, 0, 0, 1296, 1295, 0, 0, 1262, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1274, 1263,
	0, 0, 0, 0, 0, 0, 0, 531, 1298, 557,
	0, 0, 0, 0, 0, 0, 0, 1290, 0, 1282,
	1281, 1260, 0, 0, 1291, 1292, 0, 536, 0, 1280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 534,
	0, 0, 0, 0, 0, 0, 1264, 1279, 1277, 1278,
	0, 1297, 0, 0, 0, 0, 0, 0, 0, 0,
	535, 0, 0, 0, 0, 537, 0, 0, 0, 0,
	543, 544, 0, 0, 553, 0, 0, 0, 1268, 1267,
	1269, 1270, 1271, 1272, 1273, 0, 1293, 0, 558, 538,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 556, 0, 0, 1261, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1283, 0, 0, 0,
	1266, 539, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 540, 541, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1276,
	0, 0, 0, 0, 547, 0, 0, 542, 549, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 546, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 559, 1262,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1274, 1263, 0, 0, 0, 0, 0, 0, 0, 0,
	1298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1260, 0, 0, 1291, 1292, 545, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1264, 0,
	0, 0, 0, 1297, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 533, 550, 560, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	551, 0, 0, 0, 555, 0, 0, 0, 561, 0,
	0, 0, 0, 548, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 554,
}
var sqlPact = [...]int{

	4289, -1000, 9, -1000, -1000, -1000, 192, -1000, -1000, -1000,
	176, 171, 170, -1000, 169, 158, 157, 155, 154, 153,
	151, 150, 148, 145, 144, -1000, 141, -1000, -1000, -1000,
	-1000, 139, 138, 133, 132, 131, 130, 129, 1059, 23139,
	127, 125, 123, 122, 1128, 35937, 119, 118, 111, 109,
	994, 103, 102, 26649, 935, 1456, 101, 99, 97, 94,
	93, 998, 35619, 4306, 2509, 1086, 1526, 35298, 22818, 1524,
	1626, 34977, -1000, -1000, 34656, 91, 90, 88, 87, 85,
	-1000, -1000, 34335, 84, 82, 73, 72, 71, 70, 66,
	65, 63, 62, 60, 57, 56, 55, -1000, 54, 52,
	49, 41575, 41, 39, 38, 1071, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 120, -1000, 1019,
	559, 2554, 7866, 977, 971, 961, 954, 968, 37845, 35937,
	37, -88, 36, -1000, 1868, 638, 20224, 4289, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 26328, 26007, 34014, 33693, 754, -1000, 5, 24411,
	35937, -1000, 75, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 15925, 15568, 15211, 14854, 546, 75, -1000,
	-1000, -1000, -1000, -1000, 33372, -1000, 33051, 32730, 1413, 32409,
	-1000, -1000, -1000, -1000, 32088, -1000, -1000, 1745, 1549, 1541,
	25686, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 31770, 31449, 31128, 30807, 30486, 509, -1000,
	-1000, -1000, 18610, -1000, -1000, -1000, -1000, 32, -1000, 31,
	-1000, 30, 27, 26, 25, -1000, 24, 23, -1000, 22,
	21, -1000, 15, 13, 30165, 1170, -1000, -1000, 7, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 35937, -1000, 16611,
	-1000, 508, -1000, 1542, -1000, 16611, -1000, 1166, -1000, -1000,
	-1000, -1000, -1000, 35937, -1000, -1000, -1000, -1000, -1000, -1000,
	2043, 1123, 507, 29844, -1000, 1395, -1000, 584, 755, -1000,
	-1000, -1000, 8896, 204, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2366, 22497, 1193, 1875, 1727, 2042, 1328,
	1719, 1711, 1706, 1705, 1692, 2041, 937, 2040, 1582, 957,
	2039, 1686, 1316, 660, 2038, 1540, 1539, -1000, -1000, -1000,
	-1000, 902, -1000, -1000, -1000, 27921, -1000, -1000, 1019, -1000,
	-1000, -1000, 1351, 1847, 1847, 1847, 1912, 290, 284, -1000,
	120, -1000, 1590, -1000, 1111, -1000, -1000, -1000, -1000, -1000,
	40835, -1000, -1000, 16611, 16611, 16611, 16611, 16611, 1064, 521,
	-1000, 506, 505, 7166, -1000, -1000, 2022, -1000, -1000, -1000,
	316, -1000, -1000, 16611, 75, -1000, -1000, -1000, -1000, 503,
	2034, -1000, 644, -1000, -1000, -1000, 599, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1561, 500, 496, 495,
	-1000, 492, -1000, -1000, 488, 484, 483, 481, 469, 468,
	467, 466, 465, 463, 458, 447, 445, 441, 436, 1023,
	-1000, 616, -1000, -1000, 616, 616, -1000, 416, 416, 419,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 416, -1000,
	-1000, -1000, 591, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 432, 1097, -1000, -1000, 1097, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 743, 37209, 1, 35937, -1000,
	430, 1, -1000, -1000, 429, -1000, 10968, 10968, -1000, -1000,
	-1000, -1000, -1000, 9596, 1401, -1000, 3142, -201, 318, 558,
	-1000, 19255, 21835, -1000, -1000, 948, 1690, 659, -1000, 955,
	1689, 489, -1000, 946, -1000, 1011, 1668, -126, 23457, 24411,
	5, -18, -1000, -1000, -1000, 5460, 40835, -1000, 40835, -1000,
	40835, -1000, 40835, -1000, 835, 20868, 75, -1000, -1000, -1000,
	-1000, 427, 1253, 604, -1000, 301, -1000, 29523, 604, 1247,
	-1000, -1000, -1000, 27921, -1000, 35937, -1000, 35937, -1000, 869,
	-1000, 37527, 110, 1666, -1000, -1000, 110, 1654, -1000, 108,
	1639, -1000, -1000, 1185, 1629, -1000, -18, 1621, -1000, -1000,
	16611, 3, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 638,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 29202, 23775, 1279, 573, 40835, 1951, 41502,
	23457, 40835, 23775, -1000, -1000, 35937, -1000, 16611, -1000, 1950,
	1307, 0, -1000, -1000, -1000, -1000, -1000, 1299, 1461, 729,
	1139, 8896, 8896, 1783, -1000, 197, 5790, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 28881, -1000, -1000, -1000, 1131,
	35937, -1000, -1000, 1558, -1000, 23775, 35937, -1000, 35937, -1000,
	35937, -1000, 35937, -1000, 35937, -1000, -1000, -1000, -1000, -1000,
	896, -1000, 1551, -1000, -1000, 35937, -1000, 1287, -1000, -1000,
	-1000, 28563, 28242, -1000, 926, 787, -1000, -1000, 114, -1000,
	-1000, 1351, -1000, 1113, 1375, 14497, 1327, 16611, 120, -1000,
	-1000, 120, 120, 8553, -1000, -1000, -1000, 35937, -1000, 41300,
	41502, 5790, 771, 16611, 16611, 16611, 16611, 16611, 16611, 16611,
	16611, 16611, 16611, 16611, 16611, 16611, 16611, 16611, 16611, 16611,
	16611, 16611, 16611, 16611, 16611, 1305, 16611, 737, 16611, 16611,
	16611, 16611, 1425, 1094, 415, 1118, -1000, 1987, 1987, 1987,
	41129, 41129, 354, 521, -1000, 16611, -1000, 498, 14154, 284,
	39592, 4, 6823, -1000, -1000, -1000, 9239, 612, 40835, 75,
	6122, -1000, 2020, 919, 1556, 1467, 426, 560, 557, 553,
	479, 16611, 16611, 13811, 13454, 13097, 17297, 12740, 16611, 7509,
	16611, 16611, 16611, 16611, 12383, 12026, -1000, 421, -1000, -1000,
	-1000, -1000, 2014, -1000, -1000, 2013, -1000, 762, 760, 2012,
	-1000, 0, -1000, 37209, -1000, 35937, 1, 1949, 35937, -1000,
	124, -1000, 40063, -1000, 124, -17, -1000, 1361, 1353, 20546,
	1285, 1079, 1079, 1079, -1000, 420, 517, 558, 4785, 11669,
	-1000, 26967, 1083, 215, 281, 18933, 1401, -1000, 35937, -36,
	930, -1000, 25365, 1893, 1857, 1817, 27921, 1936, 498, 1538,
	735, 27921, 733, 1929, 498, 1537, 725, 35937, 5790, 556,
	-1000, 35937, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1532, -22, -1000, -1000, 25047, 1948, 1615, -1000,
	1025, -1000, 1946, 35937, 1150, 1233, -1000, -1000, 779, 1610,
	608, 366, 1944, 366, 21191, -1000, 35937, -1000, 35937, -1000,
	-1000, 35937, -1000, 35937, -1000, 35937, 35937, -1000, 35937, 35937,
	-37, 40835, 38980, 24729, 718, -1000, 636, 25047, 3453, -47,
	-1000, 668, -1000, -1000, -1000, -1000, 283, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 419,
	1023, 416, 416, 416, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 591, -1000, -1000, 616, 616, 616, -1000, -1000, -25,
	-1000, 1529, 579, -50, 662, 0, -1000, 1097, -1000, 911,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2031, -1000, 1992, -1000, -1000, 2011, -2,
	-1000, -2, -1000, 5790, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 35937, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	292, -1000, -1000, -1000, -1000, -1000, -1000, 35937, 35937, 35937,
	-1000, 27921, -1000, -1000, -1000, -1000, 40835, -1000, 367, -1000,
	-1000, 40835, 916, 1405, -1000, 1405, -15, -1000, 40001, 1334,
	35937, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 581, 767, 767, 782, 782, 782, 782, 1928,
	1156, 3228, 2722, 4399, 4399, 4399, 2759, 343, 343, 4399,
	4399, 4399, 41129, 3644, 175, 16611, 16611, 717, 1069, 415,
	175, 16611, 175, 175, 175, 175, -1000, 1230, -1000, -1000,
	-1000, -1000, 1521, 414, 17297, 17297, -1000, -1000, -1000, 7166,
	17627, -1000, -1000, -1000, -1000, 413, 16611, -1000, 39650, -211,
	-52, -1000, -1000, 16611, -53, -105, -1000, -1000, 837, -1000,
	16611, -1000, -42, 16611, 16611, 16611, 280, -1000, 279, -1000,
	716, -1000, 712, 711, 708, -1000, 408, 1068, 407, 404,
	16611, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 40775,
	4142, 278, -1000, 1520, -123, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 277, -1000, 274, -1000, 40719, -123, 273, 3025,
	-1000, 17297, 17297, 17297, 7166, 402, 271, -1000, 39945, -123,
	40481, 11312, 11312, 11312, 269, 40419, 16611, -123, 3882, 3508,
	314, -57, -58, -1000, -60, -1000, 2010, -63, 268, 577,
	574, 267, -1000, -1000, 400, -65, 608, 10968, 19901, 5790,
	-1000, 608, 9596, -1000, 20546, 20546, 1323, 1337, 20546, -1000,
	-1000, -1000, -1000, 26967, 470, 558, 26967, -1000, 2006, 1359,
	-68, -1000, -1000, -1000, 35937, 398, -1000, 558, 264, 1002,
	35937, 35937, 35937, -1000, -1000, 1223, 36891, 1216, 41502, 35937,
	-1000, 397, 396, 1330, 1329, 35937, 35937, 36573, 36255, 35937,
	939, 498, -1000, 395, 35937, 934, 35937, 498, -1000, 393,
	35937, 923, -1000, 1442, 1143, -1000, 830, 1519, 35937, 262,
	-70, -16, 41502, -1000, -1000, -1000, -1000, -1000, 35937, 411,
	35937, 498, 35937, 2030, 498, 35937, 1605, 1731, 537, 35937,
	1375, 16611, 980, -1000, 19578, 621, 35937, 940, 74, -1000,
	-1000, -1000, 551, 35937, -1000, -1000, 110, 110, -1000, 108,
	1185, -18, -1000, 16611, -1000, -1000, 35937, 23457, -71, -1000,
	-1000, 41502, -1000, 520, 739, -1000, 2004, 592, 23457, 35937,
	8896, 8896, -1000, 1367, -1000, -1000, 895, -1000, 1004, -1000,
	-1000, -1000, -1000, 8896, -1000, -38, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 916, -1000, 16611, 2003, -1000, -1000, -1000,
	8553, -1000, -1000, -1000, 35937, -193, 16611, 175, 175, 16611,
	17297, 17297, -1000, 175, -1000, -1000, -1000, -1000, -1000, 1512,
	390, 16611, 41502, 41085, 40973, -73, -1000, 10625, -23, -1000,
	16611, -1000, 39412, -1000, -1000, 519, 1712, -1000, 16611, 40363,
	261, 10282, -1000, 40301, -43, -43, -1000, 2027, 1220, 1211,
	995, 887, 1998, -1000, 21513, 609, 1089, 39350, 41300, 41502,
	-1000, 16611, -1000, -1000, 1504, 16611, -1000, 41300, 41502, 17297,
	17297, 17297, 17297, 17297, 17297, 17297, 17297, 17297, 17297, 17297,
	17297, 17297, 17297, 17297, 17297, 17297, 17297, 17297, 1384, 17297,
	1979, 1979, 1979, -24, 9939, -1000, 1544, 1504, 16611, 16611,
	41502, 259, 258, 256, -1000, 16611, -123, 16611, 16611, 16611,
	-1000, -1000, -1000, 255, -1000, 1997, -1000, -1000, -1000, -1000,
	3453, -1000, 1460, -1000, -103, -1000, 1401, -1000, 1460, -1000,
	-1000, 1323, -1000, 368, 16611, 20546, -1000, 516, -1000, -78,
	-1000, 26967, -1000, 515, -208, -1000, 550, -1000, 558, 364,
	35937, 26967, -1000, -1000, -1000, 706, 701, 1599, -1000, 1207,
	-1000, 625, -1000, 1070, 16611, 18287, 362, 361, 1052, -1000,
	1597, 1185, 1586, 1185, -1000, -36, 925, -1000, 16611, -1000,
	697, -1000, -1000, 16611, -1000, 692, 592, 1502, 804, -1000,
	814, -1000, 1422, -1000, 25047, 356, 35937, 355, -1000, 350,
	-1000, -1000, 349, 35937, 1304, 537, 24093, -1000, 604, 940,
	-1000, 40835, -1000, 940, 8209, 1834, -106, -1000, -1000, -1000,
	608, 21191, 20546, 9596, -109, -1000, -1000, -1000, -1000, 40835,
	-38, 1803, 1803, -1000, 1995, -1000, 514, 254, -1000, 27603,
	-1000, -38, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 35937,
	1099, 39296, -1000, 1856, 5790, 1937, 175, 3609, 2658, 16611,
	41502, 41016, -114, 16611, 16611, -1000, -116, -1000, 16611, 513,
	40835, -1000, -1000, -1000, 40835, 16611, 2026, 16611, 253, 252,
	249, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 246,
	-1000, -1000, 38163, 16611, 244, -1000, 243, 233, 40835, 1544,
	40835, -1000, -1000, 695, 695, 870, 870, 870, 870, 1979,
	381, 1085, 391, 196, 196, 196, 461, 482, 482, 196,
	196, 196, 1495, 1293, 348, 39883, 16611, -124, -1000, -1000,
	-1000, 40835, 40835, 228, -1000, -1000, -1000, -123, 247, 39053,
	39002, -1000, 227, 223, 1450, 1907, -1000, 20546, 1450, -1000,
	35937, 40835, -1000, -201, -1000, 1988, -1000, -1000, 1359, -1000,
	5127, 26967, 35937, -129, -1000, 35937, 35937, 35937, 1585, -1000,
	1383, -1000, 38936, -132, -1000, 311, 1862, 16611, -1000, -1000,
	346, 18287, 35937, -1000, 1309, 1377, 650, 35937, -1000, 35937,
	-1000, 35937, 35937, 35937, -134, 35937, -135, 35937, -1000, 23457,
	742, -1000, -1000, 1430, -1000, 18287, 345, 35937, 25047, 1943,
	18287, 1140, 1324, 537, 24093, -1000, 779, -1000, -1000, -39,
	-1000, 378, 498, 940, -1000, -46, -1000, 549, 1773, -1000,
	1771, 512, -1000, -1000, -83, 344, -1000, 545, 544, -1000,
	-1000, -1000, -1000, 1856, 16611, 16611, 41016, -137, -1000, 175,
	175, -1000, 38784, -1000, 40835, -1000, 40301, -1000, -1000, -1000,
	-1000, 1031, -1000, 38756, -1000, -1000, -1000, -1000, 17297, 1492,
	342, 41502, 38543, -1000, -1000, 16611, -1000, -1000, -1000, -1000,
	606, 16611, 16611, 1401, 606, -142, 558, -1000, -1000, -1000,
	1985, -1000, -143, -1000, -1000, -1000, -1000, 35937, -1000, 35937,
	-1000, 5790, 35937, 1490, 1189, -1000, -1000, 1320, 333, 17297,
	35937, -1000, 1036, 18287, 1856, 75, 5790, 1856, 38515, 6122,
	-144, -145, 1182, -1000, 1181, 16611, -1000, 41502, 1185, 1185,
	-1000, 686, 678, 676, -1000, 671, -1000, -85, 22165, 1055,
	-150, 18287, -155, 220, 498, -156, 35937, -1000, 537, 24093,
	-1000, 1731, 1723, 35937, 1814, -1000, -1000, 331, 329, 328,
	-1000, 27285, 27285, 23457, 23457, -1000, 175, 175, -1000, -1000,
	219, 1089, 1879, -1000, 3164, 17297, 41502, -157, -1000, 38487,
	-1000, 35937, 40835, -123, -1000, -1000, 26967, 392, -1000, -1000,
	1067, -1000, -1000, 35937, 1194, -1000, -1000, 16611, 39883, 325,
	1422, 324, -1000, -1000, -1000, -1000, -1000, -1000, 1862, -42,
	-1000, 969, -1000, -1000, 40835, 1855, -1000, -1000, 35937, 35937,
	323, 322, -1000, 321, 75, 35937, 1036, -163, -1000, 1422,
	-1000, 1036, 320, 24093, -1000, 1304, 774, -164, 35937, -1000,
	-1000, 6466, 23457, 23457, -1000, -166, -1000, -1000, -1000, 927,
	16611, 3164, -172, -1000, -1000, -93, -1000, 1941, -1000, -1000,
	-1000, -1000, 1583, 4355, 1271, 35937, -1000, 35937, 1856, 217,
	35937, 631, 5790, -1000, -1000, 16611, 16611, 16611, 317, 1422,
	1036, -1000, 1422, 18287, -1000, 1324, 865, -1000, 608, -1000,
	-175, -178, -1000, 216, 16954, 16954, -123, -1000, 35937, 312,
	1572, -1000, 1104, 1117, 210, -180, -1000, -1000, 301, -1000,
	16611, -1000, -181, -183, -43, 35937, -1000, 1422, -1000, -186,
	-1000, 21191, -1000, 592, 592, -1000, -1000, -1000, 17957, 1161,
	909, 39707, -1000, -1000, -1000, 35937, -1000, 1133, 1109, 861,
	-1000, -1000, -1000, -1000, -1000, 1271, 40835, -1000, -1000, 208,
	-202, -1000, 1036, -171, -1000, -1000, 1957, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1755, -1000, 645, 1252, 1252, 1104,
	2026, 1160, 1422, -1000, 16268, -1000, 1964, -1000, -1000, 1326,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2420, 2419, 1578, 1892, 2417, 2416, 2414, 2411, 2410,
	2408, 2407, 2405, 2402, 2400, 2398, 2395, 2392, 2390, 2389,
	1888, 2387, 1885, 2386, 2385, 2382, 2380, 2379, 2374, 1871,
	2369, 2367, 2365, 2364, 2361, 2360, 1858, 2358, 1837, 2357,
	2355, 2352, 2351, 2350, 1821, 2343, 73, 111, 1816, 2340,
	2339, 1807, 1805, 1803, 2337, 1761, 2334, 2333, 1756, 1705,
	2332, 91, 2331, 2321, 2320, 1697, 1676, 2319, 2315, 2314,
	143, 2311, 1674, 2310, 2303, 2299, 2290, 2289, 2287, 2282,
	2281, 2271, 2270, 2269, 2263, 2262, 2256, 2254, 2249, 2247,
	2245, 150, 2243, 2237, 1658, 1602, 2235, 2234, 28, 29,
	9, 50, 21, 133, 2187, 126, 2232, 2229, 2228, 2225,
	2223, 2222, 27, 90, 84, 2220, 88, 2219, 2218, 38,
	33, 20, 17, 2216, 80, 2215, 2214, 1345, 22, 2211,
	2209, 123, 2207, 42, 26, 182, 146, 141, 101, 109,
	2206, 2205, 2204, 47, 108, 1, 2202, 2200, 11, 74,
	36, 2199, 24, 19, 2197, 2196, 121, 2195, 53, 85,
	1486, 95, 134, 270, 2194, 57, 8, 55, 2193, 2192,
	149, 39, 2191, 30, 64, 131, 2186, 44, 148, 120,
	71, 114, 124, 2185, 2184, 2183, 86, 2180, 107, 103,
	2179, 2176, 59, 2175, 81, 128, 2173, 2172, 2171, 82,
	2170, 112, 2168, 2167, 147, 138, 102, 5, 70, 62,
	13, 1451, 1450, 125, 79, 45, 48, 2162, 2363, 1261,
	1074, 31, 96, 65, 41, 98, 52, 78, 139, 51,
	2157, 2156, 127, 2154, 2151, 2149, 2146, 2144, 94, 2142,
	2138, 23, 2136, 66, 25, 56, 77, 35, 219, 116,
	115, 144, 93, 2135, 67, 119, 2132, 237, 2131, 2130,
	975, 110, 2129, 2127, 2124, 950, 945, 882, 97, 2123,
	2122, 268, 255, 2120, 2107, 76, 2099, 106, 99, 117,
	136, 135, 89, 2096, 113, 49, 2095, 32, 18, 0,
	680, 252, 2094, 118, 60, 2091, 2090, 2089, 2085, 16,
	3, 10, 4, 7, 6, 61, 34, 2084, 2083, 122,
	104, 58, 2082, 145, 2081, 2074, 2070, 43, 2069, 14,
	2067, 12, 2063, 2060, 15, 2, 2059, 2057, 132, 2056,
	87, 2055, 1884, 2053, 140, 2052, 2050, 1650, 2049, 37,
	100,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 7,
	7, 8, 8, 6, 6, 6, 6, 6, 9, 9,
	10, 16, 13, 18, 12, 12, 15, 15, 114, 114,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 111, 111, 116, 116, 116,
	118, 118, 115, 115, 110, 110, 20, 20, 59, 59,
	101, 52, 52, 52, 287, 287, 288, 288, 97, 97,
	98, 98, 98, 98, 99, 99, 100, 100, 100, 28,
	28, 28, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 23, 23, 24, 24, 25, 25, 26, 26, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 36, 36, 37, 37, 37, 37, 37,
	37, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	38, 38, 43, 43, 43, 41, 41, 41, 40, 40,
	40, 39, 39, 39, 42, 42, 42, 162, 162, 161,
	161, 164, 164, 44, 44, 44, 44, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 47, 47, 47, 47, 47, 47, 47,
	256, 256, 255, 45, 45, 230, 230, 48, 48, 187,
	187, 49, 49, 49, 49, 49, 50, 50, 60, 60,
	328, 328, 328, 332, 332, 333, 333, 334, 334, 334,
	334, 334, 334, 334, 330, 330, 55, 55, 55, 55,
	56, 56, 56, 57, 57, 96, 96, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 66, 66, 66, 68,
	65, 65, 65, 67, 67, 67, 67, 69, 69, 70,
	70, 70, 70, 70, 71, 71, 281, 279, 279, 280,
	280, 141, 141, 141, 141, 141, 142, 142, 142, 286,
	286, 286, 286, 286, 286, 285, 285, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 84, 84, 84, 91, 91, 91, 91,
	91, 91, 91, 73, 73, 78, 78, 78, 78, 78,
	74, 74, 79, 79, 80, 80, 81, 81, 81, 81,
	81, 81, 75, 75, 75, 75, 83, 83, 83, 83,
	82, 82, 88, 88, 88, 88, 88, 88, 85, 85,
	85, 85, 86, 86, 86, 89, 89, 89, 89, 76,
	76, 77, 77, 90, 90, 87, 87, 87, 329, 329,
	331, 331, 53, 53, 32, 32, 33, 33, 143, 143,
	144, 144, 209, 209, 209, 209, 145, 145, 117, 117,
	117, 208, 297, 297, 298, 298, 298, 298, 298, 298,
	299, 299, 299, 299, 299, 299, 299, 295, 295, 296,
	293, 293, 294, 294, 294, 294, 335, 335, 207, 207,
	148, 148, 302, 302, 302, 302, 300, 300, 300, 300,
	300, 303, 301, 304, 304, 304, 304, 304, 242, 242,
	242, 93, 93, 34, 34, 123, 123, 35, 35, 31,
	31, 31, 191, 191, 152, 152, 247, 247, 247, 134,
	134, 112, 112, 112, 14, 11, 11, 11, 11, 11,
	11, 19, 19, 17, 17, 192, 192, 193, 193, 54,
	54, 58, 58, 63, 63, 92, 92, 92, 92, 92,
	92, 21, 21, 21, 21, 27, 27, 27, 27, 62,
	62, 337, 337, 130, 130, 130, 130, 131, 131, 204,
	204, 205, 205, 338, 338, 206, 206, 206, 125, 124,
	126, 126, 30, 30, 30, 119, 119, 120, 120, 121,
	121, 122, 122, 339, 339, 51, 51, 51, 95, 95,
	137, 137, 201, 201, 201, 203, 203, 202, 202, 202,
	177, 177, 177, 94, 94, 157, 157, 166, 166, 167,
	167, 253, 168, 168, 61, 61, 104, 104, 102, 102,
	102, 102, 102, 102, 103, 103, 103, 105, 105, 105,
	105, 105, 105, 105, 108, 108, 108, 109, 109, 109,
	107, 107, 310, 310, 310, 313, 313, 309, 311, 311,
	312, 312, 336, 336, 178, 178, 178, 147, 146, 146,
	150, 150, 149, 151, 151, 246, 246, 246, 175, 175,
	175, 175, 196, 196, 194, 194, 195, 195, 197, 197,
	198, 198, 198, 199, 199, 200, 200, 174, 174, 226,
	226, 106, 106, 106, 156, 156, 156, 158, 158, 216,
	216, 216, 217, 217, 215, 215, 215, 215, 248, 248,
	248, 248, 248, 248, 248, 248, 326, 326, 326, 327,
	327, 245, 245, 249, 249, 249, 249, 249, 249, 243,
	243, 243, 243, 244, 244, 254, 254, 181, 181, 181,
	181, 179, 179, 180, 180, 250, 250, 250, 250, 176,
	176, 251, 251, 251, 210, 210, 257, 257, 257, 275,
	275, 155, 155, 155, 258, 258, 258, 258, 258, 258,
	258, 258, 258, 258, 258, 258, 258, 258, 258, 258,
	258, 259, 259, 259, 259, 261, 261, 261, 260, 260,
	260, 260, 260, 260, 260, 260, 260, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 274, 274, 274, 274,
	274, 262, 262, 269, 269, 270, 270, 271, 272, 263,
	263, 264, 264, 265, 266, 273, 273, 273, 273, 277,
	277, 267, 267, 267, 267, 267, 268, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 189, 189, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 220, 220, 220, 220, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	305, 305, 305, 305, 305, 305, 305, 305, 307, 307,
	308, 308, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 314, 314, 315, 315, 317, 317, 318, 318,
	319, 320, 320, 320, 321, 322, 322, 316, 316, 323,
	323, 323, 324, 324, 325, 325, 325, 325, 325, 232,
	232, 232, 233, 233, 234, 240, 240, 240, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 132, 132, 132, 132, 132, 163,
	163, 229, 229, 227, 227, 227, 231, 231, 182, 182,
	276, 276, 276, 276, 276, 276, 276, 183, 183, 183,
	190, 184, 184, 185, 185, 185, 185, 185, 185, 223,
	224, 186, 186, 186, 225, 225, 235, 239, 239, 238,
	237, 237, 236, 236, 213, 213, 214, 214, 212, 211,
	171, 171, 170, 170, 169, 169, 340, 340, 241, 241,
	172, 172, 173, 165, 165, 252, 252, 252, 252, 159,
	159, 139, 139, 160, 160, 135, 135, 138, 138, 136,
	136, 136, 136, 153, 153, 154, 154, 133, 133, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	278, 278, 278, 228, 127, 127, 127, 128, 128, 129,
	129, 283, 283, 283, 284, 284, 284, 284, 282, 282,
	282, 282, 282, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 0, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 1, 1, 1, 3, 4, 6,
	6, 6, 5, 5, 4, 12, 4, 12, 1, 3,
	2, 5, 3, 6, 4, 6, 6, 6, 4, 8,
	3, 3, 3, 6, 4, 3, 2, 1, 1, 0,
	2, 0, 2, 0, 2, 0, 7, 2, 6, 2,
	1, 12, 12, 2, 1, 1, 1, 3, 3, 0,
	3, 1, 3, 1, 1, 3, 2, 5, 0, 4,
	6, 7, 1, 2, 1, 2, 1, 2, 1, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 2, 3, 1, 2,
	1, 2, 2, 7, 3, 2, 2, 2, 2, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 2, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 3, 5, 3, 1, 3, 1,
	2, 2, 3, 2, 2, 5, 3, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	1, 3, 1, 5, 2, 3, 0, 3, 2, 3,
	0, 2, 3, 2, 3, 2, 6, 2, 6, 2,
	1, 2, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 2, 1, 2,
	2, 3, 2, 4, 3, 2, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 3, 6, 6, 3, 5,
	3, 2, 6, 3, 3, 4, 4, 3, 3, 1,
	3, 3, 1, 1, 2, 1, 1, 1, 1, 1,
	3, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 2, 2, 3, 3, 1, 1, 1, 1,
	1, 2, 2, 3, 3, 4, 4, 3, 4, 4,
	4, 3, 2, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 2, 3, 3, 3,
	2, 3, 4, 3, 5, 3, 4, 5, 2, 3,
	3, 3, 4, 2, 3, 4, 3, 3, 3, 4,
	4, 4, 4, 2, 3, 5, 5, 5, 2, 0,
	2, 0, 3, 2, 7, 10, 6, 9, 1, 0,
	1, 3, 1, 1, 1, 1, 8, 0, 1, 1,
	0, 3, 2, 0, 3, 1, 2, 2, 3, 6,
	2, 1, 1, 2, 4, 2, 5, 7, 8, 5,
	3, 1, 4, 6, 5, 10, 1, 1, 4, 0,
	3, 0, 2, 2, 2, 0, 1, 1, 2, 2,
	0, 3, 3, 2, 1, 1, 2, 2, 1, 2,
	1, 4, 2, 4, 3, 3, 0, 6, 3, 11,
	14, 4, 1, 0, 1, 3, 3, 3, 5, 2,
	0, 1, 1, 0, 6, 6, 8, 8, 10, 8,
	10, 6, 8, 6, 8, 1, 0, 2, 0, 2,
	2, 3, 2, 2, 2, 1, 2, 1, 2, 1,
	2, 3, 2, 3, 2, 2, 2, 2, 2, 2,
	2, 1, 0, 1, 3, 2, 0, 2, 1, 1,
	0, 1, 3, 1, 0, 1, 1, 1, 2, 3,
	2, 2, 8, 11, 3, 3, 0, 3, 0, 3,
	0, 3, 0, 1, 0, 6, 7, 3, 6, 3,
	1, 3, 1, 4, 2, 8, 5, 4, 3, 0,
	2, 2, 0, 8, 3, 2, 0, 1, 3, 1,
	1, 3, 5, 5, 1, 1, 3, 3, 1, 2,
	3, 2, 3, 4, 2, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 8, 8, 2, 4, 4, 4,
	2, 2, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 0, 1, 1, 0, 1, 1, 0,
	1, 0, 3, 1, 3, 2, 4, 5, 2, 2,
	1, 1, 1, 0, 2, 5, 2, 3, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 3, 0, 2,
	0, 2, 2, 3, 3, 2, 0, 1, 3, 3,
	5, 1, 1, 3, 2, 4, 4, 0, 8, 4,
	6, 3, 3, 1, 5, 5, 0, 2, 3, 1,
	3, 2, 0, 3, 4, 5, 4, 5, 4, 5,
	2, 4, 1, 1, 0, 5, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 1,
	1, 2, 3, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 5, 2, 1,
	1, 1, 1, 4, 1, 2, 2, 1, 1, 1,
	0, 1, 1, 4, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 4, 1, 3, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 4, 3, 4, 4, 5,
	3, 3, 3, 3, 3, 4, 3, 4, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 4, 1, 3, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 2, 1, 2, 1,
	1, 2, 1, 3, 1, 1, 2, 2, 1, 1,
	3, 5, 6, 8, 6, 6, 4, 3, 4, 1,
	1, 1, 5, 1, 3, 3, 1, 3, 3, 1,
	3, 3, 1, 1, 3, 3, 1, 1, 6, 6,
	4, 3, 4, 3, 4, 3, 4, 4, 3, 6,
	5, 5, 5, 4, 8, 6, 6, 4, 4, 3,
	4, 3, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 2,
	2, 0, 1, 4, 2, 2, 2, 2, 2, 4,
	3, 5, 4, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	3, 1, 3, 3, 3, 2, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 1,
	2, 3, 0, 3, 3, 2, 2, 1, 0, 2,
	2, 3, 2, 1, 1, 3, 5, 1, 2, 4,
	2, 0, 1, 0, 3, 5, 1, 0, 2, 2,
	1, 1, 1, 2, 1, 2, 1, 0, 1, 1,
	1, 3, 3, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 1, 3, 1, 2, 3, 1, 1,
	1, 2, 2, 1, 3, 3, 0, 1, 2, 1,
	1, 1, 1, 6, 2, 1, 5, 1, 1, 1,
	1, 2, 2, 3, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 357, -4, -20, -22, -28, -29,
	-49, -36, -37, -38, -48, -44, -50, -51, -52, -53,
	-45, -59, -58, -60, -63, -61, -54, -55, -64, -72,
	-92, -93, -94, -95, -5, -6, -7, -8, 23, 34,
	-23, -24, -25, -26, 47, 67, -30, -31, -32, -33,
	69, -34, -35, 90, -312, 94, -39, -40, -41, -43,
	-42, 98, 105, 107, 125, 134, 214, 220, 240, 242,
	244, 251, -102, -104, 238, -56, -57, -65, -66, -67,
	-68, -96, 262, -73, -74, -75, -76, -77, -78, -79,
	-80, -81, -82, -83, -84, -85, -86, -87, -88, -89,
	-90, 265, -21, -27, -62, 303, -9, -10, -13, -12,
	-11, -16, -18, -15, -17, -19, -14, -310, -105, -103,
	354, 239, 312, 35, 274, 61, 101, 246, 328, 335,
	-108, -106, -107, -109, 255, 320, 284, 358, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 2, 284, 323, 83, 141, -328, 2, -160, 284,
	83, -136, -127, 347, 4, -289, -291, 20, 21, 23,
	33, 34, 35, 40, 44, 47, 48, 55, 60, 61,
	62, 64, 66, 67, 68, 71, 72, 73, 81, 82,
	84, 86, 90, 92, 94, 97, 98, 100, 105, 106,
	107, 113, 114, 119, 121, 126, 132, 133, 134, 135,
	142, 145, 147, 140, 157, 158, 159, 161, 162, 163,
	166, 165, 170, 173, 176, 178, 179, 180, 183, 181,
	185, 186, 188, 187, 193, 195, 196, 198, 201, 204,
	207, 210, 211, 212, 213, 214, 216, 218, 220, 222,
	223, 224, 225, 226, 228, 229, 231, 232, 233, 234,
	235, 238, 236, 237, 239, 240, 241, 242, 244, 246,
	247, 249, 263, 264, 275, 251, 252, 253, 254, 258,
	256, 259, 260, 262, 265, 267, 270, 273, 274, 276,
	279, 280, 277, 272, 283, 285, 286, 287, 288, 289,
	290, 291, 298, 299, 303, 304, 305, 306, 309, 310,
	311, 312, 314, 317, 318, 319, 324, 329, 330, 331,
	332, 333, 28, 36, 37, 38, 39, 41, 42, 45,
	46, 51, 52, 53, 56, 85, 87, 88, 104, 108,
	109, 115, 116, 117, 127, 129, 136, 137, 146, 148,
	149, 150, 151, 152, 154, 168, 182, 192, 194, 205,
	209, 217, 219, 227, 248, 257, 268, 269, 278, 281,
	293, 294, 295, 300, 301, 316, 320, 321, 357, 357,
	357, 357, 2, 158, 224, 299, 259, -135, -127, 83,
	357, 357, 357, 357, 284, 2, 313, 323, -191, 83,
	308, 357, 357, -127, 220, 22, 2, 92, 145, 311,
	310, 22, 216, 256, 286, 288, 2, 357, 357, 357,
	357, 357, 2, 323, 284, 141, 83, 313, -127, 2,
	-47, 2, 354, -46, -4, -29, -38, -48, -44, -20,
	-22, -36, -52, -51, -53, -55, -59, -58, -61, -65,
	-66, -72, -94, -95, 262, -332, 2, 22, -333, -334,
	69, 98, 125, 255, 145, 92, 310, 284, 2, 158,
	2, -127, 2, -328, 2, 158, 2, -332, 2, -127,
	2, -131, 2, 251, -127, 357, 357, 357, 357, 357,
	173, 55, 248, 259, -70, 299, -69, 293, -281, -71,
	2, -161, 183, -127, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 2, -91, 259, 34, 55, 22, 60, 84, 126,
	141, 142, 162, 65, 66, 223, 173, 159, 298, 163,
	260, 285, 299, 69, 314, 289, 106, 4, 83, 183,
	261, 293, 357, 357, 357, -336, 2, 284, -103, -105,
	-104, -149, -150, 307, 153, 103, 203, -102, -104, 2,
	-310, -91, 259, 2, 55, 22, -279, 2, -241, 199,
	-218, 89, -220, 345, 346, 340, 189, 334, -232, -222,
	-235, 104, 248, 354, -135, -221, 360, 9, -307, -104,
	29, -233, -234, 49, -127, 7, 8, 5, 6, -133,
	-259, -228, -268, 302, 110, 191, -305, -306, 4, -289,
	-283, -260, -270, -264, -267, 154, 58, 75, 76, 79,
	77, 80, 261, 313, 50, 28, 108, 109, 209, 217,
	281, 300, 301, 136, 192, 137, 56, 127, 168, 97,
	37, 39, 41, 42, 51, 52, 85, 87, 88, 115,
	116, 117, 146, 148, 149, 150, 151, 152, 194, 227,
	268, 278, 294, 295, 321, -290, -271, -272, -265, -266,
	70, 124, 144, 138, 156, 160, 169, 171, 184, 206,
	208, 245, 266, -273, -337, 2, 299, 299, 2, -337,
	2, -337, 2, -130, 2, 299, 296, -313, 228, -309,
	-127, -313, 357, 357, 359, 357, -146, -147, 2, 22,
	95, -173, 2, 354, -248, 2, 352, -250, -135, -104,
	-249, 354, 200, -3, 2, -250, 136, -135, 2, -250,
	136, -135, 2, -127, 2, -138, 136, -135, 296, 359,
	-160, -153, -127, -212, -211, 356, -218, 2, -218, 2,
	-218, 2, -218, 2, 123, 354, -170, -171, -211, -212,
	2, -161, 136, -127, 2, -161, 2, 141, -127, 136,
	2, -127, 22, 123, 2, 155, 2, 155, 2, -251,
	2, -250, -162, 136, 2, -161, -162, 136, 2, -139,
	136, 2, -138, -127, 136, 2, -153, 136, 2, -187,
	354, -256, 2, -255, -284, 4, -289, -291, -290, 320,
	58, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 259, 199, 359, -161, -218, -230, 354,
	123, -218, 199, -127, 2, 263, 2, 354, -70, 53,
	299, -205, 2, -206, -124, -125, -126, 157, 222, 226,
	333, 296, 339, 123, -279, -164, 356, -91, 2, -287,
	2, -285, 9, -284, 5, 263, 2, 223, 260, 55,
	123, 2, 2, -329, 2, 199, 123, 2, 123, 2,
	123, 2, 123, 2, 123, 2, 2, 223, 260, 2,
	120, 2, 298, 2, 2, 123, 2, 157, 222, 275,
	2, 284, 323, 2, 123, 123, 333, 2, -176, -250,
	-149, -150, -175, -194, -195, 172, 112, 197, -178, 22,
	95, -178, -178, 44, 355, 355, -91, 263, 2, 10,
	11, 57, 33, 345, 346, 347, 348, 118, 349, 350,
	343, 344, 342, 337, 338, 339, 63, 177, 250, 13,
	14, 15, 26, 202, 171, 334, 138, 266, 340, 16,
	17, 18, 156, 36, 139, -132, -140, -218, -218, -218,
	-218, -218, 208, -169, -213, 352, -104, 354, 354, -104,
	-218, -163, 354, 7, -104, -227, 352, -236, -218, -170,
	354, 5, 354, 5, -314, 329, 120, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 219, -277, 324, -277,
	-277, -261, 354, -261, -262, 354, -261, 330, 335, 354,
	-204, -205, -204, 296, -131, 359, -313, -154, 354, -173,
	-165, -252, -218, 347, -165, -172, -241, 70, -181, 160,
	184, 124, 169, 245, 144, 7, -47, -215, 360, 354,
	347, -245, 335, -104, -249, 354, -248, -135, 354, -114,
	236, -113, 21, 23, 98, 318, 104, 272, 290, 252,
	236, 104, 236, 272, 290, 252, 236, 104, 360, -287,
	-136, 359, -282, 347, 4, -289, -291, -290, -292, 22,
	24, 25, 26, 27, 29, 30, 31, 32, 43, 49,
	50, 54, 57, 59, 65, 69, 74, 75, 77, 76,
	78, 79, 80, 89, 91, 93, 95, 96, 99, 101,
	103, 110, 111, 112, 120, 122, 123, 125, 128, 130,
	139, 141, 143, 153, 155, 164, 167, 172, 174, 175,
	189, 190, 191, 197, 199, 200, 202, 203, 215, 221,
	230, 243, 255, 261, 271, 282, 284, 292, 296, 297,
	302, 307, 308, 313, 315, 322, 323, 325, 326, 327,
	328, 276, 355, -159, -135, -171, 354, -148, 189, -123,
	-311, 328, -148, 354, -128, 136, 2, -127, -311, 189,
	-251, -137, -135, -137, 262, -127, 30, -116, 359, 48,
	241, 104, -116, 104, -116, 359, 104, -116, 104, 104,
	-163, -218, 355, 359, -328, -334, 69, 354, 30, -229,
	-257, -258, -260, -269, -263, -267, -268, 40, 46, 45,
	291, 182, 257, 269, 316, 38, 198, 147, 146, 148,
	149, 150, 151, 152, 268, 37, 227, 116, 117, 115,
	97, 88, 87, 194, 42, 41, -271, -272, -265, -266,
	85, 294, 295, 154, 39, 52, 51, 321, 278, -288,
	-287, -328, -281, -163, 30, -205, 2, -338, 359, 170,
	-142, 176, 188, 132, 200, 331, -286, 5, 4, -228,
	-242, 89, 173, -268, 8, 346, -278, 7, 345, -280,
	-279, -280, 73, 356, -282, -161, 22, 264, 2, -281,
	-331, 120, -328, -281, -281, -281, -281, -281, 259, -47,
	120, -127, 170, -281, 2, -281, 2, 284, 141, 284,
	-116, 359, -175, -195, -194, -197, -218, 22, -200, 114,
	185, -218, -220, -103, -103, -103, -151, -246, -218, 221,
	141, -281, -275, -257, -274, 232, 233, 231, 235, 234,
	-257, -282, 293, -218, -218, -218, -218, -218, -218, -218,
	-218, -218, -218, -218, -218, -218, -218, -218, -218, -218,
	-218, -218, -218, -218, -218, 171, 138, 266, 36, 139,
	-218, 296, -218, -218, -218, -218, 181, 189, 191, 302,
	110, 309, 95, 195, -340, 282, 32, -225, -104, 354,
	-240, 27, 271, 22, -232, 248, 354, -213, -218, -214,
	-163, 355, 355, 359, -163, -231, 353, -227, -239, -238,
	325, 355, -163, 322, 22, 95, 347, 2, 7, -188,
	332, 180, 86, 133, 179, -189, 254, -315, 113, 128,
	354, 355, 2, 355, 2, 355, 2, 355, 2, -218,
	-218, -182, 2, -276, -163, 4, 332, 180, 86, 133,
	179, 254, -182, 2, -183, 2, -218, -163, -184, -219,
	-220, 345, 346, 340, 354, 248, -185, 2, -218, -163,
	-218, 43, 167, 297, -186, -218, 123, -163, -218, -218,
	-218, -163, -163, 2, -163, 2, 354, 7, 7, 293,
	293, 7, -131, -309, 30, -153, -156, 359, 123, 30,
	4, -156, 359, 355, 160, 160, -248, -181, 160, -179,
	206, -179, -179, -326, 354, 353, -245, -282, 352, 361,
	-163, 2, -244, -243, 30, -127, 204, 355, -135, 359,
	296, -192, 65, 59, -208, 136, 59, -293, -127, 65,
	-294, 54, 308, 221, 122, -192, 65, -192, 65, 65,
	-250, 33, -61, 123, 296, -250, 296, 33, -61, 123,
	296, -138, -282, -254, 336, -127, 123, 355, 359, -143,
	-153, -144, -127, -209, -208, -295, -296, -293, 141, 308,
	111, 30, 104, 213, 30, 199, 189, -119, 287, 104,
	-210, 326, -201, -61, 354, 89, 30, -201, -166, -167,
	-253, -168, -135, 354, -127, -161, -162, -162, -138, -139,
	-127, -153, 355, 359, -47, -255, 296, 315, -144, -46,
	355, 359, -155, 29, 352, -188, 354, -254, 359, 123,
	339, 296, 355, 299, -206, -141, 226, 270, 237, 258,
	8, 7, 7, 359, -282, -330, -127, 259, -47, -135,
	-138, -135, -250, -198, -278, 354, 346, -199, 248, 249,
	359, -112, 31, 93, 161, -135, 333, -218, -218, 296,
	-340, 282, -225, -218, 181, 191, 302, 110, 309, 95,
	195, 123, 354, -219, -219, -163, -222, 354, -163, 353,
	363, 355, -218, 353, 353, 359, -237, -238, 99, -218,
	-150, 359, -149, -218, -163, -163, 355, 355, 296, 296,
	296, 296, 354, -320, 207, 354, 354, -218, 30, 359,
	355, 123, 355, 355, -190, 215, 355, 10, 11, 345,
	346, 347, 348, 118, 349, 350, 343, 344, 342, 337,
	338, 339, 63, 177, 250, 13, 14, 15, 156, 139,
	-219, -219, -219, -163, 354, 355, -223, -224, 123, 120,
	30, -186, -186, -186, 355, 123, -163, 359, 359, 359,
	355, 355, 355, 7, 355, 359, 355, 333, 333, 355,
	354, 355, -210, -252, -158, 2, -248, -282, -210, -241,
	-248, -248, -180, 315, 199, 160, -248, -243, 355, -327,
	7, -245, -244, 7, -217, -216, 121, 187, 355, -127,
	354, -245, 355, -113, -135, -127, -127, 189, -208, 136,
	-118, 189, -257, -127, 354, 354, 161, 161, -127, -127,
	136, -127, 136, -127, -127, -114, 236, -61, 354, -135,
	236, -127, -61, 354, -127, 236, -97, 135, 195, 276,
	123, -135, 355, 355, 359, -128, 141, -128, -61, -161,
	5, -61, -135, 104, -120, 100, -339, 339, -127, -196,
	-194, -218, -177, -203, 243, 199, -159, 320, -127, -177,
	-157, 359, 123, 339, -159, -116, -116, -116, -116, -218,
	-330, -287, 355, -257, 352, 353, 7, 7, -100, 328,
	-287, -330, -279, -279, -124, 306, 62, 226, -279, 359,
	-199, -218, -246, -135, 360, -218, -218, -219, -219, 123,
	354, -218, -229, 26, 26, 355, -163, 355, 359, -214,
	-218, 355, -227, 101, -218, 292, 355, 322, -150, -150,
	-150, 5, 180, 133, 179, -189, 179, -189, -189, 7,
	-321, -127, 354, 326, -149, 355, -275, -257, -218, -223,
	-218, -275, -257, -219, -219, -219, -219, -219, -219, -219,
	-219, -219, -219, -219, -219, -219, -219, -219, -219, -219,
	-219, -219, 95, 189, 195, -219, 359, -163, 355, -224,
	-223, -218, -218, -257, 355, 355, 355, -163, -218, -218,
	-218, 355, 7, -46, -174, 128, -254, 359, -174, -180,
	354, -218, -248, 353, 355, 359, -244, 353, 359, 362,
	339, -245, 354, -153, -243, 296, 296, 104, 189, 317,
	-297, -294, -218, -152, -247, -127, -308, 354, -305, -306,
	-133, 354, 354, -111, 98, 262, -193, 104, -116, 104,
	-116, 296, -192, 65, -163, 296, -163, 296, -100, 123,
	283, 276, -145, 140, -209, 354, -128, 354, 354, -148,
	354, -127, -121, 166, -339, -285, -311, -177, -177, -165,
	190, 64, 355, -210, -167, -158, -241, 355, -101, 71,
	-101, 7, 353, 355, -99, 201, -98, -127, 5, -127,
	200, 355, -112, -282, 26, 26, -218, -229, 355, -218,
	-218, 355, -218, 353, -218, 5, -218, 355, 355, 355,
	355, -322, -127, -218, 355, 355, 355, -224, 123, 95,
	195, 354, -218, 355, 355, 359, 355, 355, 355, 355,
	-226, 130, 44, -248, -226, -153, -215, 7, -216, -282,
	352, -244, -153, 355, -127, -127, -208, 104, -298, 65,
	-299, 57, 111, 69, 189, 191, 308, 221, 54, 89,
	230, 355, 355, 359, -134, -170, 57, -134, -218, 354,
	-152, -153, 189, 89, 189, 89, 82, 304, -127, -127,
	-135, -127, -127, 355, -135, 355, -127, -288, 293, 139,
	-152, 354, -153, -143, 30, -152, 199, -122, 165, -339,
	-285, -119, -202, 354, 199, -61, -177, 339, 82, 82,
	353, 359, 354, 339, 339, -112, -218, -218, 355, 355,
	-150, -316, 212, 355, -219, 123, 354, -229, 355, -218,
	-317, 327, -218, -163, -317, 355, -245, 7, 355, -208,
	-127, -282, -127, 111, 136, 191, 161, 354, -219, -135,
	-207, -335, 68, 280, -247, -112, -282, -112, 355, -163,
	355, 355, 191, 191, -218, -257, -116, -116, 296, 296,
	296, 296, -221, -133, -127, 210, 355, -152, 355, 355,
	-61, 355, -135, -339, -285, -120, 96, -153, 65, -173,
	-104, 354, 354, 354, -98, -99, -287, -287, 355, -150,
	44, -219, -229, 355, 355, -318, -319, -127, -244, 353,
	-299, -128, 189, -218, -129, 354, -145, 354, -134, -150,
	230, -115, 57, -127, -127, 354, 354, 354, -135, -207,
	355, -145, -207, 354, -285, -121, 310, 190, 355, -127,
	-288, -288, 355, -323, 225, 249, -163, 355, 359, 30,
	104, 355, -302, 178, -127, -153, -112, 355, -135, -110,
	315, -282, -163, -163, -163, 354, -145, -207, -145, -152,
	-122, 262, -210, 355, 355, 355, -324, -325, 36, 305,
	73, -218, -324, -319, -321, 111, -300, -303, -301, 199,
	124, 211, 267, 355, 355, -148, -218, 355, 355, -150,
	-153, -145, 355, -166, -100, -100, -325, 218, 119, 248,
	218, 119, -127, -301, 199, -303, 199, 310, 92, -302,
	355, 355, -207, -210, 26, -304, 186, 241, 48, 262,
	-304, -300, -117, 48, 241, -145, -325, 20, 191, 89,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 13, 15, 17, 18, 20, 22, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 41, 43, 44, 45,
	46, 47, 49, 51, 54, 56, 58, 60, 0, 0,
	142, 144, 146, 148, 0, 0, 159, 161, 163, 165,
	-2, 168, 170, 0, 0, 0, 181, 183, 185, 187,
	189, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	0, 0, 644, -2, 0, 286, 288, 297, 299, 301,
	303, 304, 0, 347, 349, 351, 353, 355, 357, 359,
	361, 363, 365, 367, 369, 371, 373, 375, 376, 378,
	380, 0, 565, 567, 569, -2, 63, 64, 65, 66,
	67, 73, 74, 75, 76, 69, 71, 680, -2, 691,
	0, 0, 0, -2, 0, -2, -2, -2, 0, 0,
	657, 659, 661, 663, -2, 0, 0, -2, 7, 12,
	14, 16, 19, 21, 23, 25, 27, 29, 31, 33,
	35, 37, 39, 42, 48, 50, 52, 55, 57, 59,
	61, 62, 0, 0, 0, 0, 0, 117, 270, 0,
	1246, 1173, 1179, 1180, 1204, 1205, 1206, 1223, 1224, 1225,
	1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235,
	1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245,
	1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256,
	1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266,
	1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276,
	1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286,
	1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296,
	1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306,
	1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316,
	1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326,
	1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336,
	1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346,
	1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356,
	1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366,
	1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376,
	1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386,
	1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396,
	1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406,
	1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416,
	1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426,
	1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 143, 145,
	147, 149, 150, 0, 0, 0, 0, 0, 1175, 1246,
	160, 162, 164, 166, 0, 172, 0, 0, 0, 0,
	532, 169, 171, 261, 1305, 263, 265, 0, 0, 0,
	0, 175, 176, 177, 178, 179, 180, 182, 184, 186,
	188, 190, 191, 0, 0, 0, 0, 0, 260, 258,
	213, 214, 0, 243, 244, 245, 246, 247, 249, 217,
	219, 220, 222, 224, 226, 228, 229, 231, 233, 234,
	236, 238, 239, 241, 0, 0, 267, 273, 274, 275,
	277, 278, 279, 280, 281, 282, 283, 0, 123, 0,
	453, 256, 254, 0, 119, 0, 562, 0, 269, 563,
	564, 559, 560, 1332, 588, 287, 289, 298, 300, 302,
	-2, -2, 1421, -2, 311, -2, 319, 1427, 0, 322,
	323, 326, -2, 209, 348, 350, 352, 354, 356, 358,
	360, 362, 364, 366, 368, 370, 372, 374, 377, 379,
	381, 382, 383, 0, 0, 0, 387, 0, -2, -2,
	0, 0, 0, 0, 0, -2, 0, -2, 0, 0,
	-2, -2, 0, 0, -2, 0, 0, 386, 388, 389,
	390, 0, 566, 568, 570, 0, 522, 682, -2, 655,
	656, -2, 0, 686, 686, 686, 0, 0, 656, 654,
	0, 290, 0, 292, 0, 387, 295, 296, 327, 328,
	1158, 1159, 883, 0, 0, 0, 0, 0, 0, 975,
	977, 1395, 1421, 0, 979, 980, 0, 982, 984, 985,
	0, 988, 989, 1143, 1175, 1189, 1190, 1191, 1192, 0,
	0, 1195, 0, 1197, 1198, 1199, 1043, 999, -2, -2,
	1187, 811, 812, 813, 814, -2, 1435, 1003, 1006, 1009,
	1012, 1013, 1016, 1017, 0, 1379, 1396, 1397, 1417, 1418,
	1426, 1430, 1431, 1403, 1414, 1404, 1391, 1401, 1412, 1252,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1213, 845, 846, 851, 852,
	1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445,
	1446, 1447, 1448, 854, 590, 572, 581, 590, 574, 575,
	576, 577, 578, 579, 580, 583, 0, 672, 1311, 675,
	1186, 673, 658, 660, 0, 662, 0, 0, 666, 688,
	687, 721, 722, 0, 670, 671, 681, 737, 775, 752,
	743, 0, 0, 2, 68, 0, 1403, 775, 70, 0,
	1403, 775, 72, 0, 77, 0, 1403, 1178, 0, 0,
	271, 272, 1183, 1181, 1182, 0, 151, 152, 153, 154,
	155, 156, 157, 158, 0, 0, 1176, 1152, 1150, 1151,
	167, 501, 1403, -2, 524, 501, 528, -2, 679, 1403,
	604, 262, 264, 0, 174, 0, 617, 0, 619, 0,
	634, 781, 109, 1403, 194, 207, 109, 1403, 197, 109,
	1403, 200, 1171, 109, 1403, 203, 204, 1403, 206, 257,
	0, 0, -2, 250, 252, 1214, 1215, 1216, 1217, -2,
	1435, 248, 218, 221, 223, 225, 227, 230, 232, 235,
	237, 240, 242, -2, 0, 0, 0, 452, 0, 0,
	0, 561, 0, 587, 305, 0, 308, 0, 310, 1390,
	-2, -2, 314, 591, 595, 596, 597, 0, 0, 0,
	0, 0, 0, 0, 324, 210, 0, 384, 385, 393,
	394, 124, 125, 345, 346, 0, 397, 418, 430, 0,
	0, 401, 403, 451, 405, 0, 0, 407, 0, 409,
	0, 411, 0, 413, 0, 415, 417, 419, 431, 421,
	681, 423, 0, 425, 429, 0, 434, 0, 436, 437,
	438, 0, 0, 444, 0, 0, 391, 392, 109, 779,
	-2, 0, 650, 700, 701, 0, 0, 0, 0, 684,
	685, 0, 0, 0, 646, 647, 291, 0, 294, 0,
	0, 0, 0, 1078, 1079, 1080, 1081, 1082, 1083, 1086,
	1087, 1084, 1085, 1088, 1089, 1090, 0, 0, 0, 1091,
	1092, 1093, 0, 0, 1095, 0, 1097, 0, 0, 0,
	0, 0, 0, 1157, 0, 0, 1094, 888, 889, 890,
	912, 913, 0, 976, 1154, 1147, 978, 0, 0, -2,
	1099, 0, 0, 981, 986, 987, 0, 0, 1142, -2,
	0, 1194, 0, 880, 1045, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1122, -2, 0, 0,
	0, 0, 0, 0, 0, 0, 830, 848, 859, 856,
	855, 832, 0, 831, 829, 0, 833, 0, 0, 0,
	571, -2, 573, 0, 585, 0, 674, 0, 0, 723,
	726, 1163, 1167, 1168, 726, 0, 1160, 0, 0, 0,
	0, 772, 772, 772, 770, 746, 0, 752, 0, 0,
	776, 764, 0, -2, 743, 0, 0, 777, 0, 78,
	556, 88, 0, 556, 556, 0, 0, 0, 0, 84,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 766,
	1174, 0, 1148, 1149, 1218, 1219, 1220, 1221, 1222, 1449,
	1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459,
	1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469,
	1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479,
	1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489,
	1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499,
	1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509,
	1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519,
	1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529,
	1530, 139, 0, 0, 1169, 1153, 459, 0, 0, 523,
	0, 678, 0, 0, 0, 1403, 531, 1207, 606, 0,
	785, 0, 620, 0, 0, 782, 0, 192, 0, 107,
	108, 0, 195, 0, 198, 0, 0, 201, 0, 0,
	0, 1099, 681, 0, 0, 276, 0, 0, 681, 0,
	1101, 793, 794, 795, 796, 797, 880, 800, 801, 802,
	803, 804, 805, 806, 807, 808, 809, 810, 818, 819,
	820, 821, 822, 823, 824, 825, 826, 827, 828, 842,
	0, 817, 817, 817, 834, 835, 843, 844, 849, 850,
	861, 862, 864, 866, 860, 860, 860, 857, 858, 766,
	126, 0, 0, 0, 0, -2, 316, 0, 593, 0,
	598, 336, 337, 338, 600, 601, 320, 339, 340, 341,
	342, 343, 344, 0, 518, 0, 520, 1200, 0, 317,
	329, 318, 321, 0, 211, 395, 396, 398, 399, 400,
	404, 0, 448, 406, 408, 410, 412, 414, 422, 426,
	681, 432, 435, 439, 440, 441, 442, 0, 0, 0,
	521, 0, 653, 698, 699, 704, 708, 709, 712, 715,
	716, 706, 883, 667, 668, 669, 692, 693, 543, 0,
	0, 293, 884, 789, 790, 836, 837, 838, 839, 840,
	885, 886, 0, 891, 892, 893, 894, 895, 896, 897,
	898, 899, 900, -2, -2, -2, 904, 905, 906, -2,
	-2, -2, 910, 911, -2, 1096, 1098, 0, 1157, 0,
	-2, 0, -2, -2, -2, -2, 924, 0, 926, 929,
	931, 933, 0, 0, 0, 0, 1156, 943, 1134, 0,
	0, 1075, 1076, 1077, 928, 0, 0, 1155, 1146, 0,
	0, -2, 983, 0, 0, 0, 1105, 1106, 1141, 1137,
	0, 990, 691, 0, 0, 0, 0, 997, 0, 1203,
	867, 868, 869, 870, 871, 872, 881, 1053, 0, 0,
	0, 1004, 1005, 1007, 1008, 1010, 1011, 1014, 1015, 0,
	0, 0, 1021, 0, 1109, -2, -2, -2, -2, -2,
	-2, -2, 0, 1023, 0, 1025, 1099, 1119, 0, 0,
	946, 0, 0, 0, 0, 1421, 0, 1028, 1099, 1127,
	0, 0, 0, 0, 0, 1099, 0, 1133, 0, 0,
	0, 0, 0, 1039, 0, 1041, 0, 0, 0, 0,
	0, 0, 584, 676, 0, 0, 785, 0, 0, 0,
	1166, 785, 0, 1162, 0, 0, 0, 0, 0, 767,
	771, 768, 769, 0, 0, 752, 764, 734, 0, 0,
	0, 741, 742, 763, 0, 762, 751, -2, 0, 0,
	0, 0, 0, 555, 90, 1403, 0, 111, 0, 0,
	491, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 0, 0, 0, 0, 0, 83, 0,
	0, 0, 1177, 129, 0, 1184, 0, 0, 0, 0,
	0, 458, 1183, 460, 462, 463, 464, 465, 1208, 0,
	1208, 0, 0, 0, 0, 0, 0, 608, 614, 0,
	703, 0, 632, 622, 0, 0, 0, 632, 636, 637,
	639, 640, 0, 0, 783, 208, 109, 109, 1172, 109,
	109, 205, 259, 0, 215, 251, 0, 0, 0, 253,
	255, 0, 786, 788, 0, 798, 0, 138, 0, 0,
	0, 0, 309, 0, 592, 599, 0, 333, 0, 335,
	519, 1202, 1201, 0, 212, 450, 284, 424, 427, 445,
	446, 447, 780, 0, 710, 0, 0, 707, 713, 714,
	0, 695, 541, 542, 0, 0, 0, -2, -2, 0,
	0, 0, 944, -2, 925, 927, 930, 932, 934, 0,
	0, 0, 0, 0, 0, 0, 945, 0, 0, 1144,
	1147, -2, 1100, 1103, 1104, 0, 0, 1138, 0, 0,
	0, 0, 690, 691, 691, 691, 996, 0, 0, 0,
	0, 0, 0, 998, 0, 0, 0, 0, 0, 0,
	1020, 0, 1022, 1024, 0, 0, 1026, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	949, 950, 951, 0, 0, 1027, 1125, 1126, 0, 0,
	0, 0, 0, 0, 1033, 0, 1132, 0, 0, 0,
	1037, 1038, 1040, 0, 815, 0, 841, 863, 865, 853,
	681, 1185, 718, 1164, 766, 725, 727, 1165, 718, 1161,
	754, 0, 756, 0, 0, 0, 758, 0, 747, 0,
	749, 764, 739, 0, 0, 732, 0, 731, 752, 760,
	0, 0, 778, 89, 545, 0, 0, 0, 92, 1403,
	100, 0, 473, 0, 0, 0, 0, 0, 558, 101,
	1403, 109, 1403, 109, 102, 79, 556, 80, 0, 551,
	0, 544, 81, 0, 553, 0, 138, 0, 0, 140,
	0, 1170, 467, 500, 0, 0, 1208, 0, 456, 501,
	525, 527, 0, 0, 610, 614, 0, 613, 679, 632,
	702, 784, 615, 632, 0, 0, 0, 624, 621, 618,
	785, 0, 0, 0, 0, 193, 196, 199, 202, 1100,
	266, 0, 0, 1102, 0, 791, 0, 0, 118, 0,
	127, 268, 306, 307, 312, 331, 332, 334, 330, 0,
	0, 0, 694, 543, 0, 887, -2, 0, 0, 0,
	0, -2, 0, 0, 0, 1135, 0, 1070, 0, 0,
	1146, -2, 1107, 1136, 1140, 0, 991, 0, 0, 0,
	0, 1196, 873, 874, 875, 876, 877, 878, 879, 0,
	1051, 1052, 1056, 0, 0, 1002, 0, 0, 1108, 1118,
	1120, 947, 948, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, -2, -2, -2, 965, 966, 967, -2,
	-2, -2, 0, 0, 0, 1121, 0, 0, 1073, 1123,
	1124, 1129, 1130, 0, 1030, 1031, 1032, 1131, 0, 0,
	0, 847, 0, 0, 720, 0, 724, 0, 720, 755,
	0, 774, 757, 737, 748, 0, 745, 735, 0, 736,
	0, 764, 0, 0, 744, 0, 0, 0, 0, 110,
	471, 490, 0, 0, 534, 540, 540, 0, 1000, 1001,
	0, 0, 0, 94, 0, 0, 0, 0, 98, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 116, 0,
	0, 141, 454, 0, 461, 0, 0, 0, 459, 0,
	0, 0, 612, 614, 0, 605, 606, 173, 616, 630,
	631, 629, 0, 632, 638, 635, 641, 0, 0, 120,
	0, 0, 792, 799, 136, 1295, 134, 131, 133, 285,
	705, 711, 696, 543, 0, 0, -2, 0, 937, -2,
	-2, 1069, 1100, 1145, 1139, 1193, 691, 992, 994, 995,
	882, 1058, 1055, 0, 1042, 1018, 1019, 1117, 0, 0,
	0, 0, 1100, 1072, 1029, 0, 1035, 1036, 816, 677,
	1047, 0, 0, 728, 1047, 0, 752, 750, 733, 729,
	0, 740, 0, 761, 547, 549, 91, 0, 472, 0,
	475, 0, 0, 0, 0, 481, 482, 0, 0, 0,
	0, 492, 499, 0, 543, 1188, 0, 543, 0, 0,
	0, 0, 0, 106, 0, 0, 557, 0, 109, 109,
	546, 0, 0, 0, 552, 0, 554, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 602, 614, 0,
	607, 608, 0, 0, 0, 623, 633, 0, 0, 0,
	787, 0, 0, 0, 0, 697, -2, -2, 938, 1071,
	0, 691, 0, 1044, -2, 0, 0, 0, 1074, 0,
	664, 0, 719, 717, 665, 773, 764, 0, 759, 93,
	0, 476, 477, 1208, 0, 480, 483, 0, 485, 1210,
	467, 0, 496, 497, 535, 536, 539, 537, 540, 691,
	494, 0, 95, 96, 105, 113, 97, 103, 0, 0,
	0, 0, 765, 0, 0, 0, 499, 0, 489, 467,
	457, 499, 0, 0, 609, 610, 0, 0, 0, 642,
	643, 0, 0, 0, 135, 0, 130, 132, 993, 1061,
	0, -2, 0, 973, 1034, 1046, 1048, 0, 738, 730,
	474, 478, 0, 0, 505, 0, 493, 0, 543, 0,
	0, 115, 0, 548, 550, 0, 0, 0, 0, 467,
	499, 455, 467, 0, 611, 612, 0, 626, 785, 628,
	0, 0, 137, 0, 0, 0, 1057, 974, 0, 0,
	0, 484, 510, 0, 0, 0, 538, 991, 501, 99,
	0, 112, 0, 0, 691, 0, 487, 467, 529, 0,
	603, 0, 627, 138, 138, 1054, 1059, 1062, -2, 1363,
	1243, 0, 1060, 1049, 1050, 0, 486, 506, 507, 0,
	502, 503, 504, 1209, 498, 505, 114, 85, 87, 0,
	0, 488, 499, 785, 121, 122, 0, 1064, 1065, 1066,
	1067, 1068, 479, 508, 0, 509, 0, 0, 0, 510,
	0, 470, 467, 625, 0, 511, 0, 514, 515, 0,
	512, 495, 466, 468, 469, 530, 1063, 513, 516, 517,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 343, 3, 349, 344, 3,
	354, 355, 347, 345, 359, 346, 356, 348, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 363, 358,
	337, 339, 338, 3, 360, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 352, 3, 353, 350, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 361, 342, 362, 340,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 341,
	57680, 351, 57681, 357, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:861
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:867
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:873
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:882
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:884
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 12:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:888
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 14:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:889
		{
			return helpWith(sqllex, "DELETE")
		}
	case 16:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:890
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:893
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			return helpWith(sqllex, "GRANT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:895
		{
			return helpWith(sqllex, "INSERT")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:896
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:897
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:899
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:900
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:901
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:902
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:904
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:907
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:912
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:913
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:914
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:916
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:924
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:925
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:926
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:927
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:928
		{
			return helpWith(sqllex, "ALTER")
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:963
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:974
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:985
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1005
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1009
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1013
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1019
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1025
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1031
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1037
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1043
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1063
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1067
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 90:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1074
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1079
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1094
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1103
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1116
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1126
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1136
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1139
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1155
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = nil
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1175
		{
			sqlVAL.union.val = DropCascade
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1179
		{
			sqlVAL.union.val = DropRestrict
		}
	case 109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1183
		{
			sqlVAL.union.val = DropDefault
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 111:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1193
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1198
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1199
		{
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1202
		{
			return unimplemented(sqllex, "alter using")
		}
	case 115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1203
		{
		}
	case 116:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1227
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1230
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1253
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1256
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.str = "CSV"
		}
	case 121:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1287
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1294
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1298
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1302
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1318
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1328
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1332
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1340
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1360
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1363
		{
		}
	case 139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1383
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1384
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1385
		{
			return helpWith(sqllex, "CANCEL TRANSACTION")
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1386
		{
			return helpWith(sqllex, "CANCEL SESSION")
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1387
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1395
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1398
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1409
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = &CancelTransaction{ID: sqlDollar[3].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1420
		{
			return helpWith(sqllex, "CANCEL TRANSACTION")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.union.val = &CancelSession{ID: sqlDollar[3].union.expr()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1431
		{
			return helpWith(sqllex, "CANCEL SESSION")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1440
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1441
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1442
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1443
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1445
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1446
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1447
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1448
		{
			return helpWith(sqllex, "CREATE")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1458
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1466
		{
			return helpWith(sqllex, "DELETE")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1476
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1477
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1478
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1479
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1480
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1486
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1487
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1488
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1489
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1490
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1491
		{
			return helpWith(sqllex, "DROP")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1506
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1518
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1521
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1529
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1537
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1544
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1552
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1567
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1582
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1586
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1590
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1610
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1630
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1633
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1635
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1642
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1645
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1647
		{
			return helpWith(sqllex, "DELETE")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1648
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1649
		{
			return helpWith(sqllex, "INSERT")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1650
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1652
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1653
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1655
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1658
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1659
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1661
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1662
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1669
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1670
		{ /* SKIP DOC */
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1691
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1698
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1716
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1722
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1728
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1742
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1750
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1754
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1757
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1774
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1777
		{
			return helpWith(sqllex, "GRANT")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1794
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1797
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1801
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1816
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1819
		{
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1842
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1846
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1850
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1854
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1858
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1866
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1870
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1875
		{
			return helpWith(sqllex, "RESET")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1876
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1884
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1888
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1891
		{
			return helpWith(sqllex, "RESET")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1899
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1902
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1907
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1910
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1914
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1915
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1916
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1917
		{ /* SKIP DOC */
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1918
		{ /* SKIP DOC */
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1919
		{
			return unimplemented(sqllex, "set local")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1928
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1932
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1935
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1956
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1960
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1965
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1982
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1985
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1990
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1998
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2007
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2010
		{
			return unimplemented(sqllex, "set from current")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2012
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2018
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2022
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2032
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2048
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2052
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2060
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2070
		{
			sqlVAL.union.val = Low
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2074
		{
			sqlVAL.union.val = Normal
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2078
		{
			sqlVAL.union.val = High
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2089
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2093
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2097
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2102
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2121
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2122
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2123
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2124
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2125
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2126
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2127
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2128
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2129
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2130
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2131
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2132
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2133
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2134
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2136
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2137
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2138
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2139
		{
			return helpWith(sqllex, "SHOW")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2146
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2148
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.str = "client_encoding"
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2162
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2163
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2171
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2174
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2184
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2191
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2196
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2207
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2218
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2226
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2229
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2237
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2240
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2242
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2245
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2247
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2250
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2258
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2261
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2263
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2266
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2274
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2277
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2279
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2283
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2293
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2296
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2306
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2309
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2311
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2314
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2316
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2320
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2329
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2332
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2334
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2338
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2348
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2352
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2355
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2363
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2367
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2371
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2374
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2382
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2385
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2393
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2396
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2404
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2407
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2411
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2415
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2419
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2425
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 449:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2430
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2436
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 451:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2440
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2450
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2453
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2502
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2515
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2525
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2531
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 466:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2545
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2552
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2556
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 470:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2560
		{
			sqlVAL.union.val = DropDefault
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2566
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 473:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2591
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2595
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2599
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2603
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2607
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2629
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2641
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2645
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2649
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2658
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2667
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2697
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2703
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2709
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2719
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2729
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2752
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 499:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2756
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2762
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 501:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2766
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2771
		{
			return unimplemented(sqllex, "match full")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2772
		{
			return unimplemented(sqllex, "match partial")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2773
		{
			return unimplemented(sqllex, "match simple")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2774
		{
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2780
		{
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2781
		{
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2782
		{
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2783
		{
		}
	case 510:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2784
		{
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2787
		{
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2790
		{
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2793
		{
			return unimplemented(sqllex, "no action")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2796
		{
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2797
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2798
		{
			return unimplemented(sqllex, "action set null")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2799
		{
			return unimplemented(sqllex, "action set default")
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2803
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 521:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2824
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2832
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2835
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2839
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 526:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 527:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2853
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2860
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2878
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2889
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2900
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2904
		{
			sqlVAL.union.val = true
		}
	case 533:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2908
		{
			sqlVAL.union.val = false
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2914
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2918
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2927
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2930
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2931
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2934
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 540:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2935
		{
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2939
		{
			sqlVAL.union.val = Ascending
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2943
		{
			sqlVAL.union.val = Descending
		}
	case 543:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2947
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 544:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2953
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2963
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2967
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2971
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2975
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2977
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2981
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2985
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2991
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2995
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3001
		{
			sqlVAL.union.val = true
		}
	case 556:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3005
		{
			sqlVAL.union.val = false
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3010
		{
		}
	case 558:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3011
		{
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3019
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3022
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3030
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3033
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3041
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3044
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3048
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3049
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3050
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3065
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3068
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3070
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3073
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3083
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3086
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3088
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3091
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3099
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3106
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3109
		{
		}
	case 582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3110
		{
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.str = ""
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3122
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3126
		{
			sqlVAL.str = ""
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3132
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3136
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3142
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3146
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3152
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3156
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3169
		{
		}
	case 594:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3171
		{
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3179
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3201
		{
			sqlVAL.union.val = ReadOnly
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3205
		{
			sqlVAL.union.val = ReadWrite
		}
	case 602:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3235
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 606:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.str = ""
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3249
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 608:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3253
		{
			sqlVAL.str = ""
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 610:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.str = ""
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3269
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 612:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3273
		{
			sqlVAL.str = ""
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3278
		{
		}
	case 614:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3279
		{
		}
	case 615:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3303
		{
			return helpWith(sqllex, "INSERT")
		}
	case 618:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3314
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3320
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3338
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3346
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3362
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3366
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 629:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3374
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 632:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3383
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 633:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3394
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3397
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3401
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 636:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3402
		{
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3432
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3436
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3479
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3504
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3508
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3520
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3531
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3566
		{
			return helpWith(sqllex, "SELECT")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3567
		{
			return helpWith(sqllex, "VALUES")
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3568
		{
			return helpWith(sqllex, "TABLE")
		}
	case 664:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3603
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3614
		{
			return helpWith(sqllex, "SELECT")
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3636
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3658
		{
			return helpWith(sqllex, "TABLE")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3669
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3670
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3671
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3674
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3675
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 677:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3678
		{
			return unimplemented(sqllex, "cte")
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3681
		{
		}
	case 679:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3682
		{
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3685
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3686
		{
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3689
		{
		}
	case 683:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3690
		{
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3694
		{
			sqlVAL.union.val = true
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = false
		}
	case 686:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3702
		{
			sqlVAL.union.val = false
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = true
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3713
		{
		}
	case 689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3714
		{
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3718
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3722
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3728
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3734
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3738
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3744
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3748
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3752
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3761
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3770
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3781
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3785
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3794
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3807
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3814
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3823
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3827
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 712:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3831
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3837
		{
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3838
		{
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3841
		{
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3842
		{
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3864
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3868
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3874
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3897
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3900
		{
			return helpWith(sqllex, "VALUES")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3902
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3914
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3917
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 726:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3919
		{
			sqlVAL.union.val = &From{}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3925
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3929
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3935
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3939
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3946
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3952
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3957
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3984
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3990
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 737:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3994
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 738:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4021
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4046
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4048
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4052
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 744:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4076
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.union.val = nil
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4087
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4093
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4101
		{
			sqlVAL.union.val = true
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4105
		{
			sqlVAL.union.val = false
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4137
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4141
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4145
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4151
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4155
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4170
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4176
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4186
		{
			sqlVAL.str = astFullJoin
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4190
		{
			sqlVAL.str = astLeftJoin
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4194
		{
			sqlVAL.str = astRightJoin
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4198
		{
			sqlVAL.str = astInnerJoin
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4204
		{
		}
	case 772:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4205
		{
		}
	case 773:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4216
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4220
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4226
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4230
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4234
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 778:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4238
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4244
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4261
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4269
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4275
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 785:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4279
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4291
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4305
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4313
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4324
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4335
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4337
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4340
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 799:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4348
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4350
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4354
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4358
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4362
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4366
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4370
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4374
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4378
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4386
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4390
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4411
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4420
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4434
		{
			sqlVAL.union.val = nil
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4441
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4445
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4449
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4461
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4473
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4477
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4481
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4485
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4495
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4499
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4508
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4517
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4526
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4530
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4541
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4545
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4549
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4553
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4559
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 842:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4563
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4581
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4597
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 853:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4613
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4629
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4635
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4639
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4643
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4647
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4652
		{
		}
	case 860:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4653
		{
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4658
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4662
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 863:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4666
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4670
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 865:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4674
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4685
		{
			sqlVAL.union.val = year
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4689
		{
			sqlVAL.union.val = month
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4693
		{
			sqlVAL.union.val = day
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4697
		{
			sqlVAL.union.val = hour
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4701
		{
			sqlVAL.union.val = minute
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4711
		{
			sqlVAL.union.val = month
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4715
		{
			sqlVAL.union.val = hour
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4719
		{
			sqlVAL.union.val = minute
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4723
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4727
		{
			sqlVAL.union.val = minute
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4731
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4735
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 880:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4739
		{
			sqlVAL.union.val = nil
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4745
		{
			sqlVAL.union.val = second
		}
	case 882:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4748
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4772
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4776
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4780
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4783
		{
			return unimplemented(sqllex, "at tz")
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4792
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4796
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4800
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4804
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4808
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4812
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4816
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4820
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4824
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4828
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4832
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4836
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4840
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4844
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4848
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4852
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4856
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4860
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4864
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4868
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4872
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4876
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4880
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4884
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4888
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4892
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4896
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4900
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4904
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4908
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4912
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4916
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4920
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4924
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4928
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4932
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4936
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4940
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4944
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4948
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4951
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4953
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4957
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4961
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4965
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4969
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4973
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4977
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4981
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4985
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4989
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4993
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4997
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5001
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5005
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5009
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5013
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5017
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5045
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5049
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5053
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5057
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5061
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5065
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5069
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5073
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5077
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5081
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5085
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5089
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5093
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5097
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5101
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5105
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5109
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5113
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5117
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5121
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5125
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5129
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5133
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5137
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5141
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5145
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5149
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5153
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5166
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5174
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5185
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 981:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5190
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 982:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5203
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5207
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5212
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5216
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5220
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5224
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5228
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5236
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5240
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5243
		{
			return unimplemented(sqllex, "variadic")
		}
	case 993:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5244
		{
			return unimplemented(sqllex, "variadic")
		}
	case 994:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5246
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5250
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5254
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5257
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 998:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5268
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5275
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5284
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5285
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5289
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5291
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5295
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5298
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5300
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5304
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5307
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5309
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5313
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5316
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5317
		{
			return unimplemented(sqllex, "current role")
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5319
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5323
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5326
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5328
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5332
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5336
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5340
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5344
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5347
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5349
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5352
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5354
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5357
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5359
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5363
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5366
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5367
		{
			return unimplemented(sqllex, "treat")
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5369
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5373
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5377
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5381
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5385
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5389
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5393
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5397
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5401
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5404
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5406
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5409
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5413
		{
			return unimplemented(sqllex, "within group")
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5414
		{
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5418
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5422
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5429
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5433
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5439
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5443
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5449
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5457
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5461
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5465
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5472
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5491
		{
			sqlVAL.str = ""
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5497
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5501
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5511
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5512
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5513
		{
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5516
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5517
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5523
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5524
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5525
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5526
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5527
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5538
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5542
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5546
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5552
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5556
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5562
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5568
		{
			sqlVAL.union.val = Any
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5572
		{
			sqlVAL.union.val = Some
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5576
		{
			sqlVAL.union.val = All
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5581
		{
			sqlVAL.union.val = Plus
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5582
		{
			sqlVAL.union.val = Minus
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5583
		{
			sqlVAL.union.val = Mult
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5584
		{
			sqlVAL.union.val = Div
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5585
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5586
		{
			sqlVAL.union.val = Mod
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5587
		{
			sqlVAL.union.val = Bitand
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5588
		{
			sqlVAL.union.val = Bitor
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5589
		{
			sqlVAL.union.val = Pow
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5590
		{
			sqlVAL.union.val = Bitxor
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5591
		{
			sqlVAL.union.val = LT
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5592
		{
			sqlVAL.union.val = GT
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5593
		{
			sqlVAL.union.val = EQ
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5594
		{
			sqlVAL.union.val = LE
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5595
		{
			sqlVAL.union.val = GE
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5596
		{
			sqlVAL.union.val = NE
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5600
		{
			sqlVAL.union.val = Like
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5601
		{
			sqlVAL.union.val = NotLike
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5602
		{
			sqlVAL.union.val = ILike
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5603
		{
			sqlVAL.union.val = NotILike
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5614
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5618
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5624
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5628
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5634
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5638
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5642
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5648
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5652
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5658
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5662
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5684
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5688
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5692
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5698
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5705
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5709
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5726
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5730
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5734
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5738
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5742
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5746
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5752
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5758
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5764
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5768
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5772
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5778
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5782
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5793
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5800
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5804
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5810
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5816
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5820
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5827
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5833
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5837
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5844
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5850
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5856
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5862
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5866
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5872
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5876
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5882
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5886
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5891
		{
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5892
		{
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5901
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5907
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5911
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5920
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5926
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5930
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5936
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5945
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5949
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5953
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5961
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5965
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5971
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5975
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5981
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5985
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5996
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6000
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6006
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6010
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6023
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6027
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6031
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6035
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6041
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6045
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6051
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6054
		{
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6064
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6068
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6075
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6079
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6083
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6087
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6090
		{
			return unimplemented(sqllex, "func const")
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6092
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6096
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6099
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6101
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6105
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6109
		{
			sqlVAL.union.val = DNull
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6116
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6120
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6126
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6161
		{
			sqlVAL.str = ""
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6167
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6171
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
