// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:463
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CSV = 57413
const CUBE = 57414
const CURRENT = 57415
const CURRENT_CATALOG = 57416
const CURRENT_DATE = 57417
const CURRENT_SCHEMA = 57418
const CURRENT_ROLE = 57419
const CURRENT_TIME = 57420
const CURRENT_TIMESTAMP = 57421
const CURRENT_USER = 57422
const CYCLE = 57423
const DATA = 57424
const DATABASE = 57425
const DATABASES = 57426
const DATE = 57427
const DAY = 57428
const DEC = 57429
const DECIMAL = 57430
const DEFAULT = 57431
const DEALLOCATE = 57432
const DEFERRABLE = 57433
const DELETE = 57434
const DESC = 57435
const DISCARD = 57436
const DISTINCT = 57437
const DO = 57438
const DOUBLE = 57439
const DROP = 57440
const ELSE = 57441
const ENCODING = 57442
const END = 57443
const ESCAPE = 57444
const EXCEPT = 57445
const EXISTS = 57446
const EXECUTE = 57447
const EXPERIMENTAL_FINGERPRINTS = 57448
const EXPLAIN = 57449
const EXTRACT = 57450
const EXTRACT_DURATION = 57451
const FALSE = 57452
const FAMILY = 57453
const FETCH = 57454
const FILTER = 57455
const FIRST = 57456
const FLOAT = 57457
const FLOAT4 = 57458
const FLOAT8 = 57459
const FLOORDIV = 57460
const FOLLOWING = 57461
const FOR = 57462
const FORCE_INDEX = 57463
const FOREIGN = 57464
const FROM = 57465
const FULL = 57466
const FUNCTION = 57467
const GRANT = 57468
const GRANTS = 57469
const GREATEST = 57470
const GROUP = 57471
const GROUPING = 57472
const HAVING = 57473
const HELP = 57474
const HIGH = 57475
const HOUR = 57476
const IMPORT = 57477
const INCREMENTAL = 57478
const IF = 57479
const IFNULL = 57480
const ILIKE = 57481
const IN = 57482
const INTERLEAVE = 57483
const INDEX = 57484
const INDEXES = 57485
const INITIALLY = 57486
const INNER = 57487
const INSERT = 57488
const INT = 57489
const INT2VECTOR = 57490
const INT2 = 57491
const INT4 = 57492
const INT8 = 57493
const INT64 = 57494
const INTEGER = 57495
const INTERSECT = 57496
const INTERVAL = 57497
const INTO = 57498
const IS = 57499
const ISOLATION = 57500
const JOB = 57501
const JOBS = 57502
const JOIN = 57503
const KEY = 57504
const KEYS = 57505
const KV = 57506
const LATERAL = 57507
const LC_CTYPE = 57508
const LC_COLLATE = 57509
const LEADING = 57510
const LEAST = 57511
const LEFT = 57512
const LEVEL = 57513
const LIKE = 57514
const LIMIT = 57515
const LOCAL = 57516
const LOCALTIME = 57517
const LOCALTIMESTAMP = 57518
const LOW = 57519
const LSHIFT = 57520
const MATCH = 57521
const MINUTE = 57522
const MONTH = 57523
const NAN = 57524
const NAME = 57525
const NAMES = 57526
const NATURAL = 57527
const NEXT = 57528
const NO = 57529
const NO_INDEX_JOIN = 57530
const NORMAL = 57531
const NOT = 57532
const NOTHING = 57533
const NULL = 57534
const NULLIF = 57535
const NULLS = 57536
const NUMERIC = 57537
const OF = 57538
const OFF = 57539
const OFFSET = 57540
const OID = 57541
const ON = 57542
const ONLY = 57543
const OPTIONS = 57544
const OR = 57545
const ORDER = 57546
const ORDINALITY = 57547
const OUT = 57548
const OUTER = 57549
const OVER = 57550
const OVERLAPS = 57551
const OVERLAY = 57552
const PARENT = 57553
const PARTIAL = 57554
const PARTITION = 57555
const PASSWORD = 57556
const PAUSE = 57557
const PLACING = 57558
const PLANS = 57559
const POSITION = 57560
const PRECEDING = 57561
const PRECISION = 57562
const PREPARE = 57563
const PRIMARY = 57564
const PRIORITY = 57565
const PROCEDURE = 57566
const QUERIES = 57567
const QUERY = 57568
const RANGE = 57569
const READ = 57570
const REAL = 57571
const RECURSIVE = 57572
const REF = 57573
const REFERENCES = 57574
const REGCLASS = 57575
const REGPROC = 57576
const REGPROCEDURE = 57577
const REGNAMESPACE = 57578
const REGTYPE = 57579
const RENAME = 57580
const REPEATABLE = 57581
const RELEASE = 57582
const RESET = 57583
const RESTORE = 57584
const RESTRICT = 57585
const RESUME = 57586
const RETURNING = 57587
const REVOKE = 57588
const RIGHT = 57589
const ROLLBACK = 57590
const ROLLUP = 57591
const ROW = 57592
const ROWS = 57593
const RSHIFT = 57594
const SAVEPOINT = 57595
const SCATTER = 57596
const SEARCH = 57597
const SECOND = 57598
const SELECT = 57599
const SEQUENCES = 57600
const SERIAL = 57601
const SERIALIZABLE = 57602
const SESSION = 57603
const SESSIONS = 57604
const SESSION_USER = 57605
const SET = 57606
const SETTING = 57607
const SETTINGS = 57608
const SHOW = 57609
const SIMILAR = 57610
const SIMPLE = 57611
const SMALLINT = 57612
const SMALLSERIAL = 57613
const SNAPSHOT = 57614
const SOME = 57615
const SPLIT = 57616
const SQL = 57617
const START = 57618
const STATUS = 57619
const STDIN = 57620
const STRICT = 57621
const STRING = 57622
const STORE = 57623
const STORING = 57624
const SUBSTRING = 57625
const SYMMETRIC = 57626
const SYSTEM = 57627
const TABLE = 57628
const TABLES = 57629
const TEMP = 57630
const TEMPLATE = 57631
const TEMPORARY = 57632
const TESTING_RANGES = 57633
const TESTING_RELOCATE = 57634
const TEXT = 57635
const THEN = 57636
const TIME = 57637
const TIMESTAMP = 57638
const TIMESTAMPTZ = 57639
const TO = 57640
const TRAILING = 57641
const TRACE = 57642
const TRANSACTION = 57643
const TREAT = 57644
const TRIM = 57645
const TRUE = 57646
const TRUNCATE = 57647
const TYPE = 57648
const UNBOUNDED = 57649
const UNCOMMITTED = 57650
const UNION = 57651
const UNIQUE = 57652
const UNKNOWN = 57653
const UPDATE = 57654
const UPSERT = 57655
const USE = 57656
const USER = 57657
const USERS = 57658
const USING = 57659
const UUID = 57660
const VALID = 57661
const VALIDATE = 57662
const VALUE = 57663
const VALUES = 57664
const VARCHAR = 57665
const VARIADIC = 57666
const VIEW = 57667
const VARYING = 57668
const WHEN = 57669
const WHERE = 57670
const WINDOW = 57671
const WITH = 57672
const WITHIN = 57673
const WITHOUT = 57674
const WRITE = 57675
const YEAR = 57676
const ZONE = 57677
const NOT_LA = 57678
const WITH_LA = 57679
const AS_LA = 57680
const POSTFIXOP = 57681
const UMINUS = 57682
const HELPTOKEN = 57683

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURE",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6523

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	360, 54,
	-2, 668,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 48,
	142, 518,
	-2, 0,
	-1, 63,
	92, 668,
	146, 668,
	312, 668,
	313, 668,
	-2, 0,
	-1, 74,
	103, 643,
	112, 643,
	154, 643,
	173, 643,
	198, 643,
	204, 643,
	309, 643,
	-2, 632,
	-1, 105,
	4, 670,
	20, 670,
	21, 670,
	23, 670,
	28, 670,
	33, 670,
	34, 670,
	35, 670,
	36, 670,
	37, 670,
	38, 670,
	39, 670,
	40, 670,
	41, 670,
	42, 670,
	44, 670,
	45, 670,
	46, 670,
	47, 670,
	48, 670,
	51, 670,
	52, 670,
	53, 670,
	55, 670,
	56, 670,
	60, 670,
	61, 670,
	62, 670,
	64, 670,
	66, 670,
	67, 670,
	68, 670,
	71, 670,
	72, 670,
	73, 670,
	81, 670,
	82, 670,
	83, 670,
	84, 670,
	85, 670,
	86, 670,
	87, 670,
	88, 670,
	90, 670,
	92, 670,
	94, 670,
	97, 670,
	98, 670,
	100, 670,
	104, 670,
	105, 670,
	106, 670,
	107, 670,
	108, 670,
	109, 670,
	113, 670,
	114, 670,
	115, 670,
	116, 670,
	117, 670,
	119, 670,
	121, 670,
	125, 670,
	127, 670,
	128, 670,
	130, 670,
	132, 670,
	133, 670,
	134, 670,
	135, 670,
	136, 670,
	137, 670,
	138, 670,
	141, 670,
	143, 670,
	146, 670,
	147, 670,
	148, 670,
	149, 670,
	150, 670,
	151, 670,
	152, 670,
	153, 670,
	155, 670,
	158, 670,
	159, 670,
	160, 670,
	162, 670,
	163, 670,
	164, 670,
	166, 670,
	167, 670,
	169, 670,
	171, 670,
	174, 670,
	177, 670,
	179, 670,
	180, 670,
	181, 670,
	182, 670,
	183, 670,
	184, 670,
	186, 670,
	187, 670,
	188, 670,
	189, 670,
	193, 670,
	194, 670,
	195, 670,
	196, 670,
	197, 670,
	199, 670,
	201, 670,
	202, 670,
	205, 670,
	206, 670,
	208, 670,
	210, 670,
	211, 670,
	212, 670,
	213, 670,
	214, 670,
	215, 670,
	217, 670,
	218, 670,
	219, 670,
	220, 670,
	221, 670,
	223, 670,
	224, 670,
	225, 670,
	226, 670,
	227, 670,
	228, 670,
	229, 670,
	230, 670,
	231, 670,
	233, 670,
	234, 670,
	235, 670,
	236, 670,
	237, 670,
	238, 670,
	239, 670,
	240, 670,
	241, 670,
	242, 670,
	243, 670,
	244, 670,
	246, 670,
	248, 670,
	249, 670,
	250, 670,
	251, 670,
	253, 670,
	254, 670,
	255, 670,
	256, 670,
	258, 670,
	259, 670,
	260, 670,
	261, 670,
	262, 670,
	264, 670,
	265, 670,
	266, 670,
	267, 670,
	269, 670,
	270, 670,
	271, 670,
	272, 670,
	274, 670,
	275, 670,
	276, 670,
	277, 670,
	278, 670,
	279, 670,
	280, 670,
	281, 670,
	282, 670,
	283, 670,
	285, 670,
	287, 670,
	288, 670,
	289, 670,
	290, 670,
	291, 670,
	292, 670,
	293, 670,
	295, 670,
	296, 670,
	297, 670,
	300, 670,
	301, 670,
	302, 670,
	303, 670,
	305, 670,
	306, 670,
	307, 670,
	308, 670,
	311, 670,
	312, 670,
	313, 670,
	314, 670,
	316, 670,
	318, 670,
	319, 670,
	320, 670,
	321, 670,
	322, 670,
	323, 670,
	326, 670,
	331, 670,
	332, 670,
	333, 670,
	334, 670,
	335, 670,
	-2, 0,
	-1, 118,
	103, 642,
	112, 642,
	154, 642,
	173, 642,
	198, 642,
	204, 642,
	309, 642,
	-2, 635,
	-1, 122,
	1, 567,
	158, 567,
	223, 567,
	228, 567,
	359, 567,
	360, 567,
	-2, 0,
	-1, 124,
	1, 567,
	359, 567,
	360, 567,
	-2, 0,
	-1, 125,
	1, 567,
	359, 567,
	360, 567,
	-2, 0,
	-1, 126,
	1, 571,
	359, 571,
	360, 571,
	-2, 0,
	-1, 133,
	4, 676,
	5, 676,
	6, 676,
	7, 676,
	8, 676,
	9, 676,
	20, 676,
	21, 676,
	23, 676,
	28, 676,
	29, 676,
	33, 676,
	34, 676,
	35, 676,
	36, 676,
	37, 676,
	38, 676,
	39, 676,
	40, 676,
	41, 676,
	42, 676,
	44, 676,
	45, 676,
	46, 676,
	47, 676,
	48, 676,
	49, 676,
	50, 676,
	51, 676,
	52, 676,
	53, 676,
	55, 676,
	56, 676,
	58, 676,
	60, 676,
	61, 676,
	62, 676,
	64, 676,
	66, 676,
	67, 676,
	68, 676,
	70, 676,
	71, 676,
	72, 676,
	73, 676,
	75, 676,
	76, 676,
	77, 676,
	79, 676,
	80, 676,
	81, 676,
	82, 676,
	83, 676,
	84, 676,
	85, 676,
	86, 676,
	87, 676,
	88, 676,
	90, 676,
	92, 676,
	94, 676,
	97, 676,
	98, 676,
	100, 676,
	104, 676,
	105, 676,
	106, 676,
	107, 676,
	108, 676,
	109, 676,
	110, 676,
	113, 676,
	114, 676,
	115, 676,
	116, 676,
	117, 676,
	119, 676,
	121, 676,
	124, 676,
	125, 676,
	127, 676,
	128, 676,
	130, 676,
	132, 676,
	133, 676,
	134, 676,
	135, 676,
	136, 676,
	137, 676,
	138, 676,
	139, 676,
	141, 676,
	143, 676,
	145, 676,
	146, 676,
	147, 676,
	148, 676,
	149, 676,
	150, 676,
	151, 676,
	152, 676,
	153, 676,
	155, 676,
	157, 676,
	158, 676,
	159, 676,
	160, 676,
	161, 676,
	162, 676,
	163, 676,
	164, 676,
	166, 676,
	167, 676,
	169, 676,
	170, 676,
	171, 676,
	172, 676,
	174, 676,
	177, 676,
	179, 676,
	180, 676,
	181, 676,
	182, 676,
	183, 676,
	184, 676,
	185, 676,
	186, 676,
	187, 676,
	188, 676,
	189, 676,
	190, 676,
	192, 676,
	193, 676,
	194, 676,
	195, 676,
	196, 676,
	197, 676,
	199, 676,
	202, 676,
	205, 676,
	206, 676,
	207, 676,
	208, 676,
	209, 676,
	210, 676,
	211, 676,
	212, 676,
	213, 676,
	214, 676,
	215, 676,
	217, 676,
	218, 676,
	219, 676,
	220, 676,
	221, 676,
	223, 676,
	224, 676,
	225, 676,
	226, 676,
	227, 676,
	228, 676,
	229, 676,
	230, 676,
	231, 676,
	233, 676,
	234, 676,
	235, 676,
	236, 676,
	237, 676,
	238, 676,
	239, 676,
	240, 676,
	241, 676,
	242, 676,
	243, 676,
	244, 676,
	246, 676,
	247, 676,
	248, 676,
	249, 676,
	250, 676,
	251, 676,
	253, 676,
	254, 676,
	255, 676,
	256, 676,
	258, 676,
	259, 676,
	260, 676,
	261, 676,
	262, 676,
	263, 676,
	264, 676,
	265, 676,
	266, 676,
	267, 676,
	268, 676,
	269, 676,
	270, 676,
	271, 676,
	272, 676,
	274, 676,
	275, 676,
	276, 676,
	277, 676,
	278, 676,
	279, 676,
	280, 676,
	281, 676,
	282, 676,
	283, 676,
	285, 676,
	287, 676,
	288, 676,
	289, 676,
	290, 676,
	291, 676,
	292, 676,
	293, 676,
	295, 676,
	296, 676,
	297, 676,
	300, 676,
	301, 676,
	302, 676,
	303, 676,
	304, 676,
	305, 676,
	306, 676,
	307, 676,
	308, 676,
	311, 676,
	312, 676,
	313, 676,
	314, 676,
	315, 676,
	316, 676,
	318, 676,
	319, 676,
	320, 676,
	321, 676,
	322, 676,
	323, 676,
	326, 676,
	331, 676,
	332, 676,
	333, 676,
	334, 676,
	335, 676,
	336, 676,
	342, 676,
	347, 676,
	348, 676,
	349, 676,
	356, 676,
	362, 676,
	-2, 0,
	-1, 136,
	1, 54,
	360, 54,
	-2, 668,
	-1, 409,
	1, 588,
	355, 588,
	357, 588,
	359, 588,
	360, 588,
	-2, 0,
	-1, 410,
	1, 590,
	355, 590,
	357, 590,
	359, 590,
	360, 590,
	-2, 0,
	-1, 603,
	123, 1265,
	298, 1265,
	341, 1265,
	358, 1265,
	-2, 0,
	-1, 604,
	123, 1216,
	298, 1216,
	341, 1216,
	358, 1216,
	-2, 0,
	-1, 606,
	123, 1324,
	298, 1324,
	341, 1324,
	358, 1324,
	-2, 0,
	-1, 608,
	123, 1346,
	298, 1346,
	341, 1346,
	358, 1346,
	-2, 0,
	-1, 615,
	1, 304,
	359, 304,
	360, 304,
	-2, 1270,
	-1, 641,
	1, 386,
	355, 386,
	357, 386,
	359, 386,
	360, 386,
	-2, 0,
	-1, 642,
	1, 434,
	120, 434,
	355, 434,
	357, 434,
	359, 434,
	360, 434,
	-2, 0,
	-1, 648,
	1, 400,
	355, 400,
	357, 400,
	359, 400,
	360, 400,
	-2, 0,
	-1, 650,
	1, 404,
	355, 404,
	357, 404,
	359, 404,
	360, 404,
	-2, 0,
	-1, 653,
	1, 412,
	355, 412,
	357, 412,
	359, 412,
	360, 412,
	-2, 0,
	-1, 654,
	1, 417,
	355, 417,
	357, 417,
	359, 417,
	360, 417,
	-2, 0,
	-1, 657,
	1, 427,
	355, 427,
	357, 427,
	359, 427,
	360, 427,
	-2, 0,
	-1, 666,
	112, 678,
	173, 678,
	198, 678,
	-2, 638,
	-1, 669,
	112, 677,
	173, 677,
	198, 677,
	-2, 636,
	-1, 799,
	356, 1194,
	-2, 1187,
	-1, 800,
	356, 1195,
	-2, 1188,
	-1, 806,
	5, 851,
	356, 851,
	-2, 1397,
	-1, 831,
	5, 810,
	-2, 1367,
	-1, 832,
	5, 845,
	356, 845,
	-2, 1369,
	-1, 833,
	5, 820,
	-2, 1370,
	-1, 834,
	5, 819,
	-2, 1371,
	-1, 835,
	5, 845,
	356, 845,
	-2, 1374,
	-1, 836,
	5, 845,
	356, 845,
	-2, 1375,
	-1, 837,
	5, 846,
	-2, 1378,
	-1, 838,
	5, 802,
	-2, 1379,
	-1, 839,
	5, 802,
	-2, 1380,
	-1, 840,
	5, 827,
	-2, 1384,
	-1, 841,
	5, 812,
	-2, 1385,
	-1, 842,
	5, 813,
	-2, 1386,
	-1, 843,
	5, 803,
	-2, 1391,
	-1, 844,
	5, 804,
	-2, 1392,
	-1, 845,
	5, 805,
	-2, 1393,
	-1, 846,
	5, 806,
	-2, 1394,
	-1, 847,
	5, 807,
	-2, 1395,
	-1, 848,
	5, 808,
	-2, 1396,
	-1, 849,
	5, 802,
	-2, 1401,
	-1, 850,
	5, 811,
	-2, 1406,
	-1, 851,
	5, 809,
	-2, 1409,
	-1, 852,
	5, 843,
	356, 843,
	-2, 1411,
	-1, 853,
	5, 847,
	-2, 1414,
	-1, 854,
	5, 849,
	-2, 1415,
	-1, 855,
	5, 842,
	356, 842,
	-2, 1420,
	-1, 873,
	214, 666,
	-2, 511,
	-1, 877,
	200, 1191,
	-2, 0,
	-1, 914,
	1, 213,
	355, 213,
	357, 213,
	359, 213,
	360, 213,
	-2, 641,
	-1, 917,
	4, 1419,
	10, 1419,
	11, 1419,
	13, 1419,
	14, 1419,
	15, 1419,
	16, 1419,
	17, 1419,
	18, 1419,
	20, 1419,
	21, 1419,
	23, 1419,
	26, 1419,
	28, 1419,
	30, 1419,
	33, 1419,
	34, 1419,
	35, 1419,
	36, 1419,
	37, 1419,
	38, 1419,
	39, 1419,
	40, 1419,
	41, 1419,
	42, 1419,
	44, 1419,
	45, 1419,
	46, 1419,
	47, 1419,
	48, 1419,
	51, 1419,
	52, 1419,
	53, 1419,
	55, 1419,
	56, 1419,
	57, 1419,
	60, 1419,
	61, 1419,
	62, 1419,
	63, 1419,
	64, 1419,
	66, 1419,
	67, 1419,
	68, 1419,
	70, 1419,
	71, 1419,
	72, 1419,
	73, 1419,
	81, 1419,
	82, 1419,
	83, 1419,
	84, 1419,
	85, 1419,
	86, 1419,
	87, 1419,
	88, 1419,
	90, 1419,
	92, 1419,
	94, 1419,
	97, 1419,
	98, 1419,
	100, 1419,
	104, 1419,
	105, 1419,
	106, 1419,
	107, 1419,
	108, 1419,
	109, 1419,
	113, 1419,
	114, 1419,
	115, 1419,
	116, 1419,
	117, 1419,
	118, 1419,
	119, 1419,
	121, 1419,
	124, 1419,
	125, 1419,
	127, 1419,
	128, 1419,
	130, 1419,
	132, 1419,
	133, 1419,
	134, 1419,
	135, 1419,
	136, 1419,
	137, 1419,
	138, 1419,
	139, 1419,
	140, 1419,
	141, 1419,
	143, 1419,
	145, 1419,
	146, 1419,
	147, 1419,
	148, 1419,
	149, 1419,
	150, 1419,
	151, 1419,
	152, 1419,
	153, 1419,
	155, 1419,
	157, 1419,
	158, 1419,
	159, 1419,
	160, 1419,
	161, 1419,
	162, 1419,
	163, 1419,
	164, 1419,
	166, 1419,
	167, 1419,
	169, 1419,
	170, 1419,
	171, 1419,
	172, 1419,
	174, 1419,
	177, 1419,
	178, 1419,
	179, 1419,
	180, 1419,
	181, 1419,
	182, 1419,
	183, 1419,
	184, 1419,
	185, 1419,
	186, 1419,
	187, 1419,
	188, 1419,
	189, 1419,
	193, 1419,
	194, 1419,
	195, 1419,
	196, 1419,
	197, 1419,
	199, 1419,
	202, 1419,
	203, 1419,
	205, 1419,
	206, 1419,
	208, 1419,
	210, 1419,
	211, 1419,
	212, 1419,
	213, 1419,
	214, 1419,
	215, 1419,
	217, 1419,
	218, 1419,
	219, 1419,
	220, 1419,
	221, 1419,
	223, 1419,
	224, 1419,
	225, 1419,
	226, 1419,
	227, 1419,
	228, 1419,
	229, 1419,
	230, 1419,
	231, 1419,
	233, 1419,
	234, 1419,
	235, 1419,
	236, 1419,
	237, 1419,
	238, 1419,
	239, 1419,
	240, 1419,
	241, 1419,
	242, 1419,
	243, 1419,
	244, 1419,
	246, 1419,
	247, 1419,
	248, 1419,
	249, 1419,
	250, 1419,
	251, 1419,
	252, 1419,
	253, 1419,
	254, 1419,
	255, 1419,
	256, 1419,
	258, 1419,
	259, 1419,
	260, 1419,
	261, 1419,
	262, 1419,
	264, 1419,
	265, 1419,
	266, 1419,
	267, 1419,
	268, 1419,
	269, 1419,
	270, 1419,
	271, 1419,
	272, 1419,
	274, 1419,
	275, 1419,
	276, 1419,
	277, 1419,
	278, 1419,
	279, 1419,
	280, 1419,
	281, 1419,
	282, 1419,
	283, 1419,
	285, 1419,
	287, 1419,
	288, 1419,
	289, 1419,
	290, 1419,
	291, 1419,
	292, 1419,
	293, 1419,
	295, 1419,
	296, 1419,
	297, 1419,
	300, 1419,
	301, 1419,
	302, 1419,
	303, 1419,
	305, 1419,
	306, 1419,
	307, 1419,
	308, 1419,
	311, 1419,
	312, 1419,
	313, 1419,
	314, 1419,
	316, 1419,
	318, 1419,
	319, 1419,
	320, 1419,
	321, 1419,
	322, 1419,
	323, 1419,
	326, 1419,
	331, 1419,
	332, 1419,
	333, 1419,
	334, 1419,
	335, 1419,
	336, 1419,
	337, 1419,
	339, 1419,
	340, 1419,
	341, 1419,
	342, 1419,
	344, 1419,
	345, 1419,
	346, 1419,
	347, 1419,
	348, 1419,
	349, 1419,
	350, 1419,
	351, 1419,
	352, 1419,
	354, 1419,
	357, 1419,
	358, 1419,
	361, 1419,
	362, 1419,
	-2, 0,
	-1, 942,
	123, 1346,
	298, 1346,
	341, 1346,
	358, 1346,
	-2, 0,
	-1, 1010,
	112, 677,
	173, 677,
	198, 677,
	-2, 639,
	-1, 1064,
	103, 643,
	112, 643,
	154, 643,
	173, 643,
	198, 643,
	204, 643,
	309, 643,
	-2, 737,
	-1, 1145,
	103, 643,
	112, 643,
	154, 643,
	173, 643,
	198, 643,
	204, 643,
	309, 643,
	-2, 970,
	-1, 1155,
	356, 1171,
	-2, 1159,
	-1, 1172,
	357, 1111,
	-2, 0,
	-1, 1406,
	1, 738,
	70, 738,
	103, 738,
	112, 738,
	124, 738,
	129, 738,
	131, 738,
	145, 738,
	154, 738,
	161, 738,
	170, 738,
	173, 738,
	185, 738,
	198, 738,
	200, 738,
	204, 738,
	245, 738,
	247, 738,
	309, 738,
	317, 738,
	328, 738,
	329, 738,
	338, 738,
	355, 738,
	357, 738,
	359, 738,
	360, 738,
	361, 738,
	-2, 737,
	-1, 1466,
	13, 0,
	14, 0,
	15, 0,
	339, 0,
	340, 0,
	341, 0,
	-2, 886,
	-1, 1467,
	13, 0,
	14, 0,
	15, 0,
	339, 0,
	340, 0,
	341, 0,
	-2, 887,
	-1, 1468,
	13, 0,
	14, 0,
	15, 0,
	339, 0,
	340, 0,
	341, 0,
	-2, 888,
	-1, 1472,
	13, 0,
	14, 0,
	15, 0,
	339, 0,
	340, 0,
	341, 0,
	-2, 892,
	-1, 1473,
	13, 0,
	14, 0,
	15, 0,
	339, 0,
	340, 0,
	341, 0,
	-2, 893,
	-1, 1474,
	13, 0,
	14, 0,
	15, 0,
	339, 0,
	340, 0,
	341, 0,
	-2, 894,
	-1, 1477,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	139, 0,
	140, 0,
	172, 0,
	268, 0,
	336, 0,
	342, 0,
	-2, 899,
	-1, 1483,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	139, 0,
	140, 0,
	172, 0,
	268, 0,
	336, 0,
	342, 0,
	-2, 901,
	-1, 1485,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	139, 0,
	140, 0,
	172, 0,
	268, 0,
	336, 0,
	342, 0,
	-2, 905,
	-1, 1486,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	139, 0,
	140, 0,
	172, 0,
	268, 0,
	336, 0,
	342, 0,
	-2, 906,
	-1, 1487,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	139, 0,
	140, 0,
	172, 0,
	268, 0,
	336, 0,
	342, 0,
	-2, 907,
	-1, 1488,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	139, 0,
	140, 0,
	172, 0,
	268, 0,
	336, 0,
	342, 0,
	-2, 908,
	-1, 1514,
	209, 1053,
	-2, 1056,
	-1, 1556,
	123, 1093,
	356, 1194,
	-2, 1187,
	-1, 1557,
	123, 1094,
	-2, 1363,
	-1, 1558,
	123, 1095,
	-2, 1269,
	-1, 1559,
	123, 1096,
	-2, 1231,
	-1, 1560,
	123, 1097,
	-2, 1249,
	-1, 1561,
	123, 1098,
	-2, 1268,
	-1, 1562,
	123, 1099,
	-2, 1321,
	-1, 1768,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	139, 0,
	140, 0,
	172, 0,
	268, 0,
	336, 0,
	342, 0,
	-2, 900,
	-1, 1769,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	139, 0,
	140, 0,
	172, 0,
	268, 0,
	336, 0,
	342, 0,
	-2, 902,
	-1, 1774,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	139, 0,
	140, 0,
	172, 0,
	268, 0,
	336, 0,
	342, 0,
	-2, 903,
	-1, 1792,
	209, 1052,
	-2, 1055,
	-1, 2003,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	139, 0,
	140, 0,
	172, 0,
	268, 0,
	336, 0,
	342, 0,
	-2, 904,
	-1, 2008,
	157, 0,
	-2, 920,
	-1, 2018,
	209, 1054,
	-2, 1057,
	-1, 2060,
	13, 0,
	14, 0,
	15, 0,
	339, 0,
	340, 0,
	341, 0,
	-2, 947,
	-1, 2061,
	13, 0,
	14, 0,
	15, 0,
	339, 0,
	340, 0,
	341, 0,
	-2, 948,
	-1, 2062,
	13, 0,
	14, 0,
	15, 0,
	339, 0,
	340, 0,
	341, 0,
	-2, 949,
	-1, 2066,
	13, 0,
	14, 0,
	15, 0,
	339, 0,
	340, 0,
	341, 0,
	-2, 953,
	-1, 2067,
	13, 0,
	14, 0,
	15, 0,
	339, 0,
	340, 0,
	341, 0,
	-2, 954,
	-1, 2068,
	13, 0,
	14, 0,
	15, 0,
	339, 0,
	340, 0,
	341, 0,
	-2, 955,
	-1, 2194,
	157, 0,
	-2, 921,
	-1, 2197,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	139, 0,
	140, 0,
	172, 0,
	268, 0,
	336, 0,
	342, 0,
	-2, 924,
	-1, 2198,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	139, 0,
	140, 0,
	172, 0,
	268, 0,
	336, 0,
	342, 0,
	-2, 926,
	-1, 2299,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	139, 0,
	140, 0,
	172, 0,
	268, 0,
	336, 0,
	342, 0,
	-2, 925,
	-1, 2300,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	139, 0,
	140, 0,
	172, 0,
	268, 0,
	336, 0,
	342, 0,
	-2, 927,
	-1, 2307,
	157, 0,
	-2, 956,
	-1, 2362,
	157, 0,
	-2, 957,
	-1, 2433,
	36, 0,
	139, 0,
	172, 0,
	268, 0,
	336, 0,
	342, 0,
	-2, 1366,
}

const sqlPrivate = 57344

const sqlLast = 41994

var sqlAct = [...]int{

	800, 2432, 2462, 2416, 2274, 2385, 2417, 1928, 2431, 2418,
	2037, 1635, 2091, 670, 1627, 1201, 2337, 2101, 1607, 1292,
	2235, 1208, 2167, 1242, 2122, 790, 2153, 73, 776, 1975,
	1293, 1693, 1243, 2254, 2124, 1611, 965, 867, 1624, 1858,
	175, 798, 797, 1974, 175, 1901, 1401, 1723, 1896, 726,
	1606, 1058, 2116, 2133, 175, 1898, 1045, 1039, 1702, 1610,
	1636, 1803, 1445, 175, 1857, 1204, 473, 1512, 1410, 175,
	175, 1419, 1538, 175, 1151, 1402, 175, 1710, 446, 471,
	1442, 1062, 1945, 175, 1689, 1367, 1319, 946, 1677, 614,
	1197, 678, 117, 1522, 770, 1500, 1072, 1067, 1585, 1497,
	1040, 1070, 443, 690, 1532, 453, 25, 904, 691, 1182,
	1608, 732, 945, 901, 894, 1140, 1221, 1186, 1629, 1552,
	915, 769, 696, 1614, 1388, 735, 1375, 714, 175, 175,
	1049, 587, 118, 1014, 119, 1013, 175, 1012, 682, 792,
	1215, 166, 1317, 1030, 609, 891, 463, 2168, 675, 712,
	171, 1029, 1018, 591, 38, 117, 607, 38, 687, 1959,
	1791, 1628, 1960, 175, 175, 175, 175, 1223, 1223, 1223,
	175, 175, 1095, 1096, 674, 1115, 1116, 1117, 1125, 1126,
	1127, 669, 2459, 2440, 674, 1059, 1092, 2166, 1118, 756,
	1943, 1913, 2428, 2427, 1912, 1098, 1650, 1650, 1129, 1089,
	48, 1095, 1096, 48, 1377, 2424, 2412, 1650, 679, 1092,
	1665, 579, 2411, 2402, 2380, 1795, 1665, 1658, 2249, 1097,
	2381, 1796, 2376, 2368, 1098, 1112, 1092, 2166, 117, 61,
	611, 2364, 61, 729, 1665, 1658, 62, 2249, 63, 62,
	2319, 63, 25, 2316, 2166, 2314, 1443, 1092, 1097, 2166,
	667, 1948, 666, 2301, 2285, 635, 2284, 1658, 1092, 793,
	2166, 2262, 1376, 65, 2259, 1092, 65, 2221, 1092, 1948,
	858, 1650, 2199, 750, 740, 744, 1650, 2196, 716, 2188,
	1103, 1658, 2186, 1650, 2165, 2146, 1650, 1056, 2166, 1092,
	2115, 2110, 2012, 1955, 1605, 1605, 1650, 1956, 1937, 1794,
	1922, 1122, 1130, 38, 1886, 1650, 1885, 1875, 1873, 1103,
	1092, 1876, 1650, 1872, 1871, 2073, 2015, 1650, 1650, 1128,
	1828, 1829, 1792, 1846, 1847, 1848, 1650, 1443, 1726, 1699,
	1408, 1650, 1650, 1092, 1120, 1667, 2193, 1095, 1096, 1650,
	1113, 1802, 1657, 1649, 1604, 1588, 1658, 1650, 1605, 48,
	1665, 1092, 1828, 1829, 1382, 1846, 1847, 1848, 1381, 718,
	1098, 719, 1224, 1224, 1224, 1119, 1235, 1886, 2192, 1113,
	1236, 133, 1692, 1843, 1675, 1301, 1516, 1034, 61, 754,
	924, 1828, 1829, 1535, 1097, 62, 136, 63, 133, 922,
	1112, 133, 1679, 693, 2169, 1338, 921, 920, 101, 919,
	135, 101, 918, 720, 175, 1843, 175, 175, 717, 175,
	662, 661, 65, 660, 1114, 633, 632, 135, 175, 631,
	135, 630, 629, 628, 175, 627, 133, 760, 1834, 1912,
	1123, 1536, 626, 625, 1843, 624, 134, 175, 175, 175,
	175, 175, 1376, 1114, 127, 1103, 696, 623, 622, 621,
	620, 128, 619, 134, 618, 135, 134, 1828, 1829, 908,
	1834, 127, 617, 602, 127, 601, 600, 1849, 128, 434,
	120, 128, 433, 675, 432, 431, 430, 1537, 1534, 1718,
	1229, 1222, 1351, 415, 414, 413, 412, 120, 1844, 1834,
	120, 134, 402, 871, 401, 400, 875, 399, 1121, 1849,
	392, 1109, 1110, 1111, 1124, 1113, 1108, 1106, 1107, 1099,
	1100, 1101, 1102, 1104, 1105, 391, 160, 159, 158, 157,
	1844, 1323, 677, 2223, 156, 120, 897, 897, 1549, 155,
	154, 153, 1828, 1829, 152, 893, 151, 133, 1099, 1100,
	1101, 1102, 1104, 1105, 150, 866, 133, 101, 149, 1844,
	2452, 148, 898, 1539, 916, 147, 101, 146, 145, 1828,
	1829, 144, 1845, 143, 142, 1834, 135, 141, 140, 139,
	138, 137, 1547, 960, 175, 135, 1545, 1095, 1096, 1114,
	1115, 1116, 1117, 1125, 1126, 1127, 1063, 2430, 2423, 1632,
	175, 2390, 2359, 1118, 1845, 2317, 2226, 2242, 2222, 2214,
	1098, 2213, 134, 1129, 176, 2212, 1025, 175, 2208, 2207,
	127, 134, 2206, 2205, 2132, 2121, 696, 128, 2088, 127,
	2083, 2082, 2081, 1845, 1097, 1844, 128, 2023, 1884, 1880,
	1112, 1533, 1888, 1877, 1865, 1856, 120, 1508, 696, 1827,
	1834, 1824, 1823, 1821, 1808, 120, 727, 1807, 1730, 1840,
	1841, 1842, 687, 1663, 1839, 1837, 1838, 1830, 1831, 1832,
	1833, 1835, 1836, 925, 175, 1025, 1406, 1834, 963, 1239,
	474, 1108, 1106, 1107, 1099, 1100, 1101, 1102, 1104, 1105,
	1011, 1840, 1841, 1842, 1207, 1103, 1839, 1837, 1838, 1830,
	1831, 1832, 1833, 1835, 1836, 760, 1024, 1159, 1061, 1845,
	1844, 864, 956, 38, 2039, 1060, 1122, 1130, 1152, 2403,
	1143, 2371, 175, 2358, 175, 1839, 1837, 1838, 1830, 1831,
	1832, 1833, 1835, 1836, 1128, 2357, 697, 1844, 1010, 857,
	2356, 2348, 2346, 694, 1688, 2331, 2330, 175, 175, 1120,
	2329, 2309, 1687, 1509, 2271, 1113, 933, 2250, 2229, 48,
	2219, 2172, 943, 2241, 696, 175, 2099, 133, 2097, 2096,
	2094, 473, 2007, 940, 675, 1983, 1982, 1963, 1951, 1038,
	1119, 1828, 1829, 1926, 1845, 1009, 1855, 133, 61, 1817,
	1043, 1816, 1813, 1788, 1090, 62, 135, 63, 1783, 1502,
	961, 1839, 1837, 1838, 1830, 1831, 1832, 1833, 1835, 1836,
	1761, 1845, 675, 2340, 1095, 1096, 135, 1756, 1743, 1742,
	1728, 667, 65, 666, 1698, 1187, 1190, 1597, 1543, 1114,
	1393, 856, 134, 117, 1200, 1021, 1022, 1098, 2248, 1716,
	127, 1194, 1180, 1179, 1057, 1123, 1178, 128, 1177, 1176,
	1093, 1175, 134, 1033, 1174, 1173, 1743, 1172, 1171, 1170,
	127, 1097, 1169, 1168, 1031, 1167, 1631, 128, 1166, 1165,
	1164, 1163, 1065, 1035, 1156, 1144, 175, 1837, 1838, 1830,
	1831, 1832, 1833, 1835, 1836, 1143, 120, 728, 175, 1834,
	1037, 939, 2201, 1548, 928, 912, 175, 475, 175, 2120,
	175, 1206, 1958, 1954, 175, 1838, 1830, 1831, 1832, 1833,
	1835, 1836, 1394, 1121, 1199, 1091, 1109, 1110, 1111, 1124,
	1152, 1108, 1106, 1107, 1099, 1100, 1101, 1102, 1104, 1105,
	1660, 1828, 1829, 1924, 175, 1141, 1061, 1546, 1870, 953,
	696, 1544, 175, 1155, 865, 1899, 2252, 133, 175, 1095,
	1096, 955, 2251, 698, 1212, 1184, 1185, 101, 2245, 1961,
	1914, 1080, 1443, 1063, 696, 696, 1240, 1188, 1828, 1829,
	935, 473, 1098, 1879, 1828, 1829, 135, 1191, 175, 1192,
	1878, 1078, 954, 175, 1193, 1767, 952, 1161, 175, 175,
	1929, 175, 1205, 175, 2255, 175, 1097, 175, 1628, 1079,
	687, 687, 1307, 2040, 1799, 1523, 1183, 893, 175, 1908,
	728, 1970, 134, 1003, 175, 175, 2393, 1654, 2449, 2180,
	127, 1073, 2375, 1074, 1668, 1226, 805, 128, 1228, 1073,
	1535, 1074, 1095, 1096, 1934, 2295, 1073, 420, 1074, 2450,
	1217, 1214, 709, 175, 1420, 175, 120, 2294, 175, 2293,
	1324, 995, 1004, 1412, 707, 1098, 1061, 1103, 1158, 1994,
	697, 175, 1412, 2292, 705, 1998, 1374, 1325, 1411, 1625,
	473, 1996, 1967, 175, 2191, 1237, 1834, 175, 1536, 1097,
	175, 1238, 1834, 1294, 175, 1966, 1812, 703, 175, 1811,
	1810, 421, 1295, 175, 117, 161, 1299, 700, 1075, 175,
	473, 1313, 1312, 175, 675, 1339, 1075, 1320, 473, 1809,
	1770, 1653, 1423, 1075, 1484, 1439, 1435, 1113, 1433, 1413,
	1832, 1833, 1835, 1836, 1537, 1534, 953, 1032, 860, 1332,
	1147, 1925, 753, 673, 1308, 1350, 1844, 1601, 1446, 1453,
	1103, 1600, 1455, 2374, 664, 1349, 574, 2001, 2090, 1396,
	1395, 1881, 1348, 1424, 1426, 1499, 1105, 1353, 1385, 1352,
	1354, 667, 1195, 1363, 667, 667, 1364, 1365, 2276, 954,
	2409, 1499, 1372, 1218, 1371, 1780, 164, 989, 1296, 1441,
	1380, 675, 2030, 1539, 672, 1328, 675, 1454, 1390, 1391,
	1778, 1114, 1386, 938, 968, 1431, 2456, 464, 1249, 1429,
	1539, 1437, 1065, 1199, 1434, 1902, 1440, 1416, 1763, 1280,
	1845, 175, 1422, 1329, 990, 2471, 1095, 1096, 175, 1333,
	469, 1334, 1316, 1335, 1985, 1336, 465, 1337, 2031, 175,
	697, 175, 1523, 175, 674, 165, 175, 1520, 175, 1098,
	175, 175, 175, 175, 1343, 1345, 1754, 696, 1935, 1671,
	2033, 175, 697, 1071, 466, 1661, 1223, 423, 422, 2449,
	1673, 1648, 1775, 1097, 1758, 1510, 1690, 1691, 1233, 1083,
	1507, 1081, 1776, 1836, 468, 1002, 1781, 698, 1533, 2351,
	1933, 1674, 1087, 1108, 1106, 1107, 1099, 1100, 1101, 1102,
	1104, 1105, 1992, 1672, 1181, 1297, 1347, 1506, 1086, 1563,
	1421, 1409, 1504, 934, 1539, 1830, 1831, 1832, 1833, 1835,
	1836, 1830, 1831, 1832, 1833, 1835, 1836, 1620, 1084, 393,
	1076, 2305, 1642, 2313, 1103, 897, 1539, 897, 1076, 1481,
	1656, 1630, 2399, 1630, 473, 1076, 1085, 117, 711, 671,
	1138, 710, 175, 117, 1815, 2161, 1634, 1645, 1651, 994,
	1643, 1405, 1644, 701, 1646, 916, 2400, 1389, 175, 175,
	175, 1655, 175, 701, 1662, 1249, 1249, 1652, 697, 1099,
	1100, 1101, 1102, 1104, 1105, 474, 1280, 1280, 674, 162,
	2162, 175, 2277, 1664, 1777, 467, 702, 2420, 175, 473,
	1986, 1779, 429, 2455, 175, 175, 701, 949, 175, 2128,
	1700, 785, 1188, 175, 1191, 1706, 175, 1772, 1185, 1184,
	2472, 976, 424, 1676, 175, 2419, 1399, 969, 163, 2448,
	175, 175, 175, 1498, 1669, 2446, 175, 2234, 665, 175,
	573, 999, 1479, 1482, 2465, 175, 175, 175, 175, 175,
	470, 172, 117, 1906, 175, 397, 175, 698, 1707, 1327,
	175, 1224, 1720, 1680, 970, 416, 937, 967, 1300, 1622,
	1740, 1736, 950, 1048, 441, 1478, 1682, 951, 1705, 698,
	577, 172, 1686, 1684, 585, 2421, 394, 590, 1715, 931,
	923, 2157, 2069, 2158, 616, 1704, 1719, 1701, 1902, 2217,
	1016, 1708, 1709, 2454, 1017, 1714, 1000, 1766, 1729, 435,
	1513, 2476, 1311, 1310, 1147, 693, 688, 944, 1517, 2179,
	2287, 2286, 1525, 2160, 2269, 1731, 2178, 1052, 2176, 2343,
	1969, 1739, 584, 2163, 1555, 1555, 1568, 1735, 1580, 715,
	715, 1623, 2422, 1213, 1592, 1593, 1595, 397, 1055, 1202,
	675, 1753, 461, 395, 697, 2029, 1755, 2386, 1505, 1801,
	1001, 1015, 1760, 1724, 1050, 1101, 1102, 1104, 1105, 859,
	1359, 1480, 1342, 1053, 397, 397, 748, 397, 697, 697,
	1016, 172, 757, 2463, 1302, 474, 1017, 2070, 1051, 2236,
	439, 869, 868, 2071, 2102, 698, 168, 1314, 1773, 464,
	2218, 1771, 475, 1712, 672, 2270, 1745, 1744, 1696, 1306,
	2161, 2159, 404, 2154, 2475, 1713, 1384, 425, 1787, 977,
	1383, 2152, 469, 675, 949, 2156, 175, 2177, 465, 2175,
	1725, 593, 949, 594, 1052, 1798, 175, 890, 175, 2464,
	175, 1015, 1360, 175, 582, 2162, 888, 175, 877, 438,
	1054, 595, 175, 1304, 175, 1055, 466, 1887, 426, 1889,
	2466, 175, 1740, 1286, 576, 1305, 2092, 2155, 2227, 1765,
	1048, 1387, 2267, 949, 175, 696, 468, 3, 1279, 675,
	1053, 2134, 1315, 1946, 474, 1860, 696, 175, 427, 950,
	428, 1542, 2308, 408, 951, 1904, 696, 1249, 2268, 2216,
	1910, 1862, 1863, 1864, 1859, 1921, 2006, 2000, 1280, 998,
	1882, 1923, 596, 962, 474, 594, 1930, 175, 1822, 1782,
	1711, 1666, 474, 987, 1052, 458, 33, 457, 32, 1891,
	454, 29, 687, 595, 175, 409, 985, 983, 950, 1603,
	175, 1438, 1907, 951, 1890, 1055, 2157, 1893, 2158, 175,
	175, 1915, 699, 981, 1432, 1828, 1829, 1054, 1846, 1847,
	1848, 1050, 1920, 802, 758, 759, 755, 1964, 1007, 1006,
	1053, 698, 929, 1340, 1331, 1931, 1932, 1162, 2160, 1541,
	1916, 1917, 1936, 1918, 1938, 1051, 1957, 467, 2163, 1981,
	1939, 889, 1999, 437, 596, 698, 698, 1944, 1941, 2415,
	887, 581, 475, 1947, 2383, 1980, 1979, 1950, 1843, 1949,
	117, 2020, 2150, 597, 738, 616, 1990, 873, 616, 979,
	878, 575, 440, 456, 17, 1965, 973, 2009, 1962, 883,
	997, 1953, 436, 1972, 410, 397, 175, 1988, 2025, 2026,
	2027, 886, 470, 1993, 986, 1279, 1279, 1054, 616, 616,
	397, 905, 757, 594, 1968, 694, 689, 984, 982, 450,
	13, 697, 33, 1834, 32, 1895, 2159, 29, 1786, 1626,
	1619, 595, 1446, 2044, 980, 1789, 1232, 704, 706, 2016,
	993, 1446, 2049, 1231, 1230, 1227, 1989, 1225, 1991, 1249,
	592, 2019, 598, 1805, 1806, 597, 403, 452, 16, 2041,
	1280, 475, 2043, 2032, 2034, 2035, 1088, 175, 1082, 175,
	2046, 2048, 451, 14, 2080, 1077, 175, 2076, 1897, 696,
	411, 449, 12, 1844, 599, 405, 2324, 2098, 455, 10,
	2095, 475, 596, 175, 175, 406, 448, 8, 1249, 475,
	978, 1854, 2450, 2077, 447, 4, 2111, 972, 474, 1280,
	175, 2247, 1019, 1867, 1694, 2104, 2246, 723, 175, 1322,
	17, 2117, 885, 459, 473, 1248, 2093, 2326, 1428, 175,
	1412, 2108, 175, 2103, 598, 1412, 1427, 724, 2109, 2353,
	2106, 1425, 473, 175, 175, 616, 2105, 175, 175, 175,
	2138, 2114, 2113, 2112, 2130, 2118, 13, 1845, 992, 2169,
	971, 932, 2145, 474, 175, 2361, 599, 1095, 1096, 175,
	2135, 175, 1023, 175, 175, 175, 1695, 175, 616, 175,
	2170, 696, 2174, 2137, 2149, 1020, 2139, 2141, 1981, 2144,
	1098, 1704, 1436, 597, 16, 583, 1095, 1096, 1430, 2382,
	2190, 2232, 1633, 2131, 1980, 1979, 2173, 1621, 2474, 14,
	725, 2195, 1618, 1373, 1097, 1298, 2469, 1241, 12, 2261,
	175, 2142, 2140, 1249, 2119, 10, 2136, 1282, 1828, 1829,
	1095, 1096, 2089, 8, 1280, 397, 1027, 1026, 698, 2036,
	1027, 4, 1927, 1097, 1840, 1841, 1842, 775, 1874, 1839,
	1837, 1838, 1830, 1831, 1832, 1833, 1835, 1836, 1721, 1249,
	1249, 1602, 1599, 1598, 1531, 1149, 2215, 1028, 1249, 1249,
	1280, 1280, 598, 1495, 2203, 2028, 1892, 175, 175, 1280,
	1280, 1159, 1995, 590, 696, 715, 1157, 1997, 1493, 1005,
	996, 396, 1248, 1248, 991, 2230, 988, 974, 936, 882,
	1981, 1249, 881, 663, 599, 1981, 2275, 462, 397, 397,
	1330, 975, 1280, 1717, 2013, 1392, 1980, 1979, 2228, 1234,
	2238, 1980, 1979, 2233, 2239, 475, 172, 1279, 2231, 2398,
	2209, 175, 1814, 175, 2336, 473, 175, 2244, 2237, 2304,
	1540, 1160, 54, 2253, 175, 1977, 779, 2151, 1971, 1613,
	473, 2258, 1612, 476, 1309, 801, 681, 1554, 1447, 861,
	1489, 803, 1246, 804, 1247, 1189, 2263, 791, 1490, 1244,
	1491, 913, 1981, 1637, 1496, 1503, 2278, 1521, 1797, 2279,
	475, 2074, 2281, 733, 1153, 771, 1199, 783, 1980, 1979,
	782, 1518, 2084, 2289, 1282, 1282, 2243, 2297, 2303, 927,
	2296, 2260, 1722, 1905, 2240, 1358, 1685, 1355, 1987, 407,
	742, 746, 1825, 752, 2265, 175, 911, 1577, 696, 1569,
	1565, 1008, 175, 2310, 1044, 1139, 1638, 959, 1911, 2280,
	175, 175, 696, 696, 1659, 1981, 175, 397, 1036, 697,
	2325, 175, 1570, 1366, 722, 721, 957, 1249, 175, 1211,
	697, 1980, 1979, 2315, 2322, 2333, 1303, 397, 1280, 397,
	697, 397, 2334, 2335, 2332, 1219, 1670, 2347, 2323, 2342,
	763, 2341, 2321, 175, 175, 2327, 1132, 2350, 2290, 2291,
	1131, 708, 1492, 2345, 948, 2349, 947, 2339, 1203, 1494,
	1738, 2470, 2352, 1984, 175, 172, 2392, 132, 2360, 2367,
	129, 131, 696, 172, 2370, 130, 1764, 175, 81, 616,
	2369, 696, 696, 2363, 31, 30, 100, 99, 2318, 1279,
	98, 2373, 97, 96, 95, 94, 93, 175, 92, 175,
	2378, 2379, 175, 91, 473, 90, 89, 675, 2372, 616,
	88, 87, 86, 444, 616, 85, 84, 2388, 83, 172,
	616, 612, 616, 2405, 616, 80, 616, 79, 616, 78,
	2404, 2389, 175, 2406, 38, 77, 28, 24, 1279, 1341,
	104, 2410, 23, 2414, 2408, 616, 616, 1981, 2413, 21,
	22, 27, 26, 19, 175, 18, 15, 2425, 460, 2437,
	175, 2429, 9, 1980, 1979, 2407, 175, 20, 2439, 2442,
	2443, 2441, 2438, 59, 590, 2447, 715, 2445, 461, 757,
	48, 2451, 60, 2394, 1248, 2453, 58, 57, 56, 11,
	1249, 52, 397, 51, 50, 2460, 780, 74, 49, 47,
	46, 1280, 45, 2467, 1404, 2468, 2461, 44, 397, 61,
	7, 397, 103, 41, 40, 1417, 62, 6, 63, 397,
	102, 2477, 5, 2473, 397, 464, 698, 115, 1281, 1249,
	397, 2257, 112, 114, 1444, 111, 113, 698, 116, 108,
	1280, 746, 109, 65, 110, 107, 106, 698, 469, 37,
	36, 35, 34, 697, 465, 2, 752, 1, 0, 0,
	74, 0, 0, 1279, 0, 0, 0, 0, 2283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 466, 0, 761, 862, 1282, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 474, 1279,
	1279, 0, 468, 0, 0, 0, 0, 0, 1279, 1279,
	0, 0, 0, 0, 668, 0, 474, 676, 0, 1249,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1280, 0, 734, 74, 0, 0, 0, 0, 0, 0,
	0, 1279, 1609, 0, 0, 0, 0, 0, 0, 757,
	0, 0, 0, 0, 0, 697, 0, 0, 0, 0,
	397, 0, 1641, 0, 616, 0, 0, 616, 133, 616,
	0, 397, 397, 1647, 757, 0, 1248, 0, 101, 0,
	0, 0, 1417, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1281, 1281, 135, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 467, 0, 0, 0, 0, 0, 0,
	0, 0, 1245, 0, 0, 1248, 0, 0, 0, 0,
	0, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 0, 0, 0, 0, 128, 0,
	0, 0, 2395, 2396, 2397, 0, 0, 2401, 697, 0,
	0, 0, 0, 0, 0, 926, 0, 445, 470, 0,
	698, 930, 0, 1678, 0, 0, 1095, 1096, 1282, 0,
	0, 746, 0, 0, 0, 0, 0, 1279, 0, 397,
	397, 397, 0, 397, 1095, 1096, 0, 0, 0, 1098,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 474,
	0, 0, 397, 0, 0, 475, 0, 1098, 0, 397,
	0, 0, 0, 1097, 474, 397, 397, 1282, 0, 397,
	0, 0, 0, 475, 1404, 0, 0, 1404, 0, 0,
	0, 1097, 0, 0, 0, 1727, 0, 0, 0, 0,
	1248, 397, 1733, 1734, 733, 1068, 0, 1417, 0, 0,
	1741, 0, 0, 0, 0, 0, 1746, 1747, 1749, 1751,
	1752, 0, 698, 0, 0, 397, 0, 1759, 0, 0,
	0, 1762, 0, 0, 1103, 0, 1248, 1248, 0, 1245,
	1245, 0, 697, 0, 0, 1248, 1248, 0, 0, 0,
	0, 0, 1103, 0, 0, 0, 697, 697, 0, 0,
	0, 1041, 1041, 0, 0, 0, 0, 0, 1046, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 676, 0, 1113, 0, 0, 0, 0, 0,
	0, 0, 1282, 0, 1133, 1134, 1135, 1136, 1137, 0,
	1279, 0, 1113, 0, 1146, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1154, 698, 697, 0, 0, 0,
	0, 0, 0, 1198, 0, 697, 697, 0, 1282, 1282,
	0, 0, 0, 0, 0, 0, 0, 1282, 1282, 1279,
	0, 0, 0, 746, 0, 1216, 0, 1216, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 1281, 1114, 0,
	0, 0, 0, 0, 0, 0, 475, 0, 0, 0,
	1282, 0, 0, 0, 0, 0, 1114, 0, 0, 0,
	0, 475, 0, 0, 0, 0, 0, 397, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1211, 0, 1211,
	0, 616, 0, 0, 397, 0, 0, 0, 1900, 0,
	0, 0, 0, 397, 1248, 1909, 0, 0, 0, 0,
	0, 0, 397, 0, 0, 0, 0, 0, 0, 1279,
	0, 0, 0, 0, 0, 1678, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1678, 698,
	0, 1106, 1107, 1099, 1100, 1101, 1102, 1104, 1105, 0,
	0, 0, 0, 698, 698, 0, 0, 0, 0, 0,
	1107, 1099, 1100, 1101, 1102, 1104, 1105, 0, 397, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 397, 0, 0, 0, 0,
	0, 1404, 0, 0, 0, 0, 0, 0, 733, 0,
	757, 1404, 0, 0, 0, 668, 1282, 0, 0, 0,
	0, 0, 0, 0, 733, 1976, 0, 1407, 0, 0,
	0, 0, 0, 698, 0, 746, 0, 0, 0, 0,
	746, 0, 698, 698, 0, 1356, 752, 1361, 0, 1281,
	0, 1245, 0, 1368, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 475, 0, 0, 74, 0,
	0, 0, 0, 1064, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2038, 1281, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1142,
	0, 1145, 0, 0, 0, 0, 0, 0, 1150, 0,
	0, 0, 0, 0, 0, 0, 1248, 0, 0, 1456,
	1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466,
	1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476,
	1477, 0, 1483, 0, 1485, 1486, 1487, 1488, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1417, 0,
	1211, 1511, 0, 0, 0, 0, 1639, 2100, 1146, 0,
	0, 0, 0, 0, 0, 0, 0, 752, 752, 1282,
	0, 0, 0, 0, 397, 397, 1550, 1551, 1362, 0,
	1567, 0, 1579, 1581, 1586, 1589, 1590, 1591, 0, 0,
	0, 2125, 0, 0, 0, 0, 1248, 0, 0, 2127,
	0, 0, 0, 1281, 0, 0, 0, 0, 1282, 0,
	397, 0, 0, 757, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1245, 1404, 757, 0, 0, 2147, 2148,
	1417, 0, 0, 0, 0, 0, 0, 0, 0, 1281,
	1281, 0, 0, 0, 1976, 757, 0, 0, 1281, 1281,
	2181, 0, 2182, 0, 397, 2184, 2185, 0, 397, 0,
	2189, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1245, 0, 0, 0, 0, 0, 0, 0,
	0, 1281, 0, 0, 0, 1681, 752, 1683, 0, 746,
	0, 0, 0, 0, 0, 0, 0, 0, 1282, 0,
	0, 2210, 0, 0, 0, 0, 0, 0, 1697, 74,
	0, 0, 0, 0, 0, 733, 0, 0, 0, 0,
	0, 733, 733, 0, 0, 733, 0, 0, 0, 0,
	0, 0, 1571, 0, 0, 668, 0, 0, 668, 668,
	0, 0, 0, 0, 0, 0, 0, 1732, 0, 0,
	0, 0, 0, 0, 0, 0, 1976, 0, 757, 1609,
	0, 1976, 0, 0, 0, 0, 0, 734, 0, 0,
	0, 1757, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1064, 0, 0, 1041, 0, 0, 0,
	0, 1046, 0, 0, 0, 0, 74, 1245, 0, 0,
	0, 0, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1417, 0, 2264, 0, 0, 2266, 0, 0,
	0, 0, 0, 0, 0, 397, 0, 1281, 1976, 0,
	0, 0, 0, 1245, 1245, 0, 0, 0, 0, 0,
	0, 0, 1245, 1245, 0, 0, 0, 1501, 0, 0,
	0, 0, 0, 2298, 0, 0, 0, 0, 0, 0,
	676, 0, 0, 0, 0, 1145, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1768, 1769,
	0, 1976, 0, 0, 1774, 0, 397, 0, 0, 0,
	0, 0, 0, 757, 0, 0, 0, 0, 0, 0,
	0, 2125, 2125, 0, 0, 0, 0, 2338, 0, 0,
	0, 0, 1404, 0, 0, 0, 1793, 0, 0, 1211,
	0, 0, 74, 1800, 74, 0, 1804, 0, 0, 0,
	0, 0, 0, 1883, 0, 0, 0, 0, 0, 0,
	0, 0, 74, 1818, 2354, 2355, 0, 0, 74, 0,
	1894, 0, 0, 0, 0, 0, 0, 0, 0, 1198,
	0, 0, 0, 0, 0, 397, 0, 0, 1198, 0,
	0, 0, 0, 0, 0, 1146, 0, 0, 2377, 0,
	0, 0, 1586, 1586, 1586, 0, 0, 0, 0, 0,
	1281, 0, 0, 0, 0, 0, 0, 0, 2387, 0,
	757, 0, 0, 397, 0, 0, 0, 0, 0, 1095,
	1096, 1245, 0, 0, 0, 1125, 1126, 1127, 0, 0,
	1784, 1785, 0, 1976, 1942, 0, 0, 0, 1903, 1281,
	0, 0, 1098, 2338, 0, 1129, 0, 0, 0, 0,
	0, 733, 0, 0, 0, 0, 0, 74, 1571, 1571,
	1919, 0, 0, 0, 0, 757, 1097, 0, 0, 0,
	0, 397, 1112, 0, 0, 0, 0, 2444, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 734, 0, 0, 1940, 0, 0,
	734, 734, 1368, 0, 734, 1851, 1852, 1853, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1952, 0, 0, 0, 0, 1103, 0, 1281,
	0, 0, 0, 1571, 1571, 1571, 0, 0, 0, 0,
	1828, 1829, 0, 1846, 1847, 1848, 0, 74, 1122, 1130,
	0, 0, 1973, 74, 0, 0, 2011, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1828, 1829,
	0, 1846, 1847, 1848, 0, 0, 0, 2002, 0, 0,
	2003, 1120, 0, 0, 2010, 0, 0, 1113, 0, 0,
	0, 0, 2008, 1843, 1245, 0, 0, 0, 0, 1501,
	0, 2017, 0, 0, 0, 0, 0, 0, 0, 2021,
	0, 0, 1919, 0, 0, 0, 0, 0, 0, 1145,
	0, 1843, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2045, 1245, 0, 0, 2047, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1834, 0,
	1639, 733, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1114, 0, 0, 0, 0, 0, 0, 0, 2078,
	2079, 0, 0, 0, 0, 0, 1834, 1123, 2085, 2086,
	2087, 0, 0, 0, 0, 0, 733, 1849, 0, 0,
	0, 0, 1145, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2004, 2005, 0, 0, 1844, 0,
	0, 0, 1041, 0, 0, 1849, 0, 0, 0, 0,
	0, 0, 0, 1245, 1046, 0, 0, 0, 0, 0,
	2183, 0, 1571, 1571, 2187, 74, 1844, 0, 74, 0,
	0, 0, 0, 0, 0, 1121, 0, 0, 676, 0,
	0, 1124, 0, 1108, 1106, 1107, 1099, 1100, 1101, 1102,
	1104, 1105, 0, 2050, 2051, 2052, 2053, 2054, 2055, 2056,
	2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066,
	2067, 2068, 1845, 2072, 0, 0, 0, 0, 2171, 0,
	0, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
	1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
	1845, 1571, 0, 0, 0, 74, 2194, 0, 0, 0,
	2197, 2198, 0, 0, 0, 2200, 0, 0, 0, 0,
	734, 0, 2202, 0, 2204, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2211, 0, 0, 0, 0, 0, 0, 0, 1828, 1829,
	0, 1846, 1847, 1848, 0, 0, 0, 0, 0, 1840,
	1841, 1842, 0, 0, 1839, 1837, 1838, 1830, 1831, 1832,
	1833, 1835, 1836, 2220, 1828, 1829, 0, 1846, 1847, 1848,
	0, 0, 0, 0, 0, 0, 0, 1840, 1841, 1842,
	0, 2273, 1839, 1837, 1838, 1830, 1831, 1832, 1833, 1835,
	1836, 1843, 0, 0, 0, 0, 1095, 1096, 0, 1115,
	1116, 1117, 1125, 1126, 1127, 0, 0, 0, 0, 0,
	0, 0, 1118, 0, 0, 0, 0, 1843, 0, 1098,
	0, 0, 1129, 0, 2256, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1097, 0, 0, 1834, 0, 0, 1112,
	0, 0, 2320, 0, 1095, 1096, 0, 1115, 1116, 1117,
	1125, 1126, 1127, 0, 0, 0, 0, 0, 2288, 0,
	1118, 0, 1834, 0, 0, 0, 0, 1098, 0, 0,
	1129, 0, 2299, 2300, 0, 1849, 0, 0, 0, 0,
	0, 0, 0, 0, 1850, 0, 0, 0, 0, 0,
	0, 1097, 0, 0, 1103, 0, 1844, 1112, 0, 0,
	734, 1849, 0, 2312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1122, 1130, 0, 0, 0,
	0, 2366, 1844, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1128, 0, 734, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1120, 0,
	0, 2344, 1103, 0, 1113, 0, 0, 0, 0, 2391,
	0, 0, 0, 0, 0, 2272, 0, 0, 0, 0,
	1845, 0, 0, 1122, 1130, 0, 0, 0, 0, 1119,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1128, 0, 1571, 0, 0, 1845, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1120, 0, 0, 1046,
	0, 0, 1113, 0, 0, 0, 0, 1639, 0, 2307,
	0, 0, 0, 0, 0, 0, 0, 0, 1114, 0,
	0, 0, 0, 0, 0, 0, 0, 1119, 0, 0,
	0, 0, 0, 0, 1123, 0, 0, 1571, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1840, 1841, 1842,
	0, 0, 1839, 1837, 1838, 1830, 1831, 1832, 1833, 1835,
	1836, 0, 0, 2426, 0, 0, 0, 0, 0, 2436,
	2436, 0, 0, 1840, 1841, 1842, 1114, 0, 1839, 1837,
	1838, 1830, 1831, 1832, 1833, 1835, 1836, 74, 0, 0,
	0, 0, 1123, 0, 0, 0, 0, 0, 0, 0,
	0, 2362, 1121, 2436, 0, 1109, 1110, 1111, 1124, 0,
	1108, 1106, 1107, 1099, 1100, 1101, 1102, 1104, 1105, 0,
	0, 0, 0, 0, 0, 0, 0, 1869, 0, 1571,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2436,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1121, 0, 0, 1109, 1110, 1111, 1124, 0, 1108, 1106,
	1107, 1099, 1100, 1101, 1102, 1104, 1105, 0, 0, 0,
	0, 0, 0, 0, 0, 1868, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 472, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2328, 0, 177, 178, 491, 179, 492, 493,
	494, 495, 335, 496, 497, 498, 499, 180, 181, 182,
	336, 337, 338, 339, 183, 340, 341, 500, 184, 342,
	343, 185, 186, 501, 502, 344, 345, 346, 503, 187,
	347, 504, 477, 505, 188, 189, 190, 0, 191, 506,
	192, 193, 194, 507, 478, 195, 196, 197, 508, 509,
	511, 510, 512, 513, 514, 198, 199, 398, 200, 348,
	201, 349, 350, 515, 202, 516, 203, 517, 204, 518,
	519, 205, 206, 520, 207, 521, 1145, 522, 351, 208,
	209, 210, 352, 353, 523, 524, 525, 211, 212, 354,
	355, 356, 0, 213, 526, 214, 527, 528, 479, 215,
	529, 216, 357, 530, 358, 531, 217, 218, 219, 220,
	221, 359, 360, 481, 532, 225, 533, 222, 534, 480,
	223, 361, 224, 362, 363, 364, 365, 366, 535, 367,
	536, 482, 226, 227, 228, 483, 229, 230, 231, 537,
	233, 232, 538, 368, 484, 234, 485, 539, 235, 540,
	541, 236, 0, 237, 238, 239, 241, 369, 240, 486,
	242, 243, 245, 244, 542, 543, 544, 370, 246, 371,
	247, 248, 545, 249, 546, 547, 250, 548, 549, 251,
	372, 487, 252, 488, 373, 253, 254, 255, 256, 257,
	550, 258, 374, 259, 375, 260, 551, 261, 262, 263,
	264, 265, 266, 376, 267, 268, 552, 269, 270, 271,
	272, 273, 275, 276, 274, 277, 278, 279, 280, 553,
	281, 489, 282, 283, 377, 284, 0, 288, 289, 290,
	291, 554, 293, 378, 292, 294, 295, 555, 296, 285,
	286, 297, 490, 298, 379, 380, 299, 556, 306, 300,
	301, 287, 302, 305, 381, 303, 304, 382, 557, 307,
	558, 308, 309, 310, 311, 312, 313, 314, 559, 383,
	384, 385, 560, 561, 315, 316, 386, 387, 562, 317,
	318, 319, 320, 563, 564, 321, 322, 323, 324, 565,
	325, 566, 388, 326, 327, 328, 389, 390, 567, 568,
	329, 569, 570, 571, 572, 330, 331, 332, 333, 334,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 472, 0, 0, 0, 0, 0, 1397, 0,
	0, 0, 0, 0, 0, 0, 0, 1398, 177, 178,
	491, 179, 492, 493, 494, 495, 335, 496, 497, 498,
	499, 180, 181, 182, 336, 337, 338, 339, 183, 340,
	341, 500, 184, 342, 343, 185, 186, 501, 502, 344,
	345, 346, 503, 187, 347, 504, 477, 505, 188, 189,
	190, 0, 191, 506, 192, 193, 194, 507, 478, 195,
	196, 197, 508, 509, 511, 510, 512, 513, 514, 198,
	199, 398, 200, 348, 201, 349, 350, 515, 202, 516,
	203, 517, 204, 518, 519, 205, 206, 520, 207, 521,
	0, 522, 351, 208, 209, 210, 352, 353, 523, 524,
	525, 211, 212, 354, 355, 356, 0, 213, 526, 214,
	527, 528, 479, 215, 529, 216, 357, 530, 358, 531,
	217, 218, 219, 220, 221, 359, 360, 481, 532, 225,
	533, 222, 534, 480, 223, 361, 224, 362, 363, 364,
	365, 366, 535, 367, 536, 482, 226, 227, 228, 483,
	229, 230, 231, 537, 233, 232, 538, 368, 484, 234,
	485, 539, 235, 540, 541, 236, 0, 237, 238, 239,
	241, 369, 240, 486, 242, 243, 245, 244, 542, 543,
	544, 370, 246, 371, 247, 248, 545, 249, 546, 547,
	250, 548, 549, 251, 372, 487, 252, 488, 373, 253,
	254, 255, 256, 257, 550, 258, 374, 259, 375, 260,
	551, 261, 262, 263, 264, 265, 266, 376, 267, 268,
	552, 269, 270, 271, 272, 273, 275, 276, 274, 277,
	278, 279, 280, 553, 281, 489, 282, 283, 377, 284,
	0, 288, 289, 290, 291, 554, 293, 378, 292, 294,
	295, 555, 296, 285, 286, 297, 490, 298, 379, 380,
	299, 556, 306, 300, 301, 287, 302, 305, 381, 303,
	304, 382, 557, 307, 558, 308, 309, 310, 311, 312,
	313, 314, 559, 383, 384, 385, 560, 561, 315, 316,
	386, 387, 562, 317, 318, 319, 320, 563, 564, 321,
	322, 323, 324, 565, 325, 566, 388, 326, 327, 328,
	389, 390, 567, 568, 329, 569, 570, 571, 572, 330,
	331, 332, 333, 334, 0, 0, 0, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2143, 177, 178, 491, 179, 492, 493, 494,
	495, 335, 496, 497, 498, 499, 180, 181, 182, 336,
	337, 338, 339, 183, 340, 341, 500, 184, 342, 343,
	185, 186, 501, 502, 344, 345, 346, 503, 187, 347,
	504, 477, 505, 188, 189, 190, 0, 191, 506, 192,
	193, 194, 507, 478, 195, 196, 197, 508, 509, 511,
	510, 512, 513, 514, 198, 199, 398, 200, 348, 201,
	349, 350, 515, 202, 516, 203, 517, 204, 518, 519,
	205, 206, 520, 207, 521, 0, 522, 351, 208, 209,
	210, 352, 353, 523, 524, 525, 211, 212, 354, 355,
	356, 0, 213, 526, 214, 527, 528, 479, 215, 529,
	216, 357, 530, 358, 531, 217, 218, 219, 220, 221,
	359, 360, 481, 532, 225, 533, 222, 534, 480, 223,
	361, 224, 362, 363, 364, 365, 366, 535, 367, 536,
	482, 226, 227, 228, 483, 229, 230, 231, 537, 233,
	232, 538, 368, 484, 234, 485, 539, 235, 540, 541,
	236, 0, 237, 238, 239, 241, 369, 240, 486, 242,
	243, 245, 244, 542, 543, 544, 370, 246, 371, 247,
	248, 545, 249, 546, 547, 250, 548, 549, 251, 372,
	487, 252, 488, 373, 253, 254, 255, 256, 257, 550,
	258, 374, 259, 375, 260, 551, 261, 262, 263, 264,
	265, 266, 376, 267, 268, 552, 269, 270, 271, 272,
	273, 275, 276, 274, 277, 278, 279, 280, 553, 281,
	489, 282, 283, 377, 284, 0, 288, 289, 290, 291,
	554, 293, 378, 292, 294, 295, 555, 296, 285, 286,
	297, 490, 298, 379, 380, 299, 556, 306, 300, 301,
	287, 302, 305, 381, 303, 304, 382, 557, 307, 558,
	308, 309, 310, 311, 312, 313, 314, 559, 383, 384,
	385, 560, 561, 315, 316, 386, 387, 562, 317, 318,
	319, 320, 563, 564, 321, 322, 323, 324, 565, 325,
	566, 388, 326, 327, 328, 389, 390, 567, 568, 329,
	569, 570, 571, 572, 330, 331, 332, 333, 334, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1094, 0, 0, 177, 178, 491, 179, 492,
	493, 494, 495, 335, 496, 497, 498, 499, 180, 181,
	182, 336, 337, 338, 339, 183, 340, 341, 500, 184,
	342, 343, 185, 186, 501, 502, 344, 345, 346, 503,
	187, 347, 504, 477, 505, 188, 189, 190, 0, 191,
	506, 192, 193, 194, 507, 478, 195, 196, 197, 508,
	509, 511, 510, 512, 513, 514, 198, 199, 398, 200,
	348, 201, 349, 350, 515, 202, 516, 203, 517, 204,
	518, 519, 205, 206, 520, 207, 521, 0, 522, 351,
	208, 209, 210, 352, 353, 523, 524, 525, 211, 212,
	354, 355, 356, 0, 213, 526, 214, 527, 528, 479,
	215, 529, 216, 357, 530, 358, 531, 217, 218, 219,
	220, 221, 359, 360, 481, 532, 225, 533, 222, 534,
	480, 223, 361, 224, 362, 363, 364, 365, 366, 535,
	367, 536, 482, 226, 227, 228, 483, 229, 230, 231,
	537, 233, 232, 538, 368, 484, 234, 485, 539, 235,
	540, 541, 236, 0, 237, 238, 239, 241, 369, 240,
	486, 242, 243, 245, 244, 542, 543, 544, 370, 246,
	371, 247, 248, 545, 249, 546, 547, 250, 548, 549,
	251, 372, 487, 252, 488, 373, 253, 254, 255, 256,
	257, 550, 258, 374, 259, 375, 260, 551, 261, 262,
	263, 264, 265, 266, 376, 267, 268, 552, 269, 270,
	271, 272, 273, 275, 276, 274, 277, 278, 279, 280,
	553, 281, 489, 282, 283, 377, 284, 0, 288, 289,
	290, 291, 554, 293, 378, 292, 294, 295, 555, 296,
	285, 286, 297, 490, 298, 379, 380, 299, 556, 306,
	300, 301, 287, 302, 305, 381, 303, 304, 382, 557,
	307, 558, 308, 309, 310, 311, 312, 313, 314, 559,
	383, 384, 385, 560, 561, 315, 316, 386, 387, 562,
	317, 318, 319, 320, 563, 564, 321, 322, 323, 324,
	565, 325, 566, 388, 326, 327, 328, 389, 390, 567,
	568, 329, 569, 570, 571, 572, 330, 331, 332, 333,
	334, 1530, 0, 799, 788, 789, 786, 787, 778, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 177,
	178, 1527, 179, 0, 0, 0, 0, 816, 781, 0,
	0, 0, 180, 181, 182, 336, 831, 338, 832, 183,
	833, 834, 0, 184, 342, 343, 185, 186, 784, 815,
	835, 836, 346, 0, 187, 827, 0, 807, 0, 188,
	189, 190, 0, 191, 0, 192, 193, 194, 0, 478,
	195, 196, 197, 0, 808, 809, 811, 0, 810, 812,
	198, 199, 398, 200, 837, 201, 838, 839, 0, 202,
	0, 203, 0, 204, 1528, 0, 830, 206, 0, 207,
	0, 0, 0, 772, 208, 209, 210, 817, 818, 795,
	0, 0, 211, 212, 840, 841, 842, 0, 213, 0,
	214, 0, 0, 479, 215, 0, 216, 828, 0, 358,
	0, 217, 218, 219, 220, 221, 824, 826, 481, 0,
	225, 0, 222, 0, 480, 223, 843, 224, 844, 845,
	846, 847, 848, 0, 806, 0, 482, 226, 227, 228,
	483, 229, 230, 231, 0, 233, 232, 0, 829, 484,
	234, 485, 0, 235, 0, 0, 236, 0, 237, 238,
	239, 241, 369, 240, 486, 242, 243, 245, 244, 767,
	0, 796, 825, 246, 849, 247, 248, 0, 249, 0,
	0, 250, 0, 0, 251, 372, 487, 252, 488, 819,
	253, 254, 255, 256, 257, 0, 258, 820, 259, 375,
	260, 0, 261, 262, 263, 264, 265, 266, 850, 267,
	268, 0, 269, 270, 271, 272, 273, 275, 276, 274,
	277, 278, 279, 280, 0, 281, 489, 282, 283, 773,
	284, 0, 288, 289, 290, 291, 0, 293, 378, 292,
	294, 295, 813, 296, 285, 286, 297, 490, 298, 851,
	380, 299, 0, 306, 300, 301, 287, 302, 305, 852,
	303, 304, 821, 0, 307, 0, 308, 309, 310, 311,
	312, 313, 314, 0, 383, 853, 854, 0, 0, 315,
	316, 822, 823, 794, 317, 318, 319, 320, 0, 0,
	321, 322, 323, 324, 814, 325, 0, 388, 326, 327,
	328, 389, 855, 1526, 0, 329, 0, 0, 0, 0,
	330, 331, 332, 333, 334, 768, 0, 0, 0, 0,
	0, 766, 0, 0, 0, 0, 764, 765, 1529, 799,
	788, 789, 786, 787, 778, 774, 1524, 0, 0, 0,
	0, 777, 0, 0, 0, 177, 178, 0, 179, 0,
	0, 0, 0, 816, 781, 0, 0, 0, 180, 181,
	182, 336, 831, 338, 832, 183, 833, 834, 0, 184,
	342, 343, 185, 186, 784, 815, 835, 836, 346, 0,
	187, 827, 0, 807, 0, 188, 189, 190, 0, 191,
	0, 192, 193, 194, 0, 478, 195, 196, 197, 0,
	808, 809, 811, 0, 810, 812, 198, 199, 398, 200,
	837, 201, 838, 839, 1047, 202, 0, 203, 0, 204,
	0, 0, 830, 206, 0, 207, 0, 0, 0, 772,
	208, 209, 210, 817, 818, 795, 0, 0, 211, 212,
	840, 841, 842, 0, 213, 0, 214, 0, 0, 479,
	215, 0, 216, 828, 0, 358, 0, 217, 218, 219,
	220, 221, 824, 826, 481, 0, 225, 0, 222, 0,
	480, 223, 843, 224, 844, 845, 846, 847, 848, 0,
	806, 0, 482, 226, 227, 228, 483, 229, 230, 231,
	0, 233, 232, 0, 829, 484, 234, 485, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 369, 240,
	486, 242, 243, 245, 244, 767, 0, 796, 825, 246,
	849, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 372, 487, 252, 488, 819, 253, 254, 255, 256,
	257, 0, 258, 820, 259, 375, 260, 0, 261, 262,
	263, 264, 265, 266, 850, 267, 268, 0, 269, 270,
	271, 272, 273, 275, 276, 274, 277, 278, 279, 280,
	0, 281, 489, 282, 283, 773, 284, 0, 288, 289,
	290, 291, 133, 293, 378, 292, 294, 295, 813, 296,
	285, 286, 297, 490, 298, 851, 380, 299, 0, 306,
	300, 301, 287, 302, 305, 852, 303, 304, 821, 0,
	307, 135, 308, 309, 310, 311, 312, 313, 314, 0,
	383, 853, 854, 0, 0, 315, 316, 822, 823, 794,
	317, 318, 319, 320, 0, 0, 321, 322, 323, 324,
	814, 325, 0, 388, 326, 327, 328, 917, 855, 0,
	0, 329, 0, 0, 0, 127, 330, 331, 332, 333,
	334, 768, 128, 0, 0, 0, 0, 766, 0, 0,
	0, 0, 764, 765, 0, 0, 0, 0, 0, 0,
	0, 1148, 0, 0, 0, 0, 677, 777, 799, 788,
	789, 786, 787, 778, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 177, 178, 0, 179, 0, 0,
	0, 0, 816, 781, 0, 0, 0, 180, 181, 182,
	336, 831, 338, 832, 183, 833, 834, 0, 184, 342,
	343, 185, 186, 784, 815, 835, 836, 346, 0, 187,
	827, 0, 807, 0, 188, 189, 190, 0, 191, 0,
	192, 193, 194, 0, 478, 195, 196, 197, 0, 808,
	809, 811, 0, 810, 812, 198, 199, 398, 200, 837,
	201, 838, 839, 0, 202, 0, 203, 0, 204, 0,
	0, 830, 206, 0, 207, 0, 0, 0, 772, 208,
	209, 210, 817, 818, 795, 0, 0, 211, 212, 840,
	841, 842, 0, 213, 0, 214, 0, 0, 479, 215,
	0, 216, 828, 0, 358, 0, 217, 218, 219, 220,
	221, 824, 826, 481, 0, 225, 0, 222, 0, 480,
	223, 843, 224, 844, 845, 846, 847, 848, 0, 806,
	0, 482, 226, 227, 228, 483, 229, 230, 231, 0,
	233, 232, 0, 829, 484, 234, 485, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 369, 240, 486,
	242, 243, 245, 244, 767, 0, 796, 825, 246, 849,
	247, 248, 0, 249, 0, 0, 250, 0, 0, 251,
	372, 487, 252, 488, 819, 253, 254, 255, 256, 257,
	0, 258, 820, 259, 375, 260, 0, 261, 262, 263,
	264, 265, 266, 850, 267, 268, 0, 269, 270, 271,
	272, 273, 275, 276, 274, 277, 278, 279, 280, 0,
	281, 489, 282, 283, 773, 284, 0, 288, 289, 290,
	291, 133, 293, 378, 292, 294, 295, 813, 296, 285,
	286, 297, 490, 298, 851, 380, 299, 0, 306, 300,
	301, 287, 302, 305, 852, 303, 304, 821, 0, 307,
	135, 308, 309, 310, 311, 312, 313, 314, 0, 383,
	853, 854, 0, 0, 315, 316, 822, 823, 794, 317,
	318, 319, 320, 0, 0, 321, 322, 323, 324, 814,
	325, 0, 388, 326, 327, 328, 917, 855, 0, 0,
	329, 0, 0, 0, 127, 330, 331, 332, 333, 334,
	768, 128, 0, 0, 0, 0, 766, 0, 0, 0,
	0, 764, 765, 799, 788, 789, 786, 787, 778, 0,
	1148, 0, 0, 0, 0, 0, 777, 0, 0, 177,
	178, 0, 179, 0, 0, 0, 0, 816, 781, 0,
	0, 0, 180, 181, 182, 336, 831, 338, 832, 183,
	833, 834, 0, 184, 342, 343, 185, 186, 784, 815,
	835, 836, 346, 0, 187, 827, 0, 807, 0, 188,
	189, 190, 0, 191, 0, 192, 193, 194, 0, 478,
	195, 196, 197, 0, 808, 809, 811, 0, 810, 812,
	198, 199, 398, 200, 837, 201, 838, 839, 0, 202,
	0, 203, 0, 204, 0, 0, 830, 206, 0, 207,
	0, 0, 0, 772, 208, 209, 210, 817, 818, 795,
	0, 0, 211, 212, 840, 841, 842, 0, 213, 0,
	214, 0, 0, 479, 215, 0, 216, 828, 0, 358,
	0, 217, 218, 219, 220, 221, 824, 826, 481, 0,
	225, 0, 222, 0, 480, 223, 843, 224, 844, 845,
	846, 847, 848, 0, 806, 0, 482, 226, 227, 228,
	483, 229, 230, 231, 0, 233, 232, 0, 829, 484,
	234, 485, 0, 235, 0, 0, 236, 0, 237, 238,
	239, 241, 369, 240, 486, 242, 243, 245, 244, 767,
	0, 796, 825, 246, 849, 247, 248, 0, 249, 0,
	0, 250, 0, 0, 251, 372, 487, 252, 488, 819,
	253, 254, 255, 256, 257, 0, 258, 820, 259, 375,
	260, 0, 261, 262, 263, 264, 265, 266, 850, 267,
	268, 0, 269, 270, 271, 272, 273, 275, 276, 274,
	277, 278, 279, 280, 0, 281, 489, 282, 283, 773,
	284, 0, 288, 289, 290, 291, 133, 293, 378, 292,
	294, 295, 813, 296, 285, 286, 297, 490, 298, 851,
	380, 299, 0, 306, 300, 301, 287, 302, 305, 852,
	303, 304, 821, 0, 307, 135, 308, 309, 310, 311,
	312, 313, 314, 0, 383, 853, 854, 0, 0, 315,
	316, 822, 823, 794, 317, 318, 319, 320, 0, 0,
	321, 322, 323, 324, 814, 325, 0, 388, 326, 327,
	328, 917, 855, 0, 0, 329, 0, 0, 0, 127,
	330, 331, 332, 333, 334, 768, 128, 0, 0, 0,
	0, 766, 0, 0, 0, 0, 764, 765, 799, 788,
	789, 786, 787, 778, 0, 1148, 0, 0, 0, 0,
	0, 777, 0, 0, 177, 178, 0, 179, 0, 0,
	0, 0, 816, 781, 0, 0, 0, 180, 181, 182,
	336, 831, 338, 832, 183, 833, 834, 1582, 184, 342,
	343, 185, 186, 784, 815, 835, 836, 346, 0, 187,
	827, 0, 807, 0, 188, 189, 190, 0, 191, 0,
	192, 193, 194, 0, 478, 195, 196, 197, 0, 808,
	809, 811, 0, 810, 812, 198, 199, 398, 200, 837,
	201, 838, 839, 0, 202, 0, 203, 0, 204, 0,
	0, 830, 206, 0, 207, 0, 0, 0, 772, 208,
	209, 210, 817, 818, 795, 0, 0, 211, 212, 840,
	841, 842, 0, 213, 0, 214, 0, 1587, 479, 215,
	0, 216, 828, 0, 358, 0, 217, 218, 219, 220,
	221, 824, 826, 481, 0, 225, 0, 222, 0, 480,
	223, 843, 224, 844, 845, 846, 847, 848, 0, 806,
	0, 482, 226, 227, 228, 483, 229, 230, 231, 0,
	233, 232, 1583, 829, 484, 234, 485, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 369, 240, 486,
	242, 243, 245, 244, 767, 0, 796, 825, 246, 849,
	247, 248, 0, 249, 0, 0, 250, 0, 0, 251,
	372, 487, 252, 488, 819, 253, 254, 255, 256, 257,
	0, 258, 820, 259, 375, 260, 0, 261, 262, 263,
	264, 265, 266, 850, 267, 268, 0, 269, 270, 271,
	272, 273, 275, 276, 274, 277, 278, 279, 280, 0,
	281, 489, 282, 283, 773, 284, 0, 288, 289, 290,
	291, 0, 293, 378, 292, 294, 295, 813, 296, 285,
	286, 297, 490, 298, 851, 380, 299, 0, 306, 300,
	301, 287, 302, 305, 852, 303, 304, 821, 0, 307,
	0, 308, 309, 310, 311, 312, 313, 314, 0, 383,
	853, 854, 0, 1584, 315, 316, 822, 823, 794, 317,
	318, 319, 320, 0, 0, 321, 322, 323, 324, 814,
	325, 0, 388, 326, 327, 328, 389, 855, 0, 0,
	329, 0, 0, 0, 0, 330, 331, 332, 333, 334,
	768, 0, 0, 0, 0, 0, 766, 0, 0, 0,
	0, 764, 765, 799, 788, 789, 786, 787, 778, 0,
	774, 0, 0, 0, 0, 0, 777, 0, 0, 177,
	178, 0, 179, 0, 0, 0, 0, 816, 781, 0,
	0, 0, 180, 181, 182, 336, 831, 338, 832, 183,
	833, 834, 0, 184, 342, 343, 185, 186, 784, 815,
	835, 836, 346, 0, 187, 827, 0, 807, 0, 188,
	189, 190, 0, 191, 0, 192, 193, 194, 0, 478,
	195, 196, 197, 0, 808, 809, 811, 0, 810, 812,
	198, 199, 398, 200, 837, 201, 838, 839, 0, 202,
	0, 203, 0, 204, 0, 0, 830, 206, 0, 207,
	0, 0, 0, 772, 208, 209, 210, 817, 818, 795,
	0, 0, 211, 212, 840, 841, 842, 0, 213, 0,
	214, 0, 0, 479, 215, 0, 216, 828, 0, 358,
	0, 217, 218, 219, 220, 221, 824, 826, 481, 0,
	225, 0, 222, 0, 480, 223, 843, 224, 844, 845,
	846, 847, 848, 0, 806, 0, 482, 226, 227, 228,
	483, 229, 230, 231, 0, 233, 232, 0, 829, 484,
	234, 485, 0, 235, 0, 0, 236, 0, 237, 238,
	239, 241, 369, 240, 486, 242, 243, 245, 244, 767,
	2107, 796, 825, 246, 849, 247, 248, 0, 249, 0,
	0, 250, 0, 0, 251, 372, 487, 252, 488, 819,
	253, 254, 255, 256, 257, 0, 258, 820, 259, 375,
	260, 0, 261, 262, 263, 264, 265, 266, 850, 267,
	268, 0, 269, 270, 271, 272, 273, 275, 276, 274,
	277, 278, 279, 280, 0, 281, 489, 282, 283, 773,
	284, 0, 288, 289, 290, 291, 0, 293, 378, 292,
	294, 295, 813, 296, 285, 286, 297, 490, 298, 851,
	380, 299, 0, 306, 300, 301, 287, 302, 305, 852,
	303, 304, 821, 0, 307, 0, 308, 309, 310, 311,
	312, 313, 314, 0, 383, 853, 854, 0, 0, 315,
	316, 822, 823, 794, 317, 318, 319, 320, 0, 0,
	321, 322, 323, 324, 814, 325, 0, 388, 326, 327,
	328, 389, 855, 0, 0, 329, 0, 0, 0, 0,
	330, 331, 332, 333, 334, 768, 0, 0, 0, 0,
	0, 766, 0, 0, 0, 0, 764, 765, 1042, 799,
	788, 789, 786, 787, 778, 774, 0, 0, 0, 0,
	0, 777, 0, 0, 0, 177, 178, 0, 179, 0,
	0, 0, 0, 816, 781, 0, 0, 0, 180, 181,
	182, 336, 831, 338, 832, 183, 833, 834, 0, 184,
	342, 343, 185, 186, 784, 815, 835, 836, 346, 0,
	187, 827, 0, 807, 0, 188, 189, 190, 0, 191,
	0, 192, 193, 194, 0, 478, 195, 196, 197, 0,
	808, 809, 811, 0, 810, 812, 198, 199, 398, 200,
	837, 201, 838, 839, 0, 202, 0, 203, 0, 204,
	0, 0, 830, 206, 0, 207, 0, 0, 0, 772,
	208, 209, 210, 817, 818, 795, 0, 0, 211, 212,
	840, 841, 842, 0, 213, 0, 214, 0, 0, 479,
	215, 0, 216, 828, 0, 358, 0, 217, 218, 219,
	220, 221, 824, 826, 481, 0, 225, 1370, 222, 0,
	480, 223, 843, 224, 844, 845, 846, 847, 848, 0,
	806, 0, 482, 226, 227, 228, 483, 229, 230, 231,
	0, 233, 232, 0, 829, 484, 234, 485, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 369, 240,
	486, 242, 243, 245, 244, 767, 0, 796, 825, 246,
	849, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 372, 487, 252, 488, 819, 253, 254, 255, 256,
	257, 0, 258, 820, 259, 375, 260, 1369, 261, 262,
	263, 264, 265, 266, 850, 267, 268, 0, 269, 270,
	271, 272, 273, 275, 276, 274, 277, 278, 279, 280,
	0, 281, 489, 282, 283, 773, 284, 0, 288, 289,
	290, 291, 0, 293, 378, 292, 294, 295, 813, 296,
	285, 286, 297, 490, 298, 851, 380, 299, 0, 306,
	300, 301, 287, 302, 305, 852, 303, 304, 821, 0,
	307, 0, 308, 309, 310, 311, 312, 313, 314, 0,
	383, 853, 854, 0, 0, 315, 316, 822, 823, 794,
	317, 318, 319, 320, 0, 0, 321, 322, 323, 324,
	814, 325, 0, 388, 326, 327, 328, 389, 855, 0,
	0, 329, 0, 0, 0, 0, 330, 331, 332, 333,
	334, 768, 0, 0, 0, 0, 0, 766, 0, 0,
	0, 0, 764, 765, 799, 788, 789, 786, 787, 778,
	0, 774, 0, 0, 0, 0, 0, 777, 0, 0,
	177, 178, 0, 179, 0, 0, 0, 0, 816, 781,
	0, 0, 0, 180, 181, 182, 336, 831, 338, 832,
	183, 833, 834, 0, 184, 342, 343, 185, 186, 784,
	815, 835, 836, 346, 0, 187, 827, 0, 807, 0,
	188, 189, 190, 0, 191, 0, 192, 193, 194, 0,
	478, 195, 196, 197, 0, 808, 809, 811, 0, 810,
	812, 198, 199, 398, 200, 837, 201, 838, 839, 0,
	202, 0, 203, 0, 204, 0, 0, 830, 206, 0,
	207, 0, 0, 0, 772, 208, 209, 210, 817, 818,
	795, 0, 0, 211, 212, 840, 841, 842, 0, 213,
	0, 214, 0, 0, 479, 215, 0, 216, 828, 0,
	358, 0, 217, 218, 219, 220, 221, 824, 826, 481,
	0, 225, 0, 222, 0, 480, 223, 843, 224, 844,
	845, 846, 847, 848, 0, 806, 0, 482, 226, 227,
	228, 483, 229, 230, 231, 0, 233, 232, 0, 829,
	484, 234, 485, 0, 235, 0, 0, 236, 0, 237,
	238, 239, 241, 369, 240, 486, 242, 243, 245, 244,
	767, 0, 796, 825, 246, 849, 247, 248, 0, 249,
	0, 0, 250, 0, 0, 251, 372, 487, 252, 488,
	819, 253, 254, 255, 256, 257, 0, 258, 820, 259,
	375, 260, 0, 261, 262, 263, 264, 265, 266, 850,
	267, 268, 0, 269, 270, 271, 272, 273, 275, 276,
	274, 277, 278, 279, 280, 0, 281, 489, 282, 283,
	773, 284, 0, 288, 289, 290, 291, 0, 293, 378,
	292, 294, 295, 813, 296, 285, 286, 297, 490, 298,
	851, 380, 299, 0, 306, 300, 301, 287, 302, 305,
	852, 303, 304, 821, 0, 307, 0, 308, 309, 310,
	311, 312, 313, 314, 0, 383, 853, 854, 0, 0,
	315, 316, 822, 823, 794, 317, 318, 319, 320, 0,
	0, 321, 322, 323, 324, 814, 325, 0, 388, 326,
	327, 328, 389, 855, 0, 0, 329, 0, 0, 0,
	0, 330, 331, 332, 333, 334, 768, 0, 0, 0,
	0, 0, 766, 0, 0, 0, 0, 764, 765, 0,
	0, 0, 0, 0, 1152, 1519, 774, 0, 0, 0,
	0, 0, 777, 799, 788, 789, 786, 787, 778, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 177,
	178, 0, 179, 0, 0, 0, 0, 816, 781, 0,
	0, 0, 180, 181, 182, 336, 831, 338, 832, 183,
	833, 834, 0, 184, 342, 343, 185, 186, 784, 815,
	835, 836, 346, 0, 187, 827, 0, 807, 0, 188,
	189, 190, 0, 191, 0, 192, 193, 194, 0, 478,
	195, 196, 197, 0, 808, 809, 811, 0, 810, 812,
	198, 199, 398, 200, 837, 201, 838, 839, 1047, 202,
	0, 203, 0, 204, 0, 0, 830, 206, 0, 207,
	0, 0, 0, 772, 208, 209, 210, 817, 818, 795,
	0, 0, 211, 212, 840, 841, 842, 0, 213, 0,
	214, 0, 0, 479, 215, 0, 216, 828, 0, 358,
	0, 217, 218, 219, 220, 221, 824, 826, 481, 0,
	225, 0, 222, 0, 480, 223, 843, 224, 844, 845,
	846, 847, 848, 0, 806, 0, 482, 226, 227, 228,
	483, 229, 230, 231, 0, 233, 232, 0, 829, 484,
	234, 485, 0, 235, 0, 0, 236, 0, 237, 238,
	239, 241, 369, 240, 486, 242, 243, 245, 244, 767,
	0, 796, 825, 246, 849, 247, 248, 0, 249, 0,
	0, 250, 0, 0, 251, 372, 487, 252, 488, 819,
	253, 254, 255, 256, 257, 0, 258, 820, 259, 375,
	260, 0, 261, 262, 263, 264, 265, 266, 850, 267,
	268, 0, 269, 270, 271, 272, 273, 275, 276, 274,
	277, 278, 279, 280, 0, 281, 489, 282, 283, 773,
	284, 0, 288, 289, 290, 291, 0, 293, 378, 292,
	294, 295, 813, 296, 285, 286, 297, 490, 298, 851,
	380, 299, 0, 306, 300, 301, 287, 302, 305, 852,
	303, 304, 821, 0, 307, 0, 308, 309, 310, 311,
	312, 313, 314, 0, 383, 853, 854, 0, 0, 315,
	316, 822, 823, 794, 317, 318, 319, 320, 0, 0,
	321, 322, 323, 324, 814, 325, 0, 388, 326, 327,
	328, 389, 855, 0, 0, 329, 0, 0, 0, 0,
	330, 331, 332, 333, 334, 768, 0, 0, 0, 0,
	0, 766, 0, 0, 0, 0, 764, 765, 799, 788,
	789, 786, 787, 778, 0, 774, 0, 0, 0, 0,
	0, 777, 0, 0, 177, 178, 0, 179, 0, 0,
	0, 0, 816, 781, 0, 0, 0, 180, 181, 182,
	336, 831, 338, 832, 183, 833, 834, 0, 184, 342,
	343, 185, 186, 784, 815, 835, 836, 346, 0, 187,
	827, 0, 807, 0, 188, 189, 190, 0, 191, 0,
	192, 193, 194, 0, 478, 195, 196, 197, 0, 808,
	809, 811, 0, 810, 812, 198, 199, 398, 200, 837,
	201, 838, 839, 0, 202, 0, 203, 0, 204, 0,
	0, 830, 206, 0, 207, 0, 0, 0, 772, 208,
	209, 210, 817, 818, 795, 0, 0, 211, 212, 840,
	841, 842, 0, 213, 0, 214, 0, 0, 479, 215,
	0, 216, 828, 0, 358, 0, 217, 218, 219, 220,
	221, 824, 826, 481, 0, 225, 0, 222, 0, 480,
	223, 843, 224, 844, 845, 846, 847, 848, 0, 806,
	0, 482, 226, 227, 228, 483, 229, 230, 231, 0,
	233, 232, 0, 829, 484, 234, 485, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 369, 240, 486,
	242, 243, 245, 244, 767, 0, 796, 825, 246, 849,
	247, 248, 0, 249, 0, 0, 250, 0, 0, 251,
	372, 487, 252, 488, 819, 253, 254, 255, 256, 257,
	0, 258, 820, 259, 375, 260, 0, 261, 262, 263,
	264, 265, 266, 850, 267, 268, 0, 269, 270, 271,
	272, 273, 275, 276, 274, 277, 278, 279, 280, 0,
	281, 489, 282, 283, 773, 284, 0, 288, 289, 290,
	291, 0, 293, 378, 292, 294, 295, 813, 296, 285,
	286, 297, 490, 298, 851, 380, 299, 0, 306, 300,
	301, 287, 302, 305, 852, 303, 304, 821, 0, 307,
	0, 308, 309, 310, 311, 312, 313, 314, 0, 383,
	853, 854, 0, 0, 315, 316, 822, 823, 794, 317,
	318, 319, 320, 0, 0, 321, 322, 323, 324, 814,
	325, 0, 388, 326, 327, 328, 389, 855, 0, 0,
	329, 0, 0, 0, 0, 330, 331, 332, 333, 334,
	768, 0, 0, 0, 0, 0, 766, 0, 0, 0,
	0, 764, 765, 799, 788, 789, 786, 787, 778, 0,
	774, 2075, 0, 0, 0, 0, 777, 0, 0, 177,
	178, 0, 179, 0, 0, 0, 0, 816, 781, 0,
	0, 0, 180, 181, 182, 336, 831, 338, 832, 183,
	833, 834, 0, 184, 342, 343, 185, 186, 784, 815,
	835, 836, 346, 0, 187, 827, 0, 807, 0, 188,
	189, 190, 0, 191, 0, 192, 193, 194, 0, 478,
	195, 196, 197, 0, 808, 809, 811, 0, 810, 812,
	198, 199, 398, 200, 837, 201, 838, 839, 0, 202,
	0, 203, 0, 204, 0, 0, 830, 206, 0, 207,
	0, 0, 0, 772, 208, 209, 210, 817, 818, 795,
	0, 0, 211, 212, 840, 841, 842, 0, 213, 0,
	214, 0, 0, 479, 215, 0, 216, 828, 0, 358,
	0, 217, 218, 219, 220, 221, 824, 826, 481, 0,
	225, 0, 222, 0, 480, 223, 843, 224, 844, 845,
	846, 847, 848, 0, 806, 0, 482, 226, 227, 228,
	483, 229, 230, 231, 0, 233, 232, 0, 829, 484,
	234, 485, 0, 235, 0, 0, 236, 0, 237, 238,
	239, 241, 369, 240, 486, 242, 243, 245, 244, 767,
	0, 796, 825, 246, 849, 247, 248, 0, 249, 0,
	0, 250, 0, 0, 251, 372, 487, 252, 488, 819,
	253, 254, 255, 256, 257, 0, 258, 820, 259, 375,
	260, 0, 261, 262, 263, 264, 265, 266, 850, 267,
	268, 0, 269, 270, 271, 272, 273, 275, 276, 274,
	277, 278, 279, 280, 0, 281, 489, 282, 283, 773,
	284, 0, 288, 289, 290, 291, 0, 293, 378, 292,
	294, 295, 813, 296, 285, 286, 297, 490, 298, 851,
	380, 299, 0, 306, 300, 301, 287, 302, 305, 852,
	303, 304, 821, 0, 307, 0, 308, 309, 310, 311,
	312, 313, 314, 0, 383, 853, 854, 0, 0, 315,
	316, 822, 823, 794, 317, 318, 319, 320, 0, 0,
	321, 322, 323, 324, 814, 325, 0, 388, 326, 327,
	328, 389, 855, 2024, 0, 329, 0, 0, 0, 0,
	330, 331, 332, 333, 334, 768, 0, 0, 0, 0,
	0, 766, 0, 0, 0, 0, 764, 765, 799, 788,
	789, 786, 787, 778, 0, 774, 0, 0, 0, 0,
	0, 777, 0, 0, 177, 178, 0, 179, 0, 0,
	0, 0, 816, 781, 0, 0, 0, 180, 181, 182,
	336, 831, 338, 832, 183, 833, 834, 0, 184, 342,
	343, 185, 186, 784, 815, 835, 836, 346, 0, 187,
	827, 0, 807, 0, 188, 189, 190, 0, 191, 0,
	192, 193, 194, 0, 478, 195, 196, 197, 0, 808,
	809, 811, 0, 810, 812, 198, 199, 398, 200, 837,
	201, 838, 839, 0, 202, 0, 203, 0, 204, 0,
	0, 830, 206, 0, 207, 0, 0, 0, 772, 208,
	209, 210, 817, 818, 795, 0, 0, 211, 212, 840,
	841, 842, 0, 213, 0, 214, 0, 0, 479, 215,
	0, 216, 828, 0, 358, 0, 217, 218, 219, 220,
	221, 824, 826, 481, 0, 225, 0, 222, 0, 480,
	223, 843, 224, 844, 845, 846, 847, 848, 0, 806,
	0, 482, 226, 227, 228, 483, 229, 230, 231, 0,
	233, 232, 0, 829, 484, 234, 485, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 369, 240, 486,
	242, 243, 245, 244, 767, 0, 796, 825, 246, 849,
	247, 248, 0, 249, 0, 0, 250, 0, 0, 251,
	372, 487, 252, 488, 819, 253, 254, 255, 256, 257,
	0, 258, 820, 259, 375, 260, 0, 261, 262, 263,
	264, 265, 266, 850, 267, 268, 0, 269, 270, 271,
	272, 273, 275, 276, 274, 277, 278, 279, 280, 0,
	281, 489, 282, 283, 773, 284, 0, 288, 289, 290,
	291, 0, 293, 378, 292, 294, 295, 813, 296, 285,
	286, 297, 490, 298, 851, 380, 299, 0, 306, 300,
	301, 287, 302, 305, 852, 303, 304, 821, 0, 307,
	0, 308, 309, 310, 311, 312, 313, 314, 0, 383,
	853, 854, 0, 0, 315, 316, 822, 823, 794, 317,
	318, 319, 320, 0, 0, 321, 322, 323, 324, 814,
	325, 0, 388, 326, 327, 328, 389, 855, 0, 0,
	329, 0, 0, 0, 0, 330, 331, 332, 333, 334,
	768, 0, 0, 0, 0, 0, 766, 0, 0, 0,
	0, 764, 765, 799, 788, 789, 786, 787, 778, 0,
	774, 2014, 0, 0, 0, 0, 777, 0, 0, 177,
	178, 0, 179, 0, 0, 0, 0, 816, 781, 0,
	0, 0, 180, 181, 182, 336, 831, 338, 832, 183,
	833, 834, 0, 184, 342, 343, 185, 186, 784, 815,
	835, 836, 346, 0, 187, 827, 0, 807, 0, 188,
	189, 190, 0, 191, 0, 192, 193, 194, 0, 478,
	195, 196, 197, 0, 808, 809, 811, 0, 810, 812,
	198, 199, 398, 200, 837, 201, 838, 839, 0, 202,
	0, 203, 0, 204, 0, 0, 830, 206, 0, 207,
	0, 0, 0, 772, 208, 209, 210, 817, 818, 795,
	0, 0, 211, 212, 840, 841, 842, 0, 213, 0,
	214, 0, 1587, 479, 215, 0, 216, 828, 0, 358,
	0, 217, 218, 219, 220, 221, 824, 826, 481, 0,
	225, 0, 222, 0, 480, 223, 843, 224, 844, 845,
	846, 847, 848, 0, 806, 0, 482, 226, 227, 228,
	483, 229, 230, 231, 0, 233, 232, 0, 829, 484,
	234, 485, 0, 235, 0, 0, 236, 0, 237, 238,
	239, 241, 369, 240, 486, 242, 243, 245, 244, 767,
	0, 796, 825, 246, 849, 247, 248, 0, 249, 0,
	0, 250, 0, 0, 251, 372, 487, 252, 488, 819,
	253, 254, 255, 256, 257, 0, 258, 820, 259, 375,
	260, 0, 261, 262, 263, 264, 265, 266, 850, 267,
	268, 0, 269, 270, 271, 272, 273, 275, 276, 274,
	277, 278, 279, 280, 0, 281, 489, 282, 283, 773,
	284, 0, 288, 289, 290, 291, 0, 293, 378, 292,
	294, 295, 813, 296, 285, 286, 297, 490, 298, 851,
	380, 299, 0, 306, 300, 301, 287, 302, 305, 852,
	303, 304, 821, 0, 307, 0, 308, 309, 310, 311,
	312, 313, 314, 0, 383, 853, 854, 0, 0, 315,
	316, 822, 823, 794, 317, 318, 319, 320, 0, 0,
	321, 322, 323, 324, 814, 325, 0, 388, 326, 327,
	328, 389, 855, 0, 0, 329, 0, 0, 0, 0,
	330, 331, 332, 333, 334, 768, 0, 0, 0, 0,
	0, 766, 0, 0, 0, 0, 764, 765, 799, 788,
	789, 786, 787, 778, 0, 774, 0, 0, 0, 0,
	0, 777, 0, 0, 177, 178, 0, 179, 0, 0,
	0, 0, 816, 781, 0, 0, 0, 180, 181, 182,
	336, 831, 338, 832, 183, 833, 834, 0, 184, 342,
	343, 185, 186, 784, 815, 835, 836, 346, 0, 187,
	827, 0, 807, 0, 188, 189, 190, 0, 191, 0,
	192, 193, 194, 0, 478, 195, 196, 197, 0, 808,
	809, 811, 0, 810, 812, 198, 199, 398, 200, 837,
	201, 838, 839, 0, 202, 0, 203, 0, 204, 0,
	0, 830, 206, 0, 207, 0, 0, 0, 772, 208,
	209, 210, 817, 818, 795, 0, 0, 211, 212, 840,
	841, 842, 0, 213, 0, 214, 0, 0, 479, 215,
	0, 216, 828, 0, 358, 0, 217, 218, 219, 220,
	221, 824, 826, 481, 0, 225, 0, 222, 0, 480,
	223, 843, 224, 844, 845, 846, 847, 848, 0, 806,
	0, 482, 226, 227, 228, 483, 229, 230, 231, 0,
	233, 232, 0, 829, 484, 234, 485, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 369, 240, 486,
	242, 243, 245, 244, 767, 0, 796, 825, 246, 849,
	247, 248, 0, 249, 0, 0, 250, 0, 0, 251,
	372, 487, 252, 488, 819, 253, 254, 255, 256, 257,
	0, 258, 820, 259, 375, 260, 0, 261, 262, 263,
	264, 265, 266, 850, 267, 268, 0, 269, 270, 271,
	272, 273, 275, 276, 274, 277, 278, 279, 280, 0,
	281, 489, 282, 283, 773, 284, 0, 288, 289, 290,
	291, 0, 293, 378, 292, 294, 295, 813, 296, 285,
	286, 297, 490, 298, 851, 380, 299, 0, 306, 300,
	301, 287, 302, 305, 852, 303, 304, 821, 0, 307,
	0, 308, 309, 310, 311, 312, 313, 314, 0, 383,
	853, 854, 0, 0, 315, 316, 822, 823, 794, 317,
	318, 319, 320, 0, 0, 321, 322, 323, 324, 814,
	325, 0, 388, 326, 327, 328, 389, 855, 0, 0,
	329, 0, 0, 0, 0, 330, 331, 332, 333, 334,
	768, 0, 0, 0, 0, 0, 766, 0, 0, 0,
	0, 764, 765, 1042, 0, 0, 0, 0, 0, 0,
	774, 0, 0, 0, 0, 1596, 777, 799, 788, 789,
	786, 787, 778, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 177, 178, 0, 179, 0, 0, 0,
	0, 816, 781, 0, 0, 0, 180, 181, 182, 336,
	831, 338, 832, 183, 833, 834, 0, 184, 342, 343,
	185, 186, 784, 815, 835, 836, 346, 0, 187, 827,
	0, 807, 0, 188, 189, 190, 0, 191, 0, 192,
	193, 194, 0, 478, 195, 196, 197, 0, 808, 809,
	811, 0, 810, 812, 198, 199, 398, 200, 837, 201,
	838, 839, 0, 202, 0, 203, 0, 204, 0, 0,
	830, 206, 0, 207, 0, 0, 0, 772, 208, 209,
	210, 817, 818, 795, 0, 0, 211, 212, 840, 841,
	842, 0, 213, 0, 214, 0, 0, 479, 215, 0,
	216, 828, 0, 358, 0, 217, 218, 219, 220, 221,
	824, 826, 481, 0, 225, 0, 222, 0, 480, 223,
	843, 224, 844, 845, 846, 847, 848, 0, 806, 0,
	482, 226, 227, 228, 483, 229, 230, 231, 0, 233,
	232, 0, 829, 484, 234, 485, 0, 235, 0, 0,
	236, 0, 237, 238, 239, 241, 369, 240, 486, 242,
	243, 245, 244, 767, 0, 796, 825, 246, 849, 247,
	248, 0, 249, 0, 0, 250, 0, 0, 251, 372,
	487, 252, 488, 819, 253, 254, 255, 256, 257, 0,
	258, 820, 259, 375, 260, 0, 261, 262, 263, 264,
	265, 266, 850, 267, 268, 0, 269, 270, 271, 272,
	273, 275, 276, 274, 277, 278, 279, 280, 0, 281,
	489, 282, 283, 773, 284, 0, 288, 289, 290, 291,
	0, 293, 378, 292, 294, 295, 813, 296, 285, 286,
	297, 490, 298, 851, 380, 299, 0, 306, 300, 301,
	287, 302, 305, 852, 303, 304, 821, 0, 307, 0,
	308, 309, 310, 311, 312, 313, 314, 0, 383, 853,
	854, 0, 0, 315, 316, 822, 823, 794, 317, 318,
	319, 320, 0, 0, 321, 322, 323, 324, 814, 325,
	0, 388, 326, 327, 328, 389, 855, 0, 0, 329,
	0, 0, 0, 0, 330, 331, 332, 333, 334, 768,
	0, 0, 0, 0, 0, 766, 0, 0, 0, 0,
	764, 765, 0, 0, 0, 0, 0, 0, 0, 774,
	0, 0, 0, 0, 1594, 777, 799, 788, 789, 786,
	787, 778, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 177, 178, 0, 179, 0, 0, 0, 0,
	816, 781, 0, 0, 0, 180, 181, 182, 336, 831,
	338, 832, 183, 833, 834, 0, 184, 342, 343, 185,
	186, 784, 815, 835, 836, 346, 0, 187, 827, 0,
	807, 0, 188, 189, 190, 0, 191, 0, 192, 193,
	194, 0, 478, 195, 196, 197, 0, 808, 809, 811,
	0, 810, 812, 198, 199, 398, 200, 837, 201, 838,
	839, 0, 202, 0, 203, 0, 204, 0, 0, 830,
	206, 0, 207, 0, 0, 0, 772, 208, 209, 210,
	817, 818, 795, 0, 0, 211, 212, 840, 841, 842,
	0, 213, 0, 214, 0, 0, 479, 215, 0, 216,
	828, 0, 358, 0, 217, 218, 219, 220, 221, 824,
	826, 481, 0, 225, 0, 222, 0, 480, 223, 843,
	224, 844, 845, 846, 847, 848, 0, 806, 0, 482,
	226, 227, 228, 483, 229, 230, 231, 0, 233, 232,
	0, 829, 484, 234, 485, 0, 235, 0, 0, 236,
	0, 237, 238, 239, 241, 369, 240, 486, 242, 243,
	245, 244, 767, 0, 796, 825, 246, 849, 247, 248,
	0, 249, 0, 0, 250, 0, 0, 251, 372, 487,
	252, 488, 819, 253, 254, 255, 256, 257, 0, 258,
	820, 259, 375, 260, 0, 261, 262, 263, 264, 265,
	266, 850, 267, 268, 0, 269, 270, 271, 272, 273,
	275, 276, 274, 277, 278, 279, 280, 0, 281, 489,
	282, 283, 773, 284, 0, 288, 289, 290, 291, 0,
	293, 378, 292, 294, 295, 813, 296, 285, 286, 297,
	490, 298, 851, 380, 299, 0, 306, 300, 301, 287,
	302, 305, 852, 303, 304, 821, 0, 307, 0, 308,
	309, 310, 311, 312, 313, 314, 0, 383, 853, 854,
	0, 0, 315, 316, 822, 823, 794, 317, 318, 319,
	320, 0, 0, 321, 322, 323, 324, 814, 325, 0,
	388, 326, 327, 328, 389, 855, 0, 0, 329, 0,
	0, 0, 0, 330, 331, 332, 333, 334, 768, 0,
	0, 0, 0, 0, 766, 0, 0, 0, 0, 764,
	765, 0, 0, 0, 0, 0, 0, 0, 774, 0,
	0, 0, 0, 1578, 777, 799, 788, 789, 786, 787,
	778, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 177, 178, 0, 179, 0, 0, 0, 0, 816,
	781, 0, 0, 0, 180, 181, 182, 336, 831, 338,
	832, 183, 833, 834, 0, 184, 342, 343, 185, 186,
	784, 815, 835, 836, 346, 0, 187, 827, 0, 807,
	0, 188, 189, 190, 0, 191, 0, 192, 193, 194,
	0, 478, 195, 196, 197, 0, 808, 809, 811, 0,
	810, 812, 198, 199, 398, 200, 837, 201, 838, 839,
	0, 202, 0, 203, 0, 204, 0, 0, 830, 206,
	0, 207, 0, 0, 0, 772, 208, 209, 210, 817,
	818, 795, 0, 0, 211, 212, 840, 841, 842, 0,
	213, 0, 214, 0, 0, 479, 215, 0, 216, 828,
	0, 358, 0, 217, 218, 219, 220, 221, 824, 826,
	481, 0, 225, 0, 222, 0, 480, 223, 843, 224,
	844, 845, 846, 847, 848, 0, 806, 0, 482, 226,
	227, 228, 483, 229, 230, 231, 0, 233, 232, 0,
	829, 484, 234, 485, 0, 235, 0, 0, 236, 0,
	237, 238, 239, 241, 369, 240, 486, 242, 243, 245,
	244, 767, 0, 796, 825, 246, 849, 247, 248, 0,
	249, 0, 0, 250, 0, 0, 251, 372, 487, 252,
	488, 819, 253, 254, 255, 256, 257, 0, 258, 820,
	259, 375, 260, 0, 261, 262, 263, 264, 265, 266,
	850, 267, 268, 0, 269, 270, 271, 272, 273, 275,
	276, 274, 277, 278, 279, 280, 0, 281, 489, 282,
	283, 773, 284, 0, 288, 289, 290, 291, 0, 293,
	378, 292, 294, 295, 813, 296, 285, 286, 297, 490,
	298, 851, 380, 299, 0, 306, 300, 301, 287, 302,
	305, 852, 303, 304, 821, 0, 307, 0, 308, 309,
	310, 311, 312, 313, 314, 0, 383, 853, 854, 0,
	0, 315, 316, 822, 823, 794, 317, 318, 319, 320,
	0, 0, 321, 322, 323, 324, 814, 325, 0, 388,
	326, 327, 328, 389, 855, 0, 0, 329, 0, 0,
	0, 0, 330, 331, 332, 333, 334, 768, 0, 0,
	0, 0, 0, 766, 0, 0, 0, 0, 764, 765,
	0, 0, 0, 0, 0, 0, 0, 774, 0, 0,
	0, 0, 1566, 777, 799, 788, 789, 786, 787, 778,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	177, 178, 0, 179, 0, 0, 0, 0, 816, 781,
	0, 0, 0, 180, 181, 182, 336, 831, 338, 832,
	183, 833, 834, 0, 184, 342, 343, 185, 186, 784,
	815, 835, 836, 346, 0, 187, 827, 0, 807, 0,
	188, 189, 190, 0, 191, 0, 192, 193, 194, 0,
	478, 195, 196, 197, 0, 808, 809, 811, 0, 810,
	812, 198, 199, 398, 200, 837, 201, 838, 839, 0,
	202, 0, 203, 0, 204, 0, 0, 830, 206, 0,
	207, 0, 0, 0, 772, 208, 209, 210, 817, 818,
	795, 0, 0, 211, 212, 840, 841, 842, 0, 213,
	0, 214, 0, 0, 479, 215, 0, 216, 828, 0,
	358, 0, 217, 218, 219, 220, 221, 824, 826, 481,
	0, 225, 0, 222, 0, 480, 223, 843, 224, 844,
	845, 846, 847, 848, 0, 806, 0, 482, 226, 227,
	228, 483, 229, 230, 231, 0, 233, 232, 0, 829,
	484, 234, 485, 0, 235, 0, 0, 236, 0, 237,
	238, 239, 241, 369, 240, 486, 242, 243, 245, 244,
	767, 0, 796, 825, 246, 849, 247, 248, 0, 249,
	0, 0, 250, 0, 0, 251, 372, 487, 252, 488,
	819, 253, 254, 255, 256, 257, 0, 258, 820, 259,
	375, 260, 0, 261, 262, 263, 264, 265, 266, 850,
	267, 268, 0, 269, 270, 271, 272, 273, 275, 276,
	274, 277, 278, 279, 280, 0, 281, 489, 282, 283,
	773, 284, 0, 288, 289, 290, 291, 0, 293, 378,
	292, 294, 295, 813, 296, 285, 286, 297, 490, 298,
	851, 380, 299, 0, 306, 300, 301, 287, 302, 305,
	852, 303, 304, 821, 0, 307, 0, 308, 309, 310,
	311, 312, 313, 314, 0, 383, 853, 854, 0, 0,
	315, 316, 822, 823, 794, 317, 318, 319, 320, 0,
	0, 321, 322, 323, 324, 814, 325, 0, 388, 326,
	327, 328, 389, 855, 0, 0, 329, 0, 0, 0,
	0, 330, 331, 332, 333, 334, 768, 0, 0, 0,
	0, 0, 766, 0, 0, 0, 0, 764, 765, 0,
	0, 0, 0, 0, 0, 0, 774, 0, 0, 0,
	0, 1564, 777, 1556, 788, 789, 786, 787, 778, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 177,
	178, 0, 179, 0, 0, 0, 0, 816, 781, 0,
	0, 0, 180, 181, 182, 336, 831, 338, 832, 183,
	833, 834, 0, 184, 342, 343, 185, 186, 784, 815,
	835, 836, 346, 0, 187, 827, 0, 807, 0, 188,
	189, 190, 0, 191, 0, 192, 193, 194, 0, 478,
	195, 196, 197, 0, 808, 809, 811, 0, 810, 812,
	198, 199, 398, 200, 837, 1559, 838, 839, 0, 202,
	0, 203, 0, 204, 0, 0, 830, 206, 0, 207,
	0, 0, 0, 772, 208, 209, 210, 817, 818, 795,
	0, 0, 211, 212, 840, 841, 842, 0, 213, 0,
	214, 0, 0, 479, 215, 0, 216, 828, 0, 358,
	0, 217, 218, 1560, 220, 221, 824, 826, 481, 0,
	225, 0, 222, 0, 480, 223, 843, 224, 844, 845,
	846, 847, 848, 0, 806, 0, 482, 226, 227, 228,
	483, 229, 230, 231, 0, 233, 232, 0, 829, 484,
	234, 485, 0, 235, 0, 0, 236, 0, 237, 1561,
	1558, 241, 369, 240, 486, 242, 243, 245, 244, 767,
	0, 796, 825, 246, 849, 247, 248, 0, 249, 0,
	0, 250, 0, 0, 251, 372, 487, 252, 488, 819,
	253, 254, 255, 256, 257, 0, 258, 820, 259, 375,
	260, 0, 261, 262, 263, 264, 265, 266, 850, 267,
	268, 0, 269, 270, 271, 272, 273, 275, 276, 274,
	277, 278, 279, 280, 0, 281, 489, 282, 283, 773,
	284, 0, 288, 289, 290, 1562, 0, 293, 378, 292,
	294, 295, 813, 296, 285, 286, 297, 490, 298, 851,
	380, 299, 0, 306, 300, 301, 287, 302, 305, 852,
	303, 304, 821, 0, 307, 0, 308, 309, 310, 311,
	312, 313, 314, 0, 383, 853, 854, 0, 0, 315,
	316, 822, 823, 794, 317, 318, 319, 320, 0, 0,
	321, 322, 323, 324, 814, 325, 0, 388, 326, 327,
	328, 389, 855, 0, 0, 329, 0, 0, 0, 0,
	330, 331, 332, 1557, 334, 768, 0, 0, 0, 0,
	0, 766, 0, 0, 0, 0, 764, 765, 0, 0,
	0, 0, 0, 0, 0, 774, 0, 0, 0, 0,
	1553, 777, 1556, 788, 789, 786, 787, 778, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 177, 178,
	0, 179, 0, 0, 0, 0, 816, 781, 0, 0,
	0, 180, 181, 182, 336, 831, 338, 832, 183, 833,
	834, 0, 184, 342, 343, 185, 186, 784, 815, 835,
	836, 346, 0, 187, 827, 0, 807, 0, 188, 189,
	190, 0, 191, 0, 192, 193, 194, 0, 478, 195,
	196, 197, 0, 808, 809, 811, 0, 810, 812, 198,
	199, 398, 200, 837, 1559, 838, 839, 0, 202, 0,
	203, 0, 204, 0, 0, 830, 206, 0, 207, 0,
	0, 0, 772, 208, 209, 210, 817, 818, 795, 0,
	0, 211, 212, 840, 841, 842, 0, 213, 0, 214,
	0, 0, 479, 215, 0, 216, 828, 0, 358, 0,
	217, 218, 1560, 220, 221, 824, 826, 481, 0, 225,
	0, 222, 0, 480, 223, 843, 224, 844, 845, 846,
	847, 848, 0, 806, 0, 482, 226, 227, 228, 483,
	229, 230, 231, 0, 233, 232, 0, 829, 484, 234,
	485, 0, 235, 0, 0, 236, 0, 237, 1561, 1558,
	241, 369, 240, 486, 242, 243, 245, 244, 767, 0,
	796, 825, 246, 849, 247, 248, 0, 249, 0, 0,
	250, 0, 0, 251, 372, 487, 252, 488, 819, 253,
	254, 255, 256, 257, 0, 258, 820, 259, 375, 260,
	0, 261, 262, 263, 264, 265, 266, 850, 267, 268,
	0, 269, 270, 271, 272, 273, 275, 276, 274, 277,
	278, 279, 280, 0, 281, 489, 282, 283, 773, 284,
	0, 288, 289, 290, 1562, 0, 293, 378, 292, 294,
	295, 813, 296, 285, 286, 297, 490, 298, 851, 380,
	299, 0, 306, 300, 301, 287, 302, 305, 852, 303,
	304, 821, 0, 307, 0, 308, 309, 310, 311, 312,
	313, 314, 0, 383, 853, 854, 0, 0, 315, 316,
	822, 823, 794, 317, 318, 319, 320, 0, 0, 321,
	322, 323, 324, 814, 325, 0, 388, 326, 327, 328,
	389, 855, 0, 0, 329, 0, 0, 0, 0, 330,
	331, 332, 1557, 334, 768, 0, 0, 0, 0, 0,
	766, 0, 0, 0, 0, 764, 765, 799, 788, 789,
	786, 787, 778, 0, 774, 0, 0, 0, 0, 0,
	777, 0, 0, 177, 178, 0, 179, 0, 0, 0,
	0, 816, 781, 0, 0, 0, 180, 181, 182, 336,
	831, 338, 832, 183, 833, 834, 0, 184, 342, 343,
	185, 186, 784, 815, 835, 836, 346, 0, 187, 827,
	0, 807, 0, 188, 189, 190, 0, 191, 0, 192,
	193, 194, 0, 478, 195, 196, 197, 0, 808, 809,
	811, 0, 810, 812, 198, 199, 398, 200, 837, 201,
	838, 839, 0, 202, 0, 203, 0, 204, 0, 0,
	830, 206, 0, 207, 0, 0, 0, 772, 208, 209,
	210, 817, 818, 795, 0, 0, 211, 212, 840, 841,
	842, 0, 213, 0, 214, 0, 0, 479, 215, 0,
	216, 828, 0, 358, 0, 217, 218, 219, 220, 221,
	824, 826, 481, 0, 225, 0, 222, 0, 480, 223,
	843, 224, 844, 845, 846, 847, 848, 0, 806, 0,
	482, 226, 227, 228, 483, 229, 230, 231, 0, 233,
	232, 0, 829, 484, 234, 485, 0, 235, 0, 0,
	236, 0, 237, 238, 239, 241, 369, 240, 486, 242,
	243, 245, 244, 767, 0, 796, 825, 246, 849, 247,
	248, 0, 249, 0, 0, 250, 0, 0, 251, 372,
	487, 252, 488, 819, 253, 254, 255, 256, 257, 0,
	258, 820, 259, 375, 260, 0, 261, 262, 263, 264,
	265, 266, 850, 267, 268, 0, 269, 270, 271, 272,
	273, 275, 276, 274, 277, 278, 279, 280, 0, 281,
	489, 282, 283, 773, 284, 0, 288, 289, 290, 291,
	0, 293, 378, 292, 294, 295, 813, 296, 285, 286,
	297, 490, 298, 851, 380, 299, 0, 306, 300, 301,
	287, 302, 305, 852, 303, 304, 821, 0, 307, 0,
	308, 309, 310, 311, 312, 313, 314, 0, 383, 853,
	854, 0, 0, 315, 316, 822, 823, 794, 317, 318,
	319, 320, 0, 0, 321, 322, 323, 324, 814, 325,
	0, 388, 326, 327, 328, 389, 855, 0, 0, 329,
	0, 0, 0, 0, 330, 331, 332, 333, 334, 768,
	0, 0, 0, 0, 0, 766, 0, 0, 0, 0,
	764, 765, 0, 0, 0, 0, 0, 0, 0, 774,
	1514, 0, 0, 0, 1400, 777, 799, 788, 789, 786,
	787, 778, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 177, 178, 0, 179, 0, 0, 0, 0,
	816, 781, 0, 0, 0, 180, 181, 182, 336, 831,
	338, 832, 183, 833, 834, 0, 184, 342, 343, 185,
	186, 784, 815, 835, 836, 346, 0, 187, 827, 0,
	807, 0, 188, 189, 190, 0, 191, 0, 192, 193,
	194, 0, 478, 195, 196, 197, 0, 808, 809, 811,
	0, 810, 812, 198, 199, 398, 200, 837, 201, 838,
	839, 0, 202, 0, 203, 0, 204, 0, 0, 830,
	206, 0, 207, 0, 0, 0, 772, 208, 209, 210,
	817, 818, 795, 0, 0, 211, 212, 840, 841, 842,
	0, 213, 0, 214, 0, 0, 479, 215, 0, 216,
	828, 0, 358, 0, 217, 218, 219, 220, 221, 824,
	826, 481, 0, 225, 0, 222, 0, 480, 223, 843,
	224, 844, 845, 846, 847, 848, 0, 806, 0, 482,
	226, 227, 228, 483, 229, 230, 231, 0, 233, 232,
	0, 829, 484, 234, 485, 0, 235, 0, 0, 236,
	0, 237, 238, 239, 241, 369, 240, 486, 242, 243,
	245, 244, 767, 0, 796, 825, 246, 849, 247, 248,
	0, 249, 0, 0, 250, 0, 0, 251, 372, 487,
	252, 488, 819, 253, 254, 255, 256, 257, 0, 258,
	820, 259, 375, 260, 0, 261, 262, 263, 264, 265,
	266, 850, 267, 268, 0, 269, 270, 271, 272, 273,
	275, 276, 274, 277, 278, 279, 280, 0, 281, 489,
	282, 283, 773, 284, 0, 288, 289, 290, 291, 0,
	293, 378, 292, 294, 295, 813, 296, 285, 286, 297,
	490, 298, 851, 380, 299, 0, 306, 300, 301, 287,
	302, 305, 852, 303, 304, 821, 0, 307, 0, 308,
	309, 310, 311, 312, 313, 314, 0, 383, 853, 854,
	0, 0, 315, 316, 822, 823, 794, 317, 318, 319,
	320, 0, 0, 321, 322, 323, 324, 814, 325, 0,
	388, 326, 327, 328, 389, 855, 0, 0, 329, 0,
	0, 0, 0, 330, 331, 332, 333, 334, 768, 0,
	0, 0, 0, 0, 766, 0, 0, 0, 0, 764,
	765, 799, 788, 789, 786, 787, 778, 0, 774, 0,
	0, 0, 0, 0, 777, 0, 0, 177, 178, 1357,
	179, 0, 0, 0, 0, 816, 781, 0, 0, 0,
	180, 181, 182, 336, 831, 338, 832, 183, 833, 834,
	0, 184, 342, 343, 185, 186, 784, 815, 835, 836,
	346, 0, 187, 827, 0, 807, 0, 188, 189, 190,
	0, 191, 0, 192, 193, 194, 0, 478, 195, 196,
	197, 0, 808, 809, 811, 0, 810, 812, 198, 199,
	398, 200, 837, 201, 838, 839, 0, 202, 0, 203,
	0, 204, 0, 0, 830, 206, 0, 207, 0, 0,
	0, 772, 208, 209, 210, 817, 818, 795, 0, 0,
	211, 212, 840, 841, 842, 0, 213, 0, 214, 0,
	0, 479, 215, 0, 216, 828, 0, 358, 0, 217,
	218, 219, 220, 221, 824, 826, 481, 0, 225, 0,
	222, 0, 480, 223, 843, 224, 844, 845, 846, 847,
	848, 0, 806, 0, 482, 226, 227, 228, 483, 229,
	230, 231, 0, 233, 232, 0, 829, 484, 234, 485,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 486, 242, 243, 245, 244, 767, 0, 796,
	825, 246, 849, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 372, 487, 252, 488, 819, 253, 254,
	255, 256, 257, 0, 258, 820, 259, 375, 260, 0,
	261, 262, 263, 264, 265, 266, 850, 267, 268, 0,
	269, 270, 271, 272, 273, 275, 276, 274, 277, 278,
	279, 280, 0, 281, 489, 282, 283, 773, 284, 0,
	288, 289, 290, 291, 0, 293, 378, 292, 294, 295,
	813, 296, 285, 286, 297, 490, 298, 851, 380, 299,
	0, 306, 300, 301, 287, 302, 305, 852, 303, 304,
	821, 0, 307, 0, 308, 309, 310, 311, 312, 313,
	314, 0, 383, 853, 854, 0, 0, 315, 316, 822,
	823, 794, 317, 318, 319, 320, 0, 0, 321, 322,
	323, 324, 814, 325, 0, 388, 326, 327, 328, 389,
	855, 0, 0, 329, 0, 0, 0, 0, 330, 331,
	332, 333, 334, 768, 0, 0, 0, 0, 0, 766,
	0, 0, 0, 0, 764, 765, 0, 0, 0, 0,
	0, 0, 0, 774, 0, 0, 0, 0, 863, 777,
	799, 788, 789, 786, 787, 778, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 177, 178, 0, 179,
	0, 0, 0, 0, 816, 781, 0, 0, 0, 180,
	181, 182, 336, 831, 338, 832, 183, 833, 834, 0,
	184, 342, 343, 185, 186, 784, 815, 835, 836, 346,
	0, 187, 827, 0, 807, 0, 188, 189, 190, 0,
	191, 0, 192, 193, 194, 0, 478, 195, 196, 197,
	0, 808, 809, 811, 0, 810, 812, 198, 199, 398,
	200, 837, 201, 838, 839, 0, 202, 0, 203, 0,
	204, 0, 0, 830, 206, 0, 207, 0, 0, 0,
	772, 208, 209, 210, 817, 818, 795, 0, 0, 211,
	212, 840, 841, 842, 0, 213, 0, 214, 0, 0,
	479, 215, 0, 216, 828, 0, 358, 0, 217, 218,
	219, 220, 221, 824, 826, 481, 0, 225, 0, 222,
	0, 480, 223, 843, 224, 844, 845, 846, 847, 848,
	0, 806, 0, 482, 226, 227, 228, 483, 229, 230,
	231, 0, 233, 232, 0, 829, 484, 234, 485, 0,
	235, 0, 0, 236, 0, 237, 238, 239, 241, 369,
	240, 486, 242, 243, 245, 244, 767, 0, 796, 825,
	246, 849, 247, 248, 0, 249, 0, 0, 250, 0,
	0, 251, 372, 487, 252, 488, 819, 253, 254, 255,
	256, 257, 0, 258, 820, 259, 375, 260, 0, 261,
	262, 263, 264, 265, 266, 850, 267, 268, 0, 269,
	270, 271, 272, 273, 275, 276, 274, 277, 278, 279,
	280, 0, 281, 489, 282, 283, 773, 284, 0, 288,
	289, 290, 291, 0, 293, 378, 292, 294, 295, 813,
	296, 285, 286, 297, 490, 298, 851, 380, 299, 0,
	306, 300, 301, 287, 302, 305, 852, 303, 304, 821,
	0, 307, 0, 308, 309, 310, 311, 312, 313, 314,
	0, 383, 853, 854, 0, 0, 315, 316, 822, 823,
	794, 317, 318, 319, 320, 0, 0, 321, 322, 323,
	324, 814, 325, 0, 388, 326, 327, 328, 389, 855,
	0, 0, 329, 0, 0, 0, 0, 330, 331, 332,
	333, 334, 768, 0, 0, 0, 0, 0, 766, 0,
	0, 0, 0, 764, 765, 0, 0, 0, 0, 0,
	0, 0, 774, 0, 0, 0, 0, 762, 777, 799,
	788, 789, 786, 787, 778, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 177, 178, 0, 179, 0,
	0, 0, 0, 816, 781, 0, 0, 0, 180, 181,
	182, 336, 831, 338, 832, 183, 833, 834, 0, 184,
	342, 343, 185, 186, 784, 815, 835, 836, 346, 0,
	187, 827, 0, 807, 0, 188, 189, 190, 0, 191,
	0, 192, 193, 194, 0, 478, 195, 196, 197, 0,
	808, 809, 811, 0, 810, 812, 198, 199, 398, 200,
	837, 201, 838, 839, 0, 202, 0, 203, 0, 204,
	0, 0, 830, 206, 0, 207, 0, 0, 0, 772,
	208, 209, 210, 817, 818, 795, 0, 0, 211, 212,
	840, 841, 842, 0, 213, 0, 214, 0, 0, 479,
	215, 0, 216, 828, 0, 358, 0, 217, 218, 219,
	220, 221, 824, 826, 481, 0, 225, 0, 222, 0,
	480, 223, 843, 224, 844, 845, 846, 847, 848, 0,
	806, 0, 482, 226, 227, 228, 483, 229, 230, 231,
	0, 233, 232, 0, 829, 484, 234, 485, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 369, 240,
	486, 242, 243, 245, 244, 767, 0, 796, 825, 246,
	849, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 372, 487, 252, 488, 819, 253, 254, 255, 256,
	257, 0, 258, 820, 259, 375, 260, 0, 261, 262,
	263, 264, 265, 266, 850, 267, 268, 0, 269, 270,
	271, 272, 273, 275, 276, 274, 277, 278, 279, 280,
	0, 281, 489, 282, 283, 773, 284, 0, 288, 289,
	290, 291, 0, 293, 378, 292, 294, 295, 813, 296,
	285, 286, 297, 490, 298, 851, 380, 299, 0, 306,
	300, 301, 287, 302, 305, 852, 303, 304, 821, 0,
	307, 0, 308, 309, 310, 311, 312, 313, 314, 0,
	383, 853, 854, 0, 0, 315, 316, 822, 823, 794,
	317, 318, 319, 320, 0, 0, 321, 322, 323, 324,
	814, 325, 0, 388, 326, 327, 328, 389, 855, 0,
	0, 329, 0, 0, 0, 0, 330, 331, 332, 333,
	334, 768, 0, 0, 0, 0, 0, 766, 0, 0,
	0, 0, 764, 765, 799, 788, 789, 786, 787, 778,
	0, 774, 0, 0, 0, 0, 0, 777, 0, 0,
	177, 178, 0, 179, 0, 0, 0, 0, 816, 781,
	0, 0, 0, 180, 181, 182, 336, 831, 338, 832,
	183, 833, 834, 0, 184, 342, 343, 185, 186, 784,
	815, 835, 836, 346, 0, 187, 827, 0, 807, 0,
	188, 189, 190, 0, 191, 0, 192, 193, 194, 0,
	478, 195, 196, 2435, 0, 808, 809, 811, 0, 810,
	812, 198, 199, 398, 200, 837, 201, 838, 839, 0,
	202, 0, 203, 0, 204, 0, 0, 830, 206, 0,
	207, 0, 0, 0, 772, 208, 209, 210, 817, 818,
	795, 0, 0, 211, 212, 840, 841, 842, 0, 213,
	0, 214, 0, 0, 479, 215, 0, 216, 828, 0,
	358, 0, 217, 218, 219, 220, 221, 824, 826, 481,
	0, 225, 0, 222, 0, 480, 223, 843, 224, 844,
	845, 846, 847, 848, 0, 806, 0, 482, 226, 227,
	228, 483, 229, 230, 231, 0, 233, 232, 0, 829,
	484, 234, 485, 0, 235, 0, 0, 236, 0, 237,
	238, 239, 241, 369, 240, 486, 242, 243, 245, 244,
	767, 0, 796, 825, 246, 849, 247, 248, 0, 249,
	0, 0, 250, 0, 0, 251, 372, 487, 252, 488,
	819, 253, 254, 255, 256, 257, 0, 258, 820, 259,
	375, 260, 0, 261, 262, 263, 264, 265, 266, 850,
	267, 268, 0, 269, 270, 271, 272, 273, 275, 276,
	274, 277, 278, 279, 280, 0, 281, 489, 282, 283,
	773, 284, 0, 288, 289, 290, 291, 0, 293, 378,
	292, 294, 295, 813, 296, 285, 286, 297, 490, 298,
	851, 380, 299, 0, 306, 300, 301, 287, 302, 305,
	852, 303, 304, 821, 0, 307, 0, 308, 309, 310,
	311, 312, 313, 314, 0, 383, 853, 854, 0, 0,
	315, 316, 822, 823, 794, 317, 318, 2434, 320, 0,
	0, 321, 322, 323, 324, 814, 325, 0, 388, 326,
	327, 328, 389, 855, 0, 0, 329, 0, 0, 0,
	0, 330, 331, 332, 333, 334, 768, 0, 0, 0,
	0, 0, 766, 0, 0, 0, 0, 764, 765, 799,
	788, 789, 786, 787, 778, 0, 774, 0, 0, 0,
	0, 0, 777, 0, 0, 177, 178, 0, 179, 0,
	0, 0, 0, 816, 781, 0, 0, 0, 180, 181,
	182, 2433, 831, 338, 832, 183, 833, 834, 0, 184,
	342, 343, 185, 186, 784, 815, 835, 836, 346, 0,
	187, 827, 0, 807, 0, 188, 189, 190, 0, 191,
	0, 192, 193, 194, 0, 478, 195, 196, 2435, 0,
	808, 809, 811, 0, 810, 812, 198, 199, 398, 200,
	837, 201, 838, 839, 0, 202, 0, 203, 0, 204,
	0, 0, 830, 206, 0, 207, 0, 0, 0, 772,
	208, 209, 210, 817, 818, 795, 0, 0, 211, 212,
	840, 841, 842, 0, 213, 0, 214, 0, 0, 479,
	215, 0, 216, 828, 0, 358, 0, 217, 218, 219,
	220, 221, 824, 826, 481, 0, 225, 0, 222, 0,
	480, 223, 843, 224, 844, 845, 846, 847, 848, 0,
	806, 0, 482, 226, 227, 228, 483, 229, 230, 231,
	0, 233, 232, 0, 829, 484, 234, 485, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 369, 240,
	486, 242, 243, 245, 244, 767, 0, 796, 825, 246,
	849, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 372, 487, 252, 488, 819, 253, 254, 255, 256,
	257, 0, 258, 820, 259, 375, 260, 0, 261, 262,
	263, 264, 265, 266, 850, 267, 268, 0, 269, 270,
	271, 272, 273, 275, 276, 274, 277, 278, 279, 280,
	0, 281, 489, 282, 283, 773, 284, 0, 288, 289,
	290, 291, 0, 293, 378, 292, 294, 295, 813, 296,
	285, 286, 297, 490, 298, 851, 380, 299, 0, 306,
	300, 301, 287, 302, 305, 852, 303, 304, 821, 0,
	307, 0, 308, 309, 310, 311, 312, 313, 314, 0,
	383, 853, 854, 0, 0, 315, 316, 822, 823, 794,
	317, 318, 2434, 320, 0, 0, 321, 322, 323, 324,
	814, 325, 0, 388, 326, 327, 328, 389, 855, 0,
	0, 329, 0, 0, 0, 0, 330, 331, 332, 333,
	334, 768, 0, 0, 0, 0, 0, 766, 0, 0,
	0, 0, 764, 765, 799, 788, 789, 786, 787, 778,
	0, 774, 0, 0, 0, 0, 0, 777, 0, 0,
	177, 178, 0, 179, 0, 0, 0, 0, 816, 781,
	0, 0, 0, 180, 181, 182, 336, 831, 338, 832,
	183, 833, 834, 0, 184, 342, 343, 185, 186, 784,
	815, 835, 836, 346, 0, 187, 827, 0, 807, 0,
	188, 189, 190, 0, 191, 0, 192, 193, 194, 0,
	478, 195, 196, 197, 0, 808, 809, 811, 0, 810,
	812, 198, 199, 398, 200, 837, 201, 838, 839, 0,
	202, 0, 203, 0, 204, 0, 0, 830, 206, 0,
	207, 0, 0, 0, 772, 208, 209, 210, 817, 818,
	795, 0, 0, 211, 212, 840, 841, 842, 0, 213,
	0, 214, 0, 0, 479, 215, 0, 216, 828, 0,
	358, 0, 217, 218, 219, 220, 221, 824, 826, 481,
	0, 225, 0, 222, 0, 480, 223, 843, 224, 844,
	845, 846, 847, 848, 0, 806, 0, 482, 226, 227,
	228, 483, 229, 230, 231, 0, 233, 232, 0, 829,
	484, 234, 485, 0, 235, 0, 0, 236, 0, 237,
	238, 239, 241, 369, 240, 486, 242, 243, 245, 244,
	767, 0, 796, 825, 246, 849, 247, 248, 0, 249,
	0, 0, 250, 0, 0, 251, 372, 487, 252, 488,
	819, 253, 254, 255, 256, 257, 0, 258, 820, 259,
	375, 260, 0, 261, 262, 263, 264, 265, 266, 850,
	267, 268, 0, 269, 270, 271, 272, 273, 275, 276,
	274, 277, 278, 279, 280, 0, 281, 489, 282, 283,
	773, 284, 0, 288, 289, 290, 291, 0, 293, 378,
	292, 294, 295, 813, 296, 285, 286, 297, 490, 298,
	851, 380, 299, 0, 306, 300, 301, 287, 302, 305,
	852, 303, 304, 821, 0, 307, 0, 308, 309, 310,
	311, 312, 313, 314, 0, 383, 853, 854, 0, 0,
	315, 316, 822, 823, 794, 317, 318, 319, 320, 0,
	0, 321, 322, 323, 324, 814, 325, 0, 388, 326,
	327, 328, 389, 855, 0, 0, 329, 0, 0, 0,
	0, 330, 331, 332, 333, 334, 768, 0, 0, 0,
	0, 0, 766, 0, 0, 0, 0, 764, 765, 799,
	788, 789, 786, 787, 778, 0, 774, 0, 0, 0,
	0, 0, 777, 0, 0, 177, 178, 0, 179, 0,
	0, 0, 0, 816, 781, 0, 0, 0, 180, 181,
	182, 336, 831, 338, 832, 183, 833, 834, 0, 184,
	342, 343, 185, 186, 784, 815, 835, 836, 346, 0,
	187, 827, 0, 807, 0, 188, 189, 190, 0, 191,
	0, 192, 193, 194, 0, 478, 195, 196, 197, 0,
	808, 809, 811, 0, 810, 812, 198, 199, 398, 200,
	837, 201, 838, 839, 0, 202, 0, 203, 0, 204,
	0, 0, 830, 206, 0, 207, 0, 0, 0, 772,
	208, 209, 210, 817, 818, 795, 0, 0, 211, 212,
	840, 841, 842, 0, 213, 0, 214, 0, 0, 479,
	215, 0, 216, 828, 0, 358, 0, 217, 218, 219,
	220, 221, 824, 826, 481, 0, 225, 0, 222, 0,
	480, 223, 843, 224, 844, 845, 846, 847, 848, 0,
	806, 0, 482, 226, 227, 228, 483, 229, 230, 231,
	0, 233, 232, 0, 829, 484, 234, 485, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 369, 240,
	486, 242, 243, 245, 244, 0, 0, 796, 825, 246,
	849, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 372, 487, 252, 488, 819, 253, 254, 255, 256,
	257, 0, 258, 820, 259, 375, 260, 0, 261, 262,
	263, 264, 265, 266, 850, 267, 268, 0, 269, 270,
	271, 272, 273, 275, 276, 274, 277, 278, 279, 280,
	0, 281, 489, 282, 283, 1576, 284, 0, 288, 289,
	290, 291, 0, 293, 378, 292, 294, 295, 813, 296,
	285, 286, 297, 490, 298, 851, 380, 299, 0, 306,
	300, 301, 287, 302, 305, 852, 303, 304, 821, 0,
	307, 0, 308, 309, 310, 311, 312, 313, 314, 0,
	383, 853, 854, 0, 0, 315, 316, 822, 823, 794,
	317, 318, 319, 320, 0, 0, 321, 322, 323, 324,
	814, 325, 0, 388, 326, 327, 328, 389, 855, 0,
	0, 329, 0, 0, 0, 0, 330, 331, 332, 333,
	334, 799, 788, 789, 786, 787, 778, 1574, 0, 0,
	0, 0, 1572, 1573, 0, 0, 0, 177, 178, 0,
	179, 1575, 0, 0, 0, 816, 781, 777, 0, 0,
	180, 181, 182, 336, 831, 338, 832, 183, 833, 834,
	0, 184, 342, 343, 185, 186, 0, 815, 835, 836,
	346, 0, 187, 827, 0, 807, 0, 188, 189, 190,
	0, 191, 0, 192, 193, 194, 0, 478, 195, 196,
	197, 0, 808, 809, 811, 0, 810, 812, 198, 199,
	398, 200, 837, 201, 838, 839, 0, 202, 0, 203,
	0, 204, 0, 0, 830, 206, 0, 207, 0, 0,
	0, 351, 208, 209, 210, 817, 818, 795, 0, 0,
	211, 212, 840, 841, 842, 0, 213, 0, 214, 0,
	0, 479, 215, 0, 216, 828, 0, 358, 0, 217,
	218, 219, 220, 221, 824, 826, 481, 0, 225, 0,
	222, 0, 480, 223, 843, 224, 844, 845, 846, 847,
	848, 0, 806, 0, 482, 226, 227, 228, 483, 229,
	230, 231, 0, 233, 232, 0, 829, 484, 234, 485,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 486, 242, 243, 245, 244, 0, 0, 796,
	825, 246, 849, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 372, 487, 252, 488, 819, 253, 254,
	255, 256, 257, 0, 258, 820, 259, 375, 260, 0,
	261, 262, 263, 264, 265, 266, 850, 267, 268, 0,
	269, 270, 271, 272, 273, 275, 276, 274, 277, 278,
	279, 280, 0, 281, 489, 282, 283, 1576, 284, 0,
	288, 289, 290, 291, 0, 293, 378, 292, 294, 295,
	813, 296, 285, 286, 297, 490, 298, 851, 380, 299,
	0, 306, 300, 301, 287, 302, 305, 852, 303, 304,
	821, 0, 307, 0, 308, 309, 310, 311, 312, 313,
	314, 0, 383, 853, 854, 0, 0, 315, 316, 822,
	823, 794, 317, 318, 319, 320, 0, 0, 321, 322,
	323, 324, 814, 325, 0, 388, 326, 327, 328, 389,
	855, 0, 0, 329, 0, 0, 0, 0, 330, 331,
	332, 333, 334, 799, 788, 789, 786, 787, 778, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 177,
	178, 0, 179, 1575, 0, 0, 0, 816, 781, 777,
	0, 0, 180, 181, 182, 0, 831, 338, 832, 183,
	833, 834, 0, 184, 342, 343, 185, 186, 784, 815,
	835, 836, 346, 0, 187, 827, 0, 807, 0, 188,
	189, 190, 0, 191, 0, 192, 193, 194, 0, 478,
	195, 196, 2435, 0, 808, 809, 811, 0, 810, 812,
	198, 199, 398, 200, 837, 201, 838, 839, 0, 202,
	0, 203, 0, 204, 0, 0, 830, 206, 0, 207,
	0, 0, 0, 772, 208, 209, 210, 817, 818, 795,
	0, 0, 211, 212, 840, 841, 842, 0, 213, 0,
	214, 0, 0, 479, 215, 0, 216, 828, 0, 358,
	0, 217, 218, 219, 220, 221, 824, 826, 0, 0,
	225, 0, 222, 0, 480, 223, 843, 224, 844, 845,
	846, 847, 848, 0, 806, 0, 0, 226, 227, 228,
	483, 229, 230, 231, 0, 233, 232, 0, 829, 484,
	234, 0, 0, 235, 0, 0, 236, 0, 237, 238,
	239, 241, 369, 240, 486, 242, 243, 245, 244, 767,
	0, 796, 825, 246, 849, 247, 248, 0, 249, 0,
	0, 250, 0, 0, 251, 372, 487, 252, 488, 819,
	253, 254, 255, 256, 257, 0, 258, 820, 259, 375,
	260, 0, 261, 262, 263, 264, 265, 266, 850, 267,
	268, 0, 269, 270, 271, 272, 273, 275, 276, 274,
	277, 278, 279, 280, 0, 281, 489, 282, 283, 773,
	284, 0, 288, 289, 290, 291, 0, 293, 378, 292,
	294, 295, 813, 296, 285, 286, 297, 0, 298, 851,
	380, 299, 0, 306, 300, 301, 287, 302, 305, 852,
	303, 304, 821, 0, 307, 0, 308, 309, 310, 311,
	312, 313, 314, 0, 383, 853, 854, 0, 0, 315,
	316, 822, 823, 794, 317, 318, 2434, 320, 0, 0,
	321, 322, 323, 324, 814, 325, 0, 388, 326, 327,
	328, 389, 855, 0, 0, 329, 0, 0, 0, 0,
	330, 331, 332, 333, 334, 799, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 764, 765, 0, 0,
	0, 177, 178, 0, 179, 774, 0, 0, 0, 816,
	0, 777, 0, 0, 180, 181, 182, 336, 337, 338,
	339, 183, 340, 341, 0, 184, 342, 343, 185, 186,
	0, 815, 344, 345, 346, 0, 187, 827, 0, 807,
	0, 188, 189, 190, 0, 191, 0, 192, 193, 194,
	0, 478, 195, 196, 197, 0, 808, 809, 811, 0,
	810, 812, 198, 199, 398, 200, 348, 201, 349, 350,
	0, 202, 0, 203, 0, 204, 0, 0, 205, 206,
	0, 207, 0, 0, 0, 351, 208, 209, 210, 817,
	818, 0, 0, 0, 211, 212, 354, 355, 356, 0,
	213, 0, 214, 0, 0, 479, 215, 0, 216, 828,
	0, 358, 0, 217, 218, 219, 220, 221, 824, 826,
	481, 0, 225, 0, 222, 0, 480, 223, 361, 224,
	362, 363, 364, 365, 366, 0, 367, 0, 482, 226,
	227, 228, 483, 229, 230, 231, 0, 233, 232, 0,
	829, 484, 234, 485, 0, 235, 0, 0, 236, 0,
	237, 238, 239, 241, 369, 240, 486, 242, 243, 245,
	244, 0, 0, 0, 825, 246, 371, 247, 248, 0,
	249, 0, 0, 250, 0, 0, 251, 372, 487, 252,
	488, 819, 253, 254, 255, 256, 257, 0, 258, 820,
	259, 375, 260, 0, 261, 262, 263, 264, 265, 266,
	376, 267, 268, 0, 269, 270, 271, 272, 273, 275,
	276, 274, 277, 278, 279, 280, 0, 281, 489, 282,
	283, 377, 284, 0, 288, 289, 290, 291, 0, 293,
	378, 292, 294, 295, 813, 296, 285, 286, 297, 490,
	298, 379, 380, 299, 0, 306, 300, 301, 287, 302,
	305, 381, 303, 304, 821, 0, 307, 0, 308, 309,
	310, 311, 312, 313, 314, 0, 383, 384, 385, 0,
	0, 315, 316, 822, 823, 0, 317, 318, 319, 320,
	0, 0, 321, 322, 323, 324, 814, 325, 0, 388,
	326, 327, 328, 389, 390, 0, 0, 329, 914, 0,
	695, 0, 330, 331, 332, 333, 334, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 177, 178, 0, 179,
	0, 0, 0, 0, 335, 0, 0, 1978, 0, 180,
	181, 182, 336, 337, 338, 339, 183, 340, 341, 0,
	184, 342, 343, 185, 186, 0, 0, 344, 345, 346,
	0, 187, 347, 0, 477, 0, 188, 189, 190, 0,
	191, 0, 192, 193, 194, 0, 478, 195, 196, 197,
	0, 0, 0, 0, 0, 0, 0, 198, 199, 398,
	200, 348, 201, 349, 350, 0, 202, 0, 203, 0,
	204, 0, 0, 205, 206, 0, 207, 0, 0, 0,
	351, 208, 209, 210, 352, 353, 0, 0, 0, 211,
	212, 354, 355, 356, 0, 213, 0, 214, 0, 0,
	479, 215, 0, 216, 357, 0, 358, 0, 217, 218,
	219, 220, 221, 359, 360, 481, 0, 225, 0, 222,
	0, 480, 223, 361, 224, 362, 363, 364, 365, 366,
	0, 367, 0, 482, 226, 227, 228, 483, 229, 230,
	231, 0, 233, 232, 0, 368, 484, 234, 485, 0,
	235, 0, 0, 236, 0, 237, 238, 239, 241, 369,
	240, 486, 242, 243, 245, 244, 0, 0, 0, 370,
	246, 371, 247, 248, 0, 249, 0, 0, 250, 0,
	0, 251, 372, 487, 252, 488, 373, 253, 254, 255,
	256, 257, 0, 258, 374, 259, 375, 260, 0, 261,
	262, 263, 264, 265, 266, 376, 267, 268, 0, 269,
	270, 271, 272, 273, 275, 276, 274, 277, 278, 279,
	280, 0, 281, 489, 282, 283, 377, 284, 0, 288,
	289, 290, 291, 133, 293, 378, 292, 294, 295, 0,
	296, 285, 286, 297, 490, 298, 379, 380, 299, 0,
	306, 300, 301, 287, 302, 305, 381, 303, 304, 382,
	0, 307, 135, 308, 309, 310, 311, 312, 313, 314,
	0, 383, 384, 385, 0, 0, 315, 316, 386, 387,
	0, 317, 318, 319, 320, 0, 0, 321, 322, 323,
	324, 0, 325, 0, 388, 326, 327, 328, 917, 390,
	0, 0, 329, 0, 0, 0, 127, 330, 331, 332,
	333, 334, 0, 128, 695, 692, 0, 693, 688, 683,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	177, 178, 120, 179, 0, 0, 0, 0, 335, 0,
	0, 0, 0, 180, 181, 182, 336, 337, 338, 339,
	183, 340, 341, 0, 184, 342, 343, 185, 186, 0,
	0, 344, 345, 346, 0, 187, 347, 0, 477, 0,
	188, 189, 190, 0, 191, 0, 192, 193, 194, 0,
	478, 195, 196, 197, 0, 0, 0, 0, 0, 0,
	0, 198, 199, 398, 200, 348, 201, 349, 350, 1321,
	202, 0, 203, 0, 204, 0, 0, 205, 206, 0,
	207, 0, 0, 0, 351, 208, 209, 210, 352, 353,
	685, 0, 0, 211, 212, 354, 355, 356, 0, 213,
	0, 214, 0, 0, 479, 215, 0, 216, 357, 0,
	358, 0, 217, 218, 219, 220, 221, 359, 360, 481,
	0, 225, 0, 222, 0, 480, 223, 361, 224, 362,
	363, 364, 365, 366, 0, 367, 0, 482, 226, 227,
	228, 483, 229, 230, 231, 0, 233, 232, 0, 368,
	484, 234, 485, 0, 235, 0, 0, 236, 0, 237,
	238, 239, 241, 369, 240, 486, 242, 243, 245, 244,
	0, 0, 0, 370, 246, 371, 247, 248, 0, 249,
	686, 0, 250, 0, 0, 251, 372, 487, 252, 488,
	373, 253, 254, 255, 256, 257, 0, 258, 374, 259,
	375, 260, 0, 261, 262, 263, 264, 265, 266, 376,
	267, 268, 0, 269, 270, 271, 272, 273, 275, 276,
	274, 277, 278, 279, 280, 0, 281, 489, 282, 283,
	377, 284, 0, 288, 289, 290, 291, 0, 293, 378,
	292, 294, 295, 0, 296, 285, 286, 297, 490, 298,
	379, 380, 299, 0, 306, 300, 301, 287, 302, 305,
	381, 303, 304, 382, 0, 307, 0, 308, 309, 310,
	311, 312, 313, 314, 0, 383, 384, 385, 0, 0,
	315, 316, 386, 387, 684, 317, 318, 319, 320, 0,
	0, 321, 322, 323, 324, 0, 325, 0, 388, 326,
	327, 328, 389, 390, 0, 0, 329, 0, 0, 0,
	0, 330, 331, 332, 333, 334, 695, 692, 0, 693,
	688, 683, 0, 0, 0, 0, 0, 694, 689, 0,
	0, 0, 177, 178, 0, 179, 0, 0, 0, 0,
	335, 0, 0, 0, 0, 180, 181, 182, 336, 337,
	338, 339, 183, 340, 341, 0, 184, 342, 343, 185,
	186, 0, 0, 344, 345, 346, 0, 187, 347, 0,
	477, 0, 188, 189, 190, 0, 191, 0, 192, 193,
	194, 0, 478, 195, 196, 197, 0, 0, 0, 0,
	0, 0, 0, 198, 199, 398, 200, 348, 201, 349,
	350, 1318, 202, 0, 203, 0, 204, 0, 0, 205,
	206, 0, 207, 0, 0, 0, 351, 208, 209, 210,
	352, 353, 685, 0, 0, 211, 212, 354, 355, 356,
	0, 213, 0, 214, 0, 0, 479, 215, 0, 216,
	357, 0, 358, 0, 217, 218, 219, 220, 221, 359,
	360, 481, 0, 225, 0, 222, 0, 480, 223, 361,
	224, 362, 363, 364, 365, 366, 0, 367, 0, 482,
	226, 227, 228, 483, 229, 230, 231, 0, 233, 232,
	0, 368, 484, 234, 485, 0, 235, 0, 0, 236,
	0, 237, 238, 239, 241, 369, 240, 486, 242, 243,
	245, 244, 0, 0, 0, 370, 246, 371, 247, 248,
	0, 249, 686, 0, 250, 0, 0, 251, 372, 487,
	252, 488, 373, 253, 254, 255, 256, 257, 0, 258,
	374, 259, 375, 260, 0, 261, 262, 263, 264, 265,
	266, 376, 267, 268, 0, 269, 270, 271, 272, 273,
	275, 276, 274, 277, 278, 279, 280, 0, 281, 489,
	282, 283, 377, 284, 0, 288, 289, 290, 291, 0,
	293, 378, 292, 294, 295, 0, 296, 285, 286, 297,
	490, 298, 379, 380, 299, 0, 306, 300, 301, 287,
	302, 305, 381, 303, 304, 382, 0, 307, 0, 308,
	309, 310, 311, 312, 313, 314, 0, 383, 384, 385,
	0, 0, 315, 316, 386, 387, 684, 317, 318, 319,
	320, 0, 0, 321, 322, 323, 324, 0, 325, 0,
	388, 326, 327, 328, 389, 390, 0, 0, 329, 0,
	0, 0, 0, 330, 331, 332, 333, 334, 695, 692,
	0, 693, 688, 683, 0, 0, 0, 0, 0, 694,
	689, 0, 0, 0, 177, 178, 0, 179, 0, 0,
	0, 0, 335, 0, 0, 0, 0, 180, 181, 182,
	336, 337, 338, 339, 183, 340, 341, 0, 184, 342,
	343, 185, 186, 0, 0, 344, 345, 346, 0, 187,
	347, 0, 477, 0, 188, 189, 190, 0, 191, 0,
	192, 193, 194, 0, 478, 195, 196, 197, 0, 0,
	0, 0, 0, 0, 0, 198, 199, 398, 200, 348,
	201, 349, 350, 958, 202, 0, 203, 0, 204, 0,
	0, 205, 206, 0, 207, 0, 0, 0, 351, 208,
	209, 210, 352, 353, 685, 0, 0, 211, 212, 354,
	355, 356, 0, 213, 0, 214, 0, 0, 479, 215,
	0, 216, 357, 0, 358, 0, 217, 218, 219, 220,
	221, 359, 360, 481, 0, 225, 0, 222, 0, 480,
	223, 361, 224, 362, 363, 364, 365, 366, 0, 367,
	0, 482, 226, 227, 228, 483, 229, 230, 231, 0,
	233, 232, 0, 368, 484, 234, 485, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 369, 240, 486,
	242, 243, 245, 244, 0, 0, 0, 370, 246, 371,
	247, 248, 0, 249, 686, 0, 250, 0, 0, 251,
	372, 487, 252, 488, 373, 253, 254, 255, 256, 257,
	0, 258, 374, 259, 375, 260, 0, 261, 262, 263,
	264, 265, 266, 376, 267, 268, 0, 269, 270, 271,
	272, 273, 275, 276, 274, 277, 278, 279, 280, 0,
	281, 489, 282, 283, 377, 284, 0, 288, 289, 290,
	291, 0, 293, 378, 292, 294, 295, 0, 296, 285,
	286, 297, 490, 298, 379, 380, 299, 0, 306, 300,
	301, 287, 302, 305, 381, 303, 304, 382, 0, 307,
	0, 308, 309, 310, 311, 312, 313, 314, 0, 383,
	384, 385, 0, 0, 315, 316, 386, 387, 684, 317,
	318, 319, 320, 0, 0, 321, 322, 323, 324, 0,
	325, 0, 388, 326, 327, 328, 389, 390, 0, 0,
	329, 0, 0, 0, 0, 330, 331, 332, 333, 334,
	680, 0, 695, 692, 0, 693, 688, 683, 0, 0,
	0, 694, 689, 0, 0, 0, 0, 0, 177, 178,
	0, 179, 0, 0, 0, 0, 335, 0, 0, 0,
	0, 180, 181, 182, 336, 337, 338, 339, 183, 340,
	341, 0, 184, 342, 343, 185, 186, 0, 0, 344,
	345, 346, 0, 187, 347, 0, 477, 0, 188, 189,
	190, 0, 191, 0, 192, 193, 194, 0, 478, 195,
	196, 197, 0, 0, 0, 0, 0, 0, 0, 198,
	199, 398, 200, 348, 201, 349, 350, 0, 202, 0,
	203, 0, 204, 0, 0, 205, 206, 0, 207, 0,
	0, 0, 351, 208, 209, 210, 352, 353, 685, 0,
	0, 211, 212, 354, 355, 356, 0, 213, 0, 214,
	0, 0, 479, 215, 0, 216, 357, 0, 358, 0,
	217, 218, 219, 220, 221, 359, 360, 481, 0, 225,
	0, 222, 0, 480, 223, 361, 224, 362, 363, 364,
	365, 366, 0, 367, 0, 482, 226, 227, 228, 483,
	229, 230, 231, 0, 233, 232, 0, 368, 484, 234,
	485, 0, 235, 0, 0, 236, 0, 237, 238, 239,
	241, 369, 240, 486, 242, 243, 245, 244, 0, 0,
	0, 370, 246, 371, 247, 248, 0, 249, 686, 0,
	250, 0, 0, 251, 372, 487, 252, 488, 373, 253,
	254, 255, 256, 257, 0, 258, 374, 259, 375, 260,
	0, 261, 262, 263, 264, 265, 266, 376, 267, 268,
	0, 269, 270, 271, 272, 273, 275, 276, 274, 277,
	278, 279, 280, 0, 281, 489, 282, 283, 377, 284,
	0, 288, 289, 290, 291, 0, 293, 378, 292, 294,
	295, 0, 296, 285, 286, 297, 490, 298, 379, 380,
	299, 0, 306, 300, 301, 287, 302, 305, 381, 303,
	304, 382, 0, 307, 0, 308, 309, 310, 311, 312,
	313, 314, 0, 383, 384, 385, 0, 0, 315, 316,
	386, 387, 684, 317, 318, 319, 320, 0, 0, 321,
	322, 323, 324, 0, 325, 0, 388, 326, 327, 328,
	389, 390, 0, 0, 329, 0, 0, 0, 0, 330,
	331, 332, 333, 334, 695, 692, 0, 693, 688, 683,
	0, 0, 0, 0, 0, 694, 689, 0, 0, 0,
	177, 178, 0, 179, 0, 0, 0, 0, 335, 0,
	0, 0, 0, 180, 181, 182, 336, 337, 338, 339,
	183, 340, 341, 0, 184, 342, 343, 185, 186, 0,
	0, 344, 345, 346, 0, 187, 347, 0, 477, 0,
	188, 189, 190, 0, 191, 0, 192, 193, 194, 0,
	478, 195, 196, 197, 0, 0, 0, 0, 0, 0,
	0, 198, 199, 398, 200, 348, 201, 349, 350, 0,
	202, 0, 203, 0, 204, 0, 0, 205, 206, 0,
	207, 0, 0, 0, 351, 208, 209, 210, 352, 353,
	685, 0, 0, 211, 212, 354, 355, 356, 0, 213,
	0, 214, 0, 0, 479, 215, 0, 216, 357, 0,
	358, 0, 217, 218, 219, 220, 221, 359, 360, 481,
	0, 225, 0, 222, 0, 480, 223, 361, 224, 362,
	363, 364, 365, 366, 0, 367, 0, 482, 226, 227,
	228, 483, 229, 230, 231, 0, 233, 232, 0, 368,
	484, 234, 485, 0, 235, 0, 0, 236, 0, 237,
	238, 239, 241, 369, 240, 486, 242, 243, 245, 244,
	0, 0, 0, 370, 246, 371, 247, 248, 0, 249,
	686, 0, 250, 0, 0, 251, 372, 487, 252, 488,
	373, 253, 254, 255, 256, 257, 0, 258, 374, 259,
	375, 260, 0, 261, 262, 263, 264, 265, 266, 376,
	267, 268, 0, 269, 270, 271, 272, 273, 275, 276,
	274, 277, 278, 279, 280, 0, 281, 489, 282, 283,
	377, 284, 0, 288, 289, 290, 291, 0, 293, 378,
	292, 294, 295, 0, 296, 285, 286, 297, 490, 298,
	379, 380, 299, 0, 306, 300, 301, 287, 302, 305,
	381, 303, 304, 382, 0, 307, 0, 308, 309, 310,
	311, 312, 313, 314, 0, 383, 384, 385, 0, 0,
	315, 316, 386, 387, 684, 317, 318, 319, 320, 0,
	0, 321, 322, 323, 324, 0, 325, 0, 388, 326,
	327, 328, 389, 390, 0, 677, 329, 174, 0, 0,
	0, 330, 331, 332, 333, 334, 0, 0, 0, 0,
	0, 0, 0, 177, 178, 0, 179, 694, 689, 0,
	0, 335, 0, 0, 0, 0, 180, 181, 182, 336,
	337, 338, 339, 183, 340, 341, 0, 184, 342, 343,
	185, 186, 0, 0, 344, 345, 346, 0, 187, 347,
	0, 0, 0, 188, 189, 190, 0, 191, 0, 192,
	193, 194, 0, 0, 195, 196, 197, 0, 0, 0,
	0, 0, 0, 0, 198, 199, 398, 200, 348, 201,
	349, 350, 0, 202, 0, 203, 0, 204, 0, 0,
	205, 206, 0, 207, 0, 0, 0, 351, 208, 209,
	210, 352, 353, 0, 0, 0, 211, 212, 354, 355,
	356, 0, 213, 0, 214, 0, 0, 0, 215, 0,
	216, 357, 0, 358, 0, 217, 218, 219, 220, 221,
	359, 360, 0, 0, 225, 0, 222, 0, 0, 223,
	361, 224, 362, 363, 364, 365, 366, 0, 367, 0,
	0, 226, 227, 228, 0, 229, 230, 231, 0, 233,
	232, 0, 368, 0, 234, 0, 0, 235, 0, 0,
	236, 0, 237, 238, 239, 241, 369, 240, 0, 242,
	243, 245, 244, 0, 0, 0, 370, 246, 371, 247,
	248, 0, 249, 0, 737, 250, 0, 0, 251, 372,
	0, 252, 0, 373, 253, 254, 255, 256, 257, 0,
	258, 374, 259, 375, 260, 0, 261, 262, 263, 264,
	265, 266, 376, 267, 268, 0, 269, 270, 271, 272,
	273, 275, 276, 274, 277, 278, 279, 280, 0, 281,
	0, 282, 283, 377, 284, 0, 288, 289, 290, 291,
	133, 293, 378, 292, 294, 295, 0, 296, 285, 286,
	297, 0, 298, 379, 380, 299, 0, 306, 300, 301,
	287, 302, 305, 381, 303, 304, 382, 0, 307, 135,
	308, 309, 310, 311, 312, 313, 314, 0, 383, 384,
	385, 0, 0, 315, 316, 386, 387, 0, 317, 318,
	319, 320, 0, 0, 321, 322, 323, 324, 0, 325,
	0, 388, 326, 327, 328, 917, 390, 0, 0, 329,
	0, 174, 0, 127, 330, 331, 332, 333, 334, 0,
	128, 0, 0, 0, 0, 0, 0, 177, 178, 0,
	179, 0, 0, 0, 0, 335, 0, 731, 0, 1066,
	180, 181, 182, 336, 337, 338, 339, 183, 340, 341,
	0, 184, 342, 343, 185, 186, 0, 0, 344, 345,
	346, 0, 187, 347, 0, 0, 0, 188, 189, 190,
	0, 191, 0, 192, 193, 194, 0, 0, 195, 196,
	197, 0, 0, 0, 0, 0, 0, 0, 198, 199,
	398, 200, 348, 201, 349, 350, 0, 202, 0, 203,
	0, 204, 0, 0, 205, 206, 0, 207, 0, 0,
	0, 351, 208, 209, 210, 352, 353, 0, 0, 0,
	211, 212, 354, 355, 356, 0, 213, 0, 214, 0,
	0, 0, 215, 0, 216, 357, 0, 358, 0, 217,
	218, 219, 220, 221, 359, 360, 0, 0, 225, 0,
	222, 0, 0, 223, 361, 224, 362, 363, 364, 365,
	366, 0, 367, 0, 0, 226, 227, 228, 0, 229,
	230, 231, 0, 233, 232, 0, 368, 0, 234, 0,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 0, 242, 243, 245, 244, 0, 0, 0,
	370, 246, 371, 247, 248, 0, 249, 0, 737, 250,
	0, 0, 251, 372, 0, 252, 0, 373, 253, 254,
	255, 256, 257, 0, 258, 374, 259, 375, 260, 0,
	261, 262, 263, 264, 265, 266, 376, 267, 268, 0,
	269, 270, 271, 272, 273, 275, 276, 274, 277, 278,
	279, 280, 0, 281, 0, 282, 283, 377, 284, 0,
	288, 289, 290, 291, 133, 293, 378, 292, 294, 295,
	0, 296, 285, 286, 297, 0, 298, 379, 380, 299,
	0, 306, 300, 301, 287, 302, 305, 381, 303, 304,
	382, 0, 307, 135, 308, 309, 310, 311, 312, 313,
	314, 0, 383, 384, 385, 0, 0, 315, 316, 386,
	387, 0, 317, 318, 319, 320, 0, 0, 321, 322,
	323, 324, 0, 325, 0, 388, 326, 327, 328, 917,
	390, 0, 0, 329, 677, 0, 174, 127, 330, 331,
	332, 333, 334, 0, 128, 0, 0, 0, 0, 0,
	0, 0, 177, 178, 0, 179, 0, 0, 0, 0,
	335, 731, 0, 1066, 0, 180, 181, 182, 336, 337,
	338, 339, 183, 340, 341, 0, 184, 342, 343, 185,
	186, 0, 0, 344, 345, 346, 0, 187, 347, 0,
	0, 0, 188, 189, 190, 0, 191, 0, 192, 193,
	194, 0, 0, 195, 196, 197, 0, 0, 0, 0,
	0, 0, 0, 198, 199, 398, 200, 348, 201, 349,
	350, 0, 202, 0, 203, 0, 204, 0, 0, 205,
	206, 0, 207, 0, 0, 0, 351, 208, 209, 210,
	352, 353, 0, 0, 0, 211, 212, 354, 355, 356,
	0, 213, 0, 214, 0, 0, 0, 215, 0, 216,
	357, 0, 358, 0, 217, 218, 219, 220, 221, 359,
	360, 0, 0, 225, 0, 222, 0, 0, 223, 361,
	224, 362, 363, 364, 365, 366, 0, 367, 0, 0,
	226, 227, 228, 0, 229, 230, 231, 0, 233, 232,
	0, 368, 0, 234, 0, 0, 235, 0, 0, 236,
	0, 237, 238, 239, 241, 369, 240, 0, 242, 243,
	245, 244, 0, 0, 0, 370, 246, 371, 247, 248,
	0, 249, 0, 0, 250, 0, 0, 251, 372, 0,
	252, 0, 373, 253, 254, 255, 256, 257, 0, 258,
	374, 259, 375, 260, 0, 261, 262, 263, 264, 265,
	266, 376, 267, 268, 0, 269, 270, 271, 272, 273,
	275, 276, 274, 277, 278, 279, 280, 0, 281, 0,
	282, 283, 377, 284, 0, 288, 289, 290, 291, 133,
	293, 378, 292, 294, 295, 0, 296, 285, 286, 297,
	0, 298, 379, 380, 299, 0, 306, 300, 301, 287,
	302, 305, 381, 303, 304, 382, 0, 307, 135, 308,
	309, 310, 311, 312, 313, 314, 0, 383, 384, 385,
	0, 0, 315, 316, 386, 387, 0, 317, 318, 319,
	320, 0, 0, 321, 322, 323, 324, 0, 325, 0,
	388, 326, 327, 328, 917, 390, 0, 0, 329, 1703,
	0, 174, 127, 330, 331, 332, 333, 334, 0, 128,
	0, 0, 0, 0, 0, 0, 0, 177, 178, 0,
	179, 0, 0, 0, 0, 335, 0, 0, 120, 0,
	180, 181, 182, 336, 337, 338, 339, 183, 340, 341,
	0, 184, 342, 343, 185, 186, 0, 0, 344, 345,
	346, 0, 187, 347, 0, 0, 0, 188, 189, 190,
	0, 191, 0, 192, 193, 194, 0, 0, 195, 196,
	197, 0, 0, 0, 0, 0, 0, 0, 198, 199,
	398, 200, 348, 201, 349, 350, 0, 202, 0, 203,
	0, 204, 0, 0, 205, 206, 0, 207, 0, 0,
	0, 351, 208, 209, 210, 352, 353, 0, 0, 0,
	211, 212, 354, 355, 356, 0, 213, 0, 214, 0,
	0, 0, 215, 0, 216, 357, 0, 358, 0, 217,
	218, 219, 220, 221, 359, 360, 0, 0, 225, 0,
	222, 0, 0, 223, 361, 224, 362, 363, 364, 365,
	366, 0, 367, 0, 0, 226, 227, 228, 0, 229,
	230, 231, 0, 233, 232, 0, 368, 0, 234, 0,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 0, 242, 243, 245, 244, 0, 0, 0,
	370, 246, 371, 247, 248, 0, 249, 0, 737, 250,
	0, 0, 251, 372, 0, 252, 0, 373, 253, 254,
	255, 256, 257, 0, 258, 374, 259, 375, 260, 0,
	261, 262, 263, 264, 265, 266, 376, 267, 268, 0,
	269, 270, 271, 272, 273, 275, 276, 274, 277, 278,
	279, 280, 0, 281, 0, 282, 283, 377, 284, 0,
	288, 289, 290, 291, 0, 293, 378, 292, 294, 295,
	0, 296, 285, 286, 297, 0, 298, 379, 380, 299,
	0, 306, 300, 301, 287, 302, 305, 381, 303, 304,
	382, 0, 307, 0, 308, 309, 310, 311, 312, 313,
	314, 0, 383, 384, 385, 0, 0, 315, 316, 386,
	387, 0, 317, 318, 319, 320, 0, 0, 321, 322,
	323, 324, 0, 325, 0, 388, 326, 327, 328, 389,
	390, 0, 0, 329, 730, 0, 174, 0, 330, 331,
	332, 333, 334, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 177, 178, 0, 179, 0, 0, 0, 0,
	335, 731, 0, 736, 0, 180, 181, 182, 336, 337,
	338, 339, 183, 340, 341, 0, 184, 342, 343, 185,
	186, 0, 0, 344, 345, 346, 0, 187, 347, 0,
	0, 0, 188, 189, 190, 0, 191, 0, 192, 193,
	194, 0, 0, 195, 196, 197, 0, 0, 0, 0,
	0, 0, 0, 198, 199, 398, 200, 348, 201, 349,
	350, 0, 202, 0, 203, 0, 204, 0, 0, 205,
	206, 0, 207, 0, 0, 0, 351, 208, 209, 210,
	352, 353, 0, 0, 0, 211, 212, 354, 355, 356,
	0, 213, 0, 214, 0, 0, 0, 215, 0, 216,
	357, 0, 358, 0, 217, 218, 219, 220, 221, 359,
	360, 0, 0, 225, 0, 222, 0, 0, 223, 361,
	224, 362, 363, 364, 365, 366, 0, 367, 0, 0,
	226, 227, 228, 0, 229, 230, 231, 0, 233, 232,
	0, 368, 0, 234, 0, 0, 235, 0, 0, 236,
	0, 237, 238, 239, 241, 369, 240, 0, 242, 243,
	245, 244, 0, 0, 0, 370, 246, 371, 247, 248,
	0, 249, 0, 737, 250, 0, 0, 251, 372, 0,
	252, 0, 373, 253, 254, 255, 256, 257, 0, 258,
	374, 259, 375, 260, 0, 261, 262, 263, 264, 265,
	266, 376, 267, 268, 0, 269, 270, 271, 272, 273,
	275, 276, 274, 277, 278, 279, 280, 0, 281, 0,
	282, 283, 377, 284, 0, 288, 289, 290, 291, 0,
	293, 378, 292, 294, 295, 0, 296, 285, 286, 297,
	0, 298, 379, 380, 299, 0, 306, 300, 301, 287,
	302, 305, 381, 303, 304, 382, 0, 307, 0, 308,
	309, 310, 311, 312, 313, 314, 0, 383, 384, 385,
	0, 0, 315, 316, 386, 387, 0, 317, 318, 319,
	320, 0, 0, 321, 322, 323, 324, 0, 325, 0,
	388, 326, 327, 328, 389, 390, 0, 0, 329, 0,
	174, 0, 0, 330, 331, 332, 333, 334, 0, 0,
	0, 0, 0, 0, 0, 0, 177, 178, 0, 179,
	0, 0, 0, 0, 335, 0, 731, 0, 736, 180,
	181, 182, 336, 337, 338, 339, 183, 340, 341, 0,
	184, 342, 343, 185, 186, 0, 0, 344, 345, 346,
	0, 187, 347, 0, 0, 0, 188, 189, 190, 0,
	191, 0, 192, 193, 194, 0, 0, 195, 196, 197,
	0, 0, 0, 0, 0, 0, 0, 198, 199, 398,
	200, 348, 201, 349, 350, 0, 202, 0, 203, 0,
	204, 0, 0, 205, 206, 0, 207, 0, 0, 0,
	351, 208, 209, 210, 352, 353, 0, 0, 0, 211,
	212, 354, 355, 356, 0, 213, 0, 214, 0, 0,
	0, 215, 0, 216, 357, 0, 358, 0, 217, 218,
	219, 220, 221, 359, 360, 0, 0, 225, 0, 222,
	0, 0, 223, 361, 224, 362, 363, 364, 365, 366,
	0, 367, 0, 0, 226, 227, 228, 0, 229, 230,
	231, 0, 233, 232, 0, 368, 0, 234, 0, 0,
	235, 0, 0, 236, 0, 237, 238, 239, 241, 369,
	240, 0, 242, 243, 245, 244, 0, 0, 0, 370,
	246, 371, 247, 248, 0, 249, 0, 737, 250, 0,
	0, 251, 372, 0, 252, 0, 373, 253, 254, 255,
	256, 257, 0, 258, 374, 259, 375, 260, 0, 261,
	262, 263, 264, 265, 266, 376, 267, 268, 0, 269,
	270, 271, 272, 273, 275, 276, 274, 277, 278, 279,
	280, 0, 281, 0, 282, 283, 377, 284, 0, 288,
	289, 290, 291, 0, 293, 378, 292, 294, 295, 0,
	296, 285, 286, 297, 0, 298, 379, 380, 299, 0,
	306, 300, 301, 287, 302, 305, 381, 303, 304, 382,
	0, 307, 0, 308, 309, 310, 311, 312, 313, 314,
	0, 383, 384, 385, 0, 0, 315, 316, 386, 387,
	0, 317, 318, 319, 320, 0, 0, 321, 322, 323,
	324, 0, 325, 0, 388, 326, 327, 328, 389, 390,
	0, 0, 329, 0, 174, 0, 0, 330, 331, 332,
	333, 334, 0, 0, 0, 0, 0, 0, 0, 0,
	177, 178, 0, 179, 0, 0, 0, 0, 335, 0,
	731, 0, 736, 180, 181, 182, 336, 337, 338, 339,
	183, 340, 341, 0, 184, 342, 343, 185, 186, 0,
	0, 344, 345, 346, 0, 187, 347, 0, 0, 0,
	188, 189, 190, 0, 191, 0, 192, 193, 194, 0,
	0, 195, 196, 197, 0, 0, 0, 0, 0, 0,
	0, 198, 199, 398, 200, 348, 201, 349, 350, 0,
	202, 0, 203, 0, 204, 0, 0, 205, 206, 0,
	207, 0, 0, 0, 351, 208, 209, 210, 352, 353,
	0, 0, 0, 211, 212, 354, 355, 356, 0, 213,
	0, 214, 0, 0, 0, 215, 0, 216, 357, 0,
	358, 0, 217, 218, 219, 220, 221, 359, 360, 0,
	0, 225, 0, 222, 0, 0, 223, 361, 224, 362,
	363, 364, 365, 366, 0, 367, 0, 0, 226, 227,
	228, 0, 229, 230, 231, 0, 233, 232, 0, 368,
	0, 234, 0, 0, 235, 0, 0, 236, 0, 237,
	238, 239, 241, 369, 240, 0, 242, 243, 245, 244,
	0, 0, 0, 370, 246, 371, 247, 248, 0, 249,
	0, 0, 250, 0, 0, 251, 372, 0, 252, 0,
	373, 253, 254, 255, 256, 257, 0, 258, 374, 259,
	375, 260, 0, 261, 262, 263, 264, 265, 266, 376,
	267, 268, 0, 269, 270, 271, 272, 273, 275, 276,
	274, 277, 278, 279, 280, 0, 281, 0, 282, 283,
	377, 284, 0, 288, 289, 290, 291, 0, 293, 378,
	292, 294, 295, 0, 296, 285, 286, 297, 0, 298,
	379, 380, 299, 0, 306, 300, 301, 287, 302, 305,
	381, 303, 304, 382, 0, 307, 0, 308, 309, 310,
	311, 312, 313, 314, 0, 383, 384, 385, 0, 0,
	315, 316, 386, 387, 0, 317, 318, 319, 320, 0,
	0, 321, 322, 323, 324, 0, 325, 0, 388, 326,
	327, 328, 389, 390, 0, 0, 329, 0, 0, 174,
	0, 330, 331, 332, 333, 334, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 177, 178, 0, 179, 0,
	0, 0, 0, 335, 0, 0, 0, 1196, 180, 181,
	182, 336, 337, 338, 339, 183, 340, 341, 0, 184,
	342, 343, 185, 186, 0, 0, 344, 345, 346, 0,
	187, 347, 0, 0, 0, 188, 189, 190, 0, 191,
	0, 192, 193, 194, 0, 0, 195, 196, 197, 0,
	0, 0, 0, 0, 0, 0, 198, 199, 398, 200,
	348, 201, 349, 350, 0, 202, 0, 203, 0, 204,
	0, 0, 205, 206, 0, 207, 0, 0, 0, 351,
	208, 209, 210, 352, 353, 0, 0, 0, 211, 212,
	354, 355, 356, 0, 213, 0, 214, 0, 0, 0,
	215, 0, 216, 357, 0, 358, 0, 217, 218, 219,
	220, 221, 359, 360, 0, 0, 225, 0, 222, 0,
	0, 223, 361, 224, 362, 363, 364, 365, 366, 0,
	367, 0, 0, 226, 227, 228, 0, 229, 230, 231,
	0, 233, 232, 0, 368, 0, 234, 0, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 369, 240,
	0, 242, 243, 245, 244, 0, 0, 0, 370, 246,
	371, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 372, 0, 252, 0, 373, 253, 254, 255, 256,
	257, 0, 258, 374, 259, 375, 260, 0, 261, 262,
	263, 264, 265, 266, 376, 267, 268, 0, 269, 270,
	271, 272, 273, 275, 276, 274, 277, 278, 279, 280,
	0, 281, 0, 282, 283, 377, 284, 0, 288, 289,
	290, 291, 0, 293, 378, 292, 294, 295, 0, 296,
	285, 286, 297, 0, 298, 379, 380, 299, 0, 306,
	300, 301, 287, 302, 305, 381, 303, 304, 382, 0,
	307, 0, 308, 309, 310, 311, 312, 313, 314, 0,
	383, 384, 385, 0, 0, 315, 316, 386, 387, 0,
	317, 318, 319, 320, 0, 0, 321, 322, 323, 324,
	0, 325, 0, 388, 326, 327, 328, 389, 390, 0,
	0, 329, 0, 174, 0, 0, 330, 331, 332, 333,
	334, 0, 0, 0, 0, 0, 0, 0, 0, 177,
	178, 0, 179, 0, 0, 0, 0, 335, 0, 0,
	0, 1640, 180, 181, 182, 336, 337, 338, 339, 183,
	340, 341, 0, 184, 342, 343, 185, 186, 0, 0,
	344, 345, 346, 0, 187, 347, 0, 0, 0, 188,
	189, 190, 0, 191, 0, 192, 193, 194, 0, 0,
	195, 196, 197, 0, 0, 0, 0, 0, 0, 0,
	198, 199, 398, 200, 348, 201, 349, 350, 0, 202,
	0, 203, 0, 204, 0, 0, 205, 206, 0, 207,
	0, 0, 0, 351, 208, 209, 210, 352, 353, 0,
	0, 0, 211, 212, 354, 355, 356, 0, 213, 0,
	214, 0, 0, 0, 215, 0, 216, 357, 0, 358,
	0, 217, 218, 219, 220, 221, 359, 360, 0, 0,
	225, 0, 222, 0, 0, 223, 361, 224, 362, 363,
	364, 365, 366, 0, 367, 0, 0, 226, 227, 228,
	0, 229, 230, 231, 0, 233, 232, 0, 368, 0,
	234, 0, 0, 235, 0, 0, 236, 0, 237, 238,
	239, 241, 369, 240, 0, 242, 243, 245, 244, 0,
	0, 0, 370, 246, 371, 247, 248, 0, 249, 0,
	0, 250, 0, 0, 251, 372, 0, 252, 0, 373,
	253, 254, 255, 256, 257, 0, 258, 374, 259, 375,
	260, 0, 261, 262, 263, 264, 265, 266, 376, 267,
	268, 0, 269, 270, 271, 272, 273, 275, 276, 274,
	277, 278, 279, 280, 0, 281, 0, 282, 283, 377,
	284, 0, 288, 289, 290, 291, 0, 293, 378, 292,
	294, 295, 0, 296, 285, 286, 297, 0, 298, 379,
	380, 299, 0, 306, 300, 301, 287, 302, 305, 381,
	303, 304, 382, 0, 307, 0, 308, 309, 310, 311,
	312, 313, 314, 0, 383, 384, 385, 0, 0, 315,
	316, 386, 387, 0, 317, 318, 319, 320, 0, 0,
	321, 322, 323, 324, 0, 325, 0, 388, 326, 327,
	328, 389, 390, 0, 0, 329, 0, 174, 0, 0,
	330, 331, 332, 333, 334, 0, 0, 0, 0, 0,
	0, 0, 0, 177, 178, 0, 179, 0, 0, 0,
	0, 335, 0, 0, 0, 2039, 180, 181, 182, 336,
	337, 338, 339, 183, 340, 341, 0, 184, 342, 343,
	185, 186, 0, 0, 344, 345, 346, 0, 187, 347,
	0, 0, 0, 188, 189, 190, 0, 191, 0, 192,
	193, 194, 0, 0, 195, 196, 197, 0, 0, 0,
	0, 0, 0, 0, 198, 199, 398, 200, 348, 201,
	349, 350, 0, 202, 0, 203, 0, 204, 0, 0,
	205, 206, 0, 207, 0, 0, 0, 351, 208, 209,
	210, 352, 353, 0, 0, 0, 211, 212, 354, 355,
	356, 0, 213, 0, 214, 0, 0, 0, 215, 0,
	216, 357, 0, 358, 0, 217, 218, 219, 220, 221,
	359, 360, 0, 0, 225, 0, 222, 0, 0, 223,
	361, 224, 362, 363, 364, 365, 366, 0, 367, 0,
	0, 226, 227, 228, 0, 229, 230, 231, 0, 233,
	232, 0, 368, 0, 234, 0, 0, 235, 0, 0,
	236, 0, 237, 238, 239, 241, 369, 240, 0, 242,
	243, 245, 244, 0, 0, 0, 370, 246, 371, 247,
	248, 0, 249, 0, 0, 250, 0, 0, 251, 372,
	0, 252, 0, 373, 253, 254, 255, 256, 257, 0,
	258, 374, 259, 375, 260, 0, 261, 262, 263, 264,
	265, 266, 376, 267, 268, 0, 269, 270, 271, 272,
	273, 275, 276, 274, 277, 278, 279, 280, 0, 281,
	0, 282, 283, 377, 284, 0, 288, 289, 290, 291,
	0, 293, 378, 292, 294, 295, 0, 296, 285, 286,
	297, 0, 298, 379, 380, 299, 0, 306, 300, 301,
	287, 302, 305, 381, 303, 304, 382, 0, 307, 0,
	308, 309, 310, 311, 312, 313, 314, 0, 383, 384,
	385, 0, 0, 315, 316, 386, 387, 0, 317, 318,
	319, 320, 0, 0, 321, 322, 323, 324, 0, 325,
	0, 388, 326, 327, 328, 389, 390, 0, 0, 329,
	0, 0, 0, 0, 330, 331, 332, 333, 334, 799,
	788, 789, 786, 787, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 177, 178, 0, 179, 1069,
	0, 0, 0, 335, 0, 0, 0, 0, 180, 181,
	182, 336, 831, 338, 832, 183, 833, 834, 0, 184,
	342, 343, 185, 186, 0, 0, 835, 836, 346, 0,
	187, 347, 0, 477, 0, 188, 189, 190, 0, 191,
	0, 192, 193, 194, 0, 478, 195, 196, 197, 0,
	0, 0, 0, 0, 0, 0, 198, 199, 398, 200,
	837, 201, 838, 839, 0, 202, 0, 203, 0, 204,
	0, 0, 830, 206, 0, 207, 0, 0, 0, 351,
	208, 209, 210, 352, 353, 795, 0, 0, 211, 212,
	840, 841, 842, 0, 213, 0, 214, 0, 0, 479,
	215, 0, 216, 357, 0, 358, 0, 217, 218, 219,
	220, 221, 359, 360, 481, 0, 225, 0, 222, 0,
	480, 223, 843, 224, 844, 845, 846, 847, 848, 0,
	806, 0, 482, 226, 227, 228, 483, 229, 230, 231,
	0, 233, 232, 0, 368, 484, 234, 485, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 369, 240,
	486, 242, 243, 245, 244, 0, 0, 796, 370, 246,
	849, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 372, 487, 252, 488, 373, 253, 254, 255, 256,
	257, 0, 258, 374, 259, 375, 260, 0, 261, 262,
	263, 264, 265, 266, 850, 267, 268, 0, 269, 270,
	271, 272, 273, 275, 276, 274, 277, 278, 279, 280,
	0, 281, 489, 282, 283, 377, 284, 0, 288, 289,
	290, 291, 0, 293, 378, 292, 294, 295, 0, 296,
	285, 286, 297, 490, 298, 851, 380, 299, 0, 306,
	300, 301, 287, 302, 305, 852, 303, 304, 382, 0,
	307, 0, 308, 309, 310, 311, 312, 313, 314, 0,
	383, 853, 854, 0, 0, 315, 316, 386, 387, 794,
	317, 318, 319, 320, 0, 0, 321, 322, 323, 324,
	0, 325, 0, 388, 326, 327, 328, 389, 855, 0,
	0, 329, 0, 0, 0, 0, 330, 331, 332, 333,
	334, 964, 0, 695, 692, 0, 0, 0, 966, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 177,
	178, 0, 179, 0, 0, 0, 0, 335, 0, 0,
	0, 0, 180, 181, 182, 336, 337, 338, 339, 183,
	340, 341, 0, 184, 342, 343, 185, 186, 0, 0,
	344, 345, 346, 0, 187, 347, 0, 477, 0, 188,
	189, 190, 0, 191, 0, 192, 193, 194, 0, 478,
	195, 196, 197, 0, 0, 0, 0, 0, 0, 0,
	198, 199, 398, 200, 348, 201, 349, 350, 0, 202,
	0, 203, 0, 204, 0, 0, 205, 206, 0, 207,
	0, 0, 0, 351, 208, 209, 210, 352, 353, 0,
	0, 0, 211, 212, 354, 355, 356, 0, 213, 0,
	214, 0, 0, 479, 215, 0, 216, 357, 0, 358,
	0, 217, 218, 219, 220, 221, 359, 360, 481, 0,
	225, 0, 222, 0, 480, 223, 361, 224, 362, 363,
	364, 365, 366, 0, 367, 0, 482, 226, 227, 228,
	483, 229, 230, 231, 0, 233, 232, 0, 368, 484,
	234, 485, 0, 235, 0, 0, 236, 0, 237, 238,
	239, 241, 369, 240, 486, 242, 243, 245, 244, 0,
	0, 0, 370, 246, 371, 247, 248, 0, 249, 0,
	0, 250, 0, 0, 251, 372, 487, 252, 488, 373,
	253, 254, 255, 256, 257, 0, 258, 374, 259, 375,
	260, 0, 261, 262, 263, 264, 265, 266, 376, 267,
	268, 0, 269, 270, 271, 272, 273, 275, 276, 274,
	277, 278, 279, 280, 0, 281, 489, 282, 283, 377,
	284, 0, 288, 289, 290, 291, 0, 293, 378, 292,
	294, 295, 0, 296, 285, 286, 297, 490, 298, 379,
	380, 299, 0, 306, 300, 301, 287, 302, 305, 381,
	303, 304, 382, 0, 307, 0, 308, 309, 310, 311,
	312, 313, 314, 0, 383, 384, 385, 0, 0, 315,
	316, 386, 387, 0, 317, 318, 319, 320, 0, 0,
	321, 322, 323, 324, 0, 325, 0, 388, 326, 327,
	328, 389, 390, 0, 580, 329, 174, 0, 0, 0,
	330, 331, 332, 333, 334, 0, 0, 0, 0, 0,
	0, 0, 177, 178, 0, 179, 0, 0, 0, 0,
	335, 0, 0, 0, 0, 180, 181, 182, 336, 337,
	338, 339, 183, 340, 341, 0, 184, 342, 343, 185,
	186, 0, 0, 344, 345, 346, 0, 187, 347, 0,
	0, 0, 188, 189, 190, 0, 191, 0, 192, 193,
	194, 0, 0, 195, 196, 197, 0, 0, 0, 0,
	0, 0, 0, 198, 199, 170, 200, 348, 201, 349,
	350, 0, 202, 0, 203, 0, 204, 0, 0, 205,
	206, 0, 207, 0, 0, 0, 351, 208, 209, 210,
	352, 353, 0, 0, 0, 211, 212, 354, 355, 356,
	0, 213, 0, 214, 0, 0, 0, 215, 0, 216,
	357, 0, 358, 0, 217, 218, 219, 220, 221, 359,
	360, 0, 0, 225, 0, 222, 0, 0, 223, 361,
	224, 362, 363, 364, 365, 366, 0, 367, 0, 0,
	226, 227, 228, 0, 229, 230, 231, 0, 233, 232,
	0, 368, 0, 234, 0, 0, 235, 0, 0, 236,
	0, 237, 238, 239, 241, 369, 240, 0, 242, 243,
	245, 244, 0, 0, 0, 370, 246, 371, 247, 248,
	0, 249, 0, 0, 250, 0, 0, 251, 372, 0,
	252, 0, 373, 253, 254, 255, 256, 257, 0, 258,
	374, 259, 375, 260, 0, 261, 262, 263, 264, 265,
	266, 376, 267, 268, 0, 269, 270, 271, 272, 273,
	275, 276, 274, 277, 278, 279, 280, 0, 281, 0,
	282, 283, 377, 284, 0, 288, 289, 290, 291, 0,
	293, 378, 292, 294, 295, 0, 296, 285, 286, 297,
	0, 298, 379, 380, 299, 0, 306, 300, 301, 287,
	302, 305, 381, 303, 304, 382, 0, 307, 169, 308,
	309, 310, 311, 312, 313, 314, 0, 383, 384, 385,
	0, 0, 315, 316, 386, 387, 0, 317, 318, 319,
	320, 0, 0, 321, 322, 323, 324, 0, 325, 0,
	388, 326, 327, 328, 389, 390, 0, 167, 329, 174,
	0, 0, 0, 330, 331, 332, 333, 334, 0, 0,
	0, 0, 0, 0, 0, 177, 178, 0, 179, 0,
	0, 173, 0, 335, 0, 0, 0, 0, 180, 181,
	182, 336, 337, 338, 339, 183, 340, 341, 0, 184,
	342, 343, 185, 186, 0, 0, 344, 345, 346, 0,
	187, 347, 0, 0, 0, 188, 189, 190, 0, 191,
	0, 192, 193, 194, 0, 0, 195, 196, 197, 0,
	0, 0, 0, 0, 0, 0, 198, 199, 170, 200,
	348, 201, 349, 350, 0, 202, 0, 203, 0, 204,
	0, 0, 205, 206, 0, 207, 0, 0, 0, 351,
	208, 209, 210, 352, 353, 0, 0, 0, 211, 212,
	354, 355, 356, 0, 213, 0, 214, 0, 0, 0,
	215, 0, 216, 357, 0, 358, 0, 217, 218, 219,
	220, 221, 359, 360, 0, 0, 225, 0, 222, 0,
	0, 223, 361, 224, 362, 363, 364, 365, 366, 0,
	367, 0, 0, 226, 227, 228, 0, 229, 230, 231,
	0, 233, 232, 0, 368, 0, 234, 0, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 369, 240,
	0, 242, 243, 245, 244, 0, 0, 0, 370, 246,
	371, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 372, 0, 252, 0, 373, 253, 254, 255, 256,
	257, 0, 258, 374, 259, 375, 260, 0, 261, 262,
	263, 264, 265, 266, 376, 267, 268, 0, 269, 270,
	271, 272, 273, 275, 276, 274, 277, 278, 279, 280,
	0, 281, 0, 282, 283, 377, 284, 0, 288, 289,
	290, 291, 0, 293, 378, 292, 294, 295, 0, 296,
	285, 286, 297, 0, 298, 379, 380, 299, 0, 306,
	300, 301, 287, 302, 305, 381, 303, 304, 382, 0,
	307, 169, 308, 309, 310, 311, 312, 313, 314, 0,
	383, 384, 385, 0, 0, 315, 316, 386, 387, 0,
	317, 318, 319, 320, 0, 0, 321, 322, 323, 324,
	0, 325, 0, 388, 326, 327, 328, 389, 390, 695,
	692, 329, 0, 0, 966, 0, 330, 331, 332, 333,
	334, 0, 0, 0, 0, 177, 178, 0, 179, 0,
	0, 0, 0, 335, 173, 0, 0, 0, 180, 181,
	182, 336, 337, 338, 339, 183, 340, 341, 0, 184,
	342, 343, 185, 186, 0, 0, 344, 345, 346, 0,
	187, 347, 0, 477, 0, 188, 189, 190, 0, 191,
	0, 192, 193, 194, 0, 478, 195, 196, 197, 0,
	0, 0, 0, 0, 0, 0, 198, 199, 398, 200,
	348, 201, 349, 350, 0, 202, 0, 203, 0, 204,
	0, 0, 205, 206, 0, 207, 0, 0, 0, 351,
	208, 209, 210, 352, 353, 0, 0, 0, 211, 212,
	354, 355, 356, 0, 213, 0, 214, 0, 0, 479,
	215, 0, 216, 357, 0, 358, 0, 217, 218, 219,
	220, 221, 359, 360, 481, 0, 225, 0, 222, 0,
	480, 223, 361, 224, 362, 363, 364, 365, 366, 0,
	367, 0, 482, 226, 227, 228, 483, 229, 230, 231,
	0, 233, 232, 0, 368, 484, 234, 485, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 369, 240,
	486, 242, 243, 245, 244, 0, 0, 0, 370, 246,
	371, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 372, 487, 252, 488, 373, 253, 254, 255, 256,
	257, 0, 258, 374, 259, 375, 260, 0, 261, 262,
	263, 264, 265, 266, 376, 267, 268, 0, 269, 270,
	271, 272, 273, 275, 276, 274, 277, 278, 279, 280,
	0, 281, 489, 282, 283, 377, 284, 0, 288, 289,
	290, 291, 0, 293, 378, 292, 294, 295, 0, 296,
	285, 286, 297, 490, 298, 379, 380, 299, 0, 306,
	300, 301, 287, 302, 305, 381, 303, 304, 382, 0,
	307, 0, 308, 309, 310, 311, 312, 313, 314, 0,
	383, 384, 385, 0, 0, 315, 316, 386, 387, 0,
	317, 318, 319, 320, 0, 0, 321, 322, 323, 324,
	0, 325, 0, 388, 326, 327, 328, 389, 390, 174,
	0, 329, 0, 0, 0, 0, 330, 331, 332, 333,
	334, 0, 0, 0, 0, 177, 178, 0, 179, 0,
	0, 0, 0, 335, 0, 0, 0, 0, 180, 181,
	182, 336, 337, 338, 339, 183, 340, 341, 0, 184,
	342, 343, 185, 186, 0, 0, 344, 345, 346, 0,
	187, 347, 0, 0, 0, 188, 189, 190, 0, 191,
	0, 192, 193, 194, 0, 0, 195, 196, 197, 0,
	0, 0, 0, 0, 0, 0, 198, 199, 170, 200,
	348, 201, 349, 350, 0, 202, 0, 203, 0, 204,
	0, 0, 205, 206, 0, 207, 0, 0, 0, 351,
	208, 209, 210, 352, 353, 0, 0, 0, 211, 212,
	354, 355, 356, 0, 213, 0, 214, 0, 0, 0,
	215, 0, 216, 357, 0, 358, 0, 217, 218, 219,
	220, 221, 359, 360, 0, 0, 225, 0, 222, 0,
	0, 223, 361, 224, 362, 363, 364, 365, 366, 0,
	367, 0, 0, 226, 227, 228, 0, 229, 230, 231,
	0, 233, 232, 0, 368, 0, 234, 0, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 369, 240,
	0, 242, 243, 245, 244, 0, 0, 0, 370, 246,
	371, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 372, 0, 252, 0, 373, 253, 254, 255, 256,
	257, 0, 258, 374, 259, 375, 260, 0, 261, 262,
	263, 264, 265, 266, 376, 267, 268, 0, 269, 270,
	271, 272, 273, 275, 276, 274, 277, 278, 279, 280,
	0, 281, 0, 282, 283, 377, 284, 0, 288, 289,
	290, 291, 0, 293, 378, 292, 294, 295, 0, 296,
	285, 286, 297, 0, 298, 379, 380, 299, 0, 306,
	300, 301, 287, 302, 305, 381, 303, 304, 382, 0,
	307, 169, 308, 309, 310, 311, 312, 313, 314, 0,
	383, 384, 385, 0, 0, 315, 316, 386, 387, 0,
	317, 318, 319, 320, 0, 0, 321, 322, 323, 324,
	0, 325, 0, 388, 326, 327, 328, 389, 390, 695,
	692, 329, 0, 0, 0, 0, 330, 331, 332, 333,
	334, 0, 0, 0, 0, 177, 178, 0, 179, 0,
	0, 0, 0, 335, 173, 0, 0, 0, 180, 181,
	182, 336, 337, 338, 339, 183, 340, 341, 0, 184,
	342, 343, 185, 186, 0, 0, 344, 345, 346, 0,
	187, 347, 0, 477, 0, 188, 189, 190, 0, 191,
	0, 192, 193, 194, 0, 478, 195, 196, 197, 0,
	0, 0, 0, 0, 0, 0, 198, 199, 398, 200,
	348, 201, 349, 350, 0, 202, 0, 203, 0, 204,
	0, 0, 205, 206, 0, 207, 0, 0, 0, 351,
	208, 209, 210, 352, 353, 0, 0, 0, 211, 212,
	354, 355, 356, 0, 213, 0, 214, 0, 0, 479,
	215, 0, 216, 357, 0, 358, 0, 217, 218, 219,
	220, 221, 359, 360, 481, 0, 225, 0, 222, 0,
	480, 223, 361, 224, 362, 363, 364, 365, 366, 0,
	367, 0, 482, 226, 227, 228, 483, 229, 230, 231,
	0, 233, 232, 0, 368, 484, 234, 485, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 369, 240,
	486, 242, 243, 245, 244, 0, 0, 0, 370, 246,
	371, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 372, 487, 252, 488, 373, 253, 254, 255, 256,
	257, 0, 258, 374, 259, 375, 260, 0, 261, 262,
	263, 264, 265, 266, 376, 267, 268, 0, 269, 270,
	271, 272, 273, 275, 276, 274, 277, 278, 279, 280,
	0, 281, 489, 282, 283, 377, 284, 0, 288, 289,
	290, 291, 0, 293, 378, 292, 294, 295, 0, 296,
	285, 286, 297, 490, 298, 379, 380, 299, 0, 306,
	300, 301, 287, 302, 305, 381, 303, 304, 382, 0,
	307, 0, 308, 309, 310, 311, 312, 313, 314, 0,
	383, 384, 385, 0, 0, 315, 316, 386, 387, 0,
	317, 318, 319, 320, 0, 0, 321, 322, 323, 324,
	0, 325, 0, 388, 326, 327, 328, 389, 390, 174,
	0, 329, 0, 0, 0, 0, 330, 331, 332, 333,
	334, 0, 0, 0, 0, 177, 178, 0, 179, 0,
	0, 0, 0, 335, 0, 0, 0, 0, 180, 181,
	182, 336, 337, 338, 339, 183, 340, 341, 0, 184,
	342, 343, 185, 186, 0, 0, 344, 345, 346, 0,
	187, 347, 0, 0, 0, 188, 189, 190, 0, 191,
	0, 192, 193, 194, 0, 0, 195, 196, 197, 0,
	0, 0, 0, 0, 0, 0, 198, 199, 398, 200,
	348, 201, 349, 350, 0, 202, 0, 203, 0, 204,
	0, 0, 205, 206, 0, 207, 0, 0, 0, 351,
	208, 209, 210, 352, 353, 0, 0, 0, 211, 212,
	354, 355, 356, 0, 213, 0, 214, 0, 0, 0,
	215, 0, 216, 357, 0, 358, 0, 217, 218, 219,
	220, 221, 359, 360, 0, 0, 225, 0, 222, 0,
	0, 223, 361, 224, 362, 363, 364, 365, 366, 0,
	367, 0, 0, 226, 227, 228, 0, 229, 230, 231,
	0, 233, 232, 0, 368, 0, 234, 0, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 369, 240,
	0, 242, 243, 245, 244, 0, 0, 0, 370, 246,
	371, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 372, 0, 252, 0, 373, 253, 254, 255, 256,
	257, 0, 258, 374, 259, 375, 260, 0, 261, 262,
	263, 264, 265, 266, 376, 267, 268, 0, 269, 270,
	271, 272, 273, 275, 276, 274, 277, 278, 279, 280,
	0, 281, 0, 282, 283, 377, 284, 0, 288, 289,
	290, 291, 0, 293, 378, 292, 294, 295, 0, 296,
	285, 286, 297, 0, 298, 379, 380, 299, 0, 306,
	300, 301, 287, 302, 305, 381, 303, 304, 382, 0,
	307, 0, 308, 309, 310, 311, 312, 313, 314, 0,
	383, 384, 385, 0, 0, 315, 316, 386, 387, 0,
	317, 318, 319, 320, 0, 0, 321, 322, 323, 324,
	0, 325, 0, 388, 326, 327, 328, 389, 390, 695,
	0, 329, 0, 0, 0, 0, 330, 331, 332, 333,
	334, 0, 0, 0, 0, 177, 178, 0, 179, 0,
	0, 0, 0, 335, 173, 0, 0, 0, 180, 181,
	182, 336, 337, 338, 339, 183, 340, 341, 0, 184,
	342, 343, 185, 186, 0, 0, 344, 345, 346, 0,
	187, 347, 0, 477, 0, 188, 189, 190, 0, 191,
	0, 192, 193, 194, 0, 478, 195, 196, 197, 0,
	0, 0, 0, 0, 0, 0, 198, 199, 398, 200,
	348, 201, 349, 350, 0, 202, 0, 203, 0, 204,
	0, 0, 205, 206, 0, 207, 0, 0, 0, 351,
	208, 209, 210, 352, 353, 0, 0, 0, 211, 212,
	354, 355, 356, 0, 213, 0, 214, 0, 0, 479,
	215, 0, 216, 357, 0, 358, 0, 217, 218, 219,
	220, 221, 359, 360, 481, 0, 225, 0, 222, 0,
	480, 223, 361, 224, 362, 363, 364, 365, 366, 0,
	367, 0, 482, 226, 227, 228, 483, 229, 230, 231,
	0, 233, 232, 0, 368, 484, 234, 485, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 369, 240,
	486, 242, 243, 245, 244, 0, 0, 0, 370, 246,
	371, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 372, 487, 252, 488, 373, 253, 254, 255, 256,
	257, 0, 258, 374, 259, 375, 260, 0, 261, 262,
	263, 264, 265, 266, 376, 267, 268, 0, 269, 270,
	271, 272, 273, 275, 276, 274, 277, 278, 279, 280,
	0, 281, 489, 282, 283, 377, 284, 0, 288, 289,
	290, 291, 0, 293, 378, 292, 294, 295, 0, 296,
	285, 286, 297, 490, 298, 379, 380, 299, 0, 306,
	300, 301, 287, 302, 305, 381, 303, 304, 382, 0,
	307, 0, 308, 309, 310, 311, 312, 313, 314, 0,
	383, 384, 385, 0, 0, 315, 316, 386, 387, 0,
	317, 318, 319, 320, 0, 0, 321, 322, 323, 324,
	0, 325, 0, 388, 326, 327, 328, 389, 390, 174,
	0, 329, 0, 0, 0, 0, 330, 331, 332, 333,
	334, 0, 0, 0, 0, 177, 178, 0, 179, 0,
	0, 0, 0, 335, 0, 0, 0, 0, 180, 181,
	182, 336, 337, 338, 339, 183, 340, 341, 0, 184,
	342, 343, 185, 186, 0, 0, 344, 345, 346, 1420,
	187, 347, 0, 0, 0, 188, 189, 190, 0, 191,
	1418, 192, 193, 194, 0, 0, 195, 196, 197, 0,
	0, 0, 0, 0, 0, 0, 198, 199, 398, 200,
	348, 201, 349, 350, 0, 202, 0, 203, 0, 204,
	0, 0, 205, 206, 0, 207, 0, 0, 0, 351,
	208, 209, 210, 352, 353, 0, 1617, 0, 211, 212,
	354, 355, 356, 0, 213, 0, 214, 1423, 0, 0,
	215, 0, 216, 357, 0, 358, 0, 217, 218, 219,
	220, 221, 359, 360, 0, 0, 225, 1615, 222, 0,
	0, 223, 361, 224, 362, 363, 364, 365, 366, 0,
	367, 0, 0, 226, 227, 228, 0, 229, 230, 231,
	0, 233, 232, 0, 368, 0, 234, 0, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 369, 240,
	0, 242, 243, 245, 244, 0, 0, 0, 370, 246,
	371, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 372, 0, 252, 0, 373, 253, 254, 255, 256,
	257, 0, 258, 374, 259, 375, 260, 1422, 261, 262,
	263, 264, 265, 266, 376, 267, 268, 0, 269, 270,
	271, 272, 273, 275, 276, 274, 277, 278, 279, 280,
	0, 281, 0, 282, 283, 377, 284, 0, 288, 289,
	290, 291, 0, 293, 378, 292, 294, 295, 0, 296,
	285, 286, 297, 0, 298, 379, 380, 299, 0, 306,
	300, 301, 287, 302, 305, 381, 303, 304, 382, 0,
	307, 0, 308, 309, 310, 311, 312, 313, 314, 0,
	383, 384, 385, 0, 0, 315, 316, 386, 387, 0,
	317, 318, 319, 320, 0, 1616, 321, 322, 323, 324,
	0, 325, 0, 388, 326, 327, 328, 389, 390, 174,
	0, 329, 0, 0, 0, 0, 330, 331, 332, 333,
	334, 0, 0, 0, 0, 177, 178, 0, 179, 0,
	0, 0, 0, 335, 0, 0, 0, 0, 180, 181,
	182, 336, 337, 338, 339, 183, 340, 341, 0, 184,
	342, 343, 185, 186, 0, 0, 344, 345, 346, 1420,
	187, 347, 0, 0, 1415, 188, 189, 190, 0, 191,
	1418, 192, 193, 194, 0, 0, 195, 196, 197, 0,
	0, 0, 0, 0, 0, 0, 198, 199, 398, 200,
	348, 201, 349, 350, 0, 202, 0, 203, 0, 204,
	0, 0, 205, 206, 0, 207, 0, 0, 0, 351,
	208, 209, 210, 352, 353, 0, 0, 0, 211, 212,
	354, 355, 356, 0, 213, 0, 214, 1423, 0, 0,
	215, 0, 216, 357, 0, 358, 0, 217, 218, 219,
	220, 221, 1414, 360, 0, 0, 225, 0, 222, 0,
	0, 223, 361, 224, 362, 363, 364, 365, 366, 0,
	367, 0, 0, 226, 227, 228, 0, 229, 230, 231,
	0, 233, 232, 0, 368, 0, 234, 0, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 369, 240,
	0, 242, 243, 245, 244, 0, 0, 0, 370, 246,
	371, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 372, 0, 252, 0, 373, 253, 254, 255, 256,
	257, 0, 258, 374, 259, 375, 260, 1422, 261, 262,
	263, 264, 265, 266, 376, 267, 268, 0, 269, 270,
	271, 272, 273, 275, 276, 274, 277, 278, 279, 280,
	0, 281, 0, 282, 283, 377, 284, 0, 288, 289,
	290, 291, 0, 293, 378, 292, 294, 295, 0, 296,
	285, 286, 297, 0, 298, 379, 380, 299, 0, 306,
	300, 301, 287, 302, 305, 381, 303, 304, 382, 0,
	307, 0, 308, 309, 310, 311, 312, 313, 314, 0,
	383, 384, 385, 0, 0, 315, 316, 386, 387, 0,
	317, 318, 319, 320, 0, 1421, 321, 322, 323, 324,
	0, 325, 0, 388, 326, 327, 328, 389, 390, 0,
	892, 329, 174, 0, 0, 0, 330, 331, 332, 333,
	334, 0, 0, 0, 0, 0, 0, 0, 177, 178,
	0, 179, 0, 0, 0, 0, 335, 0, 0, 0,
	0, 180, 181, 182, 336, 337, 338, 339, 183, 340,
	341, 0, 184, 342, 343, 185, 186, 0, 0, 344,
	345, 346, 0, 187, 347, 0, 0, 0, 188, 189,
	190, 0, 191, 0, 192, 193, 194, 0, 0, 195,
	196, 197, 0, 0, 0, 0, 0, 0, 0, 198,
	199, 398, 200, 348, 201, 349, 350, 0, 202, 0,
	203, 0, 204, 0, 0, 205, 206, 0, 207, 0,
	0, 0, 351, 208, 209, 210, 352, 353, 0, 0,
	0, 211, 212, 354, 355, 356, 0, 213, 0, 214,
	0, 0, 0, 215, 0, 216, 357, 0, 358, 0,
	217, 218, 219, 220, 221, 359, 360, 0, 0, 225,
	0, 222, 0, 0, 223, 361, 224, 362, 363, 364,
	365, 366, 0, 367, 0, 0, 226, 227, 228, 0,
	229, 230, 231, 0, 233, 232, 0, 368, 0, 234,
	0, 0, 235, 0, 0, 236, 0, 237, 238, 239,
	241, 369, 240, 0, 242, 243, 245, 244, 0, 0,
	0, 370, 246, 371, 247, 248, 0, 249, 0, 737,
	250, 0, 0, 251, 372, 0, 252, 0, 373, 253,
	254, 255, 256, 257, 0, 258, 374, 259, 375, 260,
	0, 261, 262, 263, 264, 265, 266, 376, 267, 268,
	0, 269, 270, 271, 272, 273, 275, 276, 274, 277,
	278, 279, 280, 0, 281, 0, 282, 283, 377, 284,
	0, 288, 289, 290, 291, 0, 293, 378, 292, 294,
	295, 0, 296, 285, 286, 297, 0, 298, 379, 380,
	299, 0, 306, 300, 301, 287, 302, 305, 381, 303,
	304, 382, 0, 307, 0, 308, 309, 310, 311, 312,
	313, 314, 0, 383, 384, 385, 0, 0, 315, 316,
	386, 387, 0, 317, 318, 319, 320, 0, 0, 321,
	322, 323, 324, 0, 325, 0, 388, 326, 327, 328,
	389, 390, 0, 743, 329, 174, 0, 0, 0, 330,
	331, 332, 333, 334, 0, 0, 0, 0, 0, 0,
	0, 177, 178, 0, 179, 0, 0, 0, 0, 335,
	0, 0, 0, 0, 180, 181, 182, 336, 337, 338,
	339, 183, 340, 341, 0, 184, 342, 343, 185, 186,
	0, 0, 344, 345, 346, 0, 187, 347, 0, 0,
	0, 188, 189, 190, 0, 191, 0, 192, 193, 194,
	0, 0, 195, 196, 197, 0, 0, 0, 0, 0,
	0, 0, 198, 199, 398, 200, 348, 201, 349, 350,
	0, 202, 0, 203, 0, 204, 0, 0, 205, 206,
	0, 207, 0, 0, 0, 351, 208, 209, 210, 352,
	353, 0, 0, 0, 211, 212, 354, 355, 356, 0,
	213, 0, 214, 0, 0, 0, 215, 0, 216, 357,
	0, 358, 0, 217, 218, 219, 220, 221, 745, 360,
	0, 0, 225, 0, 222, 0, 0, 223, 361, 224,
	362, 363, 364, 365, 366, 0, 367, 0, 0, 226,
	227, 228, 0, 229, 230, 231, 0, 233, 232, 0,
	368, 0, 234, 0, 0, 235, 0, 0, 236, 0,
	237, 238, 239, 241, 369, 240, 0, 242, 243, 245,
	244, 0, 0, 0, 370, 246, 371, 247, 248, 0,
	249, 0, 737, 250, 0, 0, 251, 372, 0, 252,
	0, 373, 253, 254, 255, 256, 257, 0, 258, 374,
	259, 375, 260, 0, 261, 262, 263, 264, 265, 266,
	376, 267, 268, 0, 269, 270, 271, 272, 273, 275,
	276, 274, 277, 278, 279, 280, 0, 281, 0, 282,
	283, 377, 284, 0, 288, 289, 290, 291, 0, 293,
	378, 292, 294, 295, 0, 296, 285, 286, 297, 0,
	298, 379, 380, 299, 0, 306, 300, 301, 287, 302,
	305, 381, 303, 304, 382, 0, 307, 0, 308, 309,
	310, 311, 312, 313, 314, 0, 383, 384, 385, 0,
	0, 315, 316, 386, 387, 0, 317, 318, 319, 320,
	0, 0, 321, 322, 323, 324, 0, 325, 0, 388,
	326, 327, 328, 389, 390, 0, 739, 329, 174, 0,
	0, 0, 330, 331, 332, 333, 334, 0, 0, 0,
	0, 0, 0, 0, 177, 178, 0, 179, 0, 0,
	0, 0, 335, 0, 0, 0, 0, 180, 181, 182,
	336, 337, 338, 339, 183, 340, 341, 0, 184, 342,
	343, 185, 186, 0, 0, 344, 345, 346, 0, 187,
	347, 0, 0, 0, 188, 189, 190, 0, 191, 0,
	192, 193, 194, 0, 0, 195, 196, 197, 0, 0,
	0, 0, 0, 0, 0, 198, 199, 398, 200, 348,
	201, 349, 350, 0, 202, 0, 203, 0, 204, 0,
	0, 205, 206, 0, 207, 0, 0, 0, 351, 208,
	209, 210, 352, 353, 0, 0, 0, 211, 212, 354,
	355, 356, 0, 213, 0, 214, 0, 0, 0, 215,
	0, 216, 357, 0, 358, 0, 217, 218, 219, 220,
	221, 741, 360, 0, 0, 225, 0, 222, 0, 0,
	223, 361, 224, 362, 363, 364, 365, 366, 0, 367,
	0, 0, 226, 227, 228, 0, 229, 230, 231, 0,
	233, 232, 0, 368, 0, 234, 0, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 369, 240, 0,
	242, 243, 245, 244, 0, 0, 0, 370, 246, 371,
	247, 248, 0, 249, 0, 737, 250, 0, 0, 251,
	372, 0, 252, 0, 373, 253, 254, 255, 256, 257,
	0, 258, 374, 259, 375, 260, 0, 261, 262, 263,
	264, 265, 266, 376, 267, 268, 0, 269, 270, 271,
	272, 273, 275, 276, 274, 277, 278, 279, 280, 0,
	281, 0, 282, 283, 377, 284, 0, 288, 289, 290,
	291, 0, 293, 378, 292, 294, 295, 0, 296, 285,
	286, 297, 0, 298, 379, 380, 299, 0, 306, 300,
	301, 287, 302, 305, 381, 303, 304, 382, 0, 307,
	0, 308, 309, 310, 311, 312, 313, 314, 0, 383,
	384, 385, 0, 0, 315, 316, 386, 387, 0, 317,
	318, 319, 320, 0, 0, 321, 322, 323, 324, 0,
	325, 0, 388, 326, 327, 328, 389, 390, 0, 419,
	329, 174, 0, 0, 0, 330, 331, 332, 333, 334,
	0, 0, 0, 0, 0, 0, 0, 177, 178, 418,
	179, 0, 0, 0, 0, 335, 0, 0, 0, 0,
	180, 181, 182, 336, 337, 338, 339, 183, 340, 341,
	0, 184, 342, 343, 185, 186, 0, 0, 344, 345,
	346, 0, 187, 347, 0, 0, 0, 188, 189, 190,
	0, 191, 0, 192, 193, 194, 0, 0, 195, 196,
	197, 0, 0, 0, 0, 0, 0, 0, 198, 199,
	398, 200, 348, 201, 349, 350, 0, 202, 0, 203,
	0, 204, 0, 0, 205, 206, 0, 207, 0, 0,
	0, 351, 208, 209, 210, 352, 353, 0, 0, 0,
	211, 212, 354, 355, 356, 0, 213, 0, 214, 0,
	0, 0, 215, 0, 216, 357, 0, 358, 0, 217,
	218, 219, 220, 221, 359, 360, 0, 0, 225, 0,
	222, 0, 0, 223, 361, 224, 362, 363, 364, 365,
	366, 0, 367, 0, 0, 226, 227, 228, 0, 229,
	230, 231, 0, 233, 232, 0, 368, 0, 234, 0,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 0, 242, 243, 245, 244, 0, 0, 0,
	370, 246, 371, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 372, 0, 252, 0, 373, 253, 254,
	255, 256, 257, 0, 258, 374, 259, 375, 417, 0,
	261, 262, 263, 264, 265, 266, 376, 267, 268, 0,
	269, 270, 271, 272, 273, 275, 276, 274, 277, 278,
	279, 280, 0, 281, 0, 282, 283, 377, 284, 0,
	288, 289, 290, 291, 0, 293, 378, 292, 294, 295,
	0, 296, 285, 286, 297, 0, 298, 379, 380, 299,
	0, 306, 300, 301, 287, 302, 305, 381, 303, 304,
	382, 0, 307, 0, 308, 309, 310, 311, 312, 313,
	314, 0, 383, 384, 385, 0, 0, 315, 316, 386,
	387, 0, 317, 318, 319, 320, 0, 0, 321, 322,
	323, 324, 0, 325, 0, 388, 326, 327, 328, 389,
	390, 174, 0, 329, 0, 0, 0, 0, 330, 331,
	332, 333, 334, 0, 0, 0, 0, 177, 178, 0,
	179, 0, 0, 0, 0, 335, 0, 1403, 0, 0,
	180, 181, 182, 336, 337, 338, 339, 183, 340, 341,
	0, 184, 342, 343, 185, 186, 0, 0, 344, 345,
	346, 0, 187, 347, 0, 0, 0, 188, 189, 190,
	0, 191, 0, 192, 193, 194, 0, 0, 195, 196,
	197, 0, 0, 0, 0, 0, 0, 0, 198, 199,
	398, 200, 348, 201, 349, 350, 0, 202, 0, 203,
	0, 204, 0, 0, 205, 206, 0, 207, 0, 0,
	0, 351, 208, 209, 210, 352, 353, 0, 0, 0,
	211, 212, 354, 355, 356, 0, 213, 0, 214, 0,
	0, 0, 215, 0, 216, 357, 0, 358, 0, 217,
	218, 219, 220, 221, 359, 360, 0, 0, 225, 0,
	222, 0, 0, 223, 361, 224, 362, 363, 364, 365,
	366, 0, 367, 0, 0, 226, 227, 228, 0, 229,
	230, 231, 0, 233, 232, 0, 368, 0, 234, 0,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 0, 242, 243, 245, 244, 0, 0, 0,
	370, 246, 371, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 372, 0, 252, 0, 373, 253, 254,
	255, 256, 257, 0, 258, 374, 259, 375, 260, 0,
	261, 262, 263, 264, 265, 266, 376, 267, 268, 0,
	269, 270, 271, 272, 273, 275, 276, 274, 277, 278,
	279, 280, 0, 281, 0, 282, 283, 377, 284, 0,
	288, 289, 290, 291, 0, 293, 378, 292, 294, 295,
	0, 296, 285, 286, 297, 0, 298, 379, 380, 299,
	0, 306, 300, 301, 287, 302, 305, 381, 303, 304,
	382, 0, 307, 0, 308, 309, 310, 311, 312, 313,
	314, 0, 383, 384, 385, 0, 0, 315, 316, 386,
	387, 0, 317, 318, 319, 320, 0, 0, 321, 322,
	323, 324, 0, 325, 0, 388, 326, 327, 328, 389,
	390, 174, 2126, 329, 0, 0, 0, 0, 330, 331,
	332, 333, 334, 0, 0, 0, 0, 177, 178, 0,
	179, 0, 0, 0, 0, 335, 0, 0, 0, 0,
	180, 181, 182, 336, 337, 338, 339, 183, 340, 341,
	0, 184, 342, 343, 185, 186, 0, 0, 344, 345,
	346, 0, 187, 347, 0, 0, 0, 188, 189, 190,
	0, 191, 0, 192, 193, 194, 0, 0, 195, 196,
	197, 0, 0, 0, 0, 0, 0, 0, 198, 199,
	398, 200, 348, 201, 349, 350, 0, 202, 0, 203,
	0, 204, 0, 0, 205, 206, 0, 207, 0, 0,
	0, 351, 208, 209, 210, 352, 353, 0, 0, 0,
	211, 212, 354, 355, 356, 0, 213, 0, 214, 0,
	0, 0, 215, 0, 216, 357, 0, 358, 0, 217,
	218, 219, 220, 221, 359, 360, 0, 0, 225, 0,
	222, 0, 0, 223, 361, 224, 362, 363, 364, 365,
	366, 0, 367, 0, 0, 226, 227, 228, 0, 229,
	230, 231, 0, 233, 232, 0, 368, 0, 234, 0,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 0, 242, 243, 245, 244, 0, 0, 0,
	370, 246, 371, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 372, 0, 252, 0, 373, 253, 254,
	255, 256, 257, 0, 258, 374, 259, 375, 260, 0,
	261, 262, 263, 264, 265, 266, 376, 267, 268, 0,
	269, 270, 271, 272, 273, 275, 276, 274, 277, 278,
	279, 280, 0, 281, 0, 282, 283, 377, 284, 0,
	288, 289, 290, 291, 0, 293, 378, 292, 294, 295,
	0, 296, 285, 286, 297, 0, 298, 379, 380, 299,
	0, 306, 300, 301, 287, 302, 305, 381, 303, 304,
	382, 0, 307, 0, 308, 309, 310, 311, 312, 313,
	314, 0, 383, 384, 385, 0, 0, 315, 316, 386,
	387, 0, 317, 318, 319, 320, 0, 0, 321, 322,
	323, 324, 0, 325, 0, 388, 326, 327, 328, 389,
	390, 174, 2126, 329, 0, 0, 0, 0, 330, 331,
	332, 333, 334, 0, 0, 0, 0, 177, 178, 0,
	179, 0, 0, 0, 0, 335, 0, 0, 0, 0,
	180, 181, 182, 336, 337, 338, 339, 183, 340, 341,
	0, 184, 342, 343, 185, 186, 0, 0, 344, 345,
	346, 0, 187, 347, 0, 0, 0, 188, 189, 190,
	0, 191, 0, 192, 193, 194, 0, 0, 195, 196,
	197, 0, 0, 0, 0, 0, 0, 0, 198, 199,
	398, 200, 348, 201, 349, 350, 0, 202, 0, 203,
	0, 204, 0, 0, 205, 206, 0, 207, 0, 0,
	0, 351, 208, 209, 210, 352, 353, 0, 0, 0,
	211, 212, 354, 355, 356, 0, 213, 0, 214, 0,
	0, 0, 215, 0, 216, 357, 0, 358, 0, 217,
	218, 219, 220, 221, 359, 360, 0, 0, 225, 0,
	222, 0, 0, 223, 361, 224, 362, 363, 364, 365,
	366, 0, 367, 0, 0, 226, 227, 228, 0, 229,
	230, 231, 0, 233, 232, 0, 368, 0, 234, 0,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 0, 242, 243, 245, 244, 0, 0, 0,
	370, 246, 371, 247, 248, 0, 249, 0, 0, 2123,
	0, 0, 251, 372, 0, 252, 0, 373, 253, 254,
	255, 256, 257, 0, 258, 374, 259, 375, 260, 0,
	261, 262, 263, 264, 265, 266, 376, 267, 268, 0,
	269, 270, 271, 272, 273, 275, 276, 274, 277, 278,
	279, 280, 0, 281, 0, 282, 283, 377, 284, 0,
	288, 289, 290, 291, 0, 293, 378, 292, 294, 295,
	0, 296, 285, 286, 297, 0, 298, 379, 380, 299,
	0, 306, 300, 301, 287, 302, 305, 381, 303, 304,
	382, 0, 307, 0, 308, 309, 310, 311, 312, 313,
	314, 0, 383, 384, 385, 0, 0, 315, 316, 386,
	387, 0, 317, 318, 319, 320, 0, 0, 321, 322,
	323, 324, 0, 325, 0, 388, 326, 327, 328, 389,
	390, 174, 0, 329, 0, 0, 0, 0, 330, 331,
	332, 333, 334, 0, 0, 0, 0, 177, 178, 0,
	179, 0, 0, 0, 0, 335, 0, 0, 0, 0,
	180, 181, 182, 336, 337, 338, 339, 183, 340, 341,
	0, 184, 342, 343, 185, 186, 0, 0, 344, 345,
	346, 0, 187, 347, 0, 0, 0, 188, 189, 190,
	0, 191, 0, 192, 193, 194, 0, 0, 195, 196,
	197, 0, 0, 0, 0, 0, 0, 0, 198, 199,
	398, 200, 348, 201, 349, 350, 0, 202, 0, 203,
	0, 204, 0, 0, 205, 206, 0, 207, 0, 0,
	0, 351, 208, 209, 210, 352, 353, 0, 0, 0,
	211, 212, 354, 355, 356, 0, 213, 0, 214, 0,
	0, 0, 215, 0, 216, 357, 0, 358, 0, 217,
	218, 219, 220, 221, 359, 360, 0, 0, 225, 0,
	222, 0, 0, 223, 361, 224, 362, 363, 364, 365,
	366, 0, 367, 0, 0, 226, 227, 228, 0, 229,
	230, 231, 0, 233, 232, 0, 368, 0, 234, 0,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 0, 242, 243, 245, 244, 0, 0, 0,
	370, 246, 371, 247, 248, 0, 249, 0, 737, 250,
	0, 0, 251, 372, 0, 252, 0, 373, 253, 254,
	255, 256, 257, 0, 258, 374, 259, 375, 260, 0,
	261, 262, 263, 264, 265, 266, 376, 267, 268, 0,
	269, 270, 271, 272, 273, 275, 276, 274, 277, 278,
	279, 280, 0, 281, 0, 282, 283, 377, 284, 0,
	288, 289, 290, 291, 0, 293, 378, 292, 294, 295,
	0, 296, 285, 286, 297, 0, 298, 379, 380, 299,
	0, 306, 300, 301, 287, 302, 305, 381, 303, 304,
	382, 0, 307, 0, 308, 309, 310, 311, 312, 313,
	314, 0, 383, 384, 385, 0, 0, 315, 316, 386,
	387, 0, 317, 318, 319, 320, 0, 0, 321, 322,
	323, 324, 0, 325, 0, 388, 326, 327, 328, 389,
	390, 0, 1346, 329, 174, 0, 0, 0, 330, 331,
	332, 333, 334, 0, 0, 0, 0, 0, 0, 0,
	177, 178, 0, 179, 0, 0, 0, 0, 335, 0,
	0, 0, 0, 180, 181, 182, 336, 337, 338, 339,
	183, 340, 341, 0, 184, 342, 343, 185, 186, 0,
	0, 344, 345, 346, 0, 187, 347, 0, 0, 0,
	188, 189, 190, 0, 191, 0, 192, 193, 194, 0,
	0, 195, 196, 197, 0, 0, 0, 0, 0, 0,
	0, 198, 199, 398, 200, 348, 201, 349, 350, 0,
	202, 0, 203, 0, 204, 0, 0, 205, 206, 0,
	207, 0, 0, 0, 351, 208, 209, 210, 352, 353,
	0, 0, 0, 211, 212, 354, 355, 356, 0, 213,
	0, 214, 0, 0, 0, 215, 0, 216, 357, 0,
	358, 0, 217, 218, 219, 220, 221, 359, 360, 0,
	0, 225, 0, 222, 0, 0, 223, 361, 224, 362,
	363, 364, 365, 366, 0, 367, 0, 0, 226, 227,
	228, 0, 229, 230, 231, 0, 233, 232, 0, 368,
	0, 234, 0, 0, 235, 0, 0, 236, 0, 237,
	238, 239, 241, 369, 240, 0, 242, 243, 245, 244,
	0, 0, 0, 370, 246, 371, 247, 248, 0, 249,
	0, 0, 250, 0, 0, 251, 372, 0, 252, 0,
	373, 253, 254, 255, 256, 257, 0, 258, 374, 259,
	375, 260, 0, 261, 262, 263, 264, 265, 266, 376,
	267, 268, 0, 269, 270, 271, 272, 273, 275, 276,
	274, 277, 278, 279, 280, 0, 281, 0, 282, 283,
	377, 284, 0, 288, 289, 290, 291, 0, 293, 378,
	292, 294, 295, 0, 296, 285, 286, 297, 0, 298,
	379, 380, 299, 0, 306, 300, 301, 287, 302, 305,
	381, 303, 304, 382, 0, 307, 0, 308, 309, 310,
	311, 312, 313, 314, 0, 383, 384, 385, 0, 0,
	315, 316, 386, 387, 0, 317, 318, 319, 320, 0,
	0, 321, 322, 323, 324, 0, 325, 0, 388, 326,
	327, 328, 389, 390, 0, 1344, 329, 174, 0, 0,
	0, 330, 331, 332, 333, 334, 0, 0, 0, 0,
	0, 0, 0, 177, 178, 0, 179, 0, 0, 0,
	0, 335, 0, 0, 0, 0, 180, 181, 182, 336,
	337, 338, 339, 183, 340, 341, 0, 184, 342, 343,
	185, 186, 0, 0, 344, 345, 346, 0, 187, 347,
	0, 0, 0, 188, 189, 190, 0, 191, 0, 192,
	193, 194, 0, 0, 195, 196, 197, 0, 0, 0,
	0, 0, 0, 0, 198, 199, 398, 200, 348, 201,
	349, 350, 0, 202, 0, 203, 0, 204, 0, 0,
	205, 206, 0, 207, 0, 0, 0, 351, 208, 209,
	210, 352, 353, 0, 0, 0, 211, 212, 354, 355,
	356, 0, 213, 0, 214, 0, 0, 0, 215, 0,
	216, 357, 0, 358, 0, 217, 218, 219, 220, 221,
	359, 360, 0, 0, 225, 0, 222, 0, 0, 223,
	361, 224, 362, 363, 364, 365, 366, 0, 367, 0,
	0, 226, 227, 228, 0, 229, 230, 231, 0, 233,
	232, 0, 368, 0, 234, 0, 0, 235, 0, 0,
	236, 0, 237, 238, 239, 241, 369, 240, 0, 242,
	243, 245, 244, 0, 0, 0, 370, 246, 371, 247,
	248, 0, 249, 0, 0, 250, 0, 0, 251, 372,
	0, 252, 0, 373, 253, 254, 255, 256, 257, 0,
	258, 374, 259, 375, 260, 0, 261, 262, 263, 264,
	265, 266, 376, 267, 268, 0, 269, 270, 271, 272,
	273, 275, 276, 274, 277, 278, 279, 280, 0, 281,
	0, 282, 283, 377, 284, 0, 288, 289, 290, 291,
	0, 293, 378, 292, 294, 295, 0, 296, 285, 286,
	297, 0, 298, 379, 380, 299, 0, 306, 300, 301,
	287, 302, 305, 381, 303, 304, 382, 0, 307, 0,
	308, 309, 310, 311, 312, 313, 314, 0, 383, 384,
	385, 0, 0, 315, 316, 386, 387, 0, 317, 318,
	319, 320, 0, 0, 321, 322, 323, 324, 0, 325,
	0, 388, 326, 327, 328, 389, 390, 174, 0, 329,
	0, 0, 0, 0, 330, 331, 332, 333, 334, 0,
	0, 0, 0, 177, 178, 1326, 179, 0, 0, 0,
	0, 335, 0, 0, 0, 0, 180, 181, 182, 336,
	337, 338, 339, 183, 340, 341, 0, 184, 342, 343,
	185, 186, 0, 0, 344, 345, 346, 0, 187, 347,
	0, 0, 0, 188, 189, 190, 0, 191, 0, 192,
	193, 194, 0, 0, 195, 196, 197, 0, 0, 0,
	0, 0, 0, 0, 198, 199, 398, 200, 348, 201,
	349, 350, 0, 202, 0, 203, 0, 204, 0, 0,
	205, 206, 0, 207, 0, 0, 0, 351, 208, 209,
	210, 352, 353, 0, 0, 0, 211, 212, 354, 355,
	356, 0, 213, 0, 214, 0, 0, 0, 215, 0,
	216, 357, 0, 358, 0, 217, 218, 219, 220, 221,
	359, 360, 0, 0, 225, 0, 222, 0, 0, 223,
	361, 224, 362, 363, 364, 365, 366, 0, 367, 0,
	0, 226, 227, 228, 0, 229, 230, 231, 0, 233,
	232, 0, 368, 0, 234, 0, 0, 235, 0, 0,
	236, 0, 237, 238, 239, 241, 369, 240, 0, 242,
	243, 245, 244, 0, 0, 0, 370, 246, 371, 247,
	248, 0, 249, 0, 0, 250, 0, 0, 251, 372,
	0, 252, 0, 373, 253, 254, 255, 256, 257, 0,
	258, 374, 259, 375, 260, 0, 261, 262, 263, 264,
	265, 266, 376, 267, 268, 0, 269, 270, 271, 272,
	273, 275, 276, 274, 277, 278, 279, 280, 0, 281,
	0, 282, 283, 377, 284, 0, 288, 289, 290, 291,
	0, 293, 378, 292, 294, 295, 0, 296, 285, 286,
	297, 0, 298, 379, 380, 299, 0, 306, 300, 301,
	287, 302, 305, 381, 303, 304, 382, 0, 307, 0,
	308, 309, 310, 311, 312, 313, 314, 0, 383, 384,
	385, 0, 0, 315, 316, 386, 387, 0, 317, 318,
	319, 320, 0, 0, 321, 322, 323, 324, 0, 325,
	0, 388, 326, 327, 328, 389, 390, 0, 1210, 329,
	174, 0, 0, 0, 330, 331, 332, 333, 334, 0,
	0, 0, 0, 0, 0, 0, 177, 178, 0, 179,
	0, 0, 0, 0, 335, 0, 0, 0, 0, 180,
	181, 182, 336, 337, 338, 339, 183, 340, 341, 0,
	184, 342, 343, 185, 186, 0, 0, 344, 345, 346,
	0, 187, 347, 0, 0, 0, 188, 189, 190, 0,
	191, 0, 192, 193, 194, 0, 0, 195, 196, 197,
	0, 0, 0, 0, 0, 0, 0, 198, 199, 398,
	200, 348, 201, 349, 350, 0, 202, 0, 203, 0,
	204, 0, 0, 205, 206, 0, 207, 0, 0, 0,
	351, 208, 209, 210, 352, 353, 0, 0, 0, 211,
	212, 354, 355, 356, 0, 213, 0, 214, 0, 0,
	0, 215, 0, 216, 357, 0, 358, 0, 217, 218,
	219, 220, 221, 1209, 360, 0, 0, 225, 0, 222,
	0, 0, 223, 361, 224, 362, 363, 364, 365, 366,
	0, 367, 0, 0, 226, 227, 228, 0, 229, 230,
	231, 0, 233, 232, 0, 368, 0, 234, 0, 0,
	235, 0, 0, 236, 0, 237, 238, 239, 241, 369,
	240, 0, 242, 243, 245, 244, 0, 0, 0, 370,
	246, 371, 247, 248, 0, 249, 0, 0, 250, 0,
	0, 251, 372, 0, 252, 0, 373, 253, 254, 255,
	256, 257, 0, 258, 374, 259, 375, 260, 0, 261,
	262, 263, 264, 265, 266, 376, 267, 268, 0, 269,
	270, 271, 272, 273, 275, 276, 274, 277, 278, 279,
	280, 0, 281, 0, 282, 283, 377, 284, 0, 288,
	289, 290, 291, 0, 293, 378, 292, 294, 295, 0,
	296, 285, 286, 297, 0, 298, 379, 380, 299, 0,
	306, 300, 301, 287, 302, 305, 381, 303, 304, 382,
	0, 307, 0, 308, 309, 310, 311, 312, 313, 314,
	0, 383, 384, 385, 0, 0, 315, 316, 386, 387,
	0, 317, 318, 319, 320, 0, 0, 321, 322, 323,
	324, 0, 325, 0, 388, 326, 327, 328, 389, 390,
	0, 613, 329, 174, 0, 0, 0, 330, 331, 332,
	333, 334, 0, 0, 0, 0, 0, 0, 0, 177,
	178, 0, 179, 0, 0, 0, 0, 335, 0, 0,
	0, 0, 180, 181, 182, 336, 337, 338, 339, 183,
	340, 341, 0, 184, 342, 343, 185, 186, 0, 0,
	344, 345, 941, 0, 187, 347, 0, 0, 0, 188,
	189, 190, 0, 191, 0, 192, 193, 194, 0, 0,
	195, 196, 197, 0, 0, 0, 0, 0, 0, 0,
	198, 199, 398, 200, 348, 201, 349, 350, 0, 202,
	0, 203, 0, 204, 0, 0, 205, 206, 0, 207,
	0, 0, 0, 351, 208, 209, 210, 352, 353, 0,
	0, 0, 211, 212, 354, 355, 356, 0, 213, 0,
	214, 0, 0, 0, 215, 0, 216, 357, 0, 358,
	0, 217, 218, 219, 220, 221, 359, 360, 0, 0,
	225, 0, 222, 0, 0, 223, 361, 224, 362, 363,
	364, 365, 366, 0, 367, 0, 0, 226, 227, 228,
	0, 229, 230, 231, 0, 233, 232, 0, 368, 0,
	234, 0, 0, 235, 0, 0, 236, 0, 237, 238,
	239, 241, 369, 615, 0, 242, 243, 245, 244, 0,
	0, 0, 370, 246, 371, 247, 248, 0, 249, 0,
	0, 250, 0, 0, 251, 372, 0, 252, 0, 373,
	253, 254, 255, 256, 257, 0, 258, 374, 259, 375,
	260, 0, 261, 262, 263, 264, 265, 266, 376, 267,
	268, 0, 269, 270, 271, 272, 273, 275, 276, 274,
	277, 278, 279, 280, 0, 281, 0, 282, 283, 377,
	284, 0, 288, 289, 290, 291, 0, 293, 378, 292,
	294, 295, 0, 296, 285, 286, 297, 0, 298, 379,
	380, 299, 0, 306, 300, 301, 287, 302, 305, 381,
	303, 304, 382, 0, 307, 0, 308, 309, 310, 311,
	312, 313, 314, 0, 610, 384, 385, 0, 0, 315,
	942, 386, 387, 0, 317, 318, 319, 320, 0, 0,
	321, 322, 323, 324, 0, 325, 0, 388, 326, 327,
	328, 389, 390, 0, 910, 329, 174, 0, 0, 0,
	330, 331, 332, 333, 334, 0, 0, 0, 0, 0,
	0, 0, 177, 178, 0, 179, 0, 0, 0, 0,
	335, 0, 0, 0, 0, 180, 181, 182, 336, 337,
	338, 339, 183, 340, 341, 0, 184, 342, 343, 185,
	186, 0, 0, 344, 345, 346, 0, 187, 347, 0,
	0, 0, 188, 189, 190, 0, 191, 0, 192, 193,
	194, 0, 0, 195, 196, 197, 0, 0, 0, 0,
	0, 0, 0, 198, 199, 398, 200, 348, 201, 349,
	350, 0, 202, 0, 203, 0, 204, 0, 0, 205,
	206, 0, 207, 0, 0, 0, 351, 208, 209, 210,
	352, 353, 0, 0, 0, 211, 212, 354, 355, 356,
	0, 213, 0, 214, 0, 0, 0, 215, 0, 216,
	357, 0, 358, 0, 217, 218, 219, 220, 221, 909,
	360, 0, 0, 225, 0, 222, 0, 0, 223, 361,
	224, 362, 363, 364, 365, 366, 0, 367, 0, 0,
	226, 227, 228, 0, 229, 230, 231, 0, 233, 232,
	0, 368, 0, 234, 0, 0, 235, 0, 0, 236,
	0, 237, 238, 239, 241, 369, 240, 0, 242, 243,
	245, 244, 0, 0, 0, 370, 246, 371, 247, 248,
	0, 249, 0, 0, 250, 0, 0, 251, 372, 0,
	252, 0, 373, 253, 254, 255, 256, 257, 0, 258,
	374, 259, 375, 260, 0, 261, 262, 263, 264, 265,
	266, 376, 267, 268, 0, 269, 270, 271, 272, 273,
	275, 276, 274, 277, 278, 279, 280, 0, 281, 0,
	282, 283, 377, 284, 0, 288, 289, 290, 291, 0,
	293, 378, 292, 294, 295, 0, 296, 285, 286, 297,
	0, 298, 379, 380, 299, 0, 306, 300, 301, 287,
	302, 305, 381, 303, 304, 382, 0, 307, 0, 308,
	309, 310, 311, 312, 313, 314, 0, 383, 384, 385,
	0, 0, 315, 316, 386, 387, 0, 317, 318, 319,
	320, 0, 0, 321, 322, 323, 324, 0, 325, 0,
	388, 326, 327, 328, 389, 390, 0, 907, 329, 174,
	0, 0, 0, 330, 331, 332, 333, 334, 0, 0,
	0, 0, 0, 0, 0, 177, 178, 0, 179, 0,
	0, 0, 0, 335, 0, 0, 0, 0, 180, 181,
	182, 336, 337, 338, 339, 183, 340, 341, 0, 184,
	342, 343, 185, 186, 0, 0, 344, 345, 346, 0,
	187, 347, 0, 0, 0, 188, 189, 190, 0, 191,
	0, 192, 193, 194, 0, 0, 195, 196, 197, 0,
	0, 0, 0, 0, 0, 0, 198, 199, 398, 200,
	348, 201, 349, 350, 0, 202, 0, 203, 0, 204,
	0, 0, 205, 206, 0, 207, 0, 0, 0, 351,
	208, 209, 210, 352, 353, 0, 0, 0, 211, 212,
	354, 355, 356, 0, 213, 0, 214, 0, 0, 0,
	215, 0, 216, 357, 0, 358, 0, 217, 218, 219,
	220, 221, 906, 360, 0, 0, 225, 0, 222, 0,
	0, 223, 361, 224, 362, 363, 364, 365, 366, 0,
	367, 0, 0, 226, 227, 228, 0, 229, 230, 231,
	0, 233, 232, 0, 368, 0, 234, 0, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 369, 240,
	0, 242, 243, 245, 244, 0, 0, 0, 370, 246,
	371, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 372, 0, 252, 0, 373, 253, 254, 255, 256,
	257, 0, 258, 374, 259, 375, 260, 0, 261, 262,
	263, 264, 265, 266, 376, 267, 268, 0, 269, 270,
	271, 272, 273, 275, 276, 274, 277, 278, 279, 280,
	0, 281, 0, 282, 283, 377, 284, 0, 288, 289,
	290, 291, 0, 293, 378, 292, 294, 295, 0, 296,
	285, 286, 297, 0, 298, 379, 380, 299, 0, 306,
	300, 301, 287, 302, 305, 381, 303, 304, 382, 0,
	307, 0, 308, 309, 310, 311, 312, 313, 314, 0,
	383, 384, 385, 0, 0, 315, 316, 386, 387, 0,
	317, 318, 319, 320, 0, 0, 321, 322, 323, 324,
	0, 325, 0, 388, 326, 327, 328, 389, 390, 0,
	903, 329, 174, 0, 0, 0, 330, 331, 332, 333,
	334, 0, 0, 0, 0, 0, 0, 0, 177, 178,
	0, 179, 0, 0, 0, 0, 335, 0, 0, 0,
	0, 180, 181, 182, 336, 337, 338, 339, 183, 340,
	341, 0, 184, 342, 343, 185, 186, 0, 0, 344,
	345, 346, 0, 187, 347, 0, 0, 0, 188, 189,
	190, 0, 191, 0, 192, 193, 194, 0, 0, 195,
	196, 197, 0, 0, 0, 0, 0, 0, 0, 198,
	199, 398, 200, 348, 201, 349, 350, 0, 202, 0,
	203, 0, 204, 0, 0, 205, 206, 0, 207, 0,
	0, 0, 351, 208, 209, 210, 352, 353, 0, 0,
	0, 211, 212, 354, 355, 356, 0, 213, 0, 214,
	0, 0, 0, 215, 0, 216, 357, 0, 358, 0,
	217, 218, 219, 220, 221, 902, 360, 0, 0, 225,
	0, 222, 0, 0, 223, 361, 224, 362, 363, 364,
	365, 366, 0, 367, 0, 0, 226, 227, 228, 0,
	229, 230, 231, 0, 233, 232, 0, 368, 0, 234,
	0, 0, 235, 0, 0, 236, 0, 237, 238, 239,
	241, 369, 240, 0, 242, 243, 245, 244, 0, 0,
	0, 370, 246, 371, 247, 248, 0, 249, 0, 0,
	250, 0, 0, 251, 372, 0, 252, 0, 373, 253,
	254, 255, 256, 257, 0, 258, 374, 259, 375, 260,
	0, 261, 262, 263, 264, 265, 266, 376, 267, 268,
	0, 269, 270, 271, 272, 273, 275, 276, 274, 277,
	278, 279, 280, 0, 281, 0, 282, 283, 377, 284,
	0, 288, 289, 290, 291, 0, 293, 378, 292, 294,
	295, 0, 296, 285, 286, 297, 0, 298, 379, 380,
	299, 0, 306, 300, 301, 287, 302, 305, 381, 303,
	304, 382, 0, 307, 0, 308, 309, 310, 311, 312,
	313, 314, 0, 383, 384, 385, 0, 0, 315, 316,
	386, 387, 0, 317, 318, 319, 320, 0, 0, 321,
	322, 323, 324, 0, 325, 0, 388, 326, 327, 328,
	389, 390, 0, 900, 329, 174, 0, 0, 0, 330,
	331, 332, 333, 334, 0, 0, 0, 0, 0, 0,
	0, 177, 178, 0, 179, 0, 0, 0, 0, 335,
	0, 0, 0, 0, 180, 181, 182, 336, 337, 338,
	339, 183, 340, 341, 0, 184, 342, 343, 185, 186,
	0, 0, 344, 345, 346, 0, 187, 347, 0, 0,
	0, 188, 189, 190, 0, 191, 0, 192, 193, 194,
	0, 0, 195, 196, 197, 0, 0, 0, 0, 0,
	0, 0, 198, 199, 398, 200, 348, 201, 349, 350,
	0, 202, 0, 203, 0, 204, 0, 0, 205, 206,
	0, 207, 0, 0, 0, 351, 208, 209, 210, 352,
	353, 0, 0, 0, 211, 212, 354, 355, 356, 0,
	213, 0, 214, 0, 0, 0, 215, 0, 216, 357,
	0, 358, 0, 217, 218, 219, 220, 221, 899, 360,
	0, 0, 225, 0, 222, 0, 0, 223, 361, 224,
	362, 363, 364, 365, 366, 0, 367, 0, 0, 226,
	227, 228, 0, 229, 230, 231, 0, 233, 232, 0,
	368, 0, 234, 0, 0, 235, 0, 0, 236, 0,
	237, 238, 239, 241, 369, 240, 0, 242, 243, 245,
	244, 0, 0, 0, 370, 246, 371, 247, 248, 0,
	249, 0, 0, 250, 0, 0, 251, 372, 0, 252,
	0, 373, 253, 254, 255, 256, 257, 0, 258, 374,
	259, 375, 260, 0, 261, 262, 263, 264, 265, 266,
	376, 267, 268, 0, 269, 270, 271, 272, 273, 275,
	276, 274, 277, 278, 279, 280, 0, 281, 0, 282,
	283, 377, 284, 0, 288, 289, 290, 291, 0, 293,
	378, 292, 294, 295, 0, 296, 285, 286, 297, 0,
	298, 379, 380, 299, 0, 306, 300, 301, 287, 302,
	305, 381, 303, 304, 382, 0, 307, 0, 308, 309,
	310, 311, 312, 313, 314, 0, 383, 384, 385, 0,
	0, 315, 316, 386, 387, 0, 317, 318, 319, 320,
	0, 0, 321, 322, 323, 324, 0, 325, 0, 388,
	326, 327, 328, 389, 390, 0, 896, 329, 174, 0,
	0, 0, 330, 331, 332, 333, 334, 0, 0, 0,
	0, 0, 0, 0, 177, 178, 0, 179, 0, 0,
	0, 0, 335, 0, 0, 0, 0, 180, 181, 182,
	336, 337, 338, 339, 183, 340, 341, 0, 184, 342,
	343, 185, 186, 0, 0, 344, 345, 346, 0, 187,
	347, 0, 0, 0, 188, 189, 190, 0, 191, 0,
	192, 193, 194, 0, 0, 195, 196, 197, 0, 0,
	0, 0, 0, 0, 0, 198, 199, 398, 200, 348,
	201, 349, 350, 0, 202, 0, 203, 0, 204, 0,
	0, 205, 206, 0, 207, 0, 0, 0, 351, 208,
	209, 210, 352, 353, 0, 0, 0, 211, 212, 354,
	355, 356, 0, 213, 0, 214, 0, 0, 0, 215,
	0, 216, 357, 0, 358, 0, 217, 218, 219, 220,
	221, 895, 360, 0, 0, 225, 0, 222, 0, 0,
	223, 361, 224, 362, 363, 364, 365, 366, 0, 367,
	0, 0, 226, 227, 228, 0, 229, 230, 231, 0,
	233, 232, 0, 368, 0, 234, 0, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 369, 240, 0,
	242, 243, 245, 244, 0, 0, 0, 370, 246, 371,
	247, 248, 0, 249, 0, 0, 250, 0, 0, 251,
	372, 0, 252, 0, 373, 253, 254, 255, 256, 257,
	0, 258, 374, 259, 375, 260, 0, 261, 262, 263,
	264, 265, 266, 376, 267, 268, 0, 269, 270, 271,
	272, 273, 275, 276, 274, 277, 278, 279, 280, 0,
	281, 0, 282, 283, 377, 284, 0, 288, 289, 290,
	291, 0, 293, 378, 292, 294, 295, 0, 296, 285,
	286, 297, 0, 298, 379, 380, 299, 0, 306, 300,
	301, 287, 302, 305, 381, 303, 304, 382, 0, 307,
	0, 308, 309, 310, 311, 312, 313, 314, 0, 383,
	384, 385, 0, 0, 315, 316, 386, 387, 0, 317,
	318, 319, 320, 0, 0, 321, 322, 323, 324, 0,
	325, 0, 388, 326, 327, 328, 389, 390, 174, 0,
	329, 0, 0, 0, 0, 330, 331, 332, 333, 334,
	0, 0, 0, 0, 177, 178, 884, 179, 0, 0,
	0, 0, 335, 0, 0, 0, 0, 180, 181, 182,
	336, 337, 338, 339, 183, 340, 341, 0, 184, 342,
	343, 185, 186, 0, 0, 344, 345, 346, 0, 187,
	347, 0, 0, 0, 188, 189, 190, 0, 191, 0,
	192, 193, 194, 0, 0, 195, 196, 197, 0, 0,
	0, 0, 0, 0, 0, 198, 199, 398, 200, 348,
	201, 349, 350, 0, 202, 0, 203, 0, 204, 0,
	0, 205, 206, 0, 207, 0, 0, 0, 351, 208,
	209, 210, 352, 353, 0, 0, 0, 211, 212, 354,
	355, 356, 0, 213, 0, 214, 0, 0, 0, 215,
	0, 216, 357, 0, 358, 0, 217, 218, 219, 220,
	221, 359, 360, 0, 0, 225, 0, 222, 0, 0,
	223, 361, 224, 362, 363, 364, 365, 366, 0, 367,
	0, 0, 226, 227, 228, 0, 229, 230, 231, 0,
	233, 232, 0, 368, 0, 234, 0, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 369, 240, 0,
	242, 243, 245, 244, 0, 0, 0, 370, 246, 371,
	247, 248, 0, 249, 0, 0, 250, 0, 0, 251,
	372, 0, 252, 0, 373, 253, 254, 255, 256, 257,
	0, 258, 374, 259, 375, 260, 0, 261, 262, 263,
	264, 265, 266, 376, 267, 268, 0, 269, 270, 271,
	272, 273, 275, 276, 274, 277, 278, 279, 280, 0,
	281, 0, 282, 283, 377, 284, 0, 288, 289, 290,
	291, 0, 293, 378, 292, 294, 295, 0, 296, 285,
	286, 297, 0, 298, 379, 380, 299, 0, 306, 300,
	301, 287, 302, 305, 381, 303, 304, 382, 0, 307,
	0, 308, 309, 310, 311, 312, 313, 314, 0, 383,
	384, 385, 0, 0, 315, 316, 386, 387, 0, 317,
	318, 319, 320, 0, 0, 321, 322, 323, 324, 0,
	325, 0, 388, 326, 327, 328, 389, 390, 0, 880,
	329, 174, 0, 0, 0, 330, 331, 332, 333, 334,
	0, 0, 0, 0, 0, 0, 0, 177, 178, 0,
	179, 0, 0, 0, 0, 335, 0, 0, 0, 0,
	180, 181, 182, 336, 337, 338, 339, 183, 340, 341,
	0, 184, 342, 343, 185, 186, 0, 0, 344, 345,
	346, 0, 187, 347, 0, 0, 0, 188, 189, 190,
	0, 191, 0, 192, 193, 194, 0, 0, 195, 196,
	197, 0, 0, 0, 0, 0, 0, 0, 198, 199,
	398, 200, 348, 201, 349, 350, 0, 202, 0, 203,
	0, 204, 0, 0, 205, 206, 0, 207, 0, 0,
	0, 351, 208, 209, 210, 352, 353, 0, 0, 0,
	211, 212, 354, 355, 356, 0, 213, 0, 214, 0,
	0, 0, 215, 0, 216, 357, 0, 358, 0, 217,
	218, 219, 220, 221, 879, 360, 0, 0, 225, 0,
	222, 0, 0, 223, 361, 224, 362, 363, 364, 365,
	366, 0, 367, 0, 0, 226, 227, 228, 0, 229,
	230, 231, 0, 233, 232, 0, 368, 0, 234, 0,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 0, 242, 243, 245, 244, 0, 0, 0,
	370, 246, 371, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 372, 0, 252, 0, 373, 253, 254,
	255, 256, 257, 0, 258, 374, 259, 375, 260, 0,
	261, 262, 263, 264, 265, 266, 376, 267, 268, 0,
	269, 270, 271, 272, 273, 275, 276, 274, 277, 278,
	279, 280, 0, 281, 0, 282, 283, 377, 284, 0,
	288, 289, 290, 291, 0, 293, 378, 292, 294, 295,
	0, 296, 285, 286, 297, 0, 298, 379, 380, 299,
	0, 306, 300, 301, 287, 302, 305, 381, 303, 304,
	382, 0, 307, 0, 308, 309, 310, 311, 312, 313,
	314, 0, 383, 384, 385, 0, 0, 315, 316, 386,
	387, 0, 317, 318, 319, 320, 0, 0, 321, 322,
	323, 324, 0, 325, 0, 388, 326, 327, 328, 389,
	390, 0, 876, 329, 174, 0, 0, 0, 330, 331,
	332, 333, 334, 0, 0, 0, 0, 0, 0, 0,
	177, 178, 0, 179, 0, 0, 0, 0, 335, 0,
	0, 0, 0, 180, 181, 182, 336, 337, 338, 339,
	183, 340, 341, 0, 184, 342, 343, 185, 186, 0,
	0, 344, 345, 346, 0, 187, 347, 0, 0, 0,
	188, 189, 190, 0, 191, 0, 192, 193, 194, 0,
	0, 195, 196, 197, 0, 0, 0, 0, 0, 0,
	0, 198, 199, 398, 200, 348, 201, 349, 350, 0,
	202, 0, 203, 0, 204, 0, 0, 205, 206, 0,
	207, 0, 0, 0, 351, 208, 209, 210, 352, 353,
	0, 0, 0, 211, 212, 354, 355, 356, 0, 213,
	0, 214, 0, 0, 0, 215, 0, 216, 357, 0,
	358, 0, 217, 218, 219, 220, 221, 359, 360, 0,
	0, 225, 0, 222, 0, 0, 223, 361, 224, 362,
	363, 364, 365, 366, 0, 367, 0, 0, 226, 227,
	228, 0, 229, 230, 231, 0, 233, 232, 0, 368,
	0, 234, 0, 0, 235, 0, 0, 236, 0, 237,
	238, 239, 241, 369, 240, 0, 242, 243, 245, 244,
	0, 0, 0, 370, 246, 371, 247, 248, 0, 249,
	0, 0, 250, 0, 0, 251, 372, 0, 252, 0,
	373, 253, 254, 255, 256, 257, 0, 258, 374, 259,
	375, 260, 0, 261, 262, 263, 264, 265, 266, 376,
	267, 268, 0, 269, 270, 271, 272, 273, 275, 276,
	274, 277, 278, 279, 280, 0, 281, 0, 282, 283,
	377, 284, 0, 288, 289, 290, 291, 0, 293, 378,
	292, 294, 295, 0, 296, 285, 286, 297, 0, 298,
	379, 380, 299, 0, 306, 300, 301, 287, 302, 305,
	381, 303, 304, 382, 0, 307, 0, 308, 309, 310,
	311, 312, 313, 314, 0, 383, 384, 385, 0, 0,
	315, 316, 386, 387, 0, 317, 318, 319, 320, 0,
	0, 321, 322, 323, 324, 0, 325, 0, 388, 326,
	327, 328, 389, 390, 0, 874, 329, 174, 0, 0,
	0, 330, 331, 332, 333, 334, 0, 0, 0, 0,
	0, 0, 0, 177, 178, 0, 179, 0, 0, 0,
	0, 335, 0, 0, 0, 0, 180, 181, 182, 336,
	337, 338, 339, 183, 340, 341, 0, 184, 342, 343,
	185, 186, 0, 0, 344, 345, 346, 0, 187, 347,
	0, 0, 0, 188, 189, 190, 0, 191, 0, 192,
	193, 194, 0, 0, 195, 196, 197, 0, 0, 0,
	0, 0, 0, 0, 198, 199, 398, 200, 348, 201,
	349, 350, 0, 202, 0, 203, 0, 204, 0, 0,
	205, 206, 0, 207, 0, 0, 0, 351, 208, 209,
	210, 352, 353, 0, 0, 0, 211, 212, 354, 355,
	356, 0, 213, 0, 214, 0, 0, 0, 215, 0,
	216, 357, 0, 358, 0, 217, 218, 219, 220, 221,
	359, 360, 0, 0, 225, 0, 222, 0, 0, 223,
	361, 224, 362, 363, 364, 365, 366, 0, 367, 0,
	0, 226, 227, 228, 0, 229, 230, 231, 0, 233,
	232, 0, 368, 0, 234, 0, 0, 235, 0, 0,
	236, 0, 237, 238, 239, 241, 369, 240, 0, 242,
	243, 245, 244, 0, 0, 0, 370, 246, 371, 247,
	248, 0, 249, 0, 0, 250, 0, 0, 251, 372,
	0, 252, 0, 373, 253, 254, 255, 256, 257, 0,
	258, 374, 259, 375, 260, 0, 261, 262, 263, 264,
	265, 266, 376, 267, 268, 0, 269, 270, 271, 272,
	273, 275, 276, 274, 277, 278, 279, 280, 0, 281,
	0, 282, 283, 377, 284, 0, 288, 289, 290, 291,
	0, 293, 378, 292, 294, 295, 0, 296, 285, 286,
	297, 0, 298, 379, 380, 299, 0, 306, 300, 301,
	287, 302, 305, 381, 303, 304, 382, 0, 307, 0,
	308, 309, 310, 311, 312, 313, 314, 0, 383, 384,
	385, 0, 0, 315, 316, 386, 387, 0, 317, 318,
	319, 320, 0, 0, 321, 322, 323, 324, 0, 325,
	0, 388, 326, 327, 328, 389, 390, 0, 870, 329,
	174, 0, 0, 0, 330, 331, 332, 333, 334, 0,
	0, 0, 0, 0, 0, 0, 177, 178, 0, 179,
	0, 0, 0, 0, 335, 0, 0, 0, 0, 180,
	181, 182, 336, 337, 338, 339, 183, 340, 341, 0,
	184, 342, 343, 185, 186, 0, 0, 344, 345, 346,
	0, 187, 347, 0, 0, 0, 188, 189, 190, 0,
	191, 0, 192, 193, 194, 0, 0, 195, 196, 197,
	0, 0, 0, 0, 0, 0, 0, 198, 199, 398,
	200, 348, 201, 349, 350, 0, 202, 0, 203, 0,
	204, 0, 0, 205, 206, 0, 207, 0, 0, 0,
	351, 208, 209, 210, 352, 353, 0, 0, 0, 211,
	212, 354, 355, 356, 0, 213, 0, 214, 0, 0,
	0, 215, 0, 216, 357, 0, 358, 0, 217, 218,
	219, 220, 221, 872, 360, 0, 0, 225, 0, 222,
	0, 0, 223, 361, 224, 362, 363, 364, 365, 366,
	0, 367, 0, 0, 226, 227, 228, 0, 229, 230,
	231, 0, 233, 232, 0, 368, 0, 234, 0, 0,
	235, 0, 0, 236, 0, 237, 238, 239, 241, 369,
	240, 0, 242, 243, 245, 244, 0, 0, 0, 370,
	246, 371, 247, 248, 0, 249, 0, 0, 250, 0,
	0, 251, 372, 0, 252, 0, 373, 253, 254, 255,
	256, 257, 0, 258, 374, 259, 375, 260, 0, 261,
	262, 263, 264, 265, 266, 376, 267, 268, 0, 269,
	270, 271, 272, 273, 275, 276, 274, 277, 278, 279,
	280, 0, 281, 0, 282, 283, 377, 284, 0, 288,
	289, 290, 291, 0, 293, 378, 292, 294, 295, 0,
	296, 285, 286, 297, 0, 298, 379, 380, 299, 0,
	306, 300, 301, 287, 302, 305, 381, 303, 304, 382,
	0, 307, 0, 308, 309, 310, 311, 312, 313, 314,
	0, 383, 384, 385, 0, 0, 315, 316, 386, 387,
	0, 317, 318, 319, 320, 0, 0, 321, 322, 323,
	324, 0, 325, 0, 388, 326, 327, 328, 389, 390,
	0, 749, 329, 174, 0, 0, 0, 330, 331, 332,
	333, 334, 0, 0, 0, 0, 0, 0, 0, 177,
	178, 0, 179, 0, 0, 0, 0, 335, 0, 0,
	0, 0, 180, 181, 182, 336, 337, 338, 339, 183,
	340, 341, 0, 184, 342, 343, 185, 186, 0, 0,
	344, 345, 346, 0, 187, 347, 0, 0, 0, 188,
	189, 190, 0, 191, 0, 192, 193, 194, 0, 0,
	195, 196, 197, 0, 0, 0, 0, 0, 0, 0,
	198, 199, 398, 200, 348, 201, 349, 350, 0, 202,
	0, 203, 0, 204, 0, 0, 205, 206, 0, 207,
	0, 0, 0, 351, 208, 209, 210, 352, 353, 0,
	0, 0, 211, 212, 354, 355, 356, 0, 213, 0,
	214, 0, 0, 0, 215, 0, 216, 357, 0, 358,
	0, 217, 218, 219, 220, 221, 751, 360, 0, 0,
	225, 0, 222, 0, 0, 223, 361, 224, 362, 363,
	364, 365, 366, 0, 367, 0, 0, 226, 227, 228,
	0, 229, 230, 231, 0, 233, 232, 0, 368, 0,
	234, 0, 0, 235, 0, 0, 236, 0, 237, 238,
	239, 241, 369, 240, 0, 242, 243, 245, 244, 0,
	0, 0, 370, 246, 371, 247, 248, 0, 249, 0,
	0, 250, 0, 0, 251, 372, 0, 252, 0, 373,
	253, 254, 255, 256, 257, 0, 258, 374, 259, 375,
	260, 0, 261, 262, 263, 264, 265, 266, 376, 267,
	268, 0, 269, 270, 271, 272, 273, 275, 276, 274,
	277, 278, 279, 280, 0, 281, 0, 282, 283, 377,
	284, 0, 288, 289, 290, 291, 0, 293, 378, 292,
	294, 295, 0, 296, 285, 286, 297, 0, 298, 379,
	380, 299, 0, 306, 300, 301, 287, 302, 305, 381,
	303, 304, 382, 0, 307, 0, 308, 309, 310, 311,
	312, 313, 314, 0, 383, 384, 385, 0, 0, 315,
	316, 386, 387, 0, 317, 318, 319, 320, 0, 0,
	321, 322, 323, 324, 0, 325, 0, 388, 326, 327,
	328, 389, 390, 0, 747, 329, 174, 0, 0, 0,
	330, 331, 332, 333, 334, 0, 0, 0, 0, 0,
	0, 0, 177, 178, 0, 179, 0, 0, 0, 0,
	335, 0, 0, 0, 0, 180, 181, 182, 336, 337,
	338, 339, 183, 340, 341, 0, 184, 342, 343, 185,
	186, 0, 0, 344, 345, 346, 0, 187, 347, 0,
	0, 0, 188, 189, 190, 0, 191, 0, 192, 193,
	194, 0, 0, 195, 196, 197, 0, 0, 0, 0,
	0, 0, 0, 198, 199, 398, 200, 348, 201, 349,
	350, 0, 202, 0, 203, 0, 204, 0, 0, 205,
	206, 0, 207, 0, 0, 0, 351, 208, 209, 210,
	352, 353, 0, 0, 0, 211, 212, 354, 355, 356,
	0, 213, 0, 214, 0, 0, 0, 215, 0, 216,
	357, 0, 358, 0, 217, 218, 219, 220, 221, 359,
	360, 0, 0, 225, 0, 222, 0, 0, 223, 361,
	224, 362, 363, 364, 365, 366, 0, 367, 0, 0,
	226, 227, 228, 0, 229, 230, 231, 0, 233, 232,
	0, 368, 0, 234, 0, 0, 235, 0, 0, 236,
	0, 237, 238, 239, 241, 369, 240, 0, 242, 243,
	245, 244, 0, 0, 0, 370, 246, 371, 247, 248,
	0, 249, 0, 0, 250, 0, 0, 251, 372, 0,
	252, 0, 373, 253, 254, 255, 256, 257, 0, 258,
	374, 259, 375, 260, 0, 261, 262, 263, 264, 265,
	266, 376, 267, 268, 0, 269, 270, 271, 272, 273,
	275, 276, 274, 277, 278, 279, 280, 0, 281, 0,
	282, 283, 377, 284, 0, 288, 289, 290, 291, 0,
	293, 378, 292, 294, 295, 0, 296, 285, 286, 297,
	0, 298, 379, 380, 299, 0, 306, 300, 301, 287,
	302, 305, 381, 303, 304, 382, 0, 307, 0, 308,
	309, 310, 311, 312, 313, 314, 0, 383, 384, 385,
	0, 0, 315, 316, 386, 387, 0, 317, 318, 319,
	320, 0, 0, 321, 322, 323, 324, 0, 325, 0,
	388, 326, 327, 328, 389, 390, 0, 613, 329, 174,
	0, 0, 0, 330, 331, 332, 333, 334, 0, 0,
	0, 0, 0, 0, 0, 177, 178, 0, 179, 0,
	0, 0, 0, 335, 0, 0, 0, 0, 180, 181,
	182, 336, 337, 338, 339, 183, 340, 341, 0, 184,
	342, 343, 185, 186, 0, 0, 344, 345, 346, 0,
	604, 347, 0, 0, 0, 188, 189, 190, 0, 191,
	0, 192, 193, 194, 0, 0, 195, 196, 197, 0,
	0, 0, 0, 0, 0, 0, 198, 199, 398, 200,
	348, 201, 349, 350, 0, 202, 0, 203, 0, 204,
	0, 0, 205, 206, 0, 207, 0, 0, 0, 351,
	208, 209, 210, 352, 353, 0, 0, 0, 211, 212,
	354, 355, 356, 0, 213, 0, 214, 0, 0, 0,
	215, 0, 216, 357, 0, 358, 0, 217, 218, 219,
	220, 221, 359, 360, 0, 0, 225, 0, 222, 0,
	0, 223, 361, 224, 362, 363, 364, 365, 366, 0,
	367, 0, 0, 226, 227, 228, 0, 229, 230, 231,
	0, 233, 232, 0, 368, 0, 234, 0, 0, 603,
	0, 0, 236, 0, 237, 238, 239, 241, 369, 615,
	0, 242, 243, 245, 244, 0, 0, 0, 370, 246,
	371, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 372, 0, 252, 0, 373, 253, 254, 255, 256,
	257, 0, 258, 374, 259, 375, 260, 0, 261, 262,
	263, 264, 265, 266, 376, 267, 268, 0, 269, 270,
	271, 272, 273, 275, 276, 274, 277, 278, 279, 280,
	0, 281, 0, 282, 283, 605, 284, 0, 288, 289,
	290, 291, 0, 293, 378, 292, 606, 295, 0, 296,
	285, 286, 297, 0, 298, 379, 380, 299, 0, 306,
	300, 301, 287, 302, 305, 381, 303, 304, 382, 0,
	307, 0, 308, 309, 310, 311, 312, 313, 314, 0,
	610, 384, 385, 0, 0, 315, 608, 386, 387, 0,
	317, 318, 319, 320, 0, 0, 321, 322, 323, 324,
	0, 325, 0, 388, 326, 327, 328, 389, 390, 0,
	588, 329, 174, 0, 0, 0, 330, 331, 332, 333,
	334, 0, 0, 0, 0, 0, 0, 0, 177, 178,
	0, 179, 0, 0, 0, 0, 335, 0, 0, 0,
	0, 180, 181, 182, 336, 337, 338, 339, 183, 340,
	341, 0, 184, 342, 343, 185, 186, 0, 0, 344,
	345, 346, 0, 187, 347, 0, 0, 0, 188, 189,
	190, 0, 191, 0, 192, 193, 194, 0, 0, 195,
	196, 197, 0, 0, 0, 0, 0, 0, 0, 198,
	199, 398, 200, 348, 201, 349, 350, 0, 202, 0,
	203, 0, 204, 0, 0, 205, 206, 0, 207, 0,
	0, 0, 351, 208, 209, 210, 352, 353, 0, 0,
	0, 211, 212, 354, 355, 356, 0, 213, 0, 214,
	0, 0, 0, 215, 0, 216, 357, 0, 358, 0,
	217, 218, 219, 220, 221, 359, 360, 0, 0, 225,
	0, 222, 0, 0, 223, 361, 224, 362, 363, 364,
	365, 366, 0, 367, 0, 0, 226, 227, 228, 0,
	229, 230, 231, 0, 233, 232, 0, 368, 0, 234,
	0, 0, 235, 0, 0, 236, 0, 237, 238, 239,
	241, 369, 240, 0, 242, 243, 245, 244, 0, 0,
	0, 370, 246, 371, 247, 248, 0, 249, 0, 0,
	250, 0, 0, 251, 372, 0, 252, 0, 373, 253,
	254, 255, 256, 257, 0, 258, 374, 259, 375, 260,
	0, 261, 262, 263, 264, 265, 266, 376, 267, 268,
	0, 269, 270, 271, 272, 273, 275, 276, 274, 277,
	278, 279, 280, 0, 281, 0, 282, 283, 377, 284,
	0, 589, 289, 290, 291, 0, 293, 378, 292, 294,
	295, 0, 296, 285, 286, 297, 0, 298, 379, 380,
	299, 0, 306, 300, 301, 287, 302, 305, 381, 303,
	304, 382, 0, 307, 0, 308, 309, 310, 311, 312,
	313, 314, 0, 383, 384, 385, 0, 0, 315, 316,
	386, 387, 0, 317, 318, 319, 320, 0, 0, 321,
	322, 323, 324, 0, 325, 0, 388, 326, 327, 328,
	389, 390, 0, 586, 329, 174, 0, 0, 0, 330,
	331, 332, 333, 334, 0, 0, 0, 0, 0, 0,
	0, 177, 178, 0, 179, 0, 0, 0, 0, 335,
	0, 0, 0, 0, 180, 181, 182, 336, 337, 338,
	339, 183, 340, 341, 0, 184, 342, 343, 185, 186,
	0, 0, 344, 345, 346, 0, 187, 347, 0, 0,
	0, 188, 189, 190, 0, 191, 0, 192, 193, 194,
	0, 0, 195, 196, 197, 0, 0, 0, 0, 0,
	0, 0, 198, 199, 398, 200, 348, 201, 349, 350,
	0, 202, 0, 203, 0, 204, 0, 0, 205, 206,
	0, 207, 0, 0, 0, 351, 208, 209, 210, 352,
	353, 0, 0, 0, 211, 212, 354, 355, 356, 0,
	213, 0, 214, 0, 0, 0, 215, 0, 216, 357,
	0, 358, 0, 217, 218, 219, 220, 221, 359, 360,
	0, 0, 225, 0, 222, 0, 0, 223, 361, 224,
	362, 363, 364, 365, 366, 0, 367, 0, 0, 226,
	227, 228, 0, 229, 230, 231, 0, 233, 232, 0,
	368, 0, 234, 0, 0, 235, 0, 0, 236, 0,
	237, 238, 239, 241, 369, 240, 0, 242, 243, 245,
	244, 0, 0, 0, 370, 246, 371, 247, 248, 0,
	249, 0, 0, 250, 0, 0, 251, 372, 0, 252,
	0, 373, 253, 254, 255, 256, 257, 0, 258, 374,
	259, 375, 260, 0, 261, 262, 263, 264, 265, 266,
	376, 267, 268, 0, 269, 270, 271, 272, 273, 275,
	276, 274, 277, 278, 279, 280, 0, 281, 0, 282,
	283, 377, 284, 0, 288, 289, 290, 291, 0, 293,
	378, 292, 294, 295, 0, 296, 285, 286, 297, 0,
	298, 379, 380, 299, 0, 306, 300, 301, 287, 302,
	305, 381, 303, 304, 382, 0, 307, 0, 308, 309,
	310, 311, 312, 313, 314, 0, 383, 384, 385, 0,
	0, 315, 316, 386, 387, 0, 317, 318, 319, 320,
	0, 0, 321, 322, 323, 324, 0, 325, 0, 388,
	326, 327, 328, 389, 390, 0, 578, 329, 174, 0,
	0, 0, 330, 331, 332, 333, 334, 0, 0, 0,
	0, 0, 0, 0, 177, 178, 0, 179, 0, 0,
	0, 0, 335, 0, 0, 0, 0, 180, 181, 182,
	336, 337, 338, 339, 183, 340, 341, 0, 184, 342,
	343, 185, 186, 0, 0, 344, 345, 346, 0, 187,
	347, 0, 0, 0, 188, 189, 190, 0, 191, 0,
	192, 193, 194, 0, 0, 195, 196, 197, 0, 0,
	0, 0, 0, 0, 0, 198, 199, 398, 200, 348,
	201, 349, 350, 0, 202, 0, 203, 0, 204, 0,
	0, 205, 206, 0, 207, 0, 0, 0, 351, 208,
	209, 210, 352, 353, 0, 0, 0, 211, 212, 354,
	355, 356, 0, 213, 0, 214, 0, 0, 0, 215,
	0, 216, 357, 0, 358, 0, 217, 218, 219, 220,
	221, 359, 360, 0, 0, 225, 0, 222, 0, 0,
	223, 361, 224, 362, 363, 364, 365, 366, 0, 367,
	0, 0, 226, 227, 228, 0, 229, 230, 231, 0,
	233, 232, 0, 368, 0, 234, 0, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 369, 240, 0,
	242, 243, 245, 244, 0, 0, 0, 370, 246, 371,
	247, 248, 0, 249, 0, 0, 250, 0, 0, 251,
	372, 0, 252, 0, 373, 253, 254, 255, 256, 257,
	0, 258, 374, 259, 375, 260, 0, 261, 262, 263,
	264, 265, 266, 376, 267, 268, 0, 269, 270, 271,
	272, 273, 275, 276, 274, 277, 278, 279, 280, 0,
	281, 0, 282, 283, 377, 284, 0, 288, 289, 290,
	291, 0, 293, 378, 292, 294, 295, 0, 296, 285,
	286, 297, 0, 298, 379, 380, 299, 0, 306, 300,
	301, 287, 302, 305, 381, 303, 304, 382, 0, 307,
	0, 308, 309, 310, 311, 312, 313, 314, 0, 383,
	384, 385, 0, 0, 315, 316, 386, 387, 0, 317,
	318, 319, 320, 0, 0, 321, 322, 323, 324, 0,
	325, 0, 388, 326, 327, 328, 389, 390, 0, 442,
	329, 174, 0, 0, 0, 330, 331, 332, 333, 334,
	0, 0, 0, 0, 0, 0, 0, 177, 178, 0,
	179, 0, 0, 0, 0, 335, 0, 0, 0, 0,
	180, 181, 182, 336, 337, 338, 339, 183, 340, 341,
	0, 184, 342, 343, 185, 186, 0, 0, 344, 345,
	346, 0, 187, 347, 0, 0, 0, 188, 189, 190,
	0, 191, 0, 192, 193, 194, 0, 0, 195, 196,
	197, 0, 0, 0, 0, 0, 0, 0, 198, 199,
	398, 200, 348, 201, 349, 350, 0, 202, 0, 203,
	0, 204, 0, 0, 205, 206, 0, 207, 0, 0,
	0, 351, 208, 209, 210, 352, 353, 0, 0, 0,
	211, 212, 354, 355, 356, 0, 213, 0, 214, 0,
	0, 0, 215, 0, 216, 357, 0, 358, 0, 217,
	218, 219, 220, 221, 359, 360, 0, 0, 225, 0,
	222, 0, 0, 223, 361, 224, 362, 363, 364, 365,
	366, 0, 367, 0, 0, 226, 227, 228, 0, 229,
	230, 231, 0, 233, 232, 0, 368, 0, 234, 0,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 0, 242, 243, 245, 244, 0, 0, 0,
	370, 246, 371, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 372, 0, 252, 0, 373, 253, 254,
	255, 256, 257, 0, 258, 374, 259, 375, 260, 0,
	261, 262, 263, 264, 265, 266, 376, 267, 268, 0,
	269, 270, 271, 272, 273, 275, 276, 274, 277, 278,
	279, 280, 0, 281, 0, 282, 283, 377, 284, 0,
	288, 289, 290, 291, 0, 293, 378, 292, 294, 295,
	0, 296, 285, 286, 297, 0, 298, 379, 380, 299,
	0, 306, 300, 301, 287, 302, 305, 381, 303, 304,
	382, 0, 307, 0, 308, 309, 310, 311, 312, 313,
	314, 0, 383, 384, 385, 0, 0, 315, 316, 386,
	387, 0, 317, 318, 319, 320, 0, 0, 321, 322,
	323, 324, 0, 325, 0, 388, 326, 327, 328, 389,
	390, 174, 0, 329, 0, 0, 0, 0, 330, 331,
	332, 333, 334, 0, 0, 0, 0, 177, 178, 0,
	179, 0, 0, 0, 0, 335, 0, 0, 0, 0,
	180, 181, 182, 336, 337, 338, 339, 183, 340, 341,
	0, 184, 342, 343, 185, 186, 0, 0, 344, 345,
	346, 0, 187, 347, 0, 0, 0, 188, 189, 190,
	0, 191, 0, 192, 193, 194, 0, 0, 195, 196,
	197, 0, 0, 0, 0, 0, 0, 0, 198, 199,
	398, 200, 348, 201, 349, 350, 0, 202, 0, 203,
	0, 204, 0, 0, 205, 206, 0, 207, 0, 0,
	0, 351, 208, 209, 210, 352, 353, 0, 0, 0,
	211, 212, 354, 355, 356, 0, 213, 0, 214, 0,
	0, 0, 215, 0, 216, 357, 0, 358, 0, 217,
	218, 219, 220, 221, 359, 360, 0, 0, 225, 0,
	222, 0, 0, 223, 361, 224, 362, 363, 364, 365,
	366, 0, 367, 0, 0, 226, 227, 228, 0, 229,
	230, 231, 0, 233, 232, 0, 368, 0, 234, 0,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 0, 242, 243, 245, 244, 0, 0, 0,
	370, 246, 371, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 372, 0, 252, 0, 373, 253, 254,
	255, 256, 257, 0, 258, 374, 259, 375, 260, 0,
	261, 262, 263, 264, 265, 266, 376, 267, 268, 0,
	269, 270, 271, 272, 273, 275, 276, 274, 277, 278,
	279, 280, 0, 281, 0, 282, 283, 377, 284, 0,
	288, 289, 290, 291, 0, 293, 378, 292, 294, 295,
	0, 296, 285, 286, 297, 0, 298, 379, 380, 299,
	0, 306, 300, 301, 287, 302, 305, 381, 303, 304,
	382, 0, 307, 0, 308, 309, 310, 311, 312, 313,
	314, 0, 383, 384, 385, 0, 0, 315, 316, 386,
	387, 0, 317, 318, 319, 320, 0, 0, 321, 322,
	323, 324, 0, 325, 0, 388, 326, 327, 328, 389,
	390, 174, 0, 329, 0, 0, 0, 0, 330, 331,
	332, 333, 334, 0, 0, 0, 0, 177, 178, 0,
	179, 0, 0, 0, 0, 335, 0, 0, 0, 0,
	180, 181, 182, 336, 337, 338, 339, 183, 340, 341,
	0, 184, 342, 343, 185, 186, 0, 0, 344, 345,
	346, 0, 187, 347, 0, 0, 0, 188, 189, 190,
	0, 191, 0, 192, 193, 194, 0, 0, 195, 196,
	197, 0, 0, 0, 0, 0, 0, 0, 198, 199,
	398, 200, 348, 201, 349, 350, 0, 202, 0, 203,
	0, 204, 0, 0, 205, 206, 0, 207, 0, 0,
	0, 351, 208, 209, 210, 352, 353, 0, 0, 0,
	211, 212, 354, 355, 356, 0, 213, 0, 214, 0,
	0, 0, 215, 0, 216, 357, 0, 358, 0, 217,
	218, 219, 220, 221, 1750, 360, 0, 0, 225, 0,
	222, 0, 0, 223, 361, 224, 362, 363, 364, 365,
	366, 0, 367, 0, 0, 226, 227, 228, 0, 229,
	230, 231, 0, 233, 232, 0, 368, 0, 234, 0,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 0, 242, 243, 245, 244, 0, 0, 0,
	370, 246, 371, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 372, 0, 252, 0, 373, 253, 254,
	255, 256, 257, 0, 258, 374, 259, 375, 260, 0,
	261, 262, 263, 264, 265, 266, 376, 267, 268, 0,
	269, 270, 271, 272, 273, 275, 276, 274, 277, 278,
	279, 280, 0, 281, 0, 282, 283, 377, 284, 0,
	288, 289, 290, 291, 0, 293, 378, 292, 294, 295,
	0, 296, 285, 286, 297, 0, 298, 379, 380, 299,
	0, 306, 300, 301, 287, 302, 305, 381, 303, 304,
	382, 0, 307, 0, 308, 309, 310, 311, 312, 313,
	314, 0, 383, 384, 385, 0, 0, 315, 316, 386,
	387, 0, 317, 318, 319, 320, 0, 0, 321, 322,
	323, 324, 0, 325, 0, 388, 326, 327, 328, 389,
	390, 174, 0, 329, 0, 0, 0, 0, 330, 331,
	332, 333, 334, 0, 0, 0, 0, 177, 178, 0,
	179, 0, 0, 0, 0, 335, 0, 0, 0, 0,
	180, 181, 182, 336, 337, 338, 339, 183, 340, 341,
	0, 184, 342, 343, 185, 186, 0, 0, 344, 345,
	346, 0, 187, 347, 0, 0, 0, 188, 189, 190,
	0, 191, 0, 192, 193, 194, 0, 0, 195, 196,
	197, 0, 0, 0, 0, 0, 0, 0, 198, 199,
	398, 200, 348, 201, 349, 350, 0, 202, 0, 203,
	0, 204, 0, 0, 205, 206, 0, 207, 0, 0,
	0, 351, 208, 209, 210, 352, 353, 0, 0, 0,
	211, 212, 354, 355, 356, 0, 213, 0, 214, 0,
	0, 0, 215, 0, 216, 357, 0, 358, 0, 217,
	218, 219, 220, 221, 1748, 360, 0, 0, 225, 0,
	222, 0, 0, 223, 361, 224, 362, 363, 364, 365,
	366, 0, 367, 0, 0, 226, 227, 228, 0, 229,
	230, 231, 0, 233, 232, 0, 368, 0, 234, 0,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 0, 242, 243, 245, 244, 0, 0, 0,
	370, 246, 371, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 372, 0, 252, 0, 373, 253, 254,
	255, 256, 257, 0, 258, 374, 259, 375, 260, 0,
	261, 262, 263, 264, 265, 266, 376, 267, 268, 0,
	269, 270, 271, 272, 273, 275, 276, 274, 277, 278,
	279, 280, 0, 281, 0, 282, 283, 377, 284, 0,
	288, 289, 290, 291, 0, 293, 378, 292, 294, 295,
	0, 296, 285, 286, 297, 0, 298, 379, 380, 299,
	0, 306, 300, 301, 287, 302, 305, 381, 303, 304,
	382, 0, 307, 0, 308, 309, 310, 311, 312, 313,
	314, 0, 383, 384, 385, 0, 0, 315, 316, 386,
	387, 0, 317, 318, 319, 320, 0, 0, 321, 322,
	323, 324, 0, 325, 0, 388, 326, 327, 328, 389,
	390, 174, 0, 329, 0, 0, 0, 0, 330, 331,
	332, 333, 334, 0, 0, 0, 0, 177, 178, 0,
	179, 0, 0, 0, 0, 335, 0, 0, 0, 0,
	180, 181, 182, 336, 337, 338, 339, 183, 340, 341,
	0, 184, 342, 343, 185, 186, 0, 0, 344, 345,
	346, 0, 187, 347, 0, 0, 0, 188, 189, 190,
	0, 191, 0, 192, 193, 194, 0, 0, 195, 196,
	197, 0, 0, 0, 0, 0, 0, 0, 198, 199,
	398, 200, 348, 201, 349, 350, 0, 202, 0, 203,
	0, 204, 0, 0, 205, 206, 0, 207, 0, 0,
	0, 351, 208, 209, 210, 352, 353, 0, 0, 0,
	211, 212, 354, 355, 356, 0, 213, 0, 214, 0,
	0, 0, 215, 0, 216, 357, 0, 358, 0, 217,
	218, 219, 220, 221, 1737, 360, 0, 0, 225, 0,
	222, 0, 0, 223, 361, 224, 362, 363, 364, 365,
	366, 0, 367, 0, 0, 226, 227, 228, 0, 229,
	230, 231, 0, 233, 232, 0, 368, 0, 234, 0,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 0, 242, 243, 245, 244, 0, 0, 0,
	370, 246, 371, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 372, 0, 252, 0, 373, 253, 254,
	255, 256, 257, 0, 258, 374, 259, 375, 260, 0,
	261, 262, 263, 264, 265, 266, 376, 267, 268, 0,
	269, 270, 271, 272, 273, 275, 276, 274, 277, 278,
	279, 280, 0, 281, 0, 282, 283, 377, 284, 0,
	288, 289, 290, 291, 0, 293, 378, 292, 294, 295,
	0, 296, 285, 286, 297, 0, 298, 379, 380, 299,
	0, 306, 300, 301, 287, 302, 305, 381, 303, 304,
	382, 0, 307, 0, 308, 309, 310, 311, 312, 313,
	314, 0, 383, 384, 385, 0, 0, 315, 316, 386,
	387, 0, 317, 318, 319, 320, 0, 0, 321, 322,
	323, 324, 0, 325, 0, 388, 326, 327, 328, 389,
	390, 174, 0, 329, 0, 0, 0, 0, 330, 331,
	332, 333, 334, 0, 0, 0, 0, 177, 178, 0,
	179, 0, 0, 0, 0, 335, 0, 0, 0, 0,
	180, 181, 182, 336, 337, 338, 339, 183, 340, 341,
	0, 184, 342, 343, 185, 186, 0, 0, 344, 345,
	346, 0, 187, 347, 0, 0, 0, 188, 189, 190,
	0, 191, 0, 192, 193, 194, 0, 0, 195, 196,
	197, 0, 0, 0, 0, 0, 0, 0, 198, 199,
	398, 200, 348, 201, 349, 350, 0, 202, 0, 203,
	0, 204, 0, 0, 205, 206, 0, 207, 0, 0,
	0, 351, 208, 209, 210, 352, 353, 0, 0, 0,
	211, 212, 354, 355, 356, 0, 213, 0, 214, 0,
	0, 0, 215, 0, 216, 357, 0, 358, 0, 217,
	218, 219, 220, 221, 359, 360, 0, 0, 225, 0,
	222, 0, 0, 223, 361, 224, 362, 363, 364, 365,
	366, 0, 367, 0, 0, 226, 227, 228, 0, 229,
	230, 231, 0, 233, 232, 0, 368, 0, 234, 0,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 0, 242, 243, 245, 244, 0, 0, 0,
	370, 246, 371, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 372, 0, 252, 0, 373, 253, 254,
	255, 256, 257, 0, 258, 374, 259, 375, 260, 0,
	261, 262, 263, 264, 265, 266, 376, 267, 268, 0,
	269, 270, 271, 272, 273, 275, 276, 274, 277, 278,
	279, 280, 0, 281, 0, 282, 283, 377, 284, 0,
	589, 289, 290, 291, 0, 293, 378, 292, 294, 295,
	0, 296, 285, 286, 297, 0, 298, 379, 380, 299,
	0, 306, 300, 301, 287, 302, 305, 381, 303, 304,
	382, 0, 307, 0, 308, 309, 310, 311, 312, 313,
	314, 0, 383, 384, 385, 0, 0, 315, 316, 386,
	387, 0, 317, 318, 319, 320, 0, 0, 321, 322,
	323, 324, 0, 325, 0, 388, 326, 327, 328, 389,
	390, 174, 0, 329, 0, 0, 0, 0, 330, 331,
	332, 333, 334, 0, 0, 0, 0, 177, 178, 0,
	179, 0, 0, 0, 0, 335, 0, 1220, 0, 0,
	180, 181, 182, 336, 337, 338, 339, 183, 340, 341,
	0, 184, 342, 343, 185, 186, 0, 0, 344, 345,
	346, 0, 187, 347, 0, 0, 0, 188, 189, 190,
	0, 191, 0, 192, 193, 194, 0, 0, 195, 196,
	197, 0, 0, 0, 0, 0, 0, 0, 198, 199,
	398, 200, 348, 201, 349, 350, 0, 202, 0, 203,
	0, 204, 0, 0, 205, 206, 0, 207, 0, 0,
	0, 351, 208, 209, 210, 352, 353, 0, 0, 0,
	211, 212, 354, 355, 356, 0, 213, 0, 214, 0,
	0, 0, 215, 0, 216, 357, 0, 358, 0, 217,
	218, 219, 220, 221, 359, 360, 0, 0, 225, 0,
	222, 0, 0, 223, 361, 224, 362, 363, 364, 365,
	366, 0, 367, 0, 0, 226, 227, 228, 0, 229,
	230, 231, 0, 233, 232, 0, 368, 0, 234, 0,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 0, 242, 243, 245, 244, 0, 0, 0,
	370, 246, 371, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 372, 0, 252, 0, 373, 253, 254,
	255, 256, 257, 0, 258, 374, 259, 375, 260, 0,
	261, 262, 263, 264, 265, 266, 376, 267, 268, 0,
	269, 270, 271, 272, 273, 275, 276, 274, 277, 278,
	279, 280, 0, 281, 0, 282, 283, 377, 284, 0,
	288, 289, 290, 291, 0, 293, 378, 292, 294, 295,
	0, 0, 285, 286, 297, 0, 298, 379, 380, 299,
	0, 306, 300, 301, 287, 302, 305, 381, 303, 304,
	382, 0, 307, 0, 308, 309, 310, 311, 312, 313,
	314, 0, 383, 384, 385, 0, 0, 315, 316, 386,
	387, 0, 317, 318, 319, 320, 0, 0, 321, 322,
	323, 324, 0, 325, 0, 388, 326, 327, 328, 389,
	390, 174, 0, 329, 0, 0, 0, 0, 330, 331,
	332, 333, 334, 0, 0, 0, 0, 177, 178, 0,
	179, 0, 0, 0, 0, 335, 0, 0, 0, 0,
	180, 181, 182, 336, 337, 338, 339, 183, 340, 341,
	0, 184, 342, 343, 185, 186, 0, 0, 344, 345,
	346, 0, 187, 347, 0, 0, 0, 188, 189, 190,
	0, 191, 0, 192, 193, 194, 0, 0, 195, 196,
	197, 0, 0, 0, 0, 0, 0, 0, 198, 199,
	398, 200, 348, 201, 349, 350, 0, 202, 0, 203,
	0, 204, 0, 0, 205, 206, 0, 207, 0, 0,
	0, 351, 208, 209, 210, 352, 353, 0, 0, 0,
	211, 212, 354, 355, 356, 0, 213, 0, 214, 0,
	0, 0, 215, 0, 216, 357, 0, 358, 0, 217,
	218, 219, 220, 221, 359, 360, 0, 0, 225, 0,
	222, 0, 0, 223, 361, 224, 362, 363, 364, 365,
	366, 0, 367, 0, 0, 226, 227, 228, 0, 229,
	230, 231, 0, 233, 232, 0, 368, 0, 234, 0,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 0, 242, 243, 245, 244, 0, 0, 0,
	370, 246, 371, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 372, 0, 252, 0, 373, 253, 254,
	255, 256, 257, 0, 258, 374, 259, 375, 260, 0,
	261, 262, 263, 264, 265, 266, 376, 713, 268, 0,
	269, 270, 271, 272, 273, 275, 276, 274, 277, 278,
	279, 280, 0, 281, 0, 282, 283, 377, 284, 0,
	288, 289, 290, 291, 0, 293, 378, 292, 294, 295,
	0, 296, 285, 286, 297, 0, 298, 379, 380, 299,
	0, 306, 300, 301, 287, 302, 305, 381, 303, 304,
	382, 0, 307, 0, 308, 309, 310, 311, 312, 313,
	314, 0, 383, 384, 385, 0, 0, 315, 316, 386,
	387, 0, 317, 318, 319, 320, 0, 0, 321, 322,
	323, 324, 0, 325, 0, 388, 326, 327, 328, 389,
	390, 174, 0, 329, 0, 0, 0, 0, 330, 331,
	332, 333, 334, 0, 0, 0, 0, 177, 178, 0,
	179, 0, 0, 0, 0, 335, 0, 0, 0, 0,
	180, 181, 182, 336, 337, 338, 339, 183, 340, 341,
	0, 184, 342, 343, 185, 186, 0, 0, 344, 345,
	346, 0, 187, 347, 0, 0, 0, 188, 189, 190,
	0, 191, 0, 192, 193, 194, 0, 0, 195, 196,
	197, 0, 0, 0, 0, 0, 0, 0, 198, 199,
	398, 200, 348, 201, 349, 350, 0, 202, 0, 203,
	0, 204, 0, 0, 205, 206, 0, 207, 0, 0,
	0, 351, 208, 209, 210, 352, 353, 0, 0, 0,
	211, 212, 354, 355, 356, 0, 213, 0, 214, 0,
	0, 0, 215, 0, 216, 357, 0, 358, 0, 217,
	218, 219, 220, 221, 359, 360, 0, 0, 225, 0,
	222, 0, 0, 223, 361, 224, 362, 363, 364, 365,
	366, 0, 367, 0, 0, 226, 227, 228, 0, 229,
	230, 231, 0, 233, 232, 0, 368, 0, 234, 0,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 0, 242, 243, 245, 244, 0, 0, 0,
	370, 246, 371, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 372, 0, 252, 0, 373, 253, 254,
	0, 256, 257, 0, 258, 374, 259, 375, 260, 0,
	261, 262, 263, 264, 0, 266, 376, 267, 268, 0,
	269, 270, 271, 272, 273, 275, 276, 274, 277, 278,
	279, 280, 0, 281, 0, 282, 283, 377, 0, 0,
	288, 289, 290, 291, 0, 293, 378, 292, 294, 295,
	0, 296, 285, 286, 297, 0, 298, 379, 380, 299,
	0, 306, 300, 301, 287, 302, 305, 381, 303, 304,
	382, 0, 307, 0, 308, 309, 310, 311, 312, 313,
	314, 0, 383, 384, 385, 0, 0, 315, 316, 386,
	387, 0, 317, 318, 319, 320, 0, 0, 321, 322,
	323, 324, 0, 325, 0, 388, 326, 327, 328, 389,
	390, 0, 0, 329, 0, 0, 0, 0, 330, 331,
	332, 333, 334, 1095, 1096, 0, 1115, 1116, 1117, 1125,
	1126, 1127, 0, 0, 0, 0, 0, 0, 0, 1118,
	0, 0, 0, 0, 0, 0, 1098, 0, 0, 1129,
	0, 1095, 1096, 0, 1115, 1116, 1117, 1125, 1126, 1127,
	0, 0, 0, 0, 0, 0, 0, 1118, 0, 0,
	1097, 0, 0, 0, 1098, 0, 1112, 1129, 0, 1095,
	1096, 0, 1115, 1116, 1117, 1125, 1126, 1127, 0, 0,
	0, 0, 0, 0, 0, 1118, 0, 0, 1097, 0,
	0, 0, 1098, 0, 1112, 1129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1097, 0, 0, 0,
	0, 1103, 1112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1122, 1130, 0, 0, 0, 0, 0, 1103,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1122, 1130, 0, 0, 0, 1120, 0, 1103, 0, 0,
	0, 1113, 0, 0, 0, 0, 0, 0, 1128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1122, 1130,
	0, 0, 0, 1120, 0, 0, 1119, 0, 0, 1113,
	0, 0, 0, 0, 0, 0, 1128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1120, 0, 0, 1119, 0, 0, 1113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1114, 0, 0, 0, 0,
	0, 0, 1119, 0, 0, 0, 0, 0, 0, 0,
	0, 1123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1114, 1095, 1096, 0, 1115, 1116, 1117,
	1125, 1126, 1127, 0, 0, 0, 0, 0, 0, 1123,
	1118, 0, 0, 0, 0, 0, 0, 1098, 0, 0,
	1129, 1114, 1095, 1096, 0, 1115, 1116, 1117, 1125, 1126,
	1127, 0, 0, 0, 0, 0, 0, 1123, 1118, 0,
	0, 1097, 0, 0, 0, 1098, 0, 1112, 1129, 1121,
	0, 0, 1109, 1110, 1111, 1124, 0, 1108, 1106, 1107,
	1099, 1100, 1101, 1102, 1104, 1105, 0, 0, 0, 1097,
	0, 0, 0, 0, 1820, 1112, 0, 1121, 0, 0,
	1109, 1110, 1111, 1124, 0, 1108, 1106, 1107, 1099, 1100,
	1101, 1102, 1104, 1105, 0, 0, 0, 0, 2384, 0,
	0, 0, 1103, 0, 0, 1121, 0, 0, 1109, 1110,
	1111, 1124, 0, 1108, 1106, 1107, 1099, 1100, 1101, 1102,
	1104, 1105, 0, 1122, 1130, 0, 2365, 0, 0, 0,
	1103, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1128, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1122, 1130, 0, 0, 0, 1120, 0, 0, 0,
	0, 0, 1113, 0, 0, 0, 0, 0, 0, 1128,
	0, 0, 0, 0, 0, 1095, 1096, 0, 1115, 1116,
	1117, 1125, 1126, 1127, 1120, 0, 0, 1119, 0, 0,
	1113, 1118, 0, 0, 0, 0, 0, 0, 1098, 0,
	0, 1129, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1119, 0, 0, 0, 0,
	0, 0, 1097, 0, 0, 0, 0, 0, 1112, 0,
	0, 0, 0, 0, 0, 0, 1114, 1095, 1096, 0,
	1115, 1116, 1117, 1125, 1126, 1127, 0, 0, 0, 0,
	0, 0, 1123, 1118, 0, 0, 0, 0, 0, 0,
	1098, 0, 0, 1129, 1114, 0, 1095, 1096, 0, 1115,
	1116, 1117, 1125, 1126, 1127, 0, 0, 0, 0, 0,
	1123, 0, 1118, 1103, 1097, 0, 0, 0, 0, 1098,
	1112, 0, 1129, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1122, 1130, 0, 0, 0, 0,
	0, 0, 0, 1097, 0, 0, 0, 0, 0, 1112,
	1121, 0, 1128, 1109, 1110, 1111, 1124, 0, 1108, 1106,
	1107, 1099, 1100, 1101, 1102, 1104, 1105, 1120, 0, 0,
	0, 2311, 0, 1113, 0, 1103, 0, 0, 1121, 0,
	0, 1109, 1110, 1111, 1124, 0, 1108, 1106, 1107, 1099,
	1100, 1101, 1102, 1104, 1105, 0, 1122, 1130, 1119, 2306,
	0, 0, 0, 0, 1103, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1122, 1130, 0, 0, 1120,
	0, 0, 0, 0, 0, 1113, 0, 0, 0, 0,
	0, 0, 0, 1128, 0, 0, 0, 1114, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1120, 0,
	1119, 0, 0, 1123, 1113, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1119,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1114,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1123, 0, 0, 0, 0,
	0, 1121, 0, 0, 1109, 1110, 1111, 1124, 1114, 1108,
	1106, 1107, 1099, 1100, 1101, 1102, 1104, 1105, 0, 0,
	0, 0, 2302, 0, 1123, 0, 0, 0, 0, 0,
	0, 0, 0, 1095, 1096, 0, 1115, 1116, 1117, 1125,
	1126, 1127, 0, 0, 0, 0, 0, 0, 0, 1118,
	0, 0, 0, 0, 0, 0, 1098, 0, 0, 1129,
	0, 0, 0, 1121, 0, 0, 1109, 1110, 1111, 1124,
	0, 1108, 1106, 1107, 1099, 1100, 1101, 1102, 1104, 1105,
	1097, 0, 0, 0, 2282, 0, 1112, 0, 0, 0,
	0, 0, 1121, 0, 0, 1109, 1110, 1111, 1124, 0,
	1108, 1106, 1107, 1099, 1100, 1101, 1102, 1104, 1105, 0,
	0, 0, 0, 2225, 0, 0, 0, 0, 0, 1095,
	1096, 0, 1115, 1116, 1117, 1125, 1126, 1127, 0, 0,
	0, 0, 0, 0, 0, 1118, 0, 0, 0, 0,
	0, 1103, 1098, 0, 0, 1129, 0, 0, 0, 0,
	0, 0, 0, 1095, 1096, 0, 1115, 1116, 1117, 1125,
	1126, 1127, 1122, 1130, 0, 0, 1097, 0, 0, 1118,
	0, 0, 1112, 0, 0, 0, 1098, 0, 0, 1129,
	1128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1120, 0, 0, 0, 0,
	1097, 1113, 0, 0, 0, 0, 1112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1119, 1103, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1122, 1130,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1103, 0, 0, 0, 0, 1128, 0, 0, 0,
	0, 0, 0, 0, 0, 1114, 0, 0, 0, 0,
	0, 1120, 1122, 1130, 0, 0, 0, 1113, 0, 0,
	0, 1123, 0, 0, 0, 0, 0, 0, 0, 0,
	1128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1119, 0, 0, 1120, 0, 0, 0, 0,
	0, 1113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1095, 1096, 0, 1115, 1116, 1117,
	1125, 1126, 1127, 0, 0, 0, 1119, 0, 0, 0,
	1118, 0, 0, 0, 0, 0, 0, 1098, 0, 1121,
	1129, 1114, 1109, 1110, 1111, 1124, 0, 1108, 1106, 1107,
	1099, 1100, 1101, 1102, 1104, 1105, 0, 1123, 0, 0,
	2224, 1097, 0, 0, 0, 0, 0, 1112, 0, 0,
	0, 0, 0, 1095, 1096, 1114, 1115, 1116, 1117, 1125,
	1126, 1127, 0, 0, 0, 0, 0, 0, 0, 1118,
	0, 1123, 0, 0, 0, 0, 1098, 0, 0, 1129,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1097, 0, 1103, 0, 0, 1121, 1112, 0, 1109, 1110,
	1111, 1124, 0, 1108, 1106, 1107, 1099, 1100, 1101, 1102,
	1104, 1105, 0, 1122, 1130, 0, 2164, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1121,
	0, 1128, 1109, 1110, 1111, 1124, 0, 1108, 1106, 1107,
	1099, 1100, 1101, 1102, 1104, 1105, 1120, 0, 0, 0,
	2129, 1103, 1113, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1122, 1130, 0, 0, 0, 1119, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1120, 0, 0, 0, 0,
	0, 1113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1095, 1096, 1114, 1115, 1116, 1117,
	1125, 1126, 1127, 0, 0, 0, 1119, 0, 0, 0,
	1118, 0, 1123, 0, 0, 0, 0, 1098, 0, 0,
	1129, 0, 0, 0, 0, 0, 0, 0, 1095, 1096,
	0, 1115, 1116, 1117, 1125, 1126, 1127, 0, 0, 0,
	0, 1097, 0, 0, 1118, 0, 0, 1112, 0, 0,
	0, 1098, 0, 0, 1129, 1114, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1123, 0, 0, 0, 1097, 0, 0, 0, 0,
	1121, 1112, 0, 1109, 1110, 1111, 1124, 0, 1108, 1106,
	1107, 1099, 1100, 1101, 1102, 1104, 1105, 0, 0, 0,
	0, 2042, 1103, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1122, 1130, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1103, 0, 0, 1121,
	0, 1128, 1109, 1110, 1111, 1124, 0, 1108, 1106, 1107,
	1099, 1100, 1101, 1102, 1104, 1105, 1120, 1122, 1130, 0,
	2018, 0, 1113, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1128, 0, 0, 0, 0,
	38, 0, 0, 0, 0, 0, 0, 1119, 0, 0,
	1120, 39, 122, 0, 0, 0, 1113, 0, 0, 0,
	0, 0, 0, 0, 42, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 124, 0,
	0, 1119, 0, 0, 43, 0, 48, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1114, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 53, 0, 0,
	0, 55, 1123, 0, 0, 61, 0, 0, 125, 0,
	0, 0, 62, 0, 63, 0, 0, 0, 0, 0,
	1114, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 64, 0, 0, 1123, 0, 0, 65,
	0, 0, 66, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1121, 0, 0, 1109, 1110, 1111, 1124, 0, 1108, 1106,
	1107, 1099, 1100, 1101, 1102, 1104, 1105, 0, 0, 0,
	0, 1515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1121, 0, 0, 1109, 1110, 1111,
	1124, 0, 1108, 1106, 1107, 1099, 1100, 1101, 1102, 1104,
	1105, 0, 67, 1790, 0, 0, 0, 0, 68, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 75, 76, 69,
	0, 70, 0, 71, 0, 126, 0, 0, 0, 0,
	72, 0, 1095, 1096, 133, 1115, 1116, 1117, 1125, 1126,
	1127, 82, 0, 0, 101, 0, 0, 0, 1118, 0,
	0, 0, 0, 123, 0, 1098, 0, 0, 1129, 0,
	0, 0, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1097,
	0, 0, 105, 0, 0, 1112, 0, 0, 0, 1095,
	1096, 121, 1115, 1116, 1117, 1125, 1126, 1127, 0, 134,
	0, 0, 0, 0, 0, 1118, 0, 127, 0, 0,
	0, 0, 1098, 0, 128, 1129, 0, 0, 0, 0,
	0, 0, 0, 1095, 1096, 0, 1115, 1116, 1117, 1125,
	1126, 1127, 0, 120, 0, 0, 1097, 0, 0, 1118,
	1103, 2458, 1112, 0, 1694, 1379, 1098, 0, 0, 1129,
	0, 1095, 1096, 0, 1115, 1116, 1117, 1125, 1126, 1127,
	0, 1122, 1130, 0, 0, 0, 0, 1118, 0, 0,
	1097, 1378, 0, 0, 1098, 0, 1112, 1129, 0, 1128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1120, 0, 0, 1103, 1097, 1860,
	1113, 0, 1859, 0, 1112, 0, 1695, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1122, 1130,
	0, 0, 0, 0, 0, 1119, 0, 0, 0, 0,
	0, 1103, 0, 0, 0, 0, 1128, 0, 0, 0,
	0, 2457, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1120, 1122, 1130, 0, 0, 0, 1113, 0, 1103,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1128, 0, 0, 0, 1114, 0, 0, 0, 0, 0,
	1122, 1130, 1119, 0, 0, 1120, 0, 0, 0, 0,
	1123, 1113, 0, 0, 0, 0, 0, 0, 1128, 0,
	0, 0, 0, 0, 1095, 1096, 0, 1115, 1116, 1117,
	1125, 1126, 1127, 1120, 0, 0, 1119, 0, 0, 1113,
	1118, 0, 0, 0, 0, 0, 0, 1098, 0, 0,
	1129, 1114, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1119, 0, 0, 1123, 0, 0,
	0, 1097, 0, 0, 0, 0, 0, 1112, 1121, 0,
	0, 1109, 1110, 1111, 1124, 1114, 1108, 1106, 1107, 1099,
	1100, 1101, 1102, 1104, 1105, 0, 0, 0, 0, 0,
	0, 1123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1114, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1123,
	0, 0, 1103, 0, 0, 1121, 0, 0, 1109, 1110,
	1111, 1124, 0, 1108, 1106, 1107, 1099, 1100, 1101, 1102,
	1104, 1105, 0, 1122, 1130, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1121,
	0, 1128, 1109, 1110, 1111, 1124, 0, 1108, 1106, 1107,
	1099, 1100, 1101, 1102, 1104, 1105, 1120, 0, 0, 0,
	0, 0, 1113, 0, 0, 0, 0, 1121, 0, 0,
	1109, 1110, 1111, 1124, 0, 1108, 1106, 1107, 1099, 1100,
	1101, 1102, 1104, 1105, 0, 0, 0, 1119, 674, 0,
	0, 0, 1095, 1096, 0, 1115, 1116, 1117, 1125, 1126,
	1127, 0, 0, 0, 0, 0, 0, 0, 1118, 0,
	0, 0, 0, 0, 0, 1098, 0, 0, 1129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1114, 0, 0, 1097,
	0, 0, 0, 1095, 1096, 1112, 1115, 1116, 1117, 1125,
	1126, 1127, 1123, 0, 0, 0, 0, 0, 0, 1118,
	0, 0, 0, 0, 0, 0, 1098, 0, 0, 1129,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1097, 0, 0, 0, 0, 0, 1112, 0, 0, 0,
	1103, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1121, 1122, 1130, 1109, 1110, 1111, 1124, 0, 1108, 1106,
	1107, 1099, 1100, 1101, 1102, 1104, 1105, 0, 0, 1128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1103, 0, 0, 1120, 0, 1866, 0, 0, 0,
	1113, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1122, 1130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1119, 0, 0, 0, 0,
	1128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1120, 0, 0, 0, 0,
	0, 1113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1114, 0, 1119, 0, 0, 0,
	0, 1095, 1096, 0, 1115, 1116, 1117, 1125, 1126, 1127,
	1123, 0, 0, 0, 0, 0, 0, 1118, 0, 0,
	0, 1861, 0, 0, 1098, 0, 0, 1129, 0, 0,
	0, 0, 0, 0, 0, 0, 2022, 0, 0, 0,
	0, 0, 0, 0, 0, 1114, 0, 0, 1097, 0,
	0, 0, 0, 0, 1112, 0, 0, 0, 0, 0,
	0, 1123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1121, 0,
	0, 1109, 1110, 1111, 1124, 0, 1108, 1106, 1107, 1099,
	1100, 1101, 1102, 1104, 1105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1103,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1121,
	1122, 1130, 1109, 1110, 1111, 1124, 0, 1108, 1106, 1107,
	1099, 1100, 1101, 1102, 1104, 1105, 0, 0, 1128, 0,
	0, 0, 1095, 1096, 0, 1115, 1116, 1117, 1125, 1126,
	1127, 0, 0, 1120, 0, 0, 0, 0, 1118, 1113,
	0, 0, 0, 0, 0, 1098, 0, 0, 1129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1119, 0, 0, 0, 0, 1097,
	0, 0, 0, 0, 0, 1112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1095, 1096,
	0, 1115, 1116, 1117, 1125, 1126, 1127, 0, 0, 0,
	0, 0, 0, 0, 1118, 0, 0, 0, 1819, 0,
	0, 1098, 0, 1114, 1129, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1123,
	1103, 0, 0, 0, 0, 1097, 0, 0, 0, 1095,
	1096, 1112, 1115, 1116, 1117, 1125, 1126, 1127, 0, 0,
	0, 1122, 1130, 0, 0, 1118, 0, 0, 0, 0,
	0, 0, 1098, 0, 0, 1129, 0, 0, 0, 1128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1120, 0, 1097, 0, 0, 0,
	1113, 0, 1112, 0, 0, 0, 1103, 1121, 0, 0,
	1109, 1110, 1111, 1124, 0, 1108, 1106, 1107, 1099, 1100,
	1101, 1102, 1104, 1105, 0, 1119, 0, 1122, 1130, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1826, 0,
	0, 0, 0, 0, 0, 1128, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1103, 0, 0,
	1120, 0, 0, 0, 0, 0, 1113, 0, 0, 0,
	0, 0, 0, 0, 1114, 0, 0, 0, 1122, 1130,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1123, 1119, 0, 0, 0, 0, 1128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1120, 0, 0, 0, 0, 0, 1113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1114, 0, 1119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1123, 0, 1121, 0,
	0, 1109, 1110, 1111, 1124, 0, 1108, 1106, 1107, 1099,
	1100, 1101, 1102, 1104, 1105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1114, 0, 0, 1095, 1096, 0, 1115, 1116, 1117,
	1125, 1126, 1127, 0, 0, 0, 0, 1123, 0, 0,
	1118, 0, 0, 0, 0, 0, 0, 1098, 0, 0,
	1129, 0, 0, 0, 1121, 0, 0, 1109, 1110, 1111,
	1124, 0, 1108, 1106, 1107, 1099, 1100, 1101, 1102, 1104,
	1105, 1097, 0, 0, 0, 1095, 1096, 1112, 1115, 1116,
	1117, 1125, 1126, 1127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1098, 0,
	0, 1129, 0, 0, 0, 1121, 0, 0, 1109, 1110,
	1111, 1124, 0, 1108, 1106, 1107, 1099, 1100, 1101, 1102,
	1104, 1105, 1097, 0, 0, 0, 0, 0, 1112, 0,
	0, 0, 1103, 0, 1095, 1096, 0, 1115, 1116, 1117,
	1125, 1126, 1127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1122, 1130, 0, 0, 1098, 0, 0,
	1129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1128, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1097, 0, 1103, 0, 0, 1120, 1112, 0, 0,
	0, 0, 1113, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1122, 1130, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1128, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1120, 0, 0,
	0, 0, 1103, 1113, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1122, 1130, 0, 1114, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1120, 0, 0, 0,
	0, 0, 1113, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1114, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1121, 0, 0, 1109, 1110, 1111, 1124, 0, 1108, 1106,
	1107, 1099, 1100, 1101, 1102, 1104, 1105, 0, 0, 0,
	1268, 1258, 1287, 1250, 1278, 1277, 1114, 0, 1252, 1251,
	0, 0, 0, 0, 1289, 1288, 0, 0, 0, 0,
	0, 0, 1123, 0, 0, 0, 0, 0, 0, 0,
	0, 1121, 0, 0, 1109, 1110, 1111, 1124, 0, 1108,
	1106, 1107, 1099, 1100, 1101, 1102, 1104, 1105, 1283, 0,
	1275, 1274, 0, 0, 0, 0, 0, 0, 0, 0,
	1273, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1272, 1270,
	1271, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1121, 0, 0, 1109, 1110, 1111, 1124, 0, 1108, 1106,
	1107, 1099, 1100, 1101, 1102, 1104, 1105, 0, 0, 0,
	1261, 1260, 1262, 1263, 1264, 1265, 1266, 0, 1286, 0,
	0, 0, 0, 0, 0, 0, 1268, 1258, 1287, 1250,
	1278, 1277, 0, 0, 1252, 1251, 0, 0, 0, 0,
	1289, 1288, 0, 0, 0, 0, 1254, 0, 0, 634,
	0, 594, 0, 0, 0, 0, 0, 0, 1276, 0,
	0, 0, 1259, 0, 0, 0, 0, 0, 0, 639,
	0, 0, 0, 0, 1283, 0, 1275, 1274, 0, 0,
	0, 637, 0, 0, 0, 0, 1273, 0, 0, 0,
	0, 0, 1269, 0, 0, 0, 1450, 1448, 1449, 1452,
	1451, 0, 638, 0, 1272, 1270, 1271, 640, 0, 0,
	0, 0, 646, 647, 0, 0, 656, 0, 0, 0,
	0, 0, 1255, 0, 0, 0, 0, 0, 0, 0,
	596, 641, 0, 1267, 1256, 0, 1261, 1260, 1262, 1263,
	1264, 1265, 1266, 1291, 1286, 0, 0, 0, 0, 0,
	0, 0, 0, 659, 0, 0, 1253, 0, 0, 1284,
	1285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1254, 0, 642, 0, 0, 0, 0, 0,
	0, 1257, 0, 0, 1276, 0, 1290, 0, 1259, 643,
	644, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 650, 0, 0,
	645, 652, 0, 0, 0, 0, 0, 0, 1269, 0,
	0, 649, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 597, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1267,
	1256, 0, 0, 0, 0, 0, 0, 0, 0, 1291,
	0, 0, 648, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1253, 0, 0, 1284, 1285, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1257, 636, 653,
	598, 0, 1290, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 654, 0, 0, 0, 658, 0,
	0, 0, 599, 0, 0, 0, 0, 651, 655, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 657,
}
var sqlPact = [...]int{

	39697, -1000, 26, -1000, -1000, 212, -1000, -1000, -1000, 211,
	210, 209, -1000, 208, 205, 204, -1000, 202, 199, 198,
	196, 192, 189, 185, 177, -1000, 175, 172, -1000, -1000,
	-1000, 171, 170, 165, 160, 159, 158, 157, 1083, 23375,
	156, 141, 1307, 35607, 138, 136, 135, 133, 1590, 127,
	126, 125, 124, 26907, 935, 1380, 117, 116, 115, 113,
	110, 1487, 35287, 2361, 2406, 5685, 1134, 1642, 34964, 23052,
	1622, 1510, 34641, -1000, -1000, 34318, 1609, 107, 106, 104,
	-1000, -1000, 33995, 103, 95, 93, 91, 90, 89, 88,
	76, 74, 73, 66, 64, 63, 62, -1000, 60, 57,
	56, 41677, 54, 52, 51, 1132, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 169, -1000, 1020,
	520, 18488, 1085, 1075, 1052, 1042, 1030, 37527, 35607, 49,
	0, 44, -1000, 1935, 644, 20442, 39697, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 26584, 26261, 33672, 33349, 824, -1000, 18, 24655,
	35607, -1000, 69, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 14455, 14096, 578, 69, -1000, -1000,
	-1000, -1000, -1000, 33026, -1000, 32703, 32380, 1486, 32057, 2120,
	2117, -1000, -1000, -1000, -1000, -1000, -1000, 31734, -1000, -1000,
	1819, 1624, 1615, 25938, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 31414, 31091, 30768, 30445,
	30122, 529, -1000, -1000, -1000, 17156, -1000, -1000, -1000, -1000,
	43, -1000, -1000, -1000, -1000, 40, 38, 37, 30, 1270,
	-1000, -1000, 19, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 35607, -1000, 15490, -1000, 528, -1000, 1629,
	-1000, 15490, -1000, 1269, -1000, -1000, -1000, -1000, -1000, 35607,
	-1000, -1000, 1829, -1000, -1000, -1000, -1000, -1000, -1000, 958,
	-1000, -1000, -1000, 2116, 1181, 525, 29799, -1000, 1495, -1000,
	641, 818, -1000, -1000, -1000, 18154, 215, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1691, 22729, 1182, 1925,
	1804, 2115, 1399, 1797, 1731, 1715, 1714, 1701, 2114, 942,
	2112, 1858, 1039, 2108, 1687, 1263, 717, 2107, 1626, 1625,
	-1000, -1000, -1000, 28187, -1000, -1000, 1020, -1000, -1000, -1000,
	1368, 1910, 1910, 1910, 1948, 339, 308, -1000, 169, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2049,
	-1000, -1000, -1000, -1000, 2080, -1000, -1000, -1000, -1000, 1229,
	-1000, -1000, 1229, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	819, 36887, 16, 35607, -1000, 524, 16, -1000, -1000, 521,
	-1000, 10534, 10534, -1000, -1000, -1000, -1000, -1000, 8809, 1580,
	-1000, 280, -177, 349, 616, -1000, 19467, 22063, -1000, -1000,
	1005, 1791, 697, -1000, 1023, 1784, 577, -1000, 1021, -1000,
	1034, 1782, -163, 23695, 24655, 18, -10, -1000, -1000, -1000,
	5353, 40929, -1000, -1000, 15490, 15490, 15490, 15490, 15490, 1121,
	571, -1000, 519, 509, 7069, -1000, -1000, 2078, -1000, -1000,
	-1000, 354, -1000, -1000, 15490, 69, -1000, -1000, -1000, -1000,
	508, 2101, -1000, 692, -1000, -1000, -1000, 646, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1637, 505, 504,
	503, -1000, -1000, -1000, -1000, 502, 499, 497, 496, 493,
	492, 491, 489, 488, 485, 483, 482, 480, 477, 476,
	1064, -1000, 670, -1000, -1000, 670, 670, -1000, 459, 459,
	460, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 459,
	-1000, -1000, -1000, 637, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 475, 40929, -1000, 874, 21090, 69, -1000, -1000, -1000,
	-1000, 468, 1339, 652, -1000, 328, -1000, 29476, 652, 1333,
	-1000, -1000, -1000, -1000, -1000, 28187, -1000, 35607, -1000, 35607,
	-1000, 899, -1000, 37207, 120, 1763, -1000, -1000, 120, 1761,
	-1000, 119, 1760, -1000, -1000, -1000, 1759, -1000, -10, 1752,
	-1000, -1000, 15490, 9, -1000, -1000, -1000, 644, -1000, -1000,
	-1000, -1000, -1000, 24015, 1118, 600, 40929, 2007, 41619, 23695,
	40929, 24015, -1000, -1000, -1000, -1000, -1000, 35607, -1000, 15490,
	-1000, 2005, 1446, 14, -1000, -1000, -1000, -1000, -1000, 1393,
	1456, 791, 1488, 17822, 17490, 1866, -1000, -1000, -1000, 163,
	5685, -1000, -1000, -1000, -1000, -1000, -1000, 29153, -1000, -1000,
	-1000, 1173, 35607, -1000, -1000, 1634, -1000, 24015, 35607, -1000,
	35607, -1000, 35607, -1000, 35607, -1000, 35607, -1000, -1000, -1000,
	-1000, -1000, 134, -1000, 1633, -1000, -1000, 35607, -1000, 1381,
	-1000, -1000, -1000, 28833, 28510, -1000, 1000, 849, 121, -1000,
	-1000, 1368, -1000, 1286, 1448, 13737, 1436, 15490, 169, -1000,
	-1000, 169, 169, 8105, -1000, -1000, -1000, -1000, -1000, -1000,
	14, -1000, 36887, -1000, 35607, 16, 2003, 35607, -1000, 81,
	-1000, 40061, -1000, 81, -3, -1000, 40929, -1000, 1439, 1435,
	20766, 1490, 1140, 1140, 1140, -1000, 464, 547, 616, 4674,
	13392, -1000, 27227, 1136, 249, 309, 19143, 1580, -1000, 35607,
	-31, 993, -1000, 25615, 1896, 1891, 1883, 28187, 1985, 114,
	1611, 810, 28187, 808, 1979, 114, 1598, 807, 35607, 5685,
	614, -1000, 35607, -1000, -1000, 41493, 41619, 5685, 837, 15490,
	15490, 15490, 15490, 15490, 15490, 15490, 15490, 15490, 15490, 15490,
	15490, 15490, 15490, 15490, 15490, 15490, 15490, 15490, 15490, 15490,
	15490, 1283, 15490, 806, 15490, 15490, 15490, 15490, 1998, 1129,
	433, 1265, -1000, 2040, 2040, 2040, 41225, 41225, 387, 571,
	-1000, 15490, -1000, 114, 13033, 308, 39524, 15, 6724, -1000,
	-1000, -1000, 8450, 668, 40929, 69, 6019, -1000, 2077, 934,
	1646, 1542, 462, 574, 570, 526, 15490, 15490, 12688, 12329,
	11970, 15835, 11611, 15490, 7414, 15490, 15490, 15490, 15490, 11252,
	10893, -1000, 461, -1000, -1000, -1000, -1000, 2076, -1000, -1000,
	2075, -1000, 836, 832, 2074, -1000, 1596, -13, -1000, -1000,
	25295, 2002, 1746, -1000, 1093, -1000, 1997, 35607, 1249, 1331,
	-1000, -1000, 770, 1745, 660, 500, 1992, 500, 21415, -1000,
	35607, -1000, 35607, -1000, -1000, 35607, -1000, 35607, -1000, 35607,
	35607, 35607, 35607, -14, 40929, 680, 24975, 803, -1000, 690,
	25295, 289, -15, -1000, 891, -1000, -1000, -1000, -1000, 297,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 460, 1064, 459, 459, 459, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 637, -1000, -1000, 670, 670, 670,
	-1000, -1000, -11, -1000, 1578, -1000, 631, -22, 713, 14,
	-1000, 1229, 1011, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2096, 13, -1000, -1000,
	13, -1000, -1000, 5685, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 35607, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	131, -1000, -1000, -1000, -1000, -1000, -1000, 35607, 35607, 35607,
	-1000, 28187, -1000, -1000, -1000, -1000, 40929, -1000, 386, -1000,
	-1000, 40929, 1006, 1430, -1000, 1430, 11, -1000, 40033, 1426,
	35607, -1000, -1000, 458, -28, 660, 10534, 20117, 5685, -1000,
	660, 8809, -1000, 20766, 20766, 1383, 1434, 20766, -1000, -1000,
	-1000, -1000, 27227, 472, 616, 27227, -1000, 2071, 1422, -29,
	-1000, -1000, -1000, 35607, 454, -1000, 616, 291, 990, 35607,
	35607, 35607, -1000, -1000, 1327, 36567, 1321, 41619, 35607, -1000,
	453, 452, 1425, 1424, 35607, 35607, 36247, 35927, 35607, 998,
	114, -1000, 451, 35607, 1016, 35607, 114, -1000, 444, 35607,
	960, -1000, 1513, 1291, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 640, 1196, 1196, 794, 794,
	794, 794, 1977, 2734, 191, 2716, 3739, 3739, 3739, 929,
	1012, 1012, 3739, 3739, 3739, 41225, 41174, 327, 15490, 15490,
	802, 1113, 433, 327, 15490, 327, 327, 327, 327, -1000,
	1070, -1000, -1000, -1000, -1000, 1576, 432, 15835, 15835, -1000,
	-1000, -1000, 7069, 16167, -1000, -1000, -1000, -1000, 427, 15490,
	-1000, 39558, -205, -35, -1000, -1000, 15490, -56, -140, -1000,
	-1000, 895, -1000, 15490, -1000, -20, 15490, 15490, 15490, 290,
	-1000, 287, -1000, 801, -1000, 782, 781, 778, -1000, 426,
	1126, 425, 423, 15490, -1000, -1000, -1000, -1000, -1000, -1000,
	40878, 38173, 286, -1000, 1575, -154, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 285, -1000, 284, -1000, 40812, -154, 282,
	4204, -1000, 15835, 15835, 15835, 7069, 420, 278, -1000, 39999,
	-154, 40661, 10189, 10189, 10189, 277, 40463, 15490, -154, 4294,
	4236, 567, -43, -44, -1000, -49, -1000, 2061, -50, 276,
	635, 628, 272, 863, 1567, 35607, 271, -51, 6, 41619,
	-1000, -1000, -1000, -1000, -1000, 35607, 490, 35607, 114, 35607,
	2091, 114, 35607, 1741, 1798, 594, 35607, 950, 15490, 1233,
	-1000, 19792, 677, 35607, 950, 68, -1000, -1000, -1000, 609,
	35607, -1000, -1000, 120, 120, -1000, 119, -1000, -10, -1000,
	15490, -1000, -1000, 35607, 23695, -57, -1000, -1000, 41619, -1000,
	569, 766, -1000, 2055, 650, 23695, 35607, -1000, 1454, -1000,
	-1000, 962, -1000, 1010, -1000, 18820, -1000, -63, -1000, -1000,
	-1000, -1000, -1000, 614, -1000, 1006, -1000, 15490, 2053, -1000,
	-1000, -1000, 8105, -1000, -1000, -1000, 35607, -172, 289, -1000,
	1534, -1000, -92, -1000, 1580, -1000, 1534, -1000, -1000, 1383,
	-1000, 412, 15490, 20766, -1000, 538, -1000, -64, -1000, 27227,
	-1000, 537, -202, -1000, 608, -1000, 616, 411, 35607, 27227,
	-1000, -1000, -1000, 777, 764, 1730, -1000, 1320, -1000, 682,
	-1000, 980, 15490, 16831, 410, 409, 1116, -1000, 1713, 1198,
	1692, 1198, -1000, -31, 984, -1000, 15490, -1000, 763, -1000,
	-1000, 15490, -1000, 757, 650, 1564, 852, 15490, 327, 327,
	15490, 15835, 15835, -1000, 327, -1000, -1000, -1000, -1000, -1000,
	1563, 406, 15490, 41619, 3888, 3860, -65, -1000, 9844, -45,
	-1000, 15490, -1000, 39343, -1000, -1000, 556, 1690, -1000, 15490,
	40412, 270, 9499, -1000, 40214, -30, -30, -1000, 2090, 1354,
	1038, 1060, 917, 2052, -1000, 21739, 665, 1164, 39284, 41493,
	41619, -1000, 15490, -1000, -1000, 1561, 15490, -1000, 41493, 41619,
	15835, 15835, 15835, 15835, 15835, 15835, 15835, 15835, 15835, 15835,
	15835, 15835, 15835, 15835, 15835, 15835, 15835, 15835, 15835, 1377,
	15835, 2038, 2038, 2038, -46, 9154, -1000, 1545, 1561, 15490,
	15490, 41619, 265, 264, 263, -1000, 15490, -154, 15490, 15490,
	15490, -1000, -1000, -1000, 261, -1000, 2045, -1000, -1000, -1000,
	-1000, -1000, 860, -1000, 1505, -1000, 25295, 404, 35607, 403,
	-1000, 402, -1000, -1000, 400, 35607, 1407, 594, 24335, -1000,
	652, -1000, 7759, 40929, -1000, 950, 1894, -66, -1000, -1000,
	-1000, 660, 21415, 20766, 8809, -67, -1000, -1000, -1000, 40929,
	-63, 1870, 1870, -1000, 2037, -1000, 534, 258, -1000, 27867,
	-1000, -63, -1000, -1000, -1000, -1000, -1000, 35607, -1000, 1188,
	39103, -1000, 1903, 5685, 257, 1530, 1946, -1000, 20766, 1530,
	-1000, 35607, 40929, -1000, -177, -1000, 2035, -1000, -1000, 1422,
	-1000, 5018, 27227, 35607, -72, -1000, 35607, 35607, 35607, 1688,
	-1000, 1536, -1000, 39069, -73, -1000, 337, 1922, 15490, -1000,
	-1000, 395, 16831, 35607, -1000, 1419, 1417, 703, 35607, -1000,
	35607, -1000, 35607, 35607, 35607, -75, 35607, -78, 35607, -1000,
	23695, 769, 2006, 327, 342, 310, 15490, 41619, 41284, -80,
	15490, 15490, -1000, -85, -1000, 15490, 527, 40929, -1000, -1000,
	-1000, 40929, 15490, 2089, 15490, 256, 255, 252, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 251, -1000, -1000, 37847,
	15490, 248, -1000, 244, 242, 40929, 1545, 40929, -1000, -1000,
	761, 761, 911, 911, 911, 911, 2038, 549, 948, 522,
	371, 371, 371, 447, 954, 954, 371, 371, 371, 1556,
	1384, 394, 4178, 15490, -90, -1000, -1000, -1000, 40929, 40929,
	241, -1000, -1000, -1000, -154, 162, 38983, 38716, -1000, 239,
	-1000, -1000, 1508, -1000, 16831, 392, 35607, 25295, 1991, 16831,
	1217, 1403, 594, 24335, -1000, 770, -99, -1000, -1000, 397,
	114, 950, -1000, -110, -1000, 607, 1854, -1000, 1849, 473,
	-1000, -1000, -124, 391, -1000, 601, 595, -1000, -1000, -1000,
	-1000, 1903, -1000, 655, 15490, 15490, 1580, 655, -93, 616,
	-1000, -1000, -1000, 2032, -1000, -96, -1000, -1000, -1000, -1000,
	35607, -1000, 35607, -1000, 5685, 35607, 1541, 1312, -1000, -1000,
	1423, 388, 15835, 35607, -1000, 1090, 16831, 1903, 69, 5685,
	1903, 38687, 6019, -101, -103, 1309, -1000, 1308, 15490, -1000,
	41619, 1198, 1198, -1000, 755, 741, 739, -1000, 727, -1000,
	-127, 22395, 15490, 15490, 41284, -104, -1000, 327, 327, -1000,
	38625, -1000, 40929, -1000, 40214, -1000, -1000, -1000, -1000, 1098,
	-1000, 38472, -1000, -1000, -1000, -1000, 15835, 1549, 385, 41619,
	38444, -1000, -1000, 15490, -1000, -1000, -1000, 1102, -112, 16831,
	-114, 238, 114, -117, 35607, -1000, 594, 24335, -1000, 1798,
	1810, 35607, 1882, -1000, -1000, 384, 380, 379, -1000, 27547,
	27547, 23695, 23695, -1000, -1000, 35607, 40929, -154, -1000, -1000,
	27227, 448, -1000, -1000, 1281, -1000, -1000, 35607, 1319, -1000,
	-1000, 15490, 4178, 376, 1505, 375, -1000, -1000, -1000, -1000,
	-1000, -1000, 1922, -20, -1000, 1037, -1000, -1000, 40929, 1902,
	-1000, -1000, 35607, 35607, 374, 369, -1000, 357, 69, 327,
	327, -1000, -1000, 235, 1164, 1941, -1000, 1725, 15835, 41619,
	-126, -1000, 38229, 35607, 1090, -134, -1000, 1505, -1000, 1090,
	355, 24335, -1000, 1407, 821, -135, 35607, -1000, -1000, 6365,
	23695, 23695, -1000, -143, -1000, -1000, -141, -1000, 1989, -1000,
	-1000, -1000, -1000, 1680, 38201, 1358, 35607, -1000, 35607, 1903,
	234, 35607, 689, 5685, -1000, -1000, 15490, 15490, 15490, -1000,
	1095, 15490, 1725, -144, -1000, -1000, 353, 1505, 1090, -1000,
	1505, 16831, -1000, 1403, 896, -1000, 660, -1000, -145, -151,
	-1000, 35607, 348, 1668, -1000, 1205, 1253, 231, -152, -1000,
	-1000, 328, -1000, 15490, -1000, -164, -165, -30, 230, 15145,
	15145, -154, -1000, 35607, -1000, 1505, -1000, -174, -1000, 21415,
	-1000, 650, 650, -1000, -1000, 35607, -1000, 1215, 1209, 937,
	-1000, -1000, -1000, -1000, -1000, 1358, 40929, -1000, -1000, 193,
	-1000, -1000, -1000, 16499, 1264, 936, 39942, -1000, -175, -1000,
	1090, -167, -1000, -1000, -1000, -1000, 1830, -1000, 696, 1376,
	1376, 1205, 2089, 2010, -1000, -1000, -1000, -1000, -1000, 1157,
	1505, -1000, -1000, 2008, -1000, -1000, 1402, -1000, -1000, 14800,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2507, 2505, 1657, 1924, 2502, 2501, 2500, 2499, 2496,
	2495, 2494, 2492, 2489, 2488, 2486, 2485, 2483, 2482, 2477,
	2472, 2470, 2467, 2464, 2463, 2462, 2460, 1916, 2457, 2452,
	2450, 2449, 2448, 2444, 2443, 2441, 1908, 2439, 1901, 2438,
	2437, 2436, 2432, 2423, 1892, 1877, 2417, 78, 102, 1839,
	2412, 2406, 1803, 2405, 2403, 2402, 2401, 2400, 2399, 2392,
	105, 2390, 2387, 2386, 2385, 2379, 2377, 2375, 144, 156,
	2371, 1710, 2368, 2366, 2365, 2362, 2361, 2360, 2356, 2355,
	2353, 2348, 2346, 2345, 2344, 2343, 2342, 2340, 2337, 2336,
	153, 2335, 2334, 1707, 1705, 2328, 2326, 34, 24, 7,
	52, 27, 134, 2446, 132, 2325, 2321, 2320, 2317, 2316,
	2313, 31, 96, 101, 2312, 116, 2311, 2310, 38, 48,
	17, 20, 2308, 87, 2306, 2304, 1391, 21, 2303, 2301,
	131, 2300, 25, 22, 2067, 150, 140, 107, 113, 2296,
	2286, 2276, 2266, 50, 110, 12, 2265, 2264, 15, 61,
	13, 2263, 43, 18, 2258, 2254, 126, 2248, 58, 90,
	1576, 89, 114, 345, 2247, 57, 11, 60, 2246, 2245,
	147, 37, 2244, 49, 82, 137, 2241, 45, 152, 124,
	77, 130, 119, 2240, 2239, 2237, 98, 2236, 104, 72,
	2232, 2229, 68, 2228, 135, 133, 2227, 2226, 84, 2225,
	118, 2224, 2223, 151, 143, 112, 4, 35, 59, 14,
	1572, 1571, 115, 67, 51, 47, 2222, 2139, 2262, 2290,
	28, 94, 64, 39, 95, 53, 74, 139, 23, 2219,
	2211, 121, 2210, 2207, 2205, 2204, 2198, 93, 2197, 2195,
	56, 138, 75, 46, 81, 85, 29, 97, 125, 111,
	145, 100, 2193, 80, 120, 2191, 32, 2189, 2187, 1743,
	117, 2185, 2184, 2183, 1549, 1118, 1016, 259, 2182, 2181,
	729, 270, 2179, 2178, 62, 2177, 109, 103, 2176, 142,
	230, 79, 2175, 108, 36, 86, 2174, 30, 19, 0,
	821, 604, 2173, 123, 71, 2172, 2169, 2168, 2167, 26,
	3, 9, 5, 6, 2, 42, 41, 2166, 2165, 127,
	91, 65, 2162, 149, 2161, 2160, 2159, 33, 2154, 16,
	2152, 10, 2150, 2149, 8, 1, 2135, 2133, 141, 2131,
	88, 2130, 1943, 2127, 146, 2126, 2123, 1732, 55, 99,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 5, 5, 5, 5, 5, 5,
	7, 7, 8, 8, 6, 6, 6, 6, 6, 9,
	9, 10, 16, 13, 18, 12, 12, 15, 15, 113,
	113, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 110, 110, 115, 115,
	115, 117, 117, 114, 114, 109, 109, 20, 20, 58,
	58, 100, 53, 53, 53, 287, 287, 288, 288, 96,
	96, 97, 97, 97, 97, 98, 98, 99, 99, 99,
	26, 26, 26, 22, 22, 22, 22, 22, 23, 23,
	24, 24, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	36, 36, 37, 37, 37, 37, 37, 37, 38, 38,
	38, 38, 38, 38, 38, 38, 38, 38, 38, 43,
	43, 43, 41, 41, 41, 40, 40, 40, 39, 39,
	39, 42, 42, 42, 162, 162, 161, 161, 164, 164,
	44, 44, 44, 44, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 48, 48, 48, 48, 48, 48,
	48, 48, 255, 255, 254, 46, 46, 229, 229, 49,
	49, 187, 187, 50, 50, 50, 50, 50, 51, 51,
	59, 59, 328, 328, 328, 332, 332, 333, 333, 334,
	334, 334, 334, 334, 334, 334, 330, 330, 56, 56,
	56, 95, 95, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 65, 65, 67, 64, 64, 64, 66, 66,
	66, 66, 68, 68, 68, 68, 69, 69, 69, 69,
	69, 70, 70, 142, 142, 280, 279, 279, 285, 285,
	285, 140, 140, 140, 140, 140, 141, 141, 141, 278,
	278, 278, 278, 286, 286, 286, 286, 286, 286, 284,
	284, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 83, 83, 83,
	90, 90, 90, 90, 90, 90, 90, 72, 72, 77,
	77, 77, 77, 77, 73, 73, 78, 78, 79, 79,
	80, 80, 80, 80, 80, 80, 74, 74, 74, 74,
	82, 82, 82, 82, 81, 81, 87, 87, 87, 87,
	87, 87, 84, 84, 84, 84, 85, 85, 85, 88,
	88, 88, 88, 75, 75, 76, 76, 89, 89, 86,
	86, 86, 45, 329, 329, 331, 331, 54, 54, 30,
	30, 31, 31, 143, 143, 144, 144, 208, 208, 208,
	208, 145, 145, 116, 116, 116, 207, 297, 297, 298,
	298, 298, 298, 298, 298, 299, 299, 299, 299, 299,
	299, 299, 295, 295, 296, 293, 293, 294, 294, 294,
	294, 335, 335, 206, 206, 148, 148, 302, 302, 302,
	302, 300, 300, 300, 300, 300, 303, 301, 304, 304,
	304, 304, 304, 241, 241, 241, 92, 92, 32, 32,
	122, 122, 33, 33, 29, 29, 29, 191, 191, 152,
	152, 246, 246, 246, 133, 133, 111, 111, 111, 14,
	11, 11, 11, 11, 11, 11, 19, 19, 17, 17,
	192, 192, 193, 193, 55, 55, 57, 57, 62, 62,
	91, 91, 91, 91, 91, 91, 21, 21, 21, 21,
	25, 25, 25, 25, 61, 61, 337, 337, 129, 129,
	129, 129, 130, 130, 203, 203, 204, 204, 205, 205,
	205, 124, 123, 125, 125, 28, 28, 28, 34, 34,
	35, 35, 118, 118, 119, 119, 120, 120, 121, 121,
	338, 338, 52, 52, 52, 94, 94, 136, 136, 200,
	200, 200, 202, 202, 201, 201, 201, 177, 177, 177,
	93, 93, 157, 157, 166, 166, 167, 167, 252, 168,
	168, 60, 60, 103, 103, 101, 101, 101, 101, 101,
	101, 102, 102, 102, 104, 104, 104, 104, 104, 104,
	104, 107, 107, 107, 108, 108, 108, 106, 106, 310,
	310, 310, 313, 313, 309, 311, 311, 312, 312, 336,
	336, 178, 178, 178, 147, 146, 146, 150, 150, 149,
	151, 151, 245, 245, 245, 175, 175, 175, 175, 194,
	194, 195, 195, 196, 196, 197, 197, 197, 198, 198,
	199, 199, 174, 174, 225, 225, 105, 105, 105, 156,
	156, 156, 158, 158, 215, 215, 215, 216, 216, 214,
	214, 214, 214, 247, 247, 247, 247, 247, 247, 247,
	247, 326, 326, 326, 327, 327, 244, 244, 248, 248,
	248, 248, 248, 248, 242, 242, 242, 242, 243, 243,
	253, 253, 181, 181, 181, 181, 179, 179, 180, 180,
	249, 249, 249, 249, 176, 176, 250, 250, 250, 209,
	209, 256, 256, 256, 274, 274, 155, 155, 155, 257,
	257, 257, 257, 257, 257, 257, 257, 257, 257, 257,
	257, 257, 257, 257, 257, 257, 258, 258, 258, 258,
	260, 260, 260, 259, 259, 259, 259, 259, 259, 259,
	259, 259, 259, 259, 259, 259, 259, 259, 259, 259,
	259, 273, 273, 273, 273, 273, 261, 261, 268, 268,
	269, 269, 270, 271, 262, 262, 263, 263, 264, 265,
	272, 272, 272, 272, 276, 276, 266, 266, 266, 266,
	266, 267, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 189, 189, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	219, 219, 219, 219, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 305, 305, 305, 305, 305,
	305, 305, 305, 307, 307, 308, 308, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 314, 314, 315, 315, 317,
	317, 318, 318, 319, 320, 320, 320, 321, 322, 322,
	316, 316, 323, 323, 323, 324, 324, 325, 325, 325,
	325, 325, 231, 231, 231, 232, 232, 233, 239, 239,
	239, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 131, 131, 131,
	131, 131, 163, 163, 228, 228, 226, 226, 226, 230,
	230, 182, 182, 275, 275, 275, 275, 275, 275, 275,
	183, 183, 183, 190, 184, 184, 185, 185, 185, 185,
	185, 185, 222, 223, 186, 186, 186, 224, 224, 234,
	238, 238, 237, 236, 236, 235, 235, 212, 212, 213,
	213, 211, 210, 171, 171, 170, 170, 169, 169, 339,
	339, 240, 240, 172, 172, 173, 165, 165, 251, 251,
	251, 251, 159, 159, 138, 138, 160, 160, 134, 134,
	137, 137, 135, 135, 135, 135, 153, 153, 154, 154,
	132, 132, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 277, 277, 277, 227, 126, 126, 126,
	127, 127, 128, 128, 282, 282, 282, 283, 283, 283,
	283, 281, 281, 281, 281, 281, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 3, 1, 1, 1, 1, 3, 4,
	6, 6, 6, 5, 5, 4, 12, 4, 12, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 3, 3, 3, 6, 4, 3, 2, 1, 1,
	0, 2, 0, 2, 0, 2, 0, 7, 2, 6,
	2, 1, 12, 12, 2, 1, 1, 1, 3, 3,
	0, 3, 1, 3, 1, 1, 3, 2, 5, 0,
	4, 6, 7, 1, 2, 1, 2, 2, 3, 3,
	3, 3, 1, 2, 1, 2, 1, 2, 1, 2,
	3, 1, 2, 1, 2, 1, 2, 1, 2, 2,
	6, 3, 2, 2, 2, 2, 2, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 2, 4,
	6, 3, 4, 6, 3, 4, 6, 3, 3, 5,
	3, 3, 5, 3, 1, 3, 1, 2, 2, 3,
	2, 2, 5, 3, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 1, 1, 3, 1, 5, 2, 3, 0, 3,
	2, 3, 0, 2, 3, 2, 3, 2, 6, 2,
	6, 2, 1, 2, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 2, 3,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 3, 4, 3, 5, 3, 2, 6, 3, 3,
	4, 4, 3, 3, 3, 3, 1, 3, 3, 1,
	1, 2, 2, 1, 0, 1, 1, 3, 1, 1,
	1, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 2, 2, 3, 3,
	1, 1, 1, 1, 1, 2, 2, 3, 3, 4,
	4, 3, 4, 4, 4, 3, 2, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	2, 3, 3, 3, 2, 3, 4, 3, 5, 3,
	4, 5, 2, 3, 3, 3, 4, 2, 3, 4,
	3, 3, 3, 4, 4, 4, 4, 2, 3, 5,
	5, 6, 2, 2, 0, 2, 0, 3, 2, 7,
	10, 6, 9, 1, 0, 1, 3, 1, 1, 1,
	1, 8, 0, 1, 1, 0, 3, 2, 0, 3,
	1, 2, 2, 3, 6, 2, 1, 1, 2, 4,
	2, 5, 7, 8, 5, 3, 1, 4, 6, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 2, 4, 3,
	3, 0, 6, 3, 11, 14, 4, 1, 0, 1,
	3, 3, 3, 5, 2, 0, 1, 1, 0, 6,
	6, 8, 8, 10, 8, 10, 6, 8, 6, 8,
	1, 0, 2, 0, 2, 2, 3, 2, 2, 2,
	1, 2, 1, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 2, 2, 2, 2, 1, 0, 1, 3,
	2, 0, 2, 1, 1, 0, 1, 3, 1, 1,
	1, 2, 3, 2, 2, 8, 11, 3, 2, 3,
	2, 3, 3, 0, 3, 0, 3, 0, 3, 0,
	1, 0, 6, 7, 3, 6, 3, 1, 3, 1,
	4, 2, 8, 5, 4, 3, 0, 2, 2, 0,
	8, 3, 2, 0, 1, 3, 1, 1, 3, 5,
	5, 1, 1, 3, 3, 1, 2, 3, 2, 3,
	4, 2, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 8, 8, 2, 4, 4, 4, 2, 2, 2,
	2, 3, 1, 3, 6, 1, 0, 1, 0, 1,
	0, 1, 1, 0, 1, 1, 0, 1, 0, 3,
	1, 3, 2, 4, 5, 2, 2, 1, 1, 2,
	5, 2, 3, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 3, 0, 2, 0, 2, 2, 3, 3,
	2, 0, 1, 3, 3, 5, 1, 1, 3, 2,
	4, 4, 0, 8, 4, 6, 3, 3, 1, 5,
	5, 0, 2, 3, 1, 3, 2, 0, 3, 4,
	5, 4, 5, 4, 5, 2, 4, 1, 1, 0,
	5, 0, 2, 2, 2, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	0, 2, 5, 2, 1, 1, 2, 3, 0, 1,
	1, 1, 1, 2, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 5, 2, 1, 1, 1, 1, 4, 1,
	2, 2, 1, 1, 1, 0, 1, 1, 4, 1,
	4, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 4, 1, 3,
	3, 3, 5, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 3,
	4, 3, 4, 4, 5, 3, 3, 3, 3, 3,
	4, 3, 4, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	4, 1, 3, 3, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 5, 6, 6, 7,
	1, 2, 1, 2, 1, 1, 2, 1, 3, 1,
	1, 2, 2, 1, 1, 3, 5, 6, 8, 6,
	6, 4, 3, 4, 1, 1, 1, 5, 1, 3,
	3, 1, 3, 3, 1, 3, 3, 1, 1, 1,
	1, 6, 6, 4, 3, 4, 3, 4, 3, 4,
	4, 3, 6, 5, 5, 5, 4, 8, 6, 6,
	4, 4, 3, 4, 3, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 2, 2, 0, 1, 4, 2, 2, 2,
	2, 2, 4, 3, 5, 4, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 3, 1, 3, 3, 3, 2, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 1, 2, 3, 0, 3, 3, 2, 2,
	1, 0, 2, 2, 3, 2, 1, 1, 3, 5,
	1, 2, 4, 2, 0, 1, 0, 3, 5, 1,
	0, 2, 2, 1, 1, 1, 2, 1, 2, 1,
	0, 1, 1, 1, 3, 3, 1, 3, 3, 2,
	1, 1, 1, 3, 1, 3, 1, 3, 1, 2,
	3, 1, 1, 1, 2, 2, 1, 3, 3, 0,
	1, 2, 1, 1, 1, 1, 6, 2, 1, 5,
	1, 1, 1, 1, 2, 2, 3, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -20, -22, -26, -27, -50,
	-36, -37, -38, -49, -44, -51, -45, -52, -53, -54,
	-46, -58, -57, -59, -62, -60, -55, -56, -63, -71,
	-91, -92, -93, -94, -5, -6, -7, -8, 23, 34,
	-23, -24, 47, 67, -28, -29, -30, -31, 69, -32,
	-33, -34, -35, 90, -312, 94, -39, -40, -41, -43,
	-42, 98, 105, 107, 126, 132, 135, 215, 221, 242,
	244, 246, 253, -101, -103, 240, 241, -64, -65, -66,
	-67, -95, 264, -72, -73, -74, -75, -76, -77, -78,
	-79, -80, -81, -82, -83, -84, -85, -86, -87, -88,
	-89, 267, -21, -25, -61, 305, -9, -10, -13, -12,
	-11, -16, -18, -15, -17, -19, -14, -310, -104, -102,
	356, 314, 35, 276, 61, 101, 248, 330, 337, -107,
	-105, -106, -108, 257, 322, 286, 360, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 2, 286, 325, 83, 142, -328, 2, -160, 286,
	83, -135, -126, 349, 4, -289, -291, 20, 21, 23,
	33, 34, 35, 40, 44, 47, 48, 55, 60, 61,
	62, 64, 66, 67, 68, 71, 72, 73, 81, 82,
	84, 86, 90, 92, 94, 97, 98, 100, 105, 106,
	107, 113, 114, 119, 121, 125, 127, 132, 133, 134,
	135, 136, 143, 146, 148, 141, 158, 159, 160, 162,
	163, 164, 167, 166, 171, 174, 177, 179, 180, 181,
	184, 182, 186, 187, 189, 188, 194, 196, 197, 199,
	202, 205, 208, 211, 212, 213, 214, 215, 217, 219,
	221, 223, 224, 225, 226, 227, 228, 230, 231, 233,
	234, 235, 236, 237, 240, 238, 239, 241, 242, 243,
	244, 246, 248, 249, 251, 265, 266, 277, 253, 254,
	255, 256, 260, 258, 261, 262, 264, 267, 269, 272,
	275, 276, 278, 281, 282, 279, 274, 285, 287, 288,
	289, 290, 291, 292, 293, 300, 301, 305, 306, 307,
	308, 311, 312, 313, 314, 316, 319, 320, 321, 326,
	331, 332, 333, 334, 335, 28, 36, 37, 38, 39,
	41, 42, 45, 46, 51, 52, 53, 56, 85, 87,
	88, 104, 108, 109, 115, 116, 117, 128, 130, 137,
	138, 147, 149, 150, 151, 152, 153, 155, 169, 183,
	193, 195, 206, 210, 218, 220, 229, 250, 259, 270,
	271, 280, 283, 295, 296, 297, 302, 303, 318, 322,
	323, 359, 359, 2, 159, 226, -134, -126, 83, 359,
	359, 359, 359, 286, 2, 315, 325, -191, 83, 125,
	224, 310, 359, 359, 359, 359, -126, 221, 22, 2,
	92, 146, 313, 312, 22, 217, 258, 288, 290, 2,
	359, 359, 359, 359, 359, 2, 325, 286, 142, 83,
	315, -126, 2, -48, 2, 356, -47, -4, -27, -38,
	-49, -44, -45, -60, -71, -36, -52, -93, -94, -332,
	2, 22, -333, -334, 69, 98, 126, 257, 146, 92,
	312, -281, 4, -289, -291, -290, -292, 58, 70, 124,
	145, 139, 157, 161, 170, 172, 185, 207, 209, 247,
	268, 22, 24, 25, 26, 27, 29, 30, 31, 32,
	43, 49, 50, 54, 57, 59, 65, 69, 74, 75,
	77, 76, 78, 79, 80, 89, 91, 93, 95, 96,
	99, 101, 103, 110, 111, 112, 120, 122, 123, 126,
	129, 131, 140, 142, 144, 154, 156, 165, 168, 173,
	175, 176, 190, 191, 192, 198, 200, 201, 203, 204,
	216, 222, 232, 245, 257, 263, 273, 284, 286, 294,
	298, 299, 304, 309, 310, 315, 317, 324, 325, 327,
	328, 329, 330, 286, 2, 159, 2, -126, 2, -328,
	2, 159, 2, -332, 2, -126, 2, -130, 2, 253,
	-126, -90, 261, 2, 4, 22, 83, 184, 263, 295,
	359, 359, 359, 174, 55, 250, 261, -69, 301, -68,
	295, -280, -70, 2, -161, 184, -126, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 2, -90, 261, 34, 55, 22,
	60, 84, 127, 142, 143, 163, 65, 66, 225, 174,
	160, 300, 164, 262, 287, 301, 69, 316, 291, 106,
	359, 359, 359, -336, 2, 286, -102, -104, -103, -149,
	-150, 309, 154, 103, 204, -101, -103, 2, -310, -285,
	2, -278, -241, 9, 304, 110, 200, -284, 8, 348,
	-277, -283, 5, 7, 347, 4, -289, -291, -290, -337,
	2, 301, 301, 2, -337, 2, -337, 2, -129, 2,
	301, 298, -313, 230, -309, -126, -313, 359, 359, 361,
	359, -146, -147, 2, 22, 95, -173, 2, 356, -247,
	2, 354, -249, -134, -103, -248, 356, 201, -3, 2,
	-249, 137, -134, 2, -249, 137, -134, 2, -126, 2,
	-137, 137, -134, 298, 361, -160, -153, -126, -211, -210,
	358, -217, 2, -219, 347, 348, 342, 190, 336, -231,
	-221, -234, 104, 250, 356, -134, -220, 362, 9, -307,
	-103, 29, -232, -233, 49, -126, 7, 8, 5, 6,
	-132, -258, -227, -267, 304, 110, 192, -305, -306, 4,
	-289, -282, -259, -269, -263, -266, 155, 58, 75, 76,
	79, 77, 80, 263, 315, 50, 28, 108, 109, 210,
	218, 283, 302, 303, 137, 193, 138, 56, 128, 169,
	97, 37, 39, 41, 42, 51, 52, 85, 87, 88,
	115, 116, 117, 147, 149, 150, 151, 152, 153, 195,
	229, 270, 280, 296, 297, 323, -290, -270, -271, -264,
	-265, -272, -217, 2, 123, 356, -170, -171, -210, -211,
	2, -161, 137, -126, 2, -161, 2, 142, -126, 137,
	2, 2, 2, -126, 22, 123, 2, 156, 2, 156,
	2, -250, 2, -249, -162, 137, 2, -161, -162, 137,
	2, -138, 137, 2, -137, -126, 137, 2, -153, 137,
	2, -187, 356, -255, 2, -254, -283, 322, 359, 359,
	359, 359, 359, 200, 361, -161, -217, -229, 356, 123,
	-217, 200, -126, -90, 335, 2, 2, 265, 2, 356,
	-69, 53, 301, -204, 2, -205, -123, -124, -125, 158,
	223, 228, 335, 298, 341, 123, -285, -142, 89, -164,
	358, -90, 2, -287, 2, -284, 9, 265, 2, 225,
	262, 55, 123, 2, 2, -329, 2, 200, 123, 2,
	123, 2, 123, 2, 123, 2, 123, 2, 2, 225,
	262, 2, 120, 2, 300, 2, 2, 123, 2, 158,
	223, 277, 2, 286, 325, 2, 123, 123, -176, -249,
	-149, -150, -175, -194, -195, 173, 112, 198, -178, 22,
	95, -178, -178, 44, 357, 357, 8, 7, 7, -203,
	-204, -203, 298, -130, 361, -313, -154, 356, -173, -165,
	-251, -217, 349, -165, -172, -240, -217, 89, 70, -181,
	161, 185, 124, 170, 247, 145, 7, -48, -214, 362,
	356, 349, -244, 337, -103, -248, 356, -247, -134, 356,
	-113, 238, -112, 21, 23, 98, 320, 104, 274, 292,
	254, 238, 104, 238, 274, 292, 254, 238, 104, 362,
	-287, -135, 361, -281, 349, 10, 11, 57, 33, 347,
	348, 349, 350, 118, 351, 352, 345, 346, 344, 339,
	340, 341, 63, 178, 252, 13, 14, 15, 26, 203,
	172, 336, 139, 268, 342, 16, 17, 18, 157, 36,
	140, -131, -139, -217, -217, -217, -217, -217, 209, -169,
	-212, 354, -103, 356, 356, -103, -217, -163, 356, 7,
	-103, -226, 354, -235, -217, -170, 356, 5, 356, 5,
	-314, 331, 120, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 220, -276, 326, -276, -276, -260, 356, -260, -261,
	356, -260, 332, 337, 356, 278, 357, -159, -134, -171,
	356, -148, 190, -122, -311, 330, -148, 356, -127, 137,
	2, -126, -311, 190, -250, -136, -134, -136, 264, -126,
	30, -115, 361, 48, 243, 104, -115, 104, -115, 361,
	104, 104, 104, -163, -217, 357, 361, -328, -334, 69,
	356, 30, -228, -256, -257, -259, -268, -262, -266, -267,
	40, 46, 45, 293, 183, 259, 271, 318, 38, 199,
	148, 147, 149, 150, 151, 152, 153, 270, 37, 229,
	116, 117, 115, 97, 88, 87, 195, 42, 41, -270,
	-271, -264, -265, 85, 296, 297, 155, 39, 52, 51,
	323, 280, -288, -287, -328, -68, -280, -163, 30, -204,
	2, 361, 171, -141, 177, 189, 133, 201, 333, -286,
	5, 4, -227, -241, 89, 174, -267, -279, 89, -285,
	-279, 89, 73, 358, -281, -161, 22, 266, 2, -280,
	-331, 120, -328, -280, -280, -280, -280, -280, 261, -48,
	120, -126, 171, -280, 2, -280, 2, 286, 142, 286,
	-115, 361, -175, -195, -194, -196, -217, 22, -199, 114,
	186, -217, -219, -102, -102, -102, -151, -245, -217, 222,
	142, -130, -309, 30, -153, -156, 361, 123, 30, 4,
	-156, 361, 357, 161, 161, -247, -181, 161, -179, 207,
	-179, -179, -326, 356, 355, -244, -281, 354, 363, -163,
	2, -243, -242, 30, -126, 205, 357, -134, 361, 298,
	-192, 65, 59, -207, 137, 59, -293, -126, 65, -294,
	54, 310, 222, 122, -192, 65, -192, 65, 65, -249,
	33, -60, 123, 298, -249, 298, 33, -60, 123, 298,
	-137, -281, -253, 338, -126, -274, -256, -273, 234, 235,
	233, 237, 236, -256, -281, 295, -217, -217, -217, -217,
	-217, -217, -217, -217, -217, -217, -217, -217, -217, -217,
	-217, -217, -217, -217, -217, -217, -217, -217, 172, 139,
	268, 36, 140, -217, 298, -217, -217, -217, -217, 182,
	190, 192, 304, 110, 311, 95, 196, -339, 284, 32,
	-224, -103, 356, -239, 27, 273, 22, -231, 250, 356,
	-212, -217, -213, -163, 357, 357, 361, -163, -230, 355,
	-226, -238, -237, 327, 357, -163, 324, 22, 95, 349,
	2, 7, -188, 334, 181, 86, 134, 180, -189, 256,
	-315, 113, 129, 356, 357, 2, 357, 2, 357, 2,
	-217, -217, -182, 2, -275, -163, 4, 334, 181, 86,
	134, 180, 256, -182, 2, -183, 2, -217, -163, -184,
	-218, -219, 347, 348, 342, 356, 250, -185, 2, -217,
	-163, -217, 43, 168, 299, -186, -217, 123, -163, -217,
	-217, -217, -163, -163, 2, -163, 2, 356, 7, 7,
	295, 295, 7, 123, 357, 361, -143, -153, -144, -126,
	-208, -207, -295, -296, -293, 142, 310, 111, 30, 104,
	214, 30, 200, 190, -118, 289, 104, -209, 328, -200,
	-60, 356, 89, 30, -200, -166, -167, -252, -168, -134,
	356, -126, -161, -162, -162, -137, -138, -126, -153, 357,
	361, -48, -254, 298, 317, -144, -47, 357, 361, -155,
	29, 354, -188, 356, -253, 361, 123, 357, 301, -205,
	-140, 228, 272, 239, 260, 361, -281, -330, -126, 261,
	-48, -134, -137, -134, -249, -197, -277, 356, 348, -198,
	250, 251, 361, -111, 31, 93, 162, -134, 356, 357,
	-209, -251, -158, 2, -247, -281, -209, -240, -247, -247,
	-180, 317, 200, 161, -247, -242, 357, -327, 7, -244,
	-243, 7, -216, -215, 121, 188, 357, -126, 356, -244,
	357, -112, -134, -126, -126, 190, -207, 137, -117, 190,
	-256, -126, 356, 356, 162, 162, -126, -126, 137, -126,
	137, -126, -126, -113, 238, -60, 356, -134, 238, -126,
	-60, 356, -126, 238, -96, 136, 196, 335, -217, -217,
	298, -339, 284, -224, -217, 182, 192, 304, 110, 311,
	95, 196, 123, 356, -218, -218, -163, -221, 356, -163,
	355, 365, 357, -217, 355, 355, 361, -236, -237, 99,
	-217, -150, 361, -149, -217, -163, -163, 357, 357, 298,
	298, 298, 298, 356, -320, 208, 356, 356, -217, 30,
	361, 357, 123, 357, 357, -190, 216, 357, 10, 11,
	347, 348, 349, 350, 118, 351, 352, 345, 346, 344,
	339, 340, 341, 63, 178, 252, 13, 14, 15, 157,
	140, -218, -218, -218, -163, 356, 357, -222, -223, 123,
	120, 30, -186, -186, -186, 357, 123, -163, 361, 361,
	361, 357, 357, 357, 7, 357, 361, 357, 335, 335,
	357, 278, 123, -134, 357, 357, 361, -127, 142, -127,
	-60, -161, 5, -60, -134, 104, -119, 100, -338, 341,
	-126, -177, 245, -217, -177, -202, 200, -159, 322, -126,
	-177, -157, 361, 123, 341, -159, -115, -115, -115, -217,
	-330, -287, 357, -256, 354, 355, 7, 7, -99, 330,
	-287, -330, -123, 308, 62, 228, -285, 361, -253, -198,
	-217, -245, -134, 362, -47, -174, 129, -253, 361, -174,
	-180, 356, -217, -247, 355, 357, 361, -243, 355, 361,
	364, 341, -244, 356, -153, -242, 298, 298, 104, 190,
	319, -297, -294, -217, -152, -246, -126, -308, 356, -305,
	-306, -132, 356, 356, -110, 98, 264, -193, 104, -115,
	104, -115, 298, -192, 65, -163, 298, -163, 298, -99,
	123, 285, -217, -217, -218, -218, 123, 356, -217, -228,
	26, 26, 357, -163, 357, 361, -213, -217, 357, -226,
	101, -217, 294, 357, 324, -150, -150, -150, 5, 181,
	134, 180, -189, 180, -189, -189, 7, -321, -126, 356,
	328, -149, 357, -274, -256, -217, -222, -217, -274, -256,
	-218, -218, -218, -218, -218, -218, -218, -218, -218, -218,
	-218, -218, -218, -218, -218, -218, -218, -218, -218, 95,
	190, 196, -218, 361, -163, 357, -223, -222, -217, -217,
	-256, 357, 357, 357, -163, -217, -217, -217, 357, 7,
	278, -145, 141, -208, 356, -127, 356, 356, -148, 356,
	-126, -120, 167, -338, -284, -311, -165, 191, -177, 64,
	357, -209, -167, -158, -240, 357, -100, 71, -100, 7,
	355, 357, -98, 202, -97, -126, 5, -126, 201, 357,
	-111, -281, 357, -225, 131, 44, -247, -225, -153, -214,
	7, -215, -281, 354, -243, -153, 357, -126, -126, -207,
	104, -298, 65, -299, 57, 111, 69, 190, 192, 310,
	222, 54, 89, 232, 357, 357, 361, -133, -170, 57,
	-133, -217, 356, -152, -153, 190, 89, 190, 89, 82,
	306, -126, -126, -134, -126, -126, 357, -134, 357, -126,
	-288, 295, 26, 26, -217, -228, 357, -217, -217, 357,
	-217, 355, -217, 5, -217, 357, 357, 357, 357, -322,
	-126, -217, 357, 357, 357, -223, 123, 95, 196, 356,
	-217, 357, 357, 361, 357, 357, 357, 140, -152, 356,
	-153, -143, 30, -152, 200, -121, 166, -338, -284, -118,
	-201, 356, 200, -60, -177, 341, 82, 82, 355, 361,
	356, 341, 341, -111, -317, 329, -217, -163, -317, 357,
	-244, 7, 357, -207, -126, -281, -126, 111, 137, 192,
	162, 356, -218, -134, -206, -335, 68, 282, -246, -111,
	-281, -111, 357, -163, 357, 357, 192, 192, -217, -256,
	-115, -115, 298, 298, 298, 298, -220, -132, -126, -217,
	-217, 357, 357, -150, -316, 213, 357, -218, 123, 356,
	-228, 357, -217, 211, 357, -152, 357, 357, -60, 357,
	-134, -338, -284, -119, 96, -153, 65, -173, -103, 356,
	356, 356, -97, -98, -287, -287, -318, -319, -126, -243,
	355, -299, -127, 190, -217, -128, 356, -145, 356, -133,
	-150, 232, -114, 57, -126, -126, 356, 356, 356, 357,
	-150, 44, -218, -228, 357, 357, -134, -206, 357, -145,
	-206, 356, -284, -120, 312, 191, 357, -126, -288, -288,
	357, 361, 30, 104, 357, -302, 179, -126, -153, -111,
	357, -134, -109, 317, -281, -163, -163, -163, -323, 227,
	251, -163, 357, 356, -145, -206, -145, -152, -121, 264,
	-209, 357, 357, -319, -321, 111, -300, -303, -301, 200,
	124, 212, 269, 357, 357, -148, -217, 357, 357, -150,
	357, -324, -325, 36, 307, 73, -217, -324, -153, -145,
	357, -166, -99, -99, -126, -301, 200, -303, 200, 312,
	92, -302, 357, -325, 219, 119, 250, 219, 119, 357,
	-206, -209, -304, 187, 243, 48, 264, -304, -300, 26,
	-116, 48, 243, -145, 20, 192, 89, -325,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 7, 8, 9, 10,
	12, 14, 16, 17, 19, 21, 23, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 41, 43, 45, 46,
	47, 48, 50, 52, 55, 57, 59, 61, 0, 0,
	143, 145, 0, 0, 152, 154, 156, 158, -2, 161,
	163, 165, 167, 0, 0, 0, 178, 180, 182, 184,
	186, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 631, -2, 0, 0, 273, 275, 277,
	279, 280, 0, 331, 333, 335, 337, 339, 341, 343,
	345, 347, 349, 351, 353, 355, 357, 359, 360, 362,
	364, 0, 550, 552, 554, -2, 64, 65, 66, 67,
	68, 74, 75, 76, 77, 70, 72, 667, -2, 678,
	0, 0, -2, 0, -2, -2, -2, 0, 0, 644,
	646, 648, 650, -2, 0, 0, -2, 6, 11, 13,
	15, 18, 20, 22, 25, 27, 29, 31, 33, 35,
	37, 39, 42, 44, 49, 51, 53, 56, 58, 60,
	62, 63, 0, 0, 0, 0, 0, 118, 252, 0,
	1229, 1156, 1162, 1163, 1187, 1188, 1189, 1206, 1207, 1208,
	1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218,
	1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228,
	1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239,
	1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249,
	1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259,
	1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269,
	1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279,
	1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289,
	1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299,
	1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309,
	1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319,
	1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329,
	1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339,
	1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349,
	1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359,
	1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369,
	1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379,
	1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389,
	1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399,
	1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409,
	1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419,
	1420, 144, 146, 147, 0, 0, 0, 1158, 1229, 153,
	155, 157, 159, 0, 169, 0, 0, 0, 0, -2,
	-2, 517, 162, 164, 166, 168, 243, 1290, 245, 247,
	0, 0, 0, 0, 172, 173, 174, 175, 176, 177,
	179, 181, 183, 185, 187, 188, 0, 0, 0, 0,
	0, 242, 240, 210, 211, 0, 224, 225, 226, 227,
	228, 230, 231, 214, 215, 216, 218, 220, 222, 0,
	249, 255, 256, 257, 259, 260, 261, 262, 263, 264,
	265, 432, 1201, 1202, 1203, 1204, 1205, 1421, 1422, 1423,
	1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433,
	1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443,
	1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453,
	1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463,
	1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473,
	1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483,
	1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493,
	1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503,
	1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513,
	1514, 1515, 1516, 0, 124, 0, 438, 238, 236, 0,
	120, 0, 547, 0, 251, 548, 549, 544, 545, 1318,
	573, 268, 0, 270, 370, 371, 372, 373, 374, 0,
	274, 276, 278, -2, -2, 1407, -2, 286, -2, 296,
	1413, 0, 299, 300, 305, -2, 206, 332, 334, 336,
	338, 340, 342, 344, 346, 348, 350, 352, 354, 356,
	358, 361, 363, 365, 366, 367, 0, 0, 0, 371,
	0, -2, -2, 0, 0, 0, 0, 0, -2, 0,
	-2, 0, 0, -2, -2, 0, 0, -2, 0, 0,
	551, 553, 555, 0, 507, 669, -2, 642, 643, -2,
	0, 673, 673, 673, 0, 0, 643, 641, 0, 271,
	272, 308, 309, 310, 319, 320, 321, 322, 503, 0,
	505, 329, 330, 1183, 0, 1197, 1198, 1199, 1200, 575,
	557, 566, 575, 559, 560, 561, 562, 563, 564, 565,
	568, 0, 659, 1297, 662, 1169, 660, 645, 647, 0,
	649, 0, 0, 653, 675, 674, 706, 707, 0, 657,
	658, 668, 722, 760, 737, 728, 0, 0, 2, 69,
	0, 1389, 760, 71, 0, 1389, 760, 73, 0, 78,
	0, 1389, 1161, 0, 0, 253, 254, 1166, 1164, 1165,
	0, 148, 149, 868, 0, 0, 0, 0, 0, 0,
	960, 962, 1381, 1407, 0, 964, 965, 0, 967, 969,
	970, 0, 973, 974, 1126, 1158, 1172, 1173, 1174, 1175,
	0, 0, 1178, 0, 1180, 1181, 1182, 1026, 984, -2,
	-2, 1170, 796, 797, 798, 799, -2, 1421, 988, 991,
	994, 997, 998, 999, 1000, 0, 1365, 1382, 1383, 1403,
	1404, 1412, 1416, 1417, 1389, 1400, 1390, 1377, 1387, 1398,
	1235, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1196, 830, 831, 836,
	837, 839, 150, 151, 0, 0, 1159, 1135, 1133, 1134,
	160, 486, 1389, -2, 509, 486, 513, -2, 666, 1389,
	587, 589, 591, 244, 246, 0, 171, 0, 604, 0,
	606, 0, 621, 766, 110, 1389, 191, 204, 110, 1389,
	194, 110, 1389, 197, 1154, 198, 1389, 200, 201, 1389,
	203, 239, 0, 0, -2, 232, 234, -2, 229, 217,
	219, 221, 223, 0, 0, 0, 437, 0, 0, 0,
	546, 0, 572, 269, 375, 376, 281, 0, 283, 0,
	285, 1376, -2, 288, 289, 576, 578, 579, 580, 0,
	0, 0, 0, 0, 0, 0, 301, 302, 303, 207,
	0, 368, 369, 377, 378, 125, 126, 0, 381, 402,
	414, 0, 0, 385, 387, 436, 389, 0, 0, 391,
	0, 393, 0, 395, 0, 397, 0, 399, 401, 403,
	415, 405, 668, 407, 0, 409, 413, 0, 418, 0,
	420, 421, 422, 0, 0, 428, 0, 0, 110, 764,
	-2, 0, 637, 687, 688, 0, 0, 0, 0, 671,
	672, 0, 0, 0, 633, 634, 504, 1185, 1184, 556,
	574, 558, 0, 570, 0, 661, 0, 0, 708, 711,
	1146, 1150, 1151, 711, 0, 1143, 1141, 1142, 0, 0,
	0, 0, 757, 757, 757, 755, 731, 0, 737, 0,
	0, 761, 749, 0, -2, 728, 0, 0, 762, 0,
	79, 541, 89, 0, 541, 541, 0, 0, 0, 0,
	85, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	751, 1157, 0, 1131, 1132, 0, 0, 0, 0, 1061,
	1062, 1063, 1064, 1065, 1066, 1069, 1070, 1067, 1068, 1071,
	1072, 1073, 0, 0, 0, 1074, 1075, 1076, 0, 0,
	1078, 0, 1080, 0, 0, 0, 0, 0, 0, 1140,
	0, 0, 1077, 873, 874, 875, 897, 898, 0, 961,
	1137, 1130, 963, 0, 0, -2, 1082, 0, 0, 966,
	971, 972, 0, 0, 1125, -2, 0, 1177, 0, 865,
	1028, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1105, -2, 0, 0, 0, 0, 0, 0, 0,
	0, 815, 833, 844, 841, 840, 817, 0, 816, 814,
	0, 818, 0, 0, 0, 140, 0, 0, 1152, 1136,
	444, 0, 0, 508, 0, 665, 0, 0, 0, 1389,
	516, 1190, 593, 0, 770, 0, 607, 0, 0, 767,
	0, 189, 0, 108, 109, 0, 192, 0, 195, 0,
	0, 0, 0, 0, 1082, 668, 0, 0, 258, 0,
	0, 668, 0, 1084, 778, 779, 780, 781, 782, 865,
	785, 786, 787, 788, 789, 790, 791, 792, 793, 794,
	795, 803, 804, 805, 806, 807, 808, 809, 810, 811,
	812, 813, 827, 0, 802, 802, 802, 819, 820, 828,
	829, 834, 835, 846, 847, 849, 851, 845, 845, 845,
	842, 843, 751, 127, 0, 282, 0, 0, 0, 290,
	291, 0, 0, 581, 316, 317, 318, 583, 584, 297,
	323, 324, 325, 326, 327, 328, 0, 292, 294, 306,
	293, 295, 298, 0, 208, 379, 380, 382, 383, 384,
	388, 0, 433, 390, 392, 394, 396, 398, 406, 410,
	668, 416, 419, 423, 424, 425, 426, 0, 0, 0,
	506, 0, 640, 685, 686, 689, 693, 694, 697, 700,
	701, 691, 868, 654, 655, 656, 679, 680, 528, 0,
	0, 569, 663, 0, 0, 770, 0, 0, 0, 1149,
	770, 0, 1145, 0, 0, 0, 0, 0, 752, 756,
	753, 754, 0, 0, 737, 749, 719, 0, 0, 0,
	726, 727, 748, 0, 747, 736, -2, 0, 0, 0,
	0, 0, 540, 91, 1389, 0, 112, 0, 0, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 0, 0, 0, 0, 0, 84, 0, 0,
	0, 1160, 130, 0, 1167, 869, 774, 775, 821, 822,
	823, 824, 825, 870, 871, 0, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, -2, -2, -2, 889,
	890, 891, -2, -2, -2, 895, 896, -2, 1079, 1081,
	0, 1140, 0, -2, 0, -2, -2, -2, -2, 909,
	0, 911, 914, 916, 918, 0, 0, 0, 0, 1139,
	928, 1117, 0, 0, 1058, 1059, 1060, 913, 0, 0,
	1138, 1129, 0, 0, -2, 968, 0, 0, 0, 1088,
	1089, 1124, 1120, 0, 975, 678, 0, 0, 0, 0,
	982, 0, 1186, 852, 853, 854, 855, 856, 857, 866,
	1036, 0, 0, 0, 989, 990, 992, 993, 995, 996,
	0, 0, 0, 1004, 0, 1092, -2, -2, -2, -2,
	-2, -2, -2, 0, 1006, 0, 1008, 1082, 1102, 0,
	0, 931, 0, 0, 0, 0, 1407, 0, 1011, 1082,
	1110, 0, 0, 0, 0, 0, 1082, 0, 1116, 0,
	0, 0, 0, 0, 1022, 0, 1024, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 443, 1166,
	445, 447, 448, 449, 450, 1191, 0, 1191, 0, 0,
	0, 0, 0, 0, 595, 601, 0, 619, 0, 619,
	609, 0, 0, 0, 619, 623, 624, 626, 627, 0,
	0, 768, 205, 110, 110, 1155, 110, 199, 202, 241,
	0, 212, 233, 0, 0, 0, 235, 237, 0, 771,
	773, 0, 783, 0, 139, 0, 0, 284, 0, 577,
	582, 0, 313, 0, 315, 0, 209, 435, 266, 408,
	411, 429, 430, 751, 765, 0, 695, 0, 0, 692,
	698, 699, 0, 682, 526, 527, 0, 0, 668, 1168,
	703, 1147, 751, 710, 712, 1148, 703, 1144, 739, 0,
	741, 0, 0, 0, 743, 0, 732, 0, 734, 749,
	724, 0, 0, 717, 0, 716, 737, 745, 0, 0,
	763, 90, 530, 0, 0, 0, 93, 1389, 101, 0,
	458, 0, 0, 0, 0, 0, 543, 102, 1389, 110,
	1389, 110, 103, 80, 541, 81, 0, 536, 0, 529,
	82, 0, 538, 0, 139, 0, 0, 0, -2, -2,
	0, 0, 0, 929, -2, 910, 912, 915, 917, 919,
	0, 0, 0, 0, 0, 0, 0, 930, 0, 0,
	1127, 1130, -2, 1083, 1086, 1087, 0, 0, 1121, 0,
	0, 0, 0, 677, 678, 678, 678, 981, 0, 0,
	0, 0, 0, 0, 983, 0, 0, 0, 0, 0,
	0, 1003, 0, 1005, 1007, 0, 0, 1009, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 934, 935, 936, 0, 0, 1010, 1108, 1109, 0,
	0, 0, 0, 0, 0, 1016, 0, 1115, 0, 0,
	0, 1020, 1021, 1023, 0, 800, 0, 826, 848, 850,
	838, 141, 0, 1153, 452, 485, 0, 0, 1191, 0,
	441, 486, 510, 512, 0, 0, 597, 601, 0, 600,
	666, 170, 0, 769, 602, 619, 0, 0, 611, 608,
	605, 770, 0, 0, 0, 0, 190, 193, 196, 1083,
	248, 0, 0, 1085, 0, 776, 0, 0, 119, 0,
	128, 250, 287, 311, 312, 314, 307, 0, 431, 0,
	0, 681, 528, 0, 0, 705, 0, 709, 0, 705,
	740, 0, 759, 742, 722, 733, 0, 730, 720, 0,
	721, 0, 749, 0, 0, 729, 0, 0, 0, 0,
	111, 456, 475, 0, 0, 519, 525, 525, 0, 985,
	986, 0, 0, 0, 95, 0, 0, 0, 0, 99,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 0, 872, -2, 0, 0, 0, 0, -2, 0,
	0, 0, 1118, 0, 1053, 0, 0, 1129, -2, 1090,
	1119, 1123, 0, 976, 0, 0, 0, 0, 1179, 858,
	859, 860, 861, 862, 863, 864, 0, 1034, 1035, 1039,
	0, 0, 987, 0, 0, 1091, 1101, 1103, 932, 933,
	937, 938, 939, 940, 941, 942, 943, 944, 945, 946,
	-2, -2, -2, 950, 951, 952, -2, -2, -2, 0,
	0, 0, 1104, 0, 0, 1056, 1106, 1107, 1112, 1113,
	0, 1013, 1014, 1015, 1114, 0, 0, 0, 832, 0,
	142, 439, 0, 446, 0, 0, 0, 444, 0, 0,
	0, 599, 601, 0, 592, 593, 617, 618, 603, 616,
	0, 619, 625, 622, 628, 0, 0, 121, 0, 0,
	777, 784, 137, 1280, 135, 132, 134, 267, 690, 696,
	683, 528, 664, 1030, 0, 0, 713, 1030, 0, 737,
	735, 718, 714, 0, 725, 0, 746, 532, 534, 92,
	0, 457, 0, 460, 0, 0, 0, 0, 466, 467,
	0, 0, 0, 0, 477, 484, 0, 528, 1171, 0,
	528, 0, 0, 0, 0, 0, 107, 0, 0, 542,
	0, 110, 110, 531, 0, 0, 0, 537, 0, 539,
	129, 0, 0, 0, -2, 0, 922, -2, -2, 1052,
	1083, 1128, 1122, 1176, 678, 977, 979, 980, 867, 1041,
	1038, 0, 1025, 1001, 1002, 1100, 0, 0, 0, 0,
	1083, 1055, 1012, 0, 1018, 1019, 801, 0, 0, 0,
	0, 0, 0, 0, 0, 585, 601, 0, 594, 595,
	0, 0, 0, 610, 620, 0, 0, 0, 772, 0,
	0, 0, 0, 684, 651, 0, 704, 702, 652, 758,
	749, 0, 744, 94, 0, 461, 462, 1191, 0, 465,
	468, 0, 470, 1193, 452, 0, 481, 482, 520, 521,
	524, 522, 525, 678, 479, 0, 96, 97, 106, 114,
	98, 104, 0, 0, 0, 0, 750, 0, 0, -2,
	-2, 923, 1054, 0, 678, 0, 1027, -2, 0, 0,
	0, 1057, 0, 0, 484, 0, 474, 452, 442, 484,
	0, 0, 596, 597, 0, 0, 0, 629, 630, 0,
	0, 0, 136, 0, 131, 133, 1029, 1031, 0, 723,
	715, 459, 463, 0, 0, 490, 0, 478, 0, 528,
	0, 0, 116, 0, 533, 535, 0, 0, 0, 978,
	1044, 0, -2, 0, 958, 1017, 0, 452, 484, 440,
	452, 0, 598, 599, 0, 613, 770, 615, 0, 0,
	138, 0, 0, 0, 469, 495, 0, 0, 0, 523,
	976, 486, 100, 0, 113, 0, 0, 678, 0, 0,
	0, 1040, 959, 0, 472, 452, 514, 0, 586, 0,
	614, 139, 139, 1032, 1033, 0, 471, 491, 492, 0,
	487, 488, 489, 1192, 483, 490, 115, 86, 88, 0,
	1037, 1042, 1045, -2, 1349, 1226, 0, 1043, 0, 473,
	484, 770, 122, 123, 464, 493, 0, 494, 0, 0,
	0, 495, 0, 0, 1047, 1048, 1049, 1050, 1051, 455,
	452, 612, 496, 0, 499, 500, 0, 497, 480, 0,
	451, 453, 454, 515, 498, 501, 502, 1046,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 345, 3, 351, 346, 3,
	356, 357, 349, 347, 361, 348, 358, 350, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 365, 360,
	339, 341, 340, 3, 362, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 354, 3, 355, 352, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 363, 344, 364, 342,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 343, 57682, 353, 57683, 359, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:864
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:870
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:876
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 6:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:886
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:890
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:891
		{
			return helpWith(sqllex, "DELETE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 18:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:895
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:896
		{
			return helpWith(sqllex, "GRANT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			return helpWith(sqllex, "INSERT")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:899
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:900
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:901
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:902
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:903
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:904
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:905
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:907
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:910
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:911
		{
			return helpWith(sqllex, "RESET")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:915
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:916
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:917
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:919
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:927
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:928
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:929
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:930
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:931
		{
			return helpWith(sqllex, "ALTER")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:966
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:977
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:988
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1008
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1022
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1028
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1034
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1040
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1046
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1050
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1056
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1060
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 91:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1082
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1106
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 98:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1109
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1119
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1129
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1132
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1139
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = nil
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = DropCascade
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = DropRestrict
		}
	case 110:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1186
		{
			sqlVAL.union.val = DropDefault
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 112:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1201
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 114:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1202
		{
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1205
		{
			return unimplemented(sqllex, "alter using")
		}
	case 116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1206
		{
		}
	case 117:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1233
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1256
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1259
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.str = "CSV"
		}
	case 122:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1290
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1294
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1297
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1335
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1366
		{
		}
	case 140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1386
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1387
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1388
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1396
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1399
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1407
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1410
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1418
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1419
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1420
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1421
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1423
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1424
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1425
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1426
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1427
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1428
		{
			return helpWith(sqllex, "CREATE")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1439
		{
			return helpWith(sqllex, "DELETE")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1449
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1450
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1451
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1452
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1453
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1459
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1460
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1461
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1462
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1463
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1464
		{
			return helpWith(sqllex, "DROP")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1479
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1494
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1510
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1517
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1525
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1529
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1532
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1547
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1551
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1561
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1565
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1595
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1598
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1607
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1611
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1615
		{
			return helpWith(sqllex, "DELETE")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1616
		{
			return helpWith(sqllex, "INSERT")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1617
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1618
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1625
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1626
		{ /* SKIP DOC */
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1635
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1648
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1655
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 238:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1663
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1673
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1679
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 242:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1699
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1703
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1707
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1714
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1731
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1734
		{
			return helpWith(sqllex, "GRANT")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1751
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1754
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1766
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1773
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1776
		{
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1780
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1784
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1791
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1795
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1799
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1803
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1811
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1815
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1837
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1841
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[3].str)}, SetMode: SetModeReset}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1844
		{
			return helpWith(sqllex, "RESET")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1849
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1852
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1856
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1857
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1858
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1859
		{ /* SKIP DOC */
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1860
		{ /* SKIP DOC */
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1861
		{
			return unimplemented(sqllex, "set local")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1870
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1874
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1880
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1895
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1899
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 287:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1904
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1924
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1926
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1929
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1954
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1957
		{
			return unimplemented(sqllex, "set from current")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1959
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1965
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1969
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1975
		{
		}
	case 304:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1977
		{
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1984
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1988
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1996
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2002
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2006
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2010
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2018
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = Low
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2028
		{
			sqlVAL.union.val = Normal
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2032
		{
			sqlVAL.union.val = High
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2053
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2096
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2097
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2098
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2099
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2100
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2101
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2102
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2103
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2104
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2105
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2106
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2107
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2108
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2109
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2111
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2112
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2113
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2114
		{
			return helpWith(sqllex, "SHOW")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2121
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2122
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[3].str}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2123
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2134
		{
			sqlVAL.str = "client_encoding"
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2138
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2146
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2149
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2163
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2166
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2171
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2179
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2182
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2190
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2193
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2201
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2204
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2212
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2215
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2217
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2220
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2222
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2225
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2233
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2236
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2238
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2241
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2249
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2252
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2254
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2258
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2271
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2281
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2284
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2286
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2289
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2291
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2295
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2304
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2307
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2309
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2313
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2327
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2330
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2338
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2342
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2346
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2349
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2357
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2360
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2368
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2371
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2379
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2382
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2386
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2390
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2394
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2400
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2406
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 434:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2411
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2417
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 436:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2421
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2431
		{
			/* SKIP DOC */
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2434
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2469
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2473
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2479
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2483
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2490
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2496
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2500
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2506
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2512
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 451:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2518
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2526
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2533
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2537
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 455:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2541
		{
			sqlVAL.union.val = DropDefault
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2547
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2558
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 458:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2562
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2568
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2572
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2576
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2584
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2588
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2626
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2630
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2639
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2648
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2661
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2673
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2678
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2684
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2700
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2733
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2737
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2743
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 486:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2747
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2752
		{
			return unimplemented(sqllex, "match full")
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2753
		{
			return unimplemented(sqllex, "match partial")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2754
		{
			return unimplemented(sqllex, "match simple")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2755
		{
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2761
		{
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2762
		{
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2763
		{
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2764
		{
		}
	case 495:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2765
		{
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2768
		{
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2771
		{
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2774
		{
			return unimplemented(sqllex, "no action")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2777
		{
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2778
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2779
		{
			return unimplemented(sqllex, "action set null")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2780
		{
			return unimplemented(sqllex, "action set default")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2788
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2792
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 506:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2802
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2805
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2816
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2820
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 511:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2824
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 512:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2834
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2841
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2859
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2870
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2881
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2885
		{
			sqlVAL.union.val = true
		}
	case 518:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2889
		{
			sqlVAL.union.val = false
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2895
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2899
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2908
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2911
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2912
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2915
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 525:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2916
		{
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = Ascending
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2924
		{
			sqlVAL.union.val = Descending
		}
	case 528:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2928
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 529:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2934
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2944
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2948
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2952
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2956
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2958
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2966
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2976
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2982
		{
			sqlVAL.union.val = true
		}
	case 541:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2986
		{
			sqlVAL.union.val = false
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2991
		{
		}
	case 543:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2992
		{
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3000
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3003
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3011
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3014
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3022
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3025
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3029
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3030
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3031
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3046
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3049
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3054
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3067
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3069
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3072
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3080
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3087
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3090
		{
		}
	case 567:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3091
		{
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.str = ""
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3103
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 571:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.str = ""
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3117
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3127
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3137
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3155
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3161
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3173
		{
			sqlVAL.union.val = ReadOnly
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = ReadWrite
		}
	case 585:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3207
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.union.val = &CreateFunction{}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3218
		{
			return helpWith(sqllex, "CREATE FUNCTION")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.union.val = &CreateProcedure{}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3229
		{
			return helpWith(sqllex, "CREATE PROCEDURE")
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 593:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.str = ""
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 595:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.str = ""
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3254
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 597:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.str = ""
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 599:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.str = ""
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3273
		{
		}
	case 601:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3274
		{
		}
	case 602:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3298
		{
			return helpWith(sqllex, "INSERT")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3309
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3315
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3347
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3351
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3357
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3361
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 616:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3363
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3369
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3374
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 619:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3378
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 620:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3392
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3396
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 623:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3397
		{
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3415
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3427
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3431
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3480
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3484
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3499
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3507
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3511
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3515
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3519
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3526
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3561
		{
			return helpWith(sqllex, "SELECT")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3562
		{
			return helpWith(sqllex, "VALUES")
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3563
		{
			return helpWith(sqllex, "TABLE")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3609
		{
			return helpWith(sqllex, "SELECT")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3613
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3631
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3653
		{
			return helpWith(sqllex, "TABLE")
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3664
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3665
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3666
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3669
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3670
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 664:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3673
		{
			return unimplemented(sqllex, "cte")
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3676
		{
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3677
		{
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3680
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 668:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3681
		{
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3684
		{
		}
	case 670:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3685
		{
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3689
		{
			sqlVAL.union.val = true
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3693
		{
			sqlVAL.union.val = false
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3697
		{
			sqlVAL.union.val = false
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = true
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3708
		{
		}
	case 676:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3709
		{
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3723
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3729
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3733
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3739
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3743
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3747
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3756
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3765
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3776
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3785
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3791
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3798
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3814
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 697:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3822
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3828
		{
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3829
		{
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3832
		{
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3833
		{
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 703:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3859
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 705:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3888
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3891
		{
			return helpWith(sqllex, "VALUES")
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3893
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3905
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3908
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3910
		{
			sqlVAL.union.val = &From{}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3920
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3930
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3937
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3943
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3948
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3971
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3975
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3981
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3985
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4012
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4030
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4037
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 729:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4072
		{
			sqlVAL.union.val = nil
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4073
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4074
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4078
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4084
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = true
		}
	case 737:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = false
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4120
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4142
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4146
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4154
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4161
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4171
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4177
		{
			sqlVAL.str = astFullJoin
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4181
		{
			sqlVAL.str = astLeftJoin
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.str = astRightJoin
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.str = astInnerJoin
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4195
		{
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4196
		{
		}
	case 758:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4225
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 763:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4229
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4239
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4256
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4260
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4266
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 770:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4270
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4282
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4296
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4304
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4315
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4319
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4328
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4331
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 784:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4339
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4341
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4345
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4349
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4353
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4357
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4361
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4365
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4369
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4373
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4377
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4381
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4402
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4411
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4425
		{
			sqlVAL.union.val = nil
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4432
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4436
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4440
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4444
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4448
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4452
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4456
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4460
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4464
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4468
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4472
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4476
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4499
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4508
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4517
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4521
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4528
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4540
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4544
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4550
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 827:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4572
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4588
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 838:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4604
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4620
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4626
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4630
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4634
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4638
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4643
		{
		}
	case 845:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4644
		{
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4649
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4653
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 848:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4657
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4661
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 850:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4665
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4670
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4676
		{
			sqlVAL.union.val = year
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4680
		{
			sqlVAL.union.val = month
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4684
		{
			sqlVAL.union.val = day
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4688
		{
			sqlVAL.union.val = hour
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4692
		{
			sqlVAL.union.val = minute
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4696
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4702
		{
			sqlVAL.union.val = month
		}
	case 859:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4706
		{
			sqlVAL.union.val = hour
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4710
		{
			sqlVAL.union.val = minute
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4714
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4718
		{
			sqlVAL.union.val = minute
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4722
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4726
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 865:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4730
		{
			sqlVAL.union.val = nil
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4736
		{
			sqlVAL.union.val = second
		}
	case 867:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4739
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4763
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4767
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4771
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4774
		{
			return unimplemented(sqllex, "at tz")
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4783
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4787
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4791
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4795
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4799
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4803
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4807
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4811
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4815
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4819
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4823
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4827
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4831
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4835
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4839
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4843
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4847
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4851
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4855
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4859
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4863
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4867
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4871
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4875
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4879
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4883
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4887
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4891
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4895
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4899
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4903
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4907
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4911
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4927
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4931
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4935
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4939
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4942
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4944
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4948
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4952
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4956
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4960
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4964
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4968
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4972
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4976
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4980
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4984
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4988
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4992
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4996
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5000
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5004
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5008
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5036
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5040
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5044
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5048
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5052
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5056
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5060
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5064
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5068
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5072
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5076
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5080
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5084
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5088
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5092
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5096
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5100
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5104
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5108
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5112
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5116
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5120
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5124
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5128
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5132
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5136
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5140
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5144
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5157
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5165
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5176
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 966:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5181
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5194
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5198
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5203
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5207
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5211
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5215
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5219
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5227
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5231
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5234
		{
			return unimplemented(sqllex, "variadic")
		}
	case 978:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5235
		{
			return unimplemented(sqllex, "variadic")
		}
	case 979:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5237
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5241
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5245
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5248
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 983:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5259
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 984:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5266
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5275
		{
			return unimplemented(sqllex, "func_application")
		}
	case 986:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5276
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 987:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5280
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5282
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5286
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5289
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5291
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5295
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5298
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5300
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5304
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5307
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5308
		{
			return unimplemented(sqllex, "current role")
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5309
		{
			return unimplemented(sqllex, "current user")
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5310
		{
			return unimplemented(sqllex, "session user")
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5311
		{
			return unimplemented(sqllex, "user")
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5313
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5317
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5321
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5324
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5326
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5329
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5331
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5334
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5336
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5340
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5343
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5344
		{
			return unimplemented(sqllex, "treat")
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5346
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5350
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5354
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5358
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5362
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5366
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5370
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5374
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5378
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5381
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5383
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5386
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5390
		{
			return unimplemented(sqllex, "within group")
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5391
		{
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5395
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5399
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5406
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5410
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5416
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5420
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5426
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5434
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5438
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5442
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5449
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5468
		{
			sqlVAL.str = ""
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5474
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5478
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5488
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5489
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5490
		{
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5493
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5494
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5500
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5501
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5502
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5503
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5504
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5515
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5519
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5523
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5529
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5533
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5539
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5545
		{
			sqlVAL.union.val = Any
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5549
		{
			sqlVAL.union.val = Some
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5553
		{
			sqlVAL.union.val = All
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5558
		{
			sqlVAL.union.val = Plus
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5559
		{
			sqlVAL.union.val = Minus
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5560
		{
			sqlVAL.union.val = Mult
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5561
		{
			sqlVAL.union.val = Div
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5562
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5563
		{
			sqlVAL.union.val = Mod
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5564
		{
			sqlVAL.union.val = Bitand
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5565
		{
			sqlVAL.union.val = Bitor
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5566
		{
			sqlVAL.union.val = Pow
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5567
		{
			sqlVAL.union.val = Bitxor
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5568
		{
			sqlVAL.union.val = LT
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5569
		{
			sqlVAL.union.val = GT
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5570
		{
			sqlVAL.union.val = EQ
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5571
		{
			sqlVAL.union.val = LE
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5572
		{
			sqlVAL.union.val = GE
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5573
		{
			sqlVAL.union.val = NE
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5577
		{
			sqlVAL.union.val = Like
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5578
		{
			sqlVAL.union.val = NotLike
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5579
		{
			sqlVAL.union.val = ILike
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5580
		{
			sqlVAL.union.val = NotILike
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5591
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5595
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5601
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5605
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5611
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5615
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5619
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5625
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5629
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5635
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5639
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5661
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5665
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5669
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5675
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5682
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5686
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5703
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5707
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5711
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5715
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5719
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5723
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5729
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5735
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5741
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5745
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5749
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5755
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5759
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5770
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5777
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5781
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5787
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5793
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5797
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5804
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5810
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5814
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5821
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5827
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5833
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5839
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5843
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5849
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5853
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5859
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5863
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5868
		{
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5869
		{
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5878
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5884
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5888
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5897
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5903
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5907
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5913
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5922
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5926
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5930
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5938
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5942
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5948
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5952
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5958
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5962
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5973
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5977
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5983
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5987
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6000
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6004
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6008
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6012
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6018
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6022
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6028
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6031
		{
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6041
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6045
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6052
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6056
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6060
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6064
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6067
		{
			return unimplemented(sqllex, "func const")
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6069
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6073
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6076
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6078
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6082
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6086
		{
			sqlVAL.union.val = DNull
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6093
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6097
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6103
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6138
		{
			sqlVAL.str = ""
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6144
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6148
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
