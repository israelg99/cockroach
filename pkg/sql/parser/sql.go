// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:466
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CUBE = 57413
const CURRENT = 57414
const CURRENT_CATALOG = 57415
const CURRENT_DATE = 57416
const CURRENT_ROLE = 57417
const CURRENT_TIME = 57418
const CURRENT_TIMESTAMP = 57419
const CURRENT_USER = 57420
const CYCLE = 57421
const DATA = 57422
const DATABASE = 57423
const DATABASES = 57424
const DATE = 57425
const DAY = 57426
const DEC = 57427
const DECIMAL = 57428
const DEFAULT = 57429
const DEALLOCATE = 57430
const DEFERRABLE = 57431
const DELETE = 57432
const DESC = 57433
const DISTINCT = 57434
const DO = 57435
const DOUBLE = 57436
const DROP = 57437
const ELSE = 57438
const ENCODING = 57439
const END = 57440
const ESCAPE = 57441
const EXCEPT = 57442
const EXISTS = 57443
const EXECUTE = 57444
const EXPERIMENTAL_FINGERPRINTS = 57445
const EXPLAIN = 57446
const EXTRACT = 57447
const EXTRACT_DURATION = 57448
const FALSE = 57449
const FAMILY = 57450
const FETCH = 57451
const FILTER = 57452
const FIRST = 57453
const FLOAT = 57454
const FLOORDIV = 57455
const FOLLOWING = 57456
const FOR = 57457
const FORCE_INDEX = 57458
const FOREIGN = 57459
const FROM = 57460
const FULL = 57461
const GRANT = 57462
const GRANTS = 57463
const GREATEST = 57464
const GROUP = 57465
const GROUPING = 57466
const HAVING = 57467
const HELP = 57468
const HIGH = 57469
const HOUR = 57470
const INCREMENTAL = 57471
const IF = 57472
const IFNULL = 57473
const ILIKE = 57474
const IN = 57475
const INTERLEAVE = 57476
const INDEX = 57477
const INDEXES = 57478
const INITIALLY = 57479
const INNER = 57480
const INSERT = 57481
const INT = 57482
const INT2VECTOR = 57483
const INT8 = 57484
const INT64 = 57485
const INTEGER = 57486
const INTERSECT = 57487
const INTERVAL = 57488
const INTO = 57489
const IS = 57490
const ISOLATION = 57491
const JOB = 57492
const JOBS = 57493
const JOIN = 57494
const KEY = 57495
const KEYS = 57496
const KV = 57497
const LATERAL = 57498
const LC_CTYPE = 57499
const LC_COLLATE = 57500
const LEADING = 57501
const LEAST = 57502
const LEFT = 57503
const LEVEL = 57504
const LIKE = 57505
const LIMIT = 57506
const LOCAL = 57507
const LOCALTIME = 57508
const LOCALTIMESTAMP = 57509
const LOW = 57510
const LSHIFT = 57511
const MATCH = 57512
const MINUTE = 57513
const MONTH = 57514
const NAN = 57515
const NAME = 57516
const NAMES = 57517
const NATURAL = 57518
const NEXT = 57519
const NO = 57520
const NO_INDEX_JOIN = 57521
const NORMAL = 57522
const NOT = 57523
const NOTHING = 57524
const NULL = 57525
const NULLIF = 57526
const NULLS = 57527
const NUMERIC = 57528
const OF = 57529
const OFF = 57530
const OFFSET = 57531
const OID = 57532
const ON = 57533
const ONLY = 57534
const OPTIONS = 57535
const OR = 57536
const ORDER = 57537
const ORDINALITY = 57538
const OUT = 57539
const OUTER = 57540
const OVER = 57541
const OVERLAPS = 57542
const OVERLAY = 57543
const PARENT = 57544
const PARTIAL = 57545
const PARTITION = 57546
const PASSWORD = 57547
const PAUSE = 57548
const PLACING = 57549
const POSITION = 57550
const PRECEDING = 57551
const PRECISION = 57552
const PREPARE = 57553
const PRIMARY = 57554
const PRIORITY = 57555
const QUERIES = 57556
const QUERY = 57557
const RANGE = 57558
const READ = 57559
const REAL = 57560
const RECURSIVE = 57561
const REF = 57562
const REFERENCES = 57563
const REGCLASS = 57564
const REGPROC = 57565
const REGPROCEDURE = 57566
const REGNAMESPACE = 57567
const REGTYPE = 57568
const RENAME = 57569
const REPEATABLE = 57570
const RELEASE = 57571
const RESET = 57572
const RESTORE = 57573
const RESTRICT = 57574
const RESUME = 57575
const RETURNING = 57576
const REVOKE = 57577
const RIGHT = 57578
const ROLLBACK = 57579
const ROLLUP = 57580
const ROW = 57581
const ROWS = 57582
const RSHIFT = 57583
const SAVEPOINT = 57584
const SCATTER = 57585
const SEARCH = 57586
const SECOND = 57587
const SELECT = 57588
const SERIAL = 57589
const SERIALIZABLE = 57590
const SESSION = 57591
const SESSIONS = 57592
const SESSION_USER = 57593
const SET = 57594
const SETTING = 57595
const SETTINGS = 57596
const SHOW = 57597
const SIMILAR = 57598
const SIMPLE = 57599
const SMALLINT = 57600
const SMALLSERIAL = 57601
const SNAPSHOT = 57602
const SOME = 57603
const SPLIT = 57604
const SQL = 57605
const START = 57606
const STATUS = 57607
const STDIN = 57608
const STRICT = 57609
const STRING = 57610
const STORING = 57611
const SUBSTRING = 57612
const SYMMETRIC = 57613
const SYSTEM = 57614
const TABLE = 57615
const TABLES = 57616
const TEMPLATE = 57617
const TESTING_RANGES = 57618
const TESTING_RELOCATE = 57619
const TEXT = 57620
const THEN = 57621
const TIME = 57622
const TIMESTAMP = 57623
const TIMESTAMPTZ = 57624
const TO = 57625
const TRAILING = 57626
const TRACE = 57627
const TRANSACTION = 57628
const TREAT = 57629
const TRIM = 57630
const TRUE = 57631
const TRUNCATE = 57632
const TYPE = 57633
const UNBOUNDED = 57634
const UNCOMMITTED = 57635
const UNION = 57636
const UNIQUE = 57637
const UNKNOWN = 57638
const UPDATE = 57639
const UPSERT = 57640
const USE = 57641
const USER = 57642
const USERS = 57643
const USING = 57644
const UUID = 57645
const VALID = 57646
const VALIDATE = 57647
const VALUE = 57648
const VALUES = 57649
const VARCHAR = 57650
const VARIADIC = 57651
const VIEW = 57652
const VARYING = 57653
const WHEN = 57654
const WHERE = 57655
const WINDOW = 57656
const WITH = 57657
const WITHIN = 57658
const WITHOUT = 57659
const WRITE = 57660
const YEAR = 57661
const ZONE = 57662
const NOT_LA = 57663
const WITH_LA = 57664
const AS_LA = 57665
const POSTFIXOP = 57666
const UMINUS = 57667

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5645

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 35,
	344, 35,
	-2, 458,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 59,
	1, 431,
	191, 431,
	234, 431,
	340, 431,
	342, 431,
	344, 431,
	-2, 441,
	-1, 74,
	1, 434,
	191, 434,
	234, 434,
	340, 434,
	342, 434,
	344, 434,
	-2, 440,
	-1, 83,
	1, 35,
	344, 35,
	-2, 458,
	-1, 464,
	1, 180,
	344, 180,
	-2, 1035,
	-1, 535,
	109, 468,
	164, 468,
	189, 468,
	-2, 437,
	-1, 538,
	109, 467,
	164, 467,
	189, 467,
	-2, 435,
	-1, 618,
	341, 963,
	-2, 956,
	-1, 619,
	341, 964,
	-2, 957,
	-1, 625,
	5, 632,
	341, 632,
	-2, 1152,
	-1, 649,
	5, 593,
	-2, 1126,
	-1, 650,
	5, 626,
	341, 626,
	-2, 1128,
	-1, 651,
	5, 601,
	-2, 1129,
	-1, 652,
	5, 600,
	-2, 1130,
	-1, 653,
	5, 626,
	341, 626,
	-2, 1133,
	-1, 654,
	5, 626,
	341, 626,
	-2, 1134,
	-1, 655,
	5, 627,
	-2, 1137,
	-1, 656,
	5, 587,
	-2, 1138,
	-1, 657,
	5, 587,
	-2, 1139,
	-1, 658,
	5, 608,
	-2, 1143,
	-1, 659,
	5, 588,
	-2, 1148,
	-1, 660,
	5, 589,
	-2, 1149,
	-1, 661,
	5, 590,
	-2, 1150,
	-1, 662,
	5, 591,
	-2, 1151,
	-1, 663,
	5, 587,
	-2, 1156,
	-1, 664,
	5, 594,
	-2, 1161,
	-1, 665,
	5, 592,
	-2, 1164,
	-1, 666,
	5, 624,
	341, 624,
	-2, 1166,
	-1, 667,
	5, 628,
	-2, 1169,
	-1, 668,
	5, 630,
	-2, 1170,
	-1, 669,
	5, 623,
	341, 623,
	-2, 1175,
	-1, 789,
	109, 467,
	164, 467,
	189, 467,
	-2, 438,
	-1, 898,
	100, 441,
	109, 441,
	145, 441,
	164, 441,
	189, 441,
	195, 441,
	294, 441,
	-2, 751,
	-1, 907,
	341, 940,
	-2, 928,
	-1, 1181,
	13, 0,
	14, 0,
	15, 0,
	324, 0,
	325, 0,
	326, 0,
	-2, 667,
	-1, 1182,
	13, 0,
	14, 0,
	15, 0,
	324, 0,
	325, 0,
	326, 0,
	-2, 668,
	-1, 1183,
	13, 0,
	14, 0,
	15, 0,
	324, 0,
	325, 0,
	326, 0,
	-2, 669,
	-1, 1187,
	13, 0,
	14, 0,
	15, 0,
	324, 0,
	325, 0,
	326, 0,
	-2, 673,
	-1, 1188,
	13, 0,
	14, 0,
	15, 0,
	324, 0,
	325, 0,
	326, 0,
	-2, 674,
	-1, 1189,
	13, 0,
	14, 0,
	15, 0,
	324, 0,
	325, 0,
	326, 0,
	-2, 675,
	-1, 1192,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	163, 0,
	256, 0,
	321, 0,
	327, 0,
	-2, 680,
	-1, 1198,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	163, 0,
	256, 0,
	321, 0,
	327, 0,
	-2, 682,
	-1, 1200,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	163, 0,
	256, 0,
	321, 0,
	327, 0,
	-2, 686,
	-1, 1201,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	163, 0,
	256, 0,
	321, 0,
	327, 0,
	-2, 687,
	-1, 1202,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	163, 0,
	256, 0,
	321, 0,
	327, 0,
	-2, 688,
	-1, 1203,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	163, 0,
	256, 0,
	321, 0,
	327, 0,
	-2, 689,
	-1, 1229,
	200, 822,
	-2, 825,
	-1, 1265,
	118, 862,
	341, 963,
	-2, 956,
	-1, 1266,
	118, 863,
	-2, 1122,
	-1, 1267,
	118, 864,
	-2, 1034,
	-1, 1268,
	118, 865,
	-2, 999,
	-1, 1269,
	118, 866,
	-2, 1015,
	-1, 1270,
	118, 867,
	-2, 1033,
	-1, 1271,
	118, 868,
	-2, 1084,
	-1, 1452,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	163, 0,
	256, 0,
	321, 0,
	327, 0,
	-2, 681,
	-1, 1453,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	163, 0,
	256, 0,
	321, 0,
	327, 0,
	-2, 683,
	-1, 1458,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	163, 0,
	256, 0,
	321, 0,
	327, 0,
	-2, 684,
	-1, 1476,
	200, 821,
	-2, 824,
	-1, 1641,
	100, 441,
	109, 441,
	145, 441,
	164, 441,
	189, 441,
	195, 441,
	294, 441,
	-2, 522,
	-1, 1683,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	163, 0,
	256, 0,
	321, 0,
	327, 0,
	-2, 685,
	-1, 1688,
	148, 0,
	-2, 701,
	-1, 1698,
	200, 823,
	-2, 826,
	-1, 1740,
	13, 0,
	14, 0,
	15, 0,
	324, 0,
	325, 0,
	326, 0,
	-2, 728,
	-1, 1741,
	13, 0,
	14, 0,
	15, 0,
	324, 0,
	325, 0,
	326, 0,
	-2, 729,
	-1, 1742,
	13, 0,
	14, 0,
	15, 0,
	324, 0,
	325, 0,
	326, 0,
	-2, 730,
	-1, 1746,
	13, 0,
	14, 0,
	15, 0,
	324, 0,
	325, 0,
	326, 0,
	-2, 734,
	-1, 1747,
	13, 0,
	14, 0,
	15, 0,
	324, 0,
	325, 0,
	326, 0,
	-2, 735,
	-1, 1748,
	13, 0,
	14, 0,
	15, 0,
	324, 0,
	325, 0,
	326, 0,
	-2, 736,
	-1, 1830,
	1, 523,
	70, 523,
	100, 523,
	109, 523,
	119, 523,
	123, 523,
	125, 523,
	138, 523,
	145, 523,
	152, 523,
	161, 523,
	164, 523,
	176, 523,
	189, 523,
	191, 523,
	195, 523,
	234, 523,
	236, 523,
	294, 523,
	302, 523,
	313, 523,
	314, 523,
	323, 523,
	340, 523,
	342, 523,
	344, 523,
	345, 523,
	-2, 522,
	-1, 1880,
	148, 0,
	-2, 702,
	-1, 1883,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	163, 0,
	256, 0,
	321, 0,
	327, 0,
	-2, 705,
	-1, 1884,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	163, 0,
	256, 0,
	321, 0,
	327, 0,
	-2, 707,
	-1, 2000,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	163, 0,
	256, 0,
	321, 0,
	327, 0,
	-2, 706,
	-1, 2001,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	163, 0,
	256, 0,
	321, 0,
	327, 0,
	-2, 708,
	-1, 2008,
	148, 0,
	-2, 737,
	-1, 2075,
	148, 0,
	-2, 738,
	-1, 2156,
	36, 0,
	132, 0,
	163, 0,
	256, 0,
	321, 0,
	327, 0,
	-2, 1125,
}

const sqlPrivate = 57344

const sqlLast = 31523

var sqlAct = [...]int{

	619, 1786, 2139, 2155, 2184, 1972, 2104, 2140, 1318, 2141,
	1081, 1826, 2032, 2154, 1717, 1998, 1393, 1929, 1310, 1796,
	1953, 58, 976, 1825, 1852, 1838, 1636, 1087, 1940, 609,
	617, 1654, 560, 517, 595, 680, 539, 96, 96, 1934,
	96, 1613, 1639, 1542, 1363, 847, 1083, 1615, 1804, 1382,
	331, 96, 96, 96, 1364, 315, 23, 616, 96, 1368,
	1627, 96, 1813, 1367, 822, 1319, 809, 1541, 97, 96,
	819, 1160, 526, 903, 1400, 1227, 1487, 1568, 96, 96,
	1653, 1123, 96, 1448, 1132, 96, 96, 96, 96, 1622,
	1107, 96, 96, 1252, 1406, 1389, 1155, 1356, 544, 1403,
	948, 1041, 1291, 725, 589, 1212, 1237, 546, 73, 1215,
	848, 824, 810, 520, 724, 1246, 1312, 959, 332, 313,
	521, 329, 701, 1262, 588, 1401, 894, 1371, 1112, 690,
	692, 463, 549, 74, 693, 75, 1294, 933, 792, 23,
	527, 449, 1039, 512, 611, 952, 575, 793, 791, 460,
	438, 686, 538, 1853, 459, 92, 73, 937, 547, 772,
	797, 773, 452, 2043, 1475, 961, 2044, 1311, 1249, 543,
	961, 543, 961, 510, 1634, 88, 1315, 2182, 1637, 2164,
	844, 557, 1851, 2151, 563, 1580, 1343, 570, 594, 2150,
	328, 73, 1343, 2147, 2137, 2134, 844, 844, 844, 1579,
	2123, 2101, 2085, 1337, 844, 1851, 79, 536, 2081, 535,
	503, 844, 1250, 298, 2077, 2069, 566, 1337, 2068, 2039,
	2026, 2023, 2040, 1851, 844, 1114, 2021, 2002, 301, 1851,
	1337, 1983, 1982, 81, 844, 1851, 72, 551, 1956, 1907,
	1885, 1343, 1343, 1343, 1882, 328, 1872, 1337, 1871, 1343,
	1850, 1343, 1343, 1851, 1780, 1251, 1248, 1309, 1775, 1156,
	1692, 1309, 47, 1343, 2091, 1602, 1559, 82, 844, 1560,
	558, 48, 838, 565, 568, 77, 558, 1557, 35, 1159,
	1343, 1625, 78, 1556, 1555, 1476, 1343, 1343, 1343, 36,
	63, 72, 328, 49, 1479, 1478, 1156, 1625, 1113, 1480,
	1343, 76, 38, 1599, 1397, 849, 850, 844, 96, 96,
	96, 96, 96, 96, 1753, 526, 65, 47, 1159, 1343,
	1347, 1486, 39, 1343, 72, 1695, 48, 1342, 852, 1253,
	1343, 1336, 1121, 1603, 1337, 79, 544, 1308, 72, 1120,
	1309, 970, 1119, 52, 971, 844, 1392, 1354, 49, 962,
	47, 1231, 851, 66, 962, 805, 962, 51, 866, 48,
	1031, 573, 81, 713, 47, 556, 1854, 698, 849, 850,
	83, 579, 1053, 48, 523, 53, 1948, 1640, 739, 2174,
	672, 49, 2153, 527, 2146, 2109, 2072, 2024, 1915, 1912,
	1908, 852, 79, 1900, 1899, 49, 82, 804, 1898, 1894,
	612, 1893, 1892, 1247, 77, 1891, 1830, 687, 857, 1223,
	1803, 78, 1579, 79, 1784, 851, 1768, 1512, 1513, 81,
	1763, 1762, 62, 1761, 1703, 1341, 815, 1605, 1601, 1564,
	1314, 677, 1561, 1638, 96, 702, 849, 850, 1549, 1540,
	81, 1511, 695, 695, 1508, 1507, 696, 1505, 1492, 911,
	1491, 96, 1113, 82, 96, 96, 679, 1410, 1259, 852,
	1258, 54, 965, 804, 867, 526, 50, 960, 79, 1079,
	904, 857, 76, 526, 82, 803, 1086, 62, 1719, 2126,
	2088, 2067, 77, 851, 68, 69, 37, 76, 55, 78,
	56, 2066, 67, 2065, 2057, 81, 558, 57, 568, 2055,
	2047, 79, 2035, 96, 2019, 2010, 743, 60, 76, 96,
	62, 1224, 1969, 1958, 1923, 79, 1905, 1877, 1857, 64,
	1518, 1818, 1794, 1792, 62, 1791, 1789, 867, 81, 82,
	96, 96, 96, 527, 96, 1782, 868, 77, 1914, 857,
	1687, 527, 81, 1662, 78, 70, 1661, 1539, 1501, 96,
	1500, 1497, 1472, 1467, 71, 1217, 1439, 1437, 1424, 1423,
	96, 1396, 82, 76, 849, 850, 735, 938, 941, 1301,
	77, 1257, 790, 526, 96, 1080, 82, 78, 561, 945,
	331, 526, 931, 742, 77, 930, 929, 852, 928, 814,
	927, 78, 926, 925, 924, 923, 76, 922, 921, 868,
	670, 920, 919, 918, 917, 916, 743, 915, 778, 908,
	314, 851, 789, 897, 743, 544, 718, 720, 76, 723,
	813, 808, 722, 709, 862, 860, 861, 853, 854, 855,
	856, 858, 859, 1424, 707, 815, 2165, 2042, 1945, 1920,
	1919, 527, 1887, 1819, 776, 904, 1589, 1588, 332, 527,
	333, 895, 579, 731, 678, 1512, 1513, 774, 733, 2071,
	2045, 782, 1616, 785, 1918, 1512, 1513, 1581, 1530, 1531,
	1532, 1156, 528, 943, 1512, 1513, 1640, 1563, 944, 96,
	536, 1879, 535, 842, 96, 96, 96, 1037, 96, 861,
	853, 854, 855, 856, 858, 859, 732, 558, 1562, 524,
	1388, 845, 800, 801, 832, 96, 96, 806, 1387, 1451,
	764, 1946, 734, 96, 913, 950, 1084, 96, 1527, 1449,
	1935, 1311, 96, 830, 849, 850, 1720, 1238, 934, 843,
	900, 533, 526, 526, 86, 1483, 768, 1575, 831, 1649,
	331, 1516, 1517, 1519, 1520, 2112, 96, 852, 816, 2171,
	96, 1865, 96, 96, 96, 96, 96, 96, 907, 1346,
	855, 856, 858, 859, 96, 496, 1133, 304, 1518, 96,
	96, 851, 1596, 769, 2080, 502, 96, 1518, 501, 825,
	761, 826, 497, 687, 1068, 910, 2172, 96, 85, 762,
	1993, 935, 936, 1249, 1992, 815, 1085, 1991, 1990, 439,
	527, 527, 308, 1533, 972, 1677, 96, 1676, 332, 96,
	1646, 964, 1645, 1038, 967, 939, 305, 1496, 96, 1495,
	444, 942, 1494, 731, 1528, 440, 96, 857, 1493, 1136,
	96, 954, 1454, 1344, 1090, 951, 974, 1250, 96, 96,
	1199, 1153, 96, 1512, 1513, 96, 1022, 1152, 73, 1149,
	441, 775, 331, 827, 572, 1876, 309, 1305, 671, 1030,
	1055, 1054, 1304, 1111, 1025, 1170, 732, 949, 1781, 443,
	1383, 1029, 558, 953, 953, 1042, 1028, 1057, 1049, 1048,
	1251, 1248, 1076, 867, 509, 1126, 1680, 1144, 1024, 2079,
	1147, 859, 1026, 565, 568, 1078, 1529, 1075, 1214, 1059,
	1770, 705, 1063, 1064, 1065, 1066, 1067, 1565, 1137, 1139,
	760, 1974, 836, 946, 624, 528, 1214, 1077, 1072, 1073,
	332, 977, 2187, 529, 1135, 1056, 84, 1062, 835, 1142,
	2124, 536, 1094, 1103, 536, 536, 1104, 1105, 1109, 1092,
	1093, 1154, 1117, 950, 1158, 534, 1518, 833, 765, 955,
	530, 1238, 1221, 1129, 1253, 868, 96, 1219, 96, 96,
	531, 96, 834, 87, 96, 1253, 96, 96, 1150, 96,
	96, 2143, 526, 1169, 307, 306, 442, 542, 1235, 1524,
	1525, 1526, 1520, 2178, 1523, 1521, 1522, 1514, 1515, 1516,
	1517, 1519, 1520, 2171, 310, 721, 1514, 1515, 1516, 1517,
	1519, 1520, 1528, 1595, 1512, 1513, 1118, 1134, 1313, 2120,
	1313, 825, 766, 826, 1390, 1391, 1710, 1222, 558, 1125,
	1225, 312, 541, 1125, 1331, 1673, 568, 445, 1247, 1124,
	558, 311, 1569, 2121, 1228, 1074, 825, 1277, 826, 704,
	527, 1232, 1512, 1513, 1272, 1240, 853, 854, 855, 856,
	858, 859, 2185, 504, 331, 2144, 1264, 1264, 1275, 1711,
	1286, 2193, 96, 828, 767, 528, 1298, 1299, 1300, 1713,
	835, 1317, 543, 528, 1529, 96, 96, 96, 73, 2060,
	96, 96, 961, 73, 747, 827, 1630, 96, 1010, 833,
	1332, 1326, 702, 1327, 1333, 1335, 758, 1328, 695, 1340,
	695, 1329, 1664, 1330, 834, 1633, 2186, 1518, 983, 2145,
	827, 1597, 1975, 1444, 1196, 96, 331, 1441, 840, 1812,
	839, 932, 332, 96, 96, 96, 2188, 1378, 1631, 96,
	505, 1398, 96, 1253, 2177, 1052, 1409, 1456, 96, 96,
	96, 96, 96, 1253, 1322, 1518, 1348, 746, 2020, 568,
	96, 2006, 568, 96, 96, 1213, 936, 935, 299, 757,
	526, 1350, 939, 1528, 942, 1514, 1515, 1516, 1517, 1519,
	1520, 540, 1352, 528, 892, 1355, 728, 73, 1573, 1362,
	333, 528, 1499, 748, 332, 1626, 745, 1814, 1417, 1358,
	1411, 1220, 1353, 743, 1829, 759, 543, 1681, 1801, 1436,
	2142, 1528, 1438, 1632, 1351, 2170, 1360, 1434, 2168, 1928,
	1194, 1197, 1386, 849, 850, 1047, 1046, 1435, 523, 518,
	1380, 1569, 751, 300, 507, 582, 1399, 716, 527, 2176,
	1010, 1010, 795, 1412, 1630, 1529, 852, 1408, 712, 544,
	729, 1193, 823, 1671, 730, 2194, 796, 1122, 1447, 1749,
	983, 983, 1903, 1633, 2198, 1846, 1985, 1984, 1967, 1665,
	851, 2052, 1861, 1359, 568, 1361, 962, 1628, 558, 1648,
	1450, 1864, 1420, 1529, 1416, 1381, 1631, 1485, 1863, 1091,
	1082, 1709, 1099, 2105, 1071, 1797, 1032, 794, 1847, 1954,
	1930, 1629, 1968, 1426, 1425, 828, 1036, 1943, 1050, 1809,
	506, 1808, 1455, 1404, 544, 795, 1942, 1457, 447, 446,
	96, 1413, 796, 728, 786, 96, 857, 96, 1787, 685,
	828, 684, 541, 1471, 96, 1522, 1514, 1515, 1516, 1517,
	1519, 1520, 528, 528, 1195, 96, 544, 1034, 1750, 1921,
	333, 674, 1443, 1482, 1751, 96, 96, 1904, 1100, 1035,
	2197, 1632, 1955, 1446, 1470, 526, 1860, 1016, 1805, 1623,
	794, 1473, 1521, 1522, 1514, 1515, 1516, 1517, 1519, 1520,
	1256, 2009, 1862, 96, 1965, 96, 1051, 96, 1902, 1489,
	1490, 96, 1842, 1543, 1843, 96, 1686, 1679, 604, 1566,
	1571, 1546, 1547, 1548, 1506, 1577, 1966, 1210, 1466, 1345,
	1604, 1307, 1606, 1148, 1145, 771, 770, 763, 96, 756,
	755, 754, 1208, 1845, 753, 1574, 752, 1941, 749, 1538,
	683, 580, 1848, 527, 1582, 93, 93, 1544, 302, 544,
	1551, 1607, 1069, 1061, 1586, 1610, 914, 740, 1255, 430,
	431, 432, 1592, 1593, 2138, 1583, 451, 1584, 1585, 465,
	1594, 2102, 333, 1835, 1660, 1659, 1598, 451, 1600, 1669,
	1667, 1647, 1612, 1384, 1626, 1376, 550, 550, 1334, 969,
	302, 968, 966, 302, 302, 569, 302, 963, 1204, 93,
	576, 1618, 1658, 1620, 958, 841, 1205, 837, 1206, 829,
	1689, 1700, 1211, 1614, 2014, 798, 1844, 1624, 1567, 1644,
	96, 682, 1642, 949, 73, 681, 2172, 1651, 1608, 554,
	73, 1010, 949, 1630, 89, 1044, 1621, 1672, 2016, 320,
	33, 1141, 1635, 558, 3, 1705, 1706, 1707, 1125, 1678,
	1464, 983, 1633, 1643, 1140, 853, 854, 855, 856, 858,
	859, 1125, 1394, 524, 519, 1462, 1628, 1138, 1668, 1774,
	1670, 1696, 2062, 1854, 1699, 1631, 741, 326, 28, 325,
	27, 435, 2074, 1806, 802, 799, 1009, 1146, 495, 1611,
	1629, 1143, 528, 2092, 1674, 1723, 1675, 1726, 1721, 555,
	96, 96, 324, 26, 1728, 1756, 1926, 1379, 1712, 1714,
	1715, 322, 25, 1375, 1207, 577, 1404, 1776, 1316, 578,
	96, 1209, 1395, 33, 96, 574, 96, 1110, 562, 1693,
	1757, 1459, 1027, 96, 849, 850, 526, 975, 448, 1793,
	1339, 1460, 982, 2191, 2136, 1465, 96, 319, 17, 96,
	1632, 323, 12, 1790, 498, 499, 1771, 852, 331, 2196,
	96, 28, 2095, 27, 1951, 1777, 96, 96, 96, 1799,
	1773, 1434, 1779, 1889, 333, 1778, 1512, 1513, 673, 327,
	11, 851, 1798, 96, 1800, 1783, 26, 1788, 96, 1769,
	96, 1716, 96, 96, 96, 25, 1754, 96, 96, 1820,
	526, 1855, 317, 10, 527, 780, 779, 1764, 436, 780,
	1811, 1660, 1659, 1831, 1815, 1816, 302, 688, 302, 465,
	465, 576, 1590, 321, 9, 1558, 332, 1834, 1009, 1009,
	1881, 17, 1306, 743, 1303, 12, 333, 1859, 1010, 1658,
	96, 1302, 316, 8, 1245, 1875, 901, 1461, 781, 1846,
	849, 850, 1839, 2118, 1463, 439, 1999, 621, 983, 1708,
	1837, 1609, 1858, 11, 1841, 318, 4, 1010, 527, 849,
	850, 1807, 911, 909, 1810, 508, 444, 1973, 437, 1821,
	528, 440, 1847, 1060, 982, 982, 10, 983, 1322, 1404,
	1901, 1161, 1168, 750, 1947, 1824, 1817, 851, 2119, 1895,
	1498, 2031, 2005, 1840, 1254, 912, 441, 9, 46, 1656,
	598, 1836, 96, 96, 1650, 1370, 1369, 334, 1045, 526,
	620, 511, 1263, 1162, 675, 443, 8, 622, 980, 96,
	96, 623, 981, 96, 1404, 940, 610, 1404, 978, 1660,
	1659, 96, 710, 700, 1660, 1659, 1320, 1218, 96, 4,
	1236, 1916, 1932, 1481, 905, 590, 96, 1925, 96, 717,
	331, 96, 465, 465, 1950, 1931, 1924, 1658, 1010, 96,
	1933, 602, 1658, 601, 1917, 331, 1842, 1233, 1843, 706,
	1868, 1952, 1949, 462, 61, 458, 1874, 527, 983, 1977,
	1922, 1960, 1979, 1959, 1572, 1927, 1913, 1098, 1385, 1095,
	1666, 1660, 1659, 1976, 1010, 1010, 532, 1845, 1509, 950,
	708, 451, 1284, 1010, 1010, 1961, 1848, 302, 1276, 1273,
	777, 818, 893, 1321, 983, 983, 1995, 738, 332, 1658,
	1578, 1994, 442, 983, 983, 96, 1338, 807, 465, 784,
	465, 1106, 787, 332, 553, 552, 1010, 2004, 2011, 96,
	1365, 736, 526, 1033, 1938, 1939, 96, 550, 1944, 1349,
	886, 885, 500, 1937, 96, 2054, 983, 727, 302, 726,
	96, 2017, 1377, 1660, 1659, 528, 1419, 2192, 2061, 96,
	96, 1963, 93, 445, 1663, 2029, 96, 2111, 2034, 2015,
	1844, 2049, 2038, 2041, 2056, 2030, 1978, 80, 2028, 2070,
	1997, 1658, 2025, 1445, 1988, 1989, 34, 32, 2050, 1009,
	29, 96, 96, 2051, 1981, 24, 22, 1404, 1404, 2046,
	527, 1404, 21, 20, 2022, 2058, 31, 19, 30, 18,
	16, 15, 14, 2048, 13, 45, 44, 96, 2059, 43,
	42, 96, 1102, 41, 40, 7, 2086, 2084, 6, 526,
	5, 2, 2087, 2076, 1, 0, 96, 1971, 1023, 0,
	0, 544, 2073, 0, 0, 982, 331, 96, 96, 1012,
	2090, 0, 1421, 0, 0, 0, 96, 0, 96, 0,
	0, 96, 2089, 331, 2096, 0, 0, 302, 1010, 2037,
	2099, 0, 302, 302, 302, 2108, 956, 0, 0, 0,
	0, 2094, 0, 0, 2117, 0, 2127, 0, 983, 2129,
	2093, 2128, 96, 302, 302, 96, 0, 527, 0, 0,
	2125, 93, 2100, 0, 2132, 93, 2135, 2133, 2131, 0,
	465, 0, 2107, 0, 332, 0, 0, 2027, 1660, 1659,
	0, 2148, 0, 0, 0, 96, 0, 96, 0, 0,
	2163, 332, 1404, 2161, 465, 2160, 0, 0, 465, 96,
	93, 465, 465, 465, 465, 465, 1658, 0, 1278, 2169,
	2167, 0, 1070, 2152, 0, 2173, 0, 465, 465, 0,
	2175, 0, 0, 0, 451, 0, 0, 2097, 0, 2130,
	2183, 0, 0, 0, 0, 1089, 2190, 2189, 0, 0,
	2181, 2162, 0, 0, 2113, 2195, 0, 0, 0, 0,
	0, 1012, 1012, 0, 550, 2199, 1009, 576, 0, 0,
	0, 0, 2114, 2115, 2116, 0, 302, 0, 0, 0,
	0, 2122, 0, 0, 1130, 0, 528, 0, 302, 0,
	599, 59, 0, 0, 0, 1009, 302, 1151, 0, 0,
	302, 0, 0, 1157, 0, 0, 0, 0, 333, 0,
	0, 0, 0, 0, 0, 0, 1010, 0, 0, 2110,
	1468, 1469, 982, 849, 850, 0, 0, 0, 0, 1587,
	0, 0, 0, 0, 0, 0, 983, 0, 0, 59,
	0, 0, 0, 0, 0, 0, 852, 0, 0, 0,
	528, 982, 0, 0, 849, 850, 1010, 0, 1421, 0,
	0, 0, 0, 0, 537, 0, 0, 545, 0, 0,
	851, 0, 0, 0, 59, 0, 983, 852, 0, 0,
	0, 0, 0, 1322, 0, 0, 0, 1535, 1536, 1537,
	0, 0, 0, 0, 0, 0, 1009, 0, 0, 0,
	0, 851, 0, 0, 0, 0, 0, 0, 581, 676,
	0, 0, 0, 0, 302, 0, 1324, 1325, 0, 302,
	0, 0, 302, 0, 465, 465, 857, 465, 576, 0,
	0, 0, 1009, 1009, 0, 0, 1011, 0, 0, 0,
	0, 1009, 1009, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 982, 0, 0, 0, 0, 857, 0, 0,
	0, 1010, 0, 0, 0, 0, 0, 0, 0, 528,
	0, 0, 0, 0, 1009, 0, 0, 0, 0, 0,
	0, 983, 867, 0, 0, 0, 0, 0, 982, 982,
	0, 0, 0, 0, 0, 1161, 1724, 982, 982, 0,
	0, 0, 0, 0, 1161, 1729, 0, 0, 1278, 1278,
	333, 0, 0, 867, 0, 979, 0, 0, 0, 0,
	1357, 0, 0, 0, 0, 333, 0, 0, 0, 0,
	982, 0, 0, 302, 302, 302, 0, 1760, 302, 1366,
	0, 0, 1012, 0, 0, 576, 0, 0, 1512, 1513,
	0, 1530, 1531, 1532, 868, 714, 715, 0, 0, 0,
	0, 0, 0, 1684, 1685, 0, 0, 0, 0, 0,
	0, 0, 0, 302, 0, 1278, 1278, 1278, 1011, 1011,
	0, 302, 1414, 1415, 0, 868, 0, 1130, 0, 0,
	1422, 0, 0, 0, 0, 0, 1427, 1428, 1430, 1432,
	1433, 1527, 528, 0, 0, 545, 0, 0, 1440, 0,
	0, 1442, 302, 0, 0, 0, 1009, 0, 0, 0,
	0, 0, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737,
	1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747,
	1748, 0, 1752, 860, 861, 853, 854, 855, 856, 858,
	859, 1518, 0, 0, 0, 0, 0, 979, 979, 0,
	0, 811, 811, 0, 0, 0, 0, 0, 0, 0,
	820, 1534, 982, 862, 860, 861, 853, 854, 855, 856,
	858, 859, 0, 0, 0, 0, 1533, 0, 0, 0,
	0, 0, 887, 888, 889, 890, 891, 0, 0, 528,
	0, 0, 899, 0, 0, 0, 0, 1528, 0, 0,
	0, 0, 906, 0, 0, 0, 333, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1512,
	1513, 0, 0, 333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1012,
	0, 1278, 1278, 1512, 1513, 0, 1530, 1531, 1532, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 302, 0,
	0, 0, 0, 302, 0, 1576, 0, 0, 1012, 1529,
	0, 0, 302, 0, 0, 0, 0, 0, 0, 1512,
	1513, 0, 0, 302, 1009, 0, 0, 0, 0, 0,
	0, 0, 0, 1357, 1357, 0, 1527, 0, 0, 0,
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 0,
	1278, 1089, 1518, 1089, 1009, 465, 0, 537, 0, 302,
	0, 0, 1527, 1617, 0, 0, 0, 0, 0, 0,
	982, 0, 0, 0, 0, 0, 1518, 1987, 0, 1011,
	0, 0, 1524, 1525, 1526, 0, 302, 1523, 1521, 1522,
	1514, 1515, 1516, 1517, 1519, 1520, 0, 0, 0, 1012,
	0, 0, 896, 1655, 898, 0, 0, 0, 1528, 0,
	982, 902, 1518, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1096, 0, 1101, 0, 0, 0, 0,
	0, 1108, 1528, 0, 0, 1012, 1012, 0, 0, 0,
	0, 0, 0, 0, 1012, 1012, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 979, 1009,
	0, 0, 0, 0, 0, 0, 0, 0, 1528, 0,
	0, 0, 0, 0, 0, 1970, 0, 1012, 1718, 0,
	1529, 0, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178,
	1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188,
	1189, 1190, 1191, 1192, 1529, 1198, 0, 1200, 1201, 1202,
	1203, 0, 0, 0, 0, 982, 0, 0, 0, 0,
	0, 0, 0, 0, 1226, 0, 0, 0, 0, 0,
	2008, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1529, 0, 0, 0, 0, 0, 1260, 1261, 0, 0,
	1274, 59, 1285, 1287, 1292, 1295, 1296, 1297, 302, 302,
	0, 0, 0, 0, 0, 0, 0, 0, 1523, 1521,
	1522, 1514, 1515, 1516, 1517, 1519, 1520, 0, 1785, 0,
	0, 0, 1130, 0, 1089, 0, 1011, 1524, 1525, 1526,
	0, 1795, 1523, 1521, 1522, 1514, 1515, 1516, 1517, 1519,
	1520, 0, 0, 0, 302, 0, 0, 302, 537, 0,
	0, 537, 537, 0, 0, 1011, 0, 0, 1828, 1012,
	0, 0, 0, 0, 1832, 1833, 1130, 0, 1523, 1521,
	1522, 1514, 1515, 1516, 1517, 1519, 1520, 2075, 0, 0,
	1655, 576, 59, 0, 0, 59, 1866, 0, 1867, 0,
	302, 1869, 1870, 0, 0, 1873, 302, 0, 0, 0,
	0, 0, 0, 1278, 0, 979, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 979, 1216, 0, 0, 1896, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1011, 0, 1278, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 811, 0, 0, 0, 0, 0, 820, 0,
	0, 0, 1011, 1011, 0, 0, 0, 0, 0, 0,
	0, 1011, 1011, 59, 0, 59, 0, 0, 1655, 0,
	576, 1366, 0, 1655, 0, 0, 0, 0, 0, 0,
	0, 59, 0, 0, 0, 0, 59, 302, 302, 0,
	0, 302, 0, 0, 1011, 979, 0, 1012, 0, 1828,
	0, 0, 0, 0, 0, 0, 1957, 0, 0, 0,
	0, 0, 0, 0, 1130, 0, 1962, 0, 0, 1964,
	0, 0, 1452, 1453, 0, 1278, 0, 302, 1458, 0,
	1655, 979, 979, 0, 0, 0, 0, 1012, 0, 0,
	979, 979, 0, 1512, 1513, 0, 1530, 1531, 1532, 0,
	0, 0, 0, 0, 0, 1996, 0, 0, 0, 1878,
	1477, 0, 0, 0, 0, 0, 0, 1484, 0, 0,
	1488, 0, 0, 979, 0, 0, 0, 0, 0, 0,
	59, 0, 0, 0, 0, 0, 1502, 0, 0, 0,
	0, 0, 0, 576, 0, 0, 1527, 0, 0, 0,
	0, 0, 1655, 0, 0, 0, 0, 302, 0, 0,
	0, 899, 0, 0, 2033, 0, 0, 1292, 1292, 1292,
	0, 0, 302, 0, 0, 1405, 0, 0, 1828, 0,
	1512, 1513, 0, 1530, 1531, 1532, 1011, 576, 1828, 0,
	1570, 0, 1012, 0, 1089, 0, 1518, 0, 1512, 1513,
	0, 1530, 1531, 1532, 59, 0, 0, 59, 0, 0,
	0, 0, 0, 0, 1691, 0, 0, 0, 0, 2063,
	2064, 0, 1591, 0, 0, 0, 0, 0, 0, 0,
	0, 1533, 0, 1527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2082, 0, 0, 0, 2083,
	0, 1527, 1528, 0, 0, 0, 0, 0, 1216, 0,
	0, 0, 0, 0, 576, 979, 1619, 0, 0, 0,
	0, 1108, 0, 0, 0, 1828, 576, 0, 898, 0,
	0, 0, 0, 1518, 2106, 0, 576, 0, 0, 302,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1518, 1652, 849, 850, 0, 869, 870, 871, 879,
	880, 881, 0, 0, 0, 0, 0, 1655, 1533, 872,
	2033, 0, 0, 1828, 1529, 0, 852, 0, 0, 883,
	1682, 0, 0, 1683, 0, 0, 1533, 0, 0, 1528,
	0, 0, 0, 898, 0, 1688, 0, 0, 0, 0,
	851, 0, 0, 302, 1697, 576, 866, 1528, 0, 0,
	0, 0, 1701, 0, 1011, 1591, 0, 2166, 0, 0,
	0, 0, 0, 0, 0, 545, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1725, 0, 0, 0, 1727,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1011, 0, 857, 1524, 1525, 1526,
	0, 1529, 1523, 1521, 1522, 1514, 1515, 1516, 1517, 1519,
	1520, 0, 1758, 1759, 0, 876, 884, 0, 0, 1529,
	0, 1765, 1766, 1767, 0, 0, 59, 0, 0, 0,
	59, 882, 0, 979, 0, 0, 0, 0, 811, 0,
	0, 0, 0, 0, 0, 0, 874, 59, 0, 0,
	820, 0, 867, 59, 0, 0, 0, 0, 1641, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 979, 0, 0, 0, 873, 0, 0,
	0, 0, 0, 0, 1524, 1525, 1526, 0, 0, 1523,
	1521, 1522, 1514, 1515, 1516, 1517, 1519, 1520, 0, 1011,
	0, 0, 1524, 1525, 1526, 0, 0, 1523, 1521, 1522,
	1514, 1515, 1516, 1517, 1519, 1520, 0, 0, 0, 0,
	0, 0, 0, 0, 868, 0, 1856, 0, 0, 0,
	849, 850, 0, 869, 870, 871, 879, 880, 881, 877,
	0, 0, 0, 0, 0, 0, 872, 0, 0, 0,
	0, 0, 0, 852, 0, 1880, 883, 0, 0, 1883,
	1884, 0, 0, 0, 1886, 0, 0, 0, 0, 0,
	0, 1888, 0, 1890, 0, 0, 0, 851, 979, 0,
	0, 0, 0, 866, 0, 0, 0, 0, 0, 1897,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 875, 0, 0, 863, 864, 865,
	878, 0, 862, 860, 861, 853, 854, 855, 856, 858,
	859, 0, 1906, 0, 0, 0, 0, 0, 1909, 0,
	0, 1405, 0, 857, 0, 849, 850, 0, 869, 870,
	871, 879, 880, 881, 0, 0, 0, 0, 0, 0,
	0, 872, 876, 884, 0, 0, 0, 0, 852, 0,
	0, 883, 0, 0, 0, 0, 0, 0, 882, 0,
	0, 0, 0, 0, 1936, 0, 1405, 0, 0, 1405,
	0, 0, 851, 874, 849, 850, 0, 0, 866, 867,
	879, 880, 881, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 852, 0, 0,
	883, 0, 0, 0, 873, 0, 0, 849, 850, 0,
	869, 870, 871, 879, 880, 881, 0, 0, 0, 0,
	0, 851, 1986, 0, 0, 0, 0, 866, 857, 0,
	852, 0, 0, 883, 0, 0, 0, 2000, 2001, 0,
	0, 0, 0, 0, 0, 0, 0, 876, 884, 0,
	0, 868, 0, 0, 851, 0, 0, 0, 0, 0,
	866, 0, 0, 882, 0, 0, 877, 0, 2013, 0,
	0, 0, 0, 0, 0, 0, 0, 857, 874, 0,
	0, 0, 0, 0, 867, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 876, 884, 0, 0,
	0, 2036, 0, 0, 0, 0, 0, 0, 0, 873,
	857, 0, 0, 0, 0, 0, 59, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 874, 2053, 876,
	884, 875, 0, 867, 863, 864, 865, 878, 0, 862,
	860, 861, 853, 854, 855, 856, 858, 859, 0, 1405,
	1405, 0, 0, 1405, 0, 1554, 868, 0, 0, 0,
	874, 0, 0, 0, 0, 0, 867, 0, 0, 0,
	0, 877, 0, 0, 0, 0, 0, 0, 820, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 868, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	877, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 875, 0, 868, 863,
	864, 865, 878, 0, 862, 860, 861, 853, 854, 855,
	856, 858, 859, 877, 0, 0, 0, 0, 0, 2018,
	1553, 0, 0, 0, 0, 0, 0, 59, 0, 0,
	0, 2149, 0, 0, 0, 0, 0, 0, 0, 2159,
	2159, 0, 0, 0, 1405, 875, 0, 0, 0, 0,
	0, 878, 0, 862, 860, 861, 853, 854, 855, 856,
	858, 859, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2159, 0, 0, 875, 0,
	0, 863, 864, 865, 878, 0, 862, 860, 861, 853,
	854, 855, 856, 858, 859, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	2159, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	898, 98, 99, 349, 100, 350, 351, 352, 353, 246,
	354, 355, 356, 357, 101, 102, 103, 247, 248, 249,
	250, 104, 251, 252, 358, 105, 253, 254, 106, 107,
	359, 360, 255, 256, 257, 361, 108, 258, 362, 335,
	363, 109, 110, 111, 0, 112, 364, 113, 114, 115,
	365, 336, 116, 117, 366, 367, 368, 369, 370, 371,
	118, 119, 303, 120, 259, 121, 260, 261, 372, 122,
	373, 123, 374, 375, 376, 124, 125, 377, 126, 378,
	0, 379, 262, 127, 128, 129, 263, 264, 380, 381,
	382, 130, 131, 265, 0, 132, 383, 133, 384, 385,
	337, 386, 134, 266, 387, 267, 388, 135, 136, 137,
	138, 268, 269, 339, 389, 142, 390, 139, 391, 338,
	140, 270, 141, 271, 272, 273, 392, 274, 393, 340,
	143, 144, 145, 341, 146, 147, 148, 394, 150, 149,
	395, 275, 342, 151, 343, 396, 152, 397, 398, 153,
	0, 154, 155, 156, 158, 276, 157, 344, 159, 160,
	162, 161, 399, 400, 401, 277, 163, 278, 164, 165,
	402, 166, 403, 404, 167, 405, 406, 168, 279, 345,
	169, 346, 280, 170, 171, 172, 173, 174, 407, 281,
	175, 282, 176, 408, 177, 178, 179, 180, 181, 283,
	182, 183, 409, 184, 185, 186, 187, 188, 190, 191,
	189, 192, 193, 194, 195, 410, 196, 347, 197, 198,
	284, 199, 0, 203, 204, 205, 206, 411, 285, 207,
	208, 209, 412, 210, 200, 201, 211, 348, 212, 286,
	287, 213, 413, 219, 214, 215, 202, 216, 218, 288,
	217, 289, 414, 220, 415, 221, 222, 223, 224, 225,
	416, 290, 291, 292, 417, 418, 226, 227, 293, 294,
	419, 228, 229, 230, 231, 420, 421, 232, 233, 234,
	235, 422, 236, 423, 295, 237, 238, 239, 296, 297,
	424, 425, 240, 426, 427, 428, 429, 241, 242, 243,
	244, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 0, 0,
	1822, 0, 0, 0, 0, 0, 0, 0, 1823, 98,
	99, 349, 100, 350, 351, 352, 353, 246, 354, 355,
	356, 357, 101, 102, 103, 247, 248, 249, 250, 104,
	251, 252, 358, 105, 253, 254, 106, 107, 359, 360,
	255, 256, 257, 361, 108, 258, 362, 335, 363, 109,
	110, 111, 0, 112, 364, 113, 114, 115, 365, 336,
	116, 117, 366, 367, 368, 369, 370, 371, 118, 119,
	303, 120, 259, 121, 260, 261, 372, 122, 373, 123,
	374, 375, 376, 124, 125, 377, 126, 378, 0, 379,
	262, 127, 128, 129, 263, 264, 380, 381, 382, 130,
	131, 265, 0, 132, 383, 133, 384, 385, 337, 386,
	134, 266, 387, 267, 388, 135, 136, 137, 138, 268,
	269, 339, 389, 142, 390, 139, 391, 338, 140, 270,
	141, 271, 272, 273, 392, 274, 393, 340, 143, 144,
	145, 341, 146, 147, 148, 394, 150, 149, 395, 275,
	342, 151, 343, 396, 152, 397, 398, 153, 0, 154,
	155, 156, 158, 276, 157, 344, 159, 160, 162, 161,
	399, 400, 401, 277, 163, 278, 164, 165, 402, 166,
	403, 404, 167, 405, 406, 168, 279, 345, 169, 346,
	280, 170, 171, 172, 173, 174, 407, 281, 175, 282,
	176, 408, 177, 178, 179, 180, 181, 283, 182, 183,
	409, 184, 185, 186, 187, 188, 190, 191, 189, 192,
	193, 194, 195, 410, 196, 347, 197, 198, 284, 199,
	0, 203, 204, 205, 206, 411, 285, 207, 208, 209,
	412, 210, 200, 201, 211, 348, 212, 286, 287, 213,
	413, 219, 214, 215, 202, 216, 218, 288, 217, 289,
	414, 220, 415, 221, 222, 223, 224, 225, 416, 290,
	291, 292, 417, 418, 226, 227, 293, 294, 419, 228,
	229, 230, 231, 420, 421, 232, 233, 234, 235, 422,
	236, 423, 295, 237, 238, 239, 296, 297, 424, 425,
	240, 426, 427, 428, 429, 241, 242, 243, 244, 245,
	0, 0, 0, 330, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2098, 98,
	99, 349, 100, 350, 351, 352, 353, 246, 354, 355,
	356, 357, 101, 102, 103, 247, 248, 249, 250, 104,
	251, 252, 358, 105, 253, 254, 106, 107, 359, 360,
	255, 256, 257, 361, 108, 258, 362, 335, 363, 109,
	110, 111, 0, 112, 364, 113, 114, 115, 365, 336,
	116, 117, 366, 367, 368, 369, 370, 371, 118, 119,
	303, 120, 259, 121, 260, 261, 372, 122, 373, 123,
	374, 375, 376, 124, 125, 377, 126, 378, 0, 379,
	262, 127, 128, 129, 263, 264, 380, 381, 382, 130,
	131, 265, 0, 132, 383, 133, 384, 385, 337, 386,
	134, 266, 387, 267, 388, 135, 136, 137, 138, 268,
	269, 339, 389, 142, 390, 139, 391, 338, 140, 270,
	141, 271, 272, 273, 392, 274, 393, 340, 143, 144,
	145, 341, 146, 147, 148, 394, 150, 149, 395, 275,
	342, 151, 343, 396, 152, 397, 398, 153, 0, 154,
	155, 156, 158, 276, 157, 344, 159, 160, 162, 161,
	399, 400, 401, 277, 163, 278, 164, 165, 402, 166,
	403, 404, 167, 405, 406, 168, 279, 345, 169, 346,
	280, 170, 171, 172, 173, 174, 407, 281, 175, 282,
	176, 408, 177, 178, 179, 180, 181, 283, 182, 183,
	409, 184, 185, 186, 187, 188, 190, 191, 189, 192,
	193, 194, 195, 410, 196, 347, 197, 198, 284, 199,
	0, 203, 204, 205, 206, 411, 285, 207, 208, 209,
	412, 210, 200, 201, 211, 348, 212, 286, 287, 213,
	413, 219, 214, 215, 202, 216, 218, 288, 217, 289,
	414, 220, 415, 221, 222, 223, 224, 225, 416, 290,
	291, 292, 417, 418, 226, 227, 293, 294, 419, 228,
	229, 230, 231, 420, 421, 232, 233, 234, 235, 422,
	236, 423, 295, 237, 238, 239, 296, 297, 424, 425,
	240, 426, 427, 428, 429, 241, 242, 243, 244, 245,
	330, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 846, 0, 0, 98, 99, 349, 100,
	350, 351, 352, 353, 246, 354, 355, 356, 357, 101,
	102, 103, 247, 248, 249, 250, 104, 251, 252, 358,
	105, 253, 254, 106, 107, 359, 360, 255, 256, 257,
	361, 108, 258, 362, 335, 363, 109, 110, 111, 0,
	112, 364, 113, 114, 115, 365, 336, 116, 117, 366,
	367, 368, 369, 370, 371, 118, 119, 303, 120, 259,
	121, 260, 261, 372, 122, 373, 123, 374, 375, 376,
	124, 125, 377, 126, 378, 0, 379, 262, 127, 128,
	129, 263, 264, 380, 381, 382, 130, 131, 265, 0,
	132, 383, 133, 384, 385, 337, 386, 134, 266, 387,
	267, 388, 135, 136, 137, 138, 268, 269, 339, 389,
	142, 390, 139, 391, 338, 140, 270, 141, 271, 272,
	273, 392, 274, 393, 340, 143, 144, 145, 341, 146,
	147, 148, 394, 150, 149, 395, 275, 342, 151, 343,
	396, 152, 397, 398, 153, 0, 154, 155, 156, 158,
	276, 157, 344, 159, 160, 162, 161, 399, 400, 401,
	277, 163, 278, 164, 165, 402, 166, 403, 404, 167,
	405, 406, 168, 279, 345, 169, 346, 280, 170, 171,
	172, 173, 174, 407, 281, 175, 282, 176, 408, 177,
	178, 179, 180, 181, 283, 182, 183, 409, 184, 185,
	186, 187, 188, 190, 191, 189, 192, 193, 194, 195,
	410, 196, 347, 197, 198, 284, 199, 0, 203, 204,
	205, 206, 411, 285, 207, 208, 209, 412, 210, 200,
	201, 211, 348, 212, 286, 287, 213, 413, 219, 214,
	215, 202, 216, 218, 288, 217, 289, 414, 220, 415,
	221, 222, 223, 224, 225, 416, 290, 291, 292, 417,
	418, 226, 227, 293, 294, 419, 228, 229, 230, 231,
	420, 421, 232, 233, 234, 235, 422, 236, 423, 295,
	237, 238, 239, 296, 297, 424, 425, 240, 426, 427,
	428, 429, 241, 242, 243, 244, 245, 618, 607, 608,
	605, 606, 597, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 0,
	0, 634, 600, 0, 0, 0, 101, 102, 103, 247,
	649, 249, 650, 104, 651, 652, 0, 105, 253, 254,
	106, 107, 603, 633, 653, 654, 257, 0, 108, 645,
	0, 626, 0, 109, 110, 111, 0, 112, 0, 113,
	114, 115, 0, 336, 116, 117, 0, 627, 629, 0,
	628, 630, 118, 119, 303, 120, 655, 121, 656, 657,
	821, 122, 0, 123, 0, 0, 0, 648, 125, 0,
	126, 0, 0, 0, 591, 127, 128, 129, 635, 636,
	614, 0, 0, 130, 131, 658, 0, 132, 0, 133,
	0, 0, 337, 0, 134, 646, 0, 267, 0, 135,
	136, 137, 138, 642, 644, 339, 0, 142, 0, 139,
	0, 338, 140, 659, 141, 660, 661, 662, 0, 625,
	0, 340, 143, 144, 145, 341, 146, 147, 148, 0,
	150, 149, 0, 647, 342, 151, 343, 0, 152, 0,
	0, 153, 0, 154, 155, 156, 158, 276, 157, 344,
	159, 160, 162, 161, 586, 0, 615, 643, 163, 663,
	164, 165, 0, 166, 0, 0, 167, 0, 0, 168,
	279, 345, 169, 346, 637, 170, 171, 172, 173, 174,
	0, 638, 175, 282, 176, 0, 177, 178, 179, 180,
	181, 664, 182, 183, 0, 184, 185, 186, 187, 188,
	190, 191, 189, 192, 193, 194, 195, 0, 196, 347,
	197, 198, 592, 199, 0, 203, 204, 205, 206, 79,
	285, 207, 208, 209, 631, 210, 200, 201, 211, 348,
	212, 665, 287, 213, 0, 219, 214, 215, 202, 216,
	218, 666, 217, 639, 0, 220, 81, 221, 222, 223,
	224, 225, 0, 290, 667, 668, 0, 0, 226, 227,
	640, 641, 613, 228, 229, 230, 231, 0, 0, 232,
	233, 234, 235, 632, 236, 0, 295, 237, 238, 239,
	703, 669, 0, 0, 240, 0, 0, 0, 77, 241,
	242, 243, 244, 245, 587, 78, 0, 0, 0, 0,
	585, 0, 0, 0, 0, 583, 584, 618, 607, 608,
	605, 606, 597, 0, 593, 0, 0, 0, 0, 596,
	0, 0, 0, 98, 99, 1242, 100, 0, 0, 0,
	0, 634, 600, 0, 0, 0, 101, 102, 103, 247,
	649, 249, 650, 104, 651, 652, 0, 105, 253, 254,
	106, 107, 603, 633, 653, 654, 257, 0, 108, 645,
	0, 626, 0, 109, 110, 111, 0, 112, 0, 113,
	114, 115, 0, 336, 116, 117, 0, 627, 629, 0,
	628, 630, 118, 119, 303, 120, 655, 121, 656, 657,
	0, 122, 0, 123, 0, 1243, 0, 648, 125, 0,
	126, 0, 0, 0, 591, 127, 128, 129, 635, 636,
	614, 0, 0, 130, 131, 658, 0, 132, 0, 133,
	0, 0, 337, 0, 134, 646, 0, 267, 0, 135,
	136, 137, 138, 642, 644, 339, 0, 142, 0, 139,
	0, 338, 140, 659, 141, 660, 661, 662, 0, 625,
	0, 340, 143, 144, 145, 341, 146, 147, 148, 0,
	150, 149, 0, 647, 342, 151, 343, 0, 152, 0,
	0, 153, 0, 154, 155, 156, 158, 276, 157, 344,
	159, 160, 162, 161, 586, 0, 615, 643, 163, 663,
	164, 165, 0, 166, 0, 0, 167, 0, 0, 168,
	279, 345, 169, 346, 637, 170, 171, 172, 173, 174,
	0, 638, 175, 282, 176, 0, 177, 178, 179, 180,
	181, 664, 182, 183, 0, 184, 185, 186, 187, 188,
	190, 191, 189, 192, 193, 194, 195, 0, 196, 347,
	197, 198, 592, 199, 0, 203, 204, 205, 206, 0,
	285, 207, 208, 209, 631, 210, 200, 201, 211, 348,
	212, 665, 287, 213, 0, 219, 214, 215, 202, 216,
	218, 666, 217, 639, 0, 220, 0, 221, 222, 223,
	224, 225, 0, 290, 667, 668, 0, 0, 226, 227,
	640, 641, 613, 228, 229, 230, 231, 0, 0, 232,
	233, 234, 235, 632, 236, 0, 295, 237, 238, 239,
	296, 669, 1241, 0, 240, 0, 0, 0, 0, 241,
	242, 243, 244, 245, 587, 0, 0, 0, 0, 0,
	585, 0, 0, 0, 0, 583, 584, 1244, 618, 607,
	608, 605, 606, 597, 593, 1239, 0, 0, 0, 596,
	0, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 0, 634, 600, 0, 0, 0, 101, 102, 103,
	247, 649, 249, 650, 104, 651, 652, 0, 105, 253,
	254, 106, 107, 603, 633, 653, 654, 257, 0, 108,
	645, 0, 626, 0, 109, 110, 111, 0, 112, 0,
	113, 114, 115, 0, 336, 116, 117, 0, 627, 629,
	0, 628, 630, 118, 119, 303, 120, 655, 121, 656,
	657, 0, 122, 0, 123, 0, 0, 0, 648, 125,
	0, 126, 0, 0, 0, 591, 127, 128, 129, 635,
	636, 614, 0, 0, 130, 131, 658, 0, 132, 0,
	133, 0, 0, 337, 0, 134, 646, 0, 267, 0,
	135, 136, 137, 138, 642, 644, 339, 0, 142, 0,
	139, 0, 338, 140, 659, 141, 660, 661, 662, 0,
	625, 0, 340, 143, 144, 145, 341, 146, 147, 148,
	0, 150, 149, 0, 647, 342, 151, 343, 0, 152,
	0, 0, 153, 0, 154, 155, 156, 158, 276, 157,
	344, 159, 160, 162, 161, 586, 0, 615, 643, 163,
	663, 164, 165, 0, 166, 0, 0, 167, 0, 0,
	168, 279, 345, 169, 346, 637, 170, 171, 172, 173,
	174, 0, 638, 175, 282, 176, 0, 177, 178, 179,
	180, 181, 664, 182, 183, 0, 184, 185, 186, 187,
	188, 190, 191, 189, 192, 193, 194, 195, 0, 196,
	347, 197, 198, 592, 199, 0, 203, 204, 205, 206,
	79, 285, 207, 208, 209, 631, 210, 200, 201, 211,
	348, 212, 665, 287, 213, 0, 219, 214, 215, 202,
	216, 218, 666, 217, 639, 0, 220, 81, 221, 222,
	223, 224, 225, 0, 290, 667, 668, 0, 0, 226,
	227, 640, 641, 613, 228, 229, 230, 231, 0, 0,
	232, 233, 234, 235, 632, 236, 0, 295, 237, 238,
	239, 703, 669, 0, 0, 240, 0, 0, 0, 77,
	241, 242, 243, 244, 245, 587, 78, 0, 0, 0,
	0, 585, 0, 0, 0, 0, 583, 584, 618, 607,
	608, 605, 606, 597, 0, 593, 0, 0, 0, 0,
	596, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 0, 634, 600, 0, 0, 0, 101, 102, 103,
	247, 649, 249, 650, 104, 651, 652, 1288, 105, 253,
	254, 106, 107, 603, 633, 653, 654, 257, 0, 108,
	645, 0, 626, 0, 109, 110, 111, 0, 112, 0,
	113, 114, 115, 0, 336, 116, 117, 0, 627, 629,
	0, 628, 630, 118, 119, 303, 120, 655, 121, 656,
	657, 0, 122, 0, 123, 0, 0, 0, 648, 125,
	0, 126, 0, 0, 0, 591, 127, 128, 129, 635,
	636, 614, 0, 0, 130, 131, 658, 0, 132, 0,
	133, 0, 1293, 337, 0, 134, 646, 0, 267, 0,
	135, 136, 137, 138, 642, 644, 339, 0, 142, 0,
	139, 0, 338, 140, 659, 141, 660, 661, 662, 0,
	625, 0, 340, 143, 144, 145, 341, 146, 147, 148,
	0, 150, 149, 1289, 647, 342, 151, 343, 0, 152,
	0, 0, 153, 0, 154, 155, 156, 158, 276, 157,
	344, 159, 160, 162, 161, 586, 0, 615, 643, 163,
	663, 164, 165, 0, 166, 0, 0, 167, 0, 0,
	168, 279, 345, 169, 346, 637, 170, 171, 172, 173,
	174, 0, 638, 175, 282, 176, 0, 177, 178, 179,
	180, 181, 664, 182, 183, 0, 184, 185, 186, 187,
	188, 190, 191, 189, 192, 193, 194, 195, 0, 196,
	347, 197, 198, 592, 199, 0, 203, 204, 205, 206,
	0, 285, 207, 208, 209, 631, 210, 200, 201, 211,
	348, 212, 665, 287, 213, 0, 219, 214, 215, 202,
	216, 218, 666, 217, 639, 0, 220, 0, 221, 222,
	223, 224, 225, 0, 290, 667, 668, 0, 1290, 226,
	227, 640, 641, 613, 228, 229, 230, 231, 0, 0,
	232, 233, 234, 235, 632, 236, 0, 295, 237, 238,
	239, 296, 669, 0, 0, 240, 0, 0, 0, 0,
	241, 242, 243, 244, 245, 587, 0, 0, 0, 0,
	0, 585, 0, 0, 0, 0, 583, 584, 618, 607,
	608, 605, 606, 597, 0, 593, 0, 0, 0, 0,
	596, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 0, 634, 600, 0, 0, 0, 101, 102, 103,
	247, 649, 249, 650, 104, 651, 652, 0, 105, 253,
	254, 106, 107, 603, 633, 653, 654, 257, 0, 108,
	645, 0, 626, 0, 109, 110, 111, 0, 112, 0,
	113, 114, 115, 0, 336, 116, 117, 0, 627, 629,
	0, 628, 630, 118, 119, 303, 120, 655, 121, 656,
	657, 0, 122, 0, 123, 0, 0, 0, 648, 125,
	0, 126, 0, 0, 0, 591, 127, 128, 129, 635,
	636, 614, 0, 0, 130, 131, 658, 0, 132, 0,
	133, 0, 0, 337, 0, 134, 646, 0, 267, 0,
	135, 136, 137, 138, 642, 644, 339, 0, 142, 0,
	139, 0, 338, 140, 659, 141, 660, 661, 662, 0,
	625, 0, 340, 143, 144, 145, 341, 146, 147, 148,
	0, 150, 149, 0, 647, 342, 151, 343, 0, 152,
	0, 0, 153, 0, 154, 155, 156, 158, 276, 157,
	344, 159, 160, 162, 161, 586, 1772, 615, 643, 163,
	663, 164, 165, 0, 166, 0, 0, 167, 0, 0,
	168, 279, 345, 169, 346, 637, 170, 171, 172, 173,
	174, 0, 638, 175, 282, 176, 0, 177, 178, 179,
	180, 181, 664, 182, 183, 0, 184, 185, 186, 187,
	188, 190, 191, 189, 192, 193, 194, 195, 0, 196,
	347, 197, 198, 592, 199, 0, 203, 204, 205, 206,
	0, 285, 207, 208, 209, 631, 210, 200, 201, 211,
	348, 212, 665, 287, 213, 0, 219, 214, 215, 202,
	216, 218, 666, 217, 639, 0, 220, 0, 221, 222,
	223, 224, 225, 0, 290, 667, 668, 0, 0, 226,
	227, 640, 641, 613, 228, 229, 230, 231, 0, 0,
	232, 233, 234, 235, 632, 236, 0, 295, 237, 238,
	239, 296, 669, 0, 0, 240, 0, 0, 0, 0,
	241, 242, 243, 244, 245, 587, 0, 0, 0, 0,
	0, 585, 0, 0, 0, 0, 583, 584, 812, 618,
	607, 608, 605, 606, 597, 593, 0, 0, 0, 0,
	596, 0, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 0, 634, 600, 0, 0, 0, 101, 102,
	103, 247, 649, 249, 650, 104, 651, 652, 0, 105,
	253, 254, 106, 107, 603, 633, 653, 654, 257, 0,
	108, 645, 0, 626, 0, 109, 110, 111, 0, 112,
	0, 113, 114, 115, 0, 336, 116, 117, 0, 627,
	629, 0, 628, 630, 118, 119, 303, 120, 655, 121,
	656, 657, 0, 122, 0, 123, 0, 0, 0, 648,
	125, 0, 126, 0, 0, 0, 591, 127, 128, 129,
	635, 636, 614, 0, 0, 130, 131, 658, 0, 132,
	0, 133, 0, 0, 337, 0, 134, 646, 0, 267,
	0, 135, 136, 137, 138, 642, 644, 339, 0, 142,
	0, 139, 0, 338, 140, 659, 141, 660, 661, 662,
	0, 625, 0, 340, 143, 144, 145, 341, 146, 147,
	148, 0, 150, 149, 0, 647, 342, 151, 343, 0,
	152, 0, 0, 153, 0, 154, 155, 156, 158, 276,
	157, 344, 159, 160, 162, 161, 586, 0, 615, 643,
	163, 663, 164, 165, 0, 166, 0, 0, 167, 0,
	0, 168, 279, 345, 169, 346, 637, 170, 171, 172,
	173, 174, 0, 638, 175, 282, 176, 0, 177, 178,
	179, 180, 181, 664, 182, 183, 0, 184, 185, 186,
	187, 188, 190, 191, 189, 192, 193, 194, 195, 0,
	196, 347, 197, 198, 592, 199, 0, 203, 204, 205,
	206, 0, 285, 207, 208, 209, 631, 210, 200, 201,
	211, 348, 212, 665, 287, 213, 0, 219, 214, 215,
	202, 216, 218, 666, 217, 639, 0, 220, 0, 221,
	222, 223, 224, 225, 0, 290, 667, 668, 0, 0,
	226, 227, 640, 641, 613, 228, 229, 230, 231, 0,
	0, 232, 233, 234, 235, 632, 236, 0, 295, 237,
	238, 239, 296, 669, 0, 0, 240, 0, 0, 0,
	0, 241, 242, 243, 244, 245, 587, 0, 0, 0,
	0, 0, 585, 0, 0, 0, 0, 583, 584, 0,
	0, 0, 0, 0, 904, 1234, 593, 0, 0, 0,
	0, 596, 618, 607, 608, 605, 606, 597, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 0, 634, 600, 0, 0,
	0, 101, 102, 103, 247, 649, 249, 650, 104, 651,
	652, 0, 105, 253, 254, 106, 107, 603, 633, 653,
	654, 257, 0, 108, 645, 0, 626, 0, 109, 110,
	111, 0, 112, 0, 113, 114, 115, 0, 336, 116,
	117, 0, 627, 629, 0, 628, 630, 118, 119, 303,
	120, 655, 121, 656, 657, 821, 122, 0, 123, 0,
	0, 0, 648, 125, 0, 126, 0, 0, 0, 591,
	127, 128, 129, 635, 636, 614, 0, 0, 130, 131,
	658, 0, 132, 0, 133, 0, 0, 337, 0, 134,
	646, 0, 267, 0, 135, 136, 137, 138, 642, 644,
	339, 0, 142, 0, 139, 0, 338, 140, 659, 141,
	660, 661, 662, 0, 625, 0, 340, 143, 144, 145,
	341, 146, 147, 148, 0, 150, 149, 0, 647, 342,
	151, 343, 0, 152, 0, 0, 153, 0, 154, 155,
	156, 158, 276, 157, 344, 159, 160, 162, 161, 586,
	0, 615, 643, 163, 663, 164, 165, 0, 166, 0,
	0, 167, 0, 0, 168, 279, 345, 169, 346, 637,
	170, 171, 172, 173, 174, 0, 638, 175, 282, 176,
	0, 177, 178, 179, 180, 181, 664, 182, 183, 0,
	184, 185, 186, 187, 188, 190, 191, 189, 192, 193,
	194, 195, 0, 196, 347, 197, 198, 592, 199, 0,
	203, 204, 205, 206, 0, 285, 207, 208, 209, 631,
	210, 200, 201, 211, 348, 212, 665, 287, 213, 0,
	219, 214, 215, 202, 216, 218, 666, 217, 639, 0,
	220, 0, 221, 222, 223, 224, 225, 0, 290, 667,
	668, 0, 0, 226, 227, 640, 641, 613, 228, 229,
	230, 231, 0, 0, 232, 233, 234, 235, 632, 236,
	0, 295, 237, 238, 239, 296, 669, 0, 0, 240,
	0, 0, 0, 0, 241, 242, 243, 244, 245, 587,
	0, 0, 0, 0, 0, 585, 0, 0, 0, 0,
	583, 584, 618, 607, 608, 605, 606, 597, 0, 593,
	0, 0, 0, 0, 596, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 0, 634, 600, 0, 0,
	0, 101, 102, 103, 247, 649, 249, 650, 104, 651,
	652, 0, 105, 253, 254, 106, 107, 603, 633, 653,
	654, 257, 0, 108, 645, 0, 626, 0, 109, 110,
	111, 0, 112, 0, 113, 114, 115, 0, 336, 116,
	117, 0, 627, 629, 0, 628, 630, 118, 119, 303,
	120, 655, 121, 656, 657, 0, 122, 0, 123, 0,
	0, 0, 648, 125, 0, 126, 0, 0, 0, 591,
	127, 128, 129, 635, 636, 614, 0, 0, 130, 131,
	658, 0, 132, 0, 133, 0, 0, 337, 0, 134,
	646, 0, 267, 0, 135, 136, 137, 138, 642, 644,
	339, 0, 142, 0, 139, 0, 338, 140, 659, 141,
	660, 661, 662, 0, 625, 0, 340, 143, 144, 145,
	341, 146, 147, 148, 0, 150, 149, 0, 647, 342,
	151, 343, 0, 152, 0, 0, 153, 0, 154, 155,
	156, 158, 276, 157, 344, 159, 160, 162, 161, 586,
	0, 615, 643, 163, 663, 164, 165, 0, 166, 0,
	0, 167, 0, 0, 168, 279, 345, 169, 346, 637,
	170, 171, 172, 173, 174, 0, 638, 175, 282, 176,
	0, 177, 178, 179, 180, 181, 664, 182, 183, 0,
	184, 185, 186, 187, 188, 190, 191, 189, 192, 193,
	194, 195, 0, 196, 347, 197, 198, 592, 199, 0,
	203, 204, 205, 206, 0, 285, 207, 208, 209, 631,
	210, 200, 201, 211, 348, 212, 665, 287, 213, 0,
	219, 214, 215, 202, 216, 218, 666, 217, 639, 0,
	220, 0, 221, 222, 223, 224, 225, 0, 290, 667,
	668, 0, 0, 226, 227, 640, 641, 613, 228, 229,
	230, 231, 0, 0, 232, 233, 234, 235, 632, 236,
	0, 295, 237, 238, 239, 296, 669, 0, 0, 240,
	0, 0, 0, 0, 241, 242, 243, 244, 245, 587,
	0, 0, 0, 0, 0, 585, 0, 0, 0, 0,
	583, 584, 618, 607, 608, 605, 606, 597, 0, 593,
	1755, 0, 0, 0, 596, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 0, 634, 600, 0, 0,
	0, 101, 102, 103, 247, 649, 249, 650, 104, 651,
	652, 0, 105, 253, 254, 106, 107, 603, 633, 653,
	654, 257, 0, 108, 645, 0, 626, 0, 109, 110,
	111, 0, 112, 0, 113, 114, 115, 0, 336, 116,
	117, 0, 627, 629, 0, 628, 630, 118, 119, 303,
	120, 655, 121, 656, 657, 0, 122, 0, 123, 0,
	0, 0, 648, 125, 0, 126, 0, 0, 0, 591,
	127, 128, 129, 635, 636, 614, 0, 0, 130, 131,
	658, 0, 132, 0, 133, 0, 0, 337, 0, 134,
	646, 0, 267, 0, 135, 136, 137, 138, 642, 644,
	339, 0, 142, 0, 139, 0, 338, 140, 659, 141,
	660, 661, 662, 0, 625, 0, 340, 143, 144, 145,
	341, 146, 147, 148, 0, 150, 149, 0, 647, 342,
	151, 343, 0, 152, 0, 0, 153, 0, 154, 155,
	156, 158, 276, 157, 344, 159, 160, 162, 161, 586,
	0, 615, 643, 163, 663, 164, 165, 0, 166, 0,
	0, 167, 0, 0, 168, 279, 345, 169, 346, 637,
	170, 171, 172, 173, 174, 0, 638, 175, 282, 176,
	0, 177, 178, 179, 180, 181, 664, 182, 183, 0,
	184, 185, 186, 187, 188, 190, 191, 189, 192, 193,
	194, 195, 0, 196, 347, 197, 198, 592, 199, 0,
	203, 204, 205, 206, 0, 285, 207, 208, 209, 631,
	210, 200, 201, 211, 348, 212, 665, 287, 213, 0,
	219, 214, 215, 202, 216, 218, 666, 217, 639, 0,
	220, 0, 221, 222, 223, 224, 225, 0, 290, 667,
	668, 0, 0, 226, 227, 640, 641, 613, 228, 229,
	230, 231, 0, 0, 232, 233, 234, 235, 632, 236,
	0, 295, 237, 238, 239, 296, 669, 1704, 0, 240,
	0, 0, 0, 0, 241, 242, 243, 244, 245, 587,
	0, 0, 0, 0, 0, 585, 0, 0, 0, 0,
	583, 584, 618, 607, 608, 605, 606, 597, 0, 593,
	0, 0, 0, 0, 596, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 0, 634, 600, 0, 0,
	0, 101, 102, 103, 247, 649, 249, 650, 104, 651,
	652, 0, 105, 253, 254, 106, 107, 603, 633, 653,
	654, 257, 0, 108, 645, 0, 626, 0, 109, 110,
	111, 0, 112, 0, 113, 114, 115, 0, 336, 116,
	117, 0, 627, 629, 0, 628, 630, 118, 119, 303,
	120, 655, 121, 656, 657, 0, 122, 0, 123, 0,
	0, 0, 648, 125, 0, 126, 0, 0, 0, 591,
	127, 128, 129, 635, 636, 614, 0, 0, 130, 131,
	658, 0, 132, 0, 133, 0, 0, 337, 0, 134,
	646, 0, 267, 0, 135, 136, 137, 138, 642, 644,
	339, 0, 142, 0, 139, 0, 338, 140, 659, 141,
	660, 661, 662, 0, 625, 0, 340, 143, 144, 145,
	341, 146, 147, 148, 0, 150, 149, 0, 647, 342,
	151, 343, 0, 152, 0, 0, 153, 0, 154, 155,
	156, 158, 276, 157, 344, 159, 160, 162, 161, 586,
	0, 615, 643, 163, 663, 164, 165, 0, 166, 0,
	0, 167, 0, 0, 168, 279, 345, 169, 346, 637,
	170, 171, 172, 173, 174, 0, 638, 175, 282, 176,
	0, 177, 178, 179, 180, 181, 664, 182, 183, 0,
	184, 185, 186, 187, 188, 190, 191, 189, 192, 193,
	194, 195, 0, 196, 347, 197, 198, 592, 199, 0,
	203, 204, 205, 206, 0, 285, 207, 208, 209, 631,
	210, 200, 201, 211, 348, 212, 665, 287, 213, 0,
	219, 214, 215, 202, 216, 218, 666, 217, 639, 0,
	220, 0, 221, 222, 223, 224, 225, 0, 290, 667,
	668, 0, 0, 226, 227, 640, 641, 613, 228, 229,
	230, 231, 0, 0, 232, 233, 234, 235, 632, 236,
	0, 295, 237, 238, 239, 296, 669, 0, 0, 240,
	0, 0, 0, 0, 241, 242, 243, 244, 245, 587,
	0, 0, 0, 0, 0, 585, 0, 0, 0, 0,
	583, 584, 618, 607, 608, 605, 606, 597, 0, 593,
	1694, 0, 0, 0, 596, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 0, 634, 600, 0, 0,
	0, 101, 102, 103, 247, 649, 249, 650, 104, 651,
	652, 0, 105, 253, 254, 106, 107, 603, 633, 653,
	654, 257, 0, 108, 645, 0, 626, 0, 109, 110,
	111, 0, 112, 0, 113, 114, 115, 0, 336, 116,
	117, 0, 627, 629, 0, 628, 630, 118, 119, 303,
	120, 655, 121, 656, 657, 0, 122, 0, 123, 0,
	0, 0, 648, 125, 0, 126, 0, 0, 0, 591,
	127, 128, 129, 635, 636, 614, 0, 0, 130, 131,
	658, 0, 132, 0, 133, 0, 1293, 337, 0, 134,
	646, 0, 267, 0, 135, 136, 137, 138, 642, 644,
	339, 0, 142, 0, 139, 0, 338, 140, 659, 141,
	660, 661, 662, 0, 625, 0, 340, 143, 144, 145,
	341, 146, 147, 148, 0, 150, 149, 0, 647, 342,
	151, 343, 0, 152, 0, 0, 153, 0, 154, 155,
	156, 158, 276, 157, 344, 159, 160, 162, 161, 586,
	0, 615, 643, 163, 663, 164, 165, 0, 166, 0,
	0, 167, 0, 0, 168, 279, 345, 169, 346, 637,
	170, 171, 172, 173, 174, 0, 638, 175, 282, 176,
	0, 177, 178, 179, 180, 181, 664, 182, 183, 0,
	184, 185, 186, 187, 188, 190, 191, 189, 192, 193,
	194, 195, 0, 196, 347, 197, 198, 592, 199, 0,
	203, 204, 205, 206, 0, 285, 207, 208, 209, 631,
	210, 200, 201, 211, 348, 212, 665, 287, 213, 0,
	219, 214, 215, 202, 216, 218, 666, 217, 639, 0,
	220, 0, 221, 222, 223, 224, 225, 0, 290, 667,
	668, 0, 0, 226, 227, 640, 641, 613, 228, 229,
	230, 231, 0, 0, 232, 233, 234, 235, 632, 236,
	0, 295, 237, 238, 239, 296, 669, 0, 0, 240,
	0, 0, 0, 0, 241, 242, 243, 244, 245, 587,
	0, 0, 0, 0, 0, 585, 0, 0, 0, 0,
	583, 584, 618, 607, 608, 605, 606, 597, 0, 593,
	0, 0, 0, 0, 596, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 0, 634, 600, 0, 0,
	0, 101, 102, 103, 247, 649, 249, 650, 104, 651,
	652, 0, 105, 253, 254, 106, 107, 603, 633, 653,
	654, 257, 0, 108, 645, 0, 626, 0, 109, 110,
	111, 0, 112, 0, 113, 114, 115, 0, 336, 116,
	117, 0, 627, 629, 0, 628, 630, 118, 119, 303,
	120, 655, 121, 656, 657, 0, 122, 0, 123, 0,
	0, 0, 648, 125, 0, 126, 0, 0, 0, 591,
	127, 128, 129, 635, 636, 614, 0, 0, 130, 131,
	658, 0, 132, 0, 133, 0, 0, 337, 0, 134,
	646, 0, 267, 0, 135, 136, 137, 138, 642, 644,
	339, 0, 142, 0, 139, 0, 338, 140, 659, 141,
	660, 661, 662, 0, 625, 0, 340, 143, 144, 145,
	341, 146, 147, 148, 0, 150, 149, 0, 647, 342,
	151, 343, 0, 152, 0, 0, 153, 0, 154, 155,
	156, 158, 276, 157, 344, 159, 160, 162, 161, 586,
	0, 615, 643, 163, 663, 164, 165, 0, 166, 0,
	0, 167, 0, 0, 168, 279, 345, 169, 346, 637,
	170, 171, 172, 173, 174, 0, 638, 175, 282, 176,
	0, 177, 178, 179, 180, 181, 664, 182, 183, 0,
	184, 185, 186, 187, 188, 190, 191, 189, 192, 193,
	194, 195, 0, 196, 347, 197, 198, 592, 199, 0,
	203, 204, 205, 206, 0, 285, 207, 208, 209, 631,
	210, 200, 201, 211, 348, 212, 665, 287, 213, 0,
	219, 214, 215, 202, 216, 218, 666, 217, 639, 0,
	220, 0, 221, 222, 223, 224, 225, 0, 290, 667,
	668, 0, 0, 226, 227, 640, 641, 613, 228, 229,
	230, 231, 0, 0, 232, 233, 234, 235, 632, 236,
	0, 295, 237, 238, 239, 296, 669, 0, 0, 240,
	0, 0, 0, 0, 241, 242, 243, 244, 245, 587,
	0, 0, 0, 0, 0, 585, 0, 0, 0, 0,
	583, 584, 812, 618, 607, 608, 605, 606, 597, 593,
	0, 0, 0, 0, 596, 0, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 0, 634, 600, 0,
	0, 0, 101, 102, 103, 247, 649, 249, 650, 104,
	651, 652, 0, 105, 253, 254, 106, 107, 603, 633,
	653, 654, 257, 0, 108, 645, 0, 626, 0, 109,
	110, 111, 0, 112, 0, 113, 114, 115, 0, 336,
	116, 117, 0, 627, 629, 0, 628, 630, 118, 119,
	303, 120, 655, 121, 656, 657, 0, 122, 0, 123,
	0, 0, 0, 648, 125, 0, 126, 0, 0, 0,
	591, 127, 128, 129, 635, 636, 614, 0, 0, 130,
	131, 658, 0, 132, 0, 133, 0, 0, 337, 0,
	134, 646, 0, 267, 0, 135, 136, 137, 138, 642,
	644, 339, 0, 142, 0, 139, 0, 338, 140, 659,
	141, 660, 661, 662, 0, 625, 0, 340, 143, 144,
	145, 341, 146, 147, 148, 0, 150, 149, 0, 647,
	342, 151, 343, 0, 152, 0, 0, 153, 0, 154,
	155, 156, 158, 276, 157, 344, 159, 160, 162, 161,
	586, 0, 615, 643, 163, 663, 164, 165, 0, 166,
	0, 0, 167, 0, 0, 168, 279, 345, 169, 346,
	637, 170, 171, 172, 173, 174, 0, 638, 175, 282,
	176, 0, 177, 178, 179, 180, 181, 664, 182, 183,
	0, 184, 185, 186, 187, 188, 190, 191, 189, 192,
	193, 194, 195, 0, 196, 347, 197, 198, 592, 199,
	0, 203, 204, 205, 206, 0, 285, 207, 208, 209,
	631, 210, 200, 201, 211, 348, 212, 665, 287, 213,
	0, 219, 214, 215, 202, 216, 218, 666, 217, 639,
	0, 220, 0, 221, 222, 223, 224, 225, 0, 290,
	667, 668, 0, 0, 226, 227, 640, 641, 613, 228,
	229, 230, 231, 0, 0, 232, 233, 234, 235, 632,
	236, 0, 295, 237, 238, 239, 296, 669, 0, 0,
	240, 0, 0, 0, 0, 241, 242, 243, 244, 245,
	587, 0, 0, 0, 0, 0, 585, 0, 0, 0,
	0, 583, 584, 618, 607, 608, 605, 606, 597, 0,
	593, 1229, 0, 0, 0, 596, 0, 0, 0, 98,
	99, 1097, 100, 0, 0, 0, 0, 634, 600, 0,
	0, 0, 101, 102, 103, 247, 649, 249, 650, 104,
	651, 652, 0, 105, 253, 254, 106, 107, 603, 633,
	653, 654, 257, 0, 108, 645, 0, 626, 0, 109,
	110, 111, 0, 112, 0, 113, 114, 115, 0, 336,
	116, 117, 0, 627, 629, 0, 628, 630, 118, 119,
	303, 120, 655, 121, 656, 657, 0, 122, 0, 123,
	0, 0, 0, 648, 125, 0, 126, 0, 0, 0,
	591, 127, 128, 129, 635, 636, 614, 0, 0, 130,
	131, 658, 0, 132, 0, 133, 0, 0, 337, 0,
	134, 646, 0, 267, 0, 135, 136, 137, 138, 642,
	644, 339, 0, 142, 0, 139, 0, 338, 140, 659,
	141, 660, 661, 662, 0, 625, 0, 340, 143, 144,
	145, 341, 146, 147, 148, 0, 150, 149, 0, 647,
	342, 151, 343, 0, 152, 0, 0, 153, 0, 154,
	155, 156, 158, 276, 157, 344, 159, 160, 162, 161,
	586, 0, 615, 643, 163, 663, 164, 165, 0, 166,
	0, 0, 167, 0, 0, 168, 279, 345, 169, 346,
	637, 170, 171, 172, 173, 174, 0, 638, 175, 282,
	176, 0, 177, 178, 179, 180, 181, 664, 182, 183,
	0, 184, 185, 186, 187, 188, 190, 191, 189, 192,
	193, 194, 195, 0, 196, 347, 197, 198, 592, 199,
	0, 203, 204, 205, 206, 0, 285, 207, 208, 209,
	631, 210, 200, 201, 211, 348, 212, 665, 287, 213,
	0, 219, 214, 215, 202, 216, 218, 666, 217, 639,
	0, 220, 0, 221, 222, 223, 224, 225, 0, 290,
	667, 668, 0, 0, 226, 227, 640, 641, 613, 228,
	229, 230, 231, 0, 0, 232, 233, 234, 235, 632,
	236, 0, 295, 237, 238, 239, 296, 669, 0, 0,
	240, 0, 0, 0, 0, 241, 242, 243, 244, 245,
	587, 0, 0, 0, 0, 0, 585, 0, 0, 0,
	0, 583, 584, 618, 607, 608, 605, 606, 597, 0,
	593, 0, 0, 0, 0, 596, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 0, 634, 600, 0,
	0, 0, 101, 102, 103, 247, 649, 249, 650, 104,
	651, 652, 0, 105, 253, 254, 106, 107, 603, 633,
	653, 654, 257, 0, 108, 645, 0, 626, 0, 109,
	110, 111, 0, 112, 0, 113, 114, 115, 0, 336,
	116, 2158, 0, 627, 629, 0, 628, 630, 118, 119,
	303, 120, 655, 121, 656, 657, 0, 122, 0, 123,
	0, 0, 0, 648, 125, 0, 126, 0, 0, 0,
	591, 127, 128, 129, 635, 636, 614, 0, 0, 130,
	131, 658, 0, 132, 0, 133, 0, 0, 337, 0,
	134, 646, 0, 267, 0, 135, 136, 137, 138, 642,
	644, 339, 0, 142, 0, 139, 0, 338, 140, 659,
	141, 660, 661, 662, 0, 625, 0, 340, 143, 144,
	145, 341, 146, 147, 148, 0, 150, 149, 0, 647,
	342, 151, 343, 0, 152, 0, 0, 153, 0, 154,
	155, 156, 158, 276, 157, 344, 159, 160, 162, 161,
	586, 0, 615, 643, 163, 663, 164, 165, 0, 166,
	0, 0, 167, 0, 0, 168, 279, 345, 169, 346,
	637, 170, 171, 172, 173, 174, 0, 638, 175, 282,
	176, 0, 177, 178, 179, 180, 181, 664, 182, 183,
	0, 184, 185, 186, 187, 188, 190, 191, 189, 192,
	193, 194, 195, 0, 196, 347, 197, 198, 592, 199,
	0, 203, 204, 205, 206, 0, 285, 207, 208, 209,
	631, 210, 200, 201, 211, 348, 212, 665, 287, 213,
	0, 219, 214, 215, 202, 216, 218, 666, 217, 639,
	0, 220, 0, 221, 222, 223, 224, 225, 0, 290,
	667, 668, 0, 0, 226, 227, 640, 641, 613, 228,
	229, 2157, 231, 0, 0, 232, 233, 234, 235, 632,
	236, 0, 295, 237, 238, 239, 296, 669, 0, 0,
	240, 0, 0, 0, 0, 241, 242, 243, 244, 245,
	587, 0, 0, 0, 0, 0, 585, 0, 0, 0,
	0, 583, 584, 618, 607, 608, 605, 606, 597, 0,
	593, 0, 0, 0, 0, 596, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 0, 634, 600, 0,
	0, 0, 101, 102, 103, 2156, 649, 249, 650, 104,
	651, 652, 0, 105, 253, 254, 106, 107, 603, 633,
	653, 654, 257, 0, 108, 645, 0, 626, 0, 109,
	110, 111, 0, 112, 0, 113, 114, 115, 0, 336,
	116, 2158, 0, 627, 629, 0, 628, 630, 118, 119,
	303, 120, 655, 121, 656, 657, 0, 122, 0, 123,
	0, 0, 0, 648, 125, 0, 126, 0, 0, 0,
	591, 127, 128, 129, 635, 636, 614, 0, 0, 130,
	131, 658, 0, 132, 0, 133, 0, 0, 337, 0,
	134, 646, 0, 267, 0, 135, 136, 137, 138, 642,
	644, 339, 0, 142, 0, 139, 0, 338, 140, 659,
	141, 660, 661, 662, 0, 625, 0, 340, 143, 144,
	145, 341, 146, 147, 148, 0, 150, 149, 0, 647,
	342, 151, 343, 0, 152, 0, 0, 153, 0, 154,
	155, 156, 158, 276, 157, 344, 159, 160, 162, 161,
	586, 0, 615, 643, 163, 663, 164, 165, 0, 166,
	0, 0, 167, 0, 0, 168, 279, 345, 169, 346,
	637, 170, 171, 172, 173, 174, 0, 638, 175, 282,
	176, 0, 177, 178, 179, 180, 181, 664, 182, 183,
	0, 184, 185, 186, 187, 188, 190, 191, 189, 192,
	193, 194, 195, 0, 196, 347, 197, 198, 592, 199,
	0, 203, 204, 205, 206, 0, 285, 207, 208, 209,
	631, 210, 200, 201, 211, 348, 212, 665, 287, 213,
	0, 219, 214, 215, 202, 216, 218, 666, 217, 639,
	0, 220, 0, 221, 222, 223, 224, 225, 0, 290,
	667, 668, 0, 0, 226, 227, 640, 641, 613, 228,
	229, 2157, 231, 0, 0, 232, 233, 234, 235, 632,
	236, 0, 295, 237, 238, 239, 296, 669, 0, 0,
	240, 0, 0, 0, 0, 241, 242, 243, 244, 245,
	587, 0, 0, 0, 0, 0, 585, 0, 0, 0,
	0, 583, 584, 618, 607, 608, 605, 606, 597, 0,
	593, 0, 0, 0, 0, 596, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 0, 634, 600, 0,
	0, 0, 101, 102, 103, 247, 649, 249, 650, 104,
	651, 652, 0, 105, 253, 254, 106, 107, 603, 633,
	653, 654, 257, 0, 108, 645, 0, 626, 0, 109,
	110, 111, 0, 112, 0, 113, 114, 115, 0, 336,
	116, 117, 0, 627, 629, 0, 628, 630, 118, 119,
	303, 120, 655, 121, 656, 657, 0, 122, 0, 123,
	0, 0, 0, 648, 125, 0, 126, 0, 0, 0,
	591, 127, 128, 129, 635, 636, 614, 0, 0, 130,
	131, 658, 0, 132, 0, 133, 0, 0, 337, 0,
	134, 646, 0, 267, 0, 135, 136, 137, 138, 642,
	644, 339, 0, 142, 0, 139, 0, 338, 140, 659,
	141, 660, 661, 662, 0, 625, 0, 340, 143, 144,
	145, 341, 146, 147, 148, 0, 150, 149, 0, 647,
	342, 151, 343, 0, 152, 0, 0, 153, 0, 154,
	155, 156, 158, 276, 157, 344, 159, 160, 162, 161,
	586, 0, 615, 643, 163, 663, 164, 165, 0, 166,
	0, 0, 167, 0, 0, 168, 279, 345, 169, 346,
	637, 170, 171, 172, 173, 174, 0, 638, 175, 282,
	176, 0, 177, 178, 179, 180, 181, 664, 182, 183,
	0, 184, 185, 186, 187, 188, 190, 191, 189, 192,
	193, 194, 195, 0, 196, 347, 197, 198, 592, 199,
	0, 203, 204, 205, 206, 0, 285, 207, 208, 209,
	631, 210, 200, 201, 211, 348, 212, 665, 287, 213,
	0, 219, 214, 215, 202, 216, 218, 666, 217, 639,
	0, 220, 0, 221, 222, 223, 224, 225, 0, 290,
	667, 668, 0, 0, 226, 227, 640, 641, 613, 228,
	229, 230, 231, 0, 0, 232, 233, 234, 235, 632,
	236, 0, 295, 237, 238, 239, 296, 669, 0, 0,
	240, 0, 0, 0, 0, 241, 242, 243, 244, 245,
	587, 0, 0, 0, 0, 0, 585, 0, 0, 0,
	0, 583, 584, 1265, 607, 608, 605, 606, 597, 0,
	593, 0, 0, 0, 0, 596, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 0, 634, 600, 0,
	0, 0, 101, 102, 103, 247, 649, 249, 650, 104,
	651, 652, 0, 105, 253, 254, 106, 107, 603, 633,
	653, 654, 257, 0, 108, 645, 0, 626, 0, 109,
	110, 111, 0, 112, 0, 113, 114, 115, 0, 336,
	116, 117, 0, 627, 629, 0, 628, 630, 118, 119,
	303, 120, 655, 1268, 656, 657, 0, 122, 0, 123,
	0, 0, 0, 648, 125, 0, 126, 0, 0, 0,
	591, 127, 128, 129, 635, 636, 614, 0, 0, 130,
	131, 658, 0, 132, 0, 133, 0, 0, 337, 0,
	134, 646, 0, 267, 0, 135, 136, 1269, 138, 642,
	644, 339, 0, 142, 0, 139, 0, 338, 140, 659,
	141, 660, 661, 662, 0, 625, 0, 340, 143, 144,
	145, 341, 146, 147, 148, 0, 150, 149, 0, 647,
	342, 151, 343, 0, 152, 0, 0, 153, 0, 154,
	1270, 1267, 158, 276, 157, 344, 159, 160, 162, 161,
	586, 0, 615, 643, 163, 663, 164, 165, 0, 166,
	0, 0, 167, 0, 0, 168, 279, 345, 169, 346,
	637, 170, 171, 172, 173, 174, 0, 638, 175, 282,
	176, 0, 177, 178, 179, 180, 181, 664, 182, 183,
	0, 184, 185, 186, 187, 188, 190, 191, 189, 192,
	193, 194, 195, 0, 196, 347, 197, 198, 592, 199,
	0, 203, 204, 205, 1271, 0, 285, 207, 208, 209,
	631, 210, 200, 201, 211, 348, 212, 665, 287, 213,
	0, 219, 214, 215, 202, 216, 218, 666, 217, 639,
	0, 220, 0, 221, 222, 223, 224, 225, 0, 290,
	667, 668, 0, 0, 226, 227, 640, 641, 613, 228,
	229, 230, 231, 0, 0, 232, 233, 234, 235, 632,
	236, 0, 295, 237, 238, 239, 296, 669, 0, 0,
	240, 0, 0, 0, 0, 241, 242, 243, 1266, 245,
	587, 0, 0, 0, 0, 0, 585, 0, 0, 0,
	0, 583, 584, 618, 607, 608, 605, 606, 597, 0,
	593, 0, 0, 0, 0, 596, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 0, 634, 600, 0,
	0, 0, 101, 102, 103, 247, 649, 249, 650, 104,
	651, 652, 0, 105, 253, 254, 106, 107, 603, 633,
	653, 654, 257, 0, 108, 645, 0, 626, 0, 109,
	110, 111, 0, 112, 0, 113, 114, 115, 0, 336,
	116, 117, 0, 627, 629, 0, 628, 630, 118, 119,
	303, 120, 655, 121, 656, 657, 0, 122, 0, 123,
	0, 0, 0, 648, 125, 0, 126, 0, 0, 0,
	591, 127, 128, 129, 635, 636, 614, 0, 0, 130,
	131, 658, 0, 132, 0, 133, 0, 0, 337, 0,
	134, 646, 0, 267, 0, 135, 136, 137, 138, 642,
	644, 339, 0, 142, 0, 139, 0, 338, 140, 659,
	141, 660, 661, 662, 0, 625, 0, 340, 143, 144,
	145, 341, 146, 147, 148, 0, 150, 149, 0, 647,
	342, 151, 343, 0, 152, 0, 0, 153, 0, 154,
	155, 156, 158, 276, 157, 344, 159, 160, 162, 161,
	0, 0, 615, 643, 163, 663, 164, 165, 0, 166,
	0, 0, 167, 0, 0, 168, 279, 345, 169, 346,
	637, 170, 171, 172, 173, 174, 0, 638, 175, 282,
	176, 0, 177, 178, 179, 180, 181, 664, 182, 183,
	0, 184, 185, 186, 187, 188, 190, 191, 189, 192,
	193, 194, 195, 0, 196, 347, 197, 198, 1283, 199,
	0, 203, 204, 205, 206, 0, 285, 207, 208, 209,
	631, 210, 200, 201, 211, 348, 212, 665, 287, 213,
	0, 219, 214, 215, 202, 216, 218, 666, 217, 639,
	0, 220, 0, 221, 222, 223, 224, 225, 0, 290,
	667, 668, 0, 0, 226, 227, 640, 641, 613, 228,
	229, 230, 231, 0, 0, 232, 233, 234, 235, 632,
	236, 0, 295, 237, 238, 239, 296, 669, 0, 0,
	240, 0, 0, 0, 0, 241, 242, 243, 244, 245,
	0, 0, 0, 0, 0, 0, 1281, 0, 0, 0,
	0, 1279, 1280, 618, 607, 608, 605, 606, 597, 0,
	1282, 0, 0, 0, 0, 596, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 0, 634, 600, 0,
	0, 0, 101, 102, 103, 247, 649, 249, 650, 104,
	651, 652, 0, 105, 253, 254, 106, 107, 0, 633,
	653, 654, 257, 0, 108, 645, 0, 626, 0, 109,
	110, 111, 0, 112, 0, 113, 114, 115, 0, 336,
	116, 117, 0, 627, 629, 0, 628, 630, 118, 119,
	303, 120, 655, 121, 656, 657, 0, 122, 0, 123,
	0, 0, 0, 648, 125, 0, 126, 0, 0, 0,
	262, 127, 128, 129, 635, 636, 614, 0, 0, 130,
	131, 658, 0, 132, 0, 133, 0, 0, 337, 0,
	134, 646, 0, 267, 0, 135, 136, 137, 138, 642,
	644, 339, 0, 142, 0, 139, 0, 338, 140, 659,
	141, 660, 661, 662, 0, 625, 0, 340, 143, 144,
	145, 341, 146, 147, 148, 0, 150, 149, 0, 647,
	342, 151, 343, 0, 152, 0, 0, 153, 0, 154,
	155, 156, 158, 276, 157, 344, 159, 160, 162, 161,
	0, 0, 615, 643, 163, 663, 164, 165, 0, 166,
	0, 0, 167, 0, 0, 168, 279, 345, 169, 346,
	637, 170, 171, 172, 173, 174, 0, 638, 175, 282,
	176, 0, 177, 178, 179, 180, 181, 664, 182, 183,
	0, 184, 185, 186, 187, 188, 190, 191, 189, 192,
	193, 194, 195, 0, 196, 347, 197, 198, 1283, 199,
	0, 203, 204, 205, 206, 0, 285, 207, 208, 209,
	631, 210, 200, 201, 211, 348, 212, 665, 287, 213,
	0, 219, 214, 215, 202, 216, 218, 666, 217, 639,
	0, 220, 0, 221, 222, 223, 224, 225, 0, 290,
	667, 668, 0, 0, 226, 227, 640, 641, 613, 228,
	229, 230, 231, 0, 0, 232, 233, 234, 235, 632,
	236, 0, 295, 237, 238, 239, 296, 669, 0, 0,
	240, 0, 0, 0, 0, 241, 242, 243, 244, 245,
	0, 0, 618, 607, 608, 605, 606, 597, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 99,
	1282, 100, 0, 0, 0, 596, 634, 600, 0, 0,
	0, 101, 102, 103, 0, 649, 249, 650, 104, 651,
	652, 0, 105, 253, 254, 106, 107, 603, 633, 653,
	654, 257, 0, 108, 645, 0, 626, 0, 109, 110,
	111, 0, 112, 0, 113, 114, 115, 0, 336, 116,
	2158, 0, 627, 629, 0, 628, 630, 118, 119, 303,
	120, 655, 121, 656, 657, 0, 122, 0, 123, 0,
	0, 0, 648, 125, 0, 126, 0, 0, 0, 591,
	127, 128, 129, 635, 636, 614, 0, 0, 130, 131,
	658, 0, 132, 0, 133, 0, 0, 337, 0, 134,
	646, 0, 267, 0, 135, 136, 137, 138, 642, 644,
	0, 0, 142, 0, 139, 0, 338, 140, 659, 141,
	660, 661, 662, 0, 625, 0, 0, 143, 144, 145,
	341, 146, 147, 148, 0, 150, 149, 0, 647, 342,
	151, 0, 0, 152, 0, 0, 153, 0, 154, 155,
	156, 158, 276, 157, 344, 159, 160, 162, 161, 586,
	0, 615, 643, 163, 663, 164, 165, 0, 166, 0,
	0, 167, 0, 0, 168, 279, 345, 169, 346, 637,
	170, 171, 172, 173, 174, 0, 638, 175, 282, 176,
	0, 177, 178, 179, 180, 181, 664, 182, 183, 0,
	184, 185, 186, 187, 188, 190, 191, 189, 192, 193,
	194, 195, 0, 196, 347, 197, 198, 592, 199, 0,
	203, 204, 205, 206, 0, 285, 207, 208, 209, 631,
	210, 200, 201, 211, 0, 212, 665, 287, 213, 0,
	219, 214, 215, 202, 216, 218, 666, 217, 639, 0,
	220, 0, 221, 222, 223, 224, 225, 0, 290, 667,
	668, 0, 0, 226, 227, 640, 641, 613, 228, 229,
	2157, 231, 0, 0, 232, 233, 234, 235, 632, 236,
	0, 295, 237, 238, 239, 296, 669, 0, 0, 240,
	0, 0, 0, 0, 241, 242, 243, 244, 245, 618,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	583, 584, 0, 0, 0, 98, 99, 0, 100, 593,
	0, 0, 0, 634, 596, 0, 0, 0, 101, 102,
	103, 247, 248, 249, 250, 104, 251, 252, 0, 105,
	253, 254, 106, 107, 0, 633, 255, 256, 257, 0,
	108, 645, 0, 626, 0, 109, 110, 111, 0, 112,
	0, 113, 114, 115, 0, 336, 116, 117, 0, 627,
	629, 0, 628, 630, 118, 119, 303, 120, 259, 121,
	260, 261, 0, 122, 0, 123, 0, 0, 0, 124,
	125, 0, 126, 0, 0, 0, 262, 127, 128, 129,
	635, 636, 0, 0, 0, 130, 131, 265, 0, 132,
	0, 133, 0, 0, 337, 0, 134, 646, 0, 267,
	0, 135, 136, 137, 138, 642, 644, 339, 0, 142,
	0, 139, 0, 338, 140, 270, 141, 271, 272, 273,
	0, 274, 0, 340, 143, 144, 145, 341, 146, 147,
	148, 0, 150, 149, 0, 647, 342, 151, 343, 0,
	152, 0, 0, 153, 0, 154, 155, 156, 158, 276,
	157, 344, 159, 160, 162, 161, 0, 0, 0, 643,
	163, 278, 164, 165, 0, 166, 0, 0, 167, 0,
	0, 168, 279, 345, 169, 346, 637, 170, 171, 172,
	173, 174, 0, 638, 175, 282, 176, 0, 177, 178,
	179, 180, 181, 283, 182, 183, 0, 184, 185, 186,
	187, 188, 190, 191, 189, 192, 193, 194, 195, 0,
	196, 347, 197, 198, 284, 199, 0, 203, 204, 205,
	206, 0, 285, 207, 208, 209, 631, 210, 200, 201,
	211, 348, 212, 286, 287, 213, 0, 219, 214, 215,
	202, 216, 218, 288, 217, 639, 0, 220, 0, 221,
	222, 223, 224, 225, 0, 290, 291, 292, 0, 0,
	226, 227, 640, 641, 0, 228, 229, 230, 231, 0,
	0, 232, 233, 234, 235, 632, 236, 0, 295, 237,
	238, 239, 296, 297, 0, 0, 240, 0, 525, 0,
	0, 241, 242, 243, 244, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 0, 246, 0, 0, 0, 1657, 101, 102, 103,
	247, 248, 249, 250, 104, 251, 252, 0, 105, 253,
	254, 106, 107, 0, 0, 255, 256, 257, 0, 108,
	258, 0, 335, 0, 109, 110, 111, 0, 112, 0,
	113, 114, 115, 0, 336, 116, 117, 0, 0, 0,
	0, 0, 0, 118, 119, 303, 120, 259, 121, 260,
	261, 0, 122, 0, 123, 0, 0, 0, 124, 125,
	0, 126, 0, 0, 0, 262, 127, 128, 129, 263,
	264, 0, 0, 0, 130, 131, 265, 0, 132, 0,
	133, 0, 0, 337, 0, 134, 266, 0, 267, 0,
	135, 136, 137, 138, 268, 269, 339, 0, 142, 0,
	139, 0, 338, 140, 270, 141, 271, 272, 273, 0,
	274, 0, 340, 143, 144, 145, 341, 146, 147, 148,
	0, 150, 149, 0, 275, 342, 151, 343, 0, 152,
	0, 0, 153, 0, 154, 155, 156, 158, 276, 157,
	344, 159, 160, 162, 161, 0, 0, 0, 277, 163,
	278, 164, 165, 0, 166, 0, 0, 167, 0, 0,
	168, 279, 345, 169, 346, 280, 170, 171, 172, 173,
	174, 0, 281, 175, 282, 176, 0, 177, 178, 179,
	180, 181, 283, 182, 183, 0, 184, 185, 186, 187,
	188, 190, 191, 189, 192, 193, 194, 195, 0, 196,
	347, 197, 198, 284, 199, 0, 203, 204, 205, 206,
	79, 285, 207, 208, 209, 0, 210, 200, 201, 211,
	348, 212, 286, 287, 213, 0, 219, 214, 215, 202,
	216, 218, 288, 217, 289, 0, 220, 81, 221, 222,
	223, 224, 225, 0, 290, 291, 292, 0, 0, 226,
	227, 293, 294, 0, 228, 229, 230, 231, 0, 0,
	232, 233, 234, 235, 0, 236, 0, 295, 237, 238,
	239, 703, 297, 0, 0, 240, 0, 0, 0, 77,
	241, 242, 243, 244, 245, 0, 78, 525, 522, 0,
	523, 518, 513, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 99, 76, 100, 0, 0, 0,
	0, 246, 0, 0, 0, 0, 101, 102, 103, 247,
	248, 249, 250, 104, 251, 252, 0, 105, 253, 254,
	106, 107, 0, 0, 255, 256, 257, 0, 108, 258,
	0, 335, 0, 109, 110, 111, 0, 112, 0, 113,
	114, 115, 0, 336, 116, 117, 0, 0, 0, 0,
	0, 0, 118, 119, 303, 120, 259, 121, 260, 261,
	1043, 122, 0, 123, 0, 0, 0, 124, 125, 0,
	126, 0, 0, 0, 262, 127, 128, 129, 263, 264,
	515, 0, 0, 130, 131, 265, 0, 132, 0, 133,
	0, 0, 337, 0, 134, 266, 0, 267, 0, 135,
	136, 137, 138, 268, 269, 339, 0, 142, 0, 139,
	0, 338, 140, 270, 141, 271, 272, 273, 0, 274,
	0, 340, 143, 144, 145, 341, 146, 147, 148, 0,
	150, 149, 0, 275, 342, 151, 343, 0, 152, 0,
	0, 153, 0, 154, 155, 156, 158, 276, 157, 344,
	159, 160, 162, 161, 0, 0, 0, 277, 163, 278,
	164, 165, 0, 166, 516, 0, 167, 0, 0, 168,
	279, 345, 169, 346, 280, 170, 171, 172, 173, 174,
	0, 281, 175, 282, 176, 0, 177, 178, 179, 180,
	181, 283, 182, 183, 0, 184, 185, 186, 187, 188,
	190, 191, 189, 192, 193, 194, 195, 0, 196, 347,
	197, 198, 284, 199, 0, 203, 204, 205, 206, 0,
	285, 207, 208, 209, 0, 210, 200, 201, 211, 348,
	212, 286, 287, 213, 0, 219, 214, 215, 202, 216,
	218, 288, 217, 289, 0, 220, 0, 221, 222, 223,
	224, 225, 0, 290, 291, 292, 0, 0, 226, 227,
	293, 294, 514, 228, 229, 230, 231, 0, 0, 232,
	233, 234, 235, 0, 236, 0, 295, 237, 238, 239,
	296, 297, 0, 0, 240, 0, 0, 0, 0, 241,
	242, 243, 244, 245, 525, 522, 0, 523, 518, 513,
	0, 0, 0, 0, 0, 524, 519, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 0, 246, 0,
	0, 0, 0, 101, 102, 103, 247, 248, 249, 250,
	104, 251, 252, 0, 105, 253, 254, 106, 107, 0,
	0, 255, 256, 257, 0, 108, 258, 0, 335, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	336, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 303, 120, 259, 121, 260, 261, 1040, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 262, 127, 128, 129, 263, 264, 515, 0, 0,
	130, 131, 265, 0, 132, 0, 133, 0, 0, 337,
	0, 134, 266, 0, 267, 0, 135, 136, 137, 138,
	268, 269, 339, 0, 142, 0, 139, 0, 338, 140,
	270, 141, 271, 272, 273, 0, 274, 0, 340, 143,
	144, 145, 341, 146, 147, 148, 0, 150, 149, 0,
	275, 342, 151, 343, 0, 152, 0, 0, 153, 0,
	154, 155, 156, 158, 276, 157, 344, 159, 160, 162,
	161, 0, 0, 0, 277, 163, 278, 164, 165, 0,
	166, 516, 0, 167, 0, 0, 168, 279, 345, 169,
	346, 280, 170, 171, 172, 173, 174, 0, 281, 175,
	282, 176, 0, 177, 178, 179, 180, 181, 283, 182,
	183, 0, 184, 185, 186, 187, 188, 190, 191, 189,
	192, 193, 194, 195, 0, 196, 347, 197, 198, 284,
	199, 0, 203, 204, 205, 206, 0, 285, 207, 208,
	209, 0, 210, 200, 201, 211, 348, 212, 286, 287,
	213, 0, 219, 214, 215, 202, 216, 218, 288, 217,
	289, 0, 220, 0, 221, 222, 223, 224, 225, 0,
	290, 291, 292, 0, 0, 226, 227, 293, 294, 514,
	228, 229, 230, 231, 0, 0, 232, 233, 234, 235,
	0, 236, 0, 295, 237, 238, 239, 296, 297, 0,
	0, 240, 0, 0, 0, 0, 241, 242, 243, 244,
	245, 525, 522, 0, 523, 518, 513, 0, 0, 0,
	0, 0, 524, 519, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	101, 102, 103, 247, 248, 249, 250, 104, 251, 252,
	0, 105, 253, 254, 106, 107, 0, 0, 255, 256,
	257, 0, 108, 258, 0, 335, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 336, 116, 117,
	0, 0, 0, 0, 0, 0, 118, 119, 303, 120,
	259, 121, 260, 261, 737, 122, 0, 123, 0, 0,
	0, 124, 125, 0, 126, 0, 0, 0, 262, 127,
	128, 129, 263, 264, 515, 0, 0, 130, 131, 265,
	0, 132, 0, 133, 0, 0, 337, 0, 134, 266,
	0, 267, 0, 135, 136, 137, 138, 268, 269, 339,
	0, 142, 0, 139, 0, 338, 140, 270, 141, 271,
	272, 273, 0, 274, 0, 340, 143, 144, 145, 341,
	146, 147, 148, 0, 150, 149, 0, 275, 342, 151,
	343, 0, 152, 0, 0, 153, 0, 154, 155, 156,
	158, 276, 157, 344, 159, 160, 162, 161, 0, 0,
	0, 277, 163, 278, 164, 165, 0, 166, 516, 0,
	167, 0, 0, 168, 279, 345, 169, 346, 280, 170,
	171, 172, 173, 174, 0, 281, 175, 282, 176, 0,
	177, 178, 179, 180, 181, 283, 182, 183, 0, 184,
	185, 186, 187, 188, 190, 191, 189, 192, 193, 194,
	195, 0, 196, 347, 197, 198, 284, 199, 0, 203,
	204, 205, 206, 0, 285, 207, 208, 209, 0, 210,
	200, 201, 211, 348, 212, 286, 287, 213, 0, 219,
	214, 215, 202, 216, 218, 288, 217, 289, 0, 220,
	0, 221, 222, 223, 224, 225, 0, 290, 291, 292,
	0, 0, 226, 227, 293, 294, 514, 228, 229, 230,
	231, 0, 0, 232, 233, 234, 235, 0, 236, 0,
	295, 237, 238, 239, 296, 297, 0, 0, 240, 0,
	0, 0, 0, 241, 242, 243, 244, 245, 525, 522,
	0, 523, 518, 513, 0, 0, 0, 0, 0, 524,
	519, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 0, 246, 0, 0, 0, 0, 101, 102, 103,
	247, 248, 249, 250, 104, 251, 252, 0, 105, 253,
	254, 106, 107, 0, 0, 255, 256, 257, 0, 108,
	258, 0, 335, 0, 109, 110, 111, 0, 112, 0,
	113, 114, 115, 0, 336, 116, 117, 0, 0, 0,
	0, 0, 0, 118, 119, 303, 120, 259, 121, 260,
	261, 0, 122, 0, 123, 0, 0, 0, 124, 125,
	0, 126, 0, 0, 0, 262, 127, 128, 129, 263,
	264, 515, 0, 0, 130, 131, 265, 0, 132, 0,
	133, 0, 0, 337, 0, 134, 266, 0, 267, 0,
	135, 136, 137, 138, 268, 269, 339, 0, 142, 0,
	139, 0, 338, 140, 270, 141, 271, 272, 273, 0,
	274, 0, 340, 143, 144, 145, 341, 146, 147, 148,
	0, 150, 149, 0, 275, 342, 151, 343, 0, 152,
	0, 0, 153, 0, 154, 155, 156, 158, 276, 157,
	344, 159, 160, 162, 161, 0, 0, 0, 277, 163,
	278, 164, 165, 0, 166, 516, 0, 167, 0, 0,
	168, 279, 345, 169, 346, 280, 170, 171, 172, 173,
	174, 0, 281, 175, 282, 176, 0, 177, 178, 179,
	180, 181, 283, 182, 183, 0, 184, 185, 186, 187,
	188, 190, 191, 189, 192, 193, 194, 195, 0, 196,
	347, 197, 198, 284, 199, 0, 203, 204, 205, 206,
	0, 285, 207, 208, 209, 0, 210, 200, 201, 211,
	348, 212, 286, 287, 213, 0, 219, 214, 215, 202,
	216, 218, 288, 217, 289, 0, 220, 0, 221, 222,
	223, 224, 225, 0, 290, 291, 292, 0, 0, 226,
	227, 293, 294, 514, 228, 229, 230, 231, 0, 0,
	232, 233, 234, 235, 0, 236, 0, 295, 237, 238,
	239, 296, 297, 0, 95, 240, 0, 0, 0, 0,
	241, 242, 243, 244, 245, 0, 0, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 524, 519, 246, 0,
	0, 0, 0, 101, 102, 103, 247, 248, 249, 250,
	104, 251, 252, 0, 105, 253, 254, 106, 107, 0,
	0, 255, 256, 257, 0, 108, 258, 0, 0, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	0, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 303, 120, 259, 121, 260, 261, 0, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 262, 127, 128, 129, 263, 264, 0, 0, 0,
	130, 131, 265, 0, 132, 0, 133, 0, 0, 0,
	0, 134, 266, 0, 267, 0, 135, 136, 137, 138,
	268, 269, 0, 0, 142, 0, 139, 0, 0, 140,
	270, 141, 271, 272, 273, 0, 274, 0, 0, 143,
	144, 145, 0, 146, 147, 148, 0, 150, 149, 0,
	275, 0, 151, 0, 0, 152, 0, 0, 153, 0,
	154, 155, 156, 158, 276, 157, 0, 159, 160, 162,
	161, 0, 0, 0, 277, 163, 278, 164, 165, 0,
	166, 0, 559, 167, 0, 0, 168, 279, 0, 169,
	0, 280, 170, 171, 172, 173, 174, 0, 281, 175,
	282, 176, 0, 177, 178, 179, 180, 181, 283, 182,
	183, 0, 184, 185, 186, 187, 188, 190, 191, 189,
	192, 193, 194, 195, 0, 196, 0, 197, 198, 284,
	199, 0, 203, 204, 205, 206, 79, 285, 207, 208,
	209, 0, 210, 200, 201, 211, 0, 212, 286, 287,
	213, 0, 219, 214, 215, 202, 216, 218, 288, 217,
	289, 0, 220, 81, 221, 222, 223, 224, 225, 0,
	290, 291, 292, 0, 0, 226, 227, 293, 294, 0,
	228, 229, 230, 231, 0, 0, 232, 233, 234, 235,
	0, 236, 0, 295, 237, 238, 239, 703, 297, 0,
	0, 240, 0, 95, 0, 77, 241, 242, 243, 244,
	245, 0, 78, 0, 0, 0, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 0, 246, 0, 1402,
	0, 1407, 101, 102, 103, 247, 248, 249, 250, 104,
	251, 252, 0, 105, 253, 254, 106, 107, 0, 0,
	255, 256, 257, 0, 108, 258, 0, 0, 0, 109,
	110, 111, 0, 112, 0, 113, 114, 115, 0, 0,
	116, 117, 0, 0, 0, 0, 0, 0, 118, 119,
	303, 120, 259, 121, 260, 261, 0, 122, 0, 123,
	0, 0, 0, 124, 125, 0, 126, 0, 0, 0,
	262, 127, 128, 129, 263, 264, 0, 0, 0, 130,
	131, 265, 0, 132, 0, 133, 0, 0, 0, 0,
	134, 266, 0, 267, 0, 135, 136, 137, 138, 268,
	269, 0, 0, 142, 0, 139, 0, 0, 140, 270,
	141, 271, 272, 273, 0, 274, 0, 0, 143, 144,
	145, 0, 146, 147, 148, 0, 150, 149, 0, 275,
	0, 151, 0, 0, 152, 0, 0, 153, 0, 154,
	155, 156, 158, 276, 157, 0, 159, 160, 162, 161,
	0, 0, 0, 277, 163, 278, 164, 165, 0, 166,
	0, 0, 167, 0, 0, 168, 279, 0, 169, 0,
	280, 170, 171, 172, 173, 174, 0, 281, 175, 282,
	176, 0, 177, 178, 179, 180, 181, 283, 182, 183,
	0, 184, 185, 186, 187, 188, 190, 191, 189, 192,
	193, 194, 195, 0, 196, 0, 197, 198, 284, 199,
	0, 203, 204, 205, 206, 79, 285, 207, 208, 209,
	0, 210, 200, 201, 211, 0, 212, 286, 287, 213,
	0, 219, 214, 215, 202, 216, 218, 288, 217, 289,
	0, 220, 81, 221, 222, 223, 224, 225, 0, 290,
	291, 292, 0, 0, 226, 227, 293, 294, 0, 228,
	229, 230, 231, 0, 0, 232, 233, 234, 235, 0,
	236, 0, 295, 237, 238, 239, 703, 297, 0, 0,
	240, 0, 95, 0, 77, 241, 242, 243, 244, 245,
	0, 78, 0, 0, 0, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 0, 246, 0, 0, 0,
	76, 101, 102, 103, 247, 248, 249, 250, 104, 251,
	252, 0, 105, 253, 254, 106, 107, 0, 0, 255,
	256, 257, 0, 108, 258, 0, 0, 0, 109, 110,
	111, 0, 112, 0, 113, 114, 115, 0, 0, 116,
	117, 0, 0, 0, 0, 0, 0, 118, 119, 303,
	120, 259, 121, 260, 261, 0, 122, 0, 123, 0,
	0, 0, 124, 125, 0, 126, 0, 0, 0, 262,
	127, 128, 129, 263, 264, 0, 0, 0, 130, 131,
	265, 0, 132, 0, 133, 0, 0, 0, 0, 134,
	266, 0, 267, 0, 135, 136, 137, 138, 268, 269,
	0, 0, 142, 0, 139, 0, 0, 140, 270, 141,
	271, 272, 273, 0, 274, 0, 0, 143, 144, 145,
	0, 146, 147, 148, 0, 150, 149, 0, 275, 0,
	151, 0, 0, 152, 0, 0, 153, 0, 154, 155,
	156, 158, 276, 157, 0, 159, 160, 162, 161, 0,
	0, 0, 277, 163, 278, 164, 165, 0, 166, 0,
	559, 167, 0, 0, 168, 279, 0, 169, 0, 280,
	170, 171, 172, 173, 174, 0, 281, 175, 282, 176,
	0, 177, 178, 179, 180, 181, 283, 182, 183, 0,
	184, 185, 186, 187, 188, 190, 191, 189, 192, 193,
	194, 195, 0, 196, 0, 197, 198, 284, 199, 0,
	203, 204, 205, 206, 0, 285, 207, 208, 209, 0,
	210, 200, 201, 211, 0, 212, 286, 287, 213, 0,
	219, 214, 215, 202, 216, 218, 288, 217, 289, 0,
	220, 0, 221, 222, 223, 224, 225, 0, 290, 291,
	292, 0, 0, 226, 227, 293, 294, 0, 228, 229,
	230, 231, 0, 0, 232, 233, 234, 235, 0, 236,
	0, 295, 237, 238, 239, 296, 297, 0, 0, 240,
	0, 95, 0, 0, 241, 242, 243, 244, 245, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 0, 246, 0, 1402, 0, 1407,
	101, 102, 103, 247, 248, 249, 250, 104, 251, 252,
	0, 105, 253, 254, 106, 107, 0, 0, 255, 256,
	257, 0, 108, 258, 0, 0, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 0, 116, 117,
	0, 0, 0, 0, 0, 0, 118, 119, 303, 120,
	259, 121, 260, 261, 0, 122, 0, 123, 0, 0,
	0, 124, 125, 0, 126, 0, 0, 0, 262, 127,
	128, 129, 263, 264, 0, 0, 0, 130, 131, 265,
	0, 132, 0, 133, 0, 0, 0, 0, 134, 266,
	0, 267, 0, 135, 136, 137, 138, 268, 269, 0,
	0, 142, 0, 139, 0, 0, 140, 270, 141, 271,
	272, 273, 0, 274, 0, 0, 143, 144, 145, 0,
	146, 147, 148, 0, 150, 149, 0, 275, 0, 151,
	0, 0, 152, 0, 0, 153, 0, 154, 155, 156,
	158, 276, 157, 0, 159, 160, 162, 161, 0, 0,
	0, 277, 163, 278, 164, 165, 0, 166, 0, 0,
	167, 0, 0, 168, 279, 0, 169, 0, 280, 170,
	171, 172, 173, 174, 0, 281, 175, 282, 176, 0,
	177, 178, 179, 180, 181, 283, 182, 183, 0, 184,
	185, 186, 187, 188, 190, 191, 189, 192, 193, 194,
	195, 0, 196, 0, 197, 198, 284, 199, 0, 203,
	204, 205, 206, 0, 285, 207, 208, 209, 0, 210,
	200, 201, 211, 0, 212, 286, 287, 213, 0, 219,
	214, 215, 202, 216, 218, 288, 217, 289, 0, 220,
	0, 221, 222, 223, 224, 225, 0, 290, 291, 292,
	0, 0, 226, 227, 293, 294, 0, 228, 229, 230,
	231, 0, 0, 232, 233, 234, 235, 0, 236, 0,
	295, 237, 238, 239, 296, 297, 0, 0, 240, 0,
	0, 95, 0, 241, 242, 243, 244, 245, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 0, 246, 0, 0, 0, 947,
	101, 102, 103, 247, 248, 249, 250, 104, 251, 252,
	0, 105, 253, 254, 106, 107, 0, 0, 255, 256,
	257, 0, 108, 258, 0, 0, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 0, 116, 117,
	0, 0, 0, 0, 0, 0, 118, 119, 303, 120,
	259, 121, 260, 261, 0, 122, 0, 123, 0, 0,
	0, 124, 125, 0, 126, 0, 0, 0, 262, 127,
	128, 129, 263, 264, 0, 0, 0, 130, 131, 265,
	0, 132, 0, 133, 0, 0, 0, 0, 134, 266,
	0, 267, 0, 135, 136, 137, 138, 268, 269, 0,
	0, 142, 0, 139, 0, 0, 140, 270, 141, 271,
	272, 273, 0, 274, 0, 0, 143, 144, 145, 0,
	146, 147, 148, 0, 150, 149, 0, 275, 0, 151,
	0, 0, 152, 0, 0, 153, 0, 154, 155, 156,
	158, 276, 157, 0, 159, 160, 162, 161, 0, 0,
	0, 277, 163, 278, 164, 165, 0, 166, 0, 0,
	167, 0, 0, 168, 279, 0, 169, 0, 280, 170,
	171, 172, 173, 174, 0, 281, 175, 282, 176, 0,
	177, 178, 179, 180, 181, 283, 182, 183, 0, 184,
	185, 186, 187, 188, 190, 191, 189, 192, 193, 194,
	195, 0, 196, 0, 197, 198, 284, 199, 0, 203,
	204, 205, 206, 0, 285, 207, 208, 209, 0, 210,
	200, 201, 211, 0, 212, 286, 287, 213, 0, 219,
	214, 215, 202, 216, 218, 288, 217, 289, 0, 220,
	0, 221, 222, 223, 224, 225, 0, 290, 291, 292,
	0, 0, 226, 227, 293, 294, 0, 228, 229, 230,
	231, 0, 0, 232, 233, 234, 235, 0, 236, 0,
	295, 237, 238, 239, 296, 297, 0, 0, 240, 0,
	95, 0, 0, 241, 242, 243, 244, 245, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 0, 246, 0, 0, 0, 1323, 101,
	102, 103, 247, 248, 249, 250, 104, 251, 252, 0,
	105, 253, 254, 106, 107, 0, 0, 255, 256, 257,
	0, 108, 258, 0, 0, 0, 109, 110, 111, 0,
	112, 0, 113, 114, 115, 0, 0, 116, 117, 0,
	0, 0, 0, 0, 0, 118, 119, 303, 120, 259,
	121, 260, 261, 0, 122, 0, 123, 0, 0, 0,
	124, 125, 0, 126, 0, 0, 0, 262, 127, 128,
	129, 263, 264, 0, 0, 0, 130, 131, 265, 0,
	132, 0, 133, 0, 0, 0, 0, 134, 266, 0,
	267, 0, 135, 136, 137, 138, 268, 269, 0, 0,
	142, 0, 139, 0, 0, 140, 270, 141, 271, 272,
	273, 0, 274, 0, 0, 143, 144, 145, 0, 146,
	147, 148, 0, 150, 149, 0, 275, 0, 151, 0,
	0, 152, 0, 0, 153, 0, 154, 155, 156, 158,
	276, 157, 0, 159, 160, 162, 161, 0, 0, 0,
	277, 163, 278, 164, 165, 0, 166, 0, 0, 167,
	0, 0, 168, 279, 0, 169, 0, 280, 170, 171,
	172, 173, 174, 0, 281, 175, 282, 176, 0, 177,
	178, 179, 180, 181, 283, 182, 183, 0, 184, 185,
	186, 187, 188, 190, 191, 189, 192, 193, 194, 195,
	0, 196, 0, 197, 198, 284, 199, 0, 203, 204,
	205, 206, 0, 285, 207, 208, 209, 0, 210, 200,
	201, 211, 0, 212, 286, 287, 213, 0, 219, 214,
	215, 202, 216, 218, 288, 217, 289, 0, 220, 0,
	221, 222, 223, 224, 225, 0, 290, 291, 292, 0,
	0, 226, 227, 293, 294, 0, 228, 229, 230, 231,
	0, 0, 232, 233, 234, 235, 0, 236, 0, 295,
	237, 238, 239, 296, 297, 0, 0, 240, 0, 95,
	0, 0, 241, 242, 243, 244, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 0, 246, 0, 0, 0, 1719, 101, 102,
	103, 247, 248, 249, 250, 104, 251, 252, 0, 105,
	253, 254, 106, 107, 0, 0, 255, 256, 257, 0,
	108, 258, 0, 0, 0, 109, 110, 111, 0, 112,
	0, 113, 114, 115, 0, 0, 116, 117, 0, 0,
	0, 0, 0, 0, 118, 119, 303, 120, 259, 121,
	260, 261, 0, 122, 0, 123, 0, 0, 0, 124,
	125, 0, 126, 0, 0, 0, 262, 127, 128, 129,
	263, 264, 0, 0, 0, 130, 131, 265, 0, 132,
	0, 133, 0, 0, 0, 0, 134, 266, 0, 267,
	0, 135, 136, 137, 138, 268, 269, 0, 0, 142,
	0, 139, 0, 0, 140, 270, 141, 271, 272, 273,
	0, 274, 0, 0, 143, 144, 145, 0, 146, 147,
	148, 0, 150, 149, 0, 275, 0, 151, 0, 0,
	152, 0, 0, 153, 0, 154, 155, 156, 158, 276,
	157, 0, 159, 160, 162, 161, 0, 0, 0, 277,
	163, 278, 164, 165, 0, 166, 0, 0, 167, 0,
	0, 168, 279, 0, 169, 0, 280, 170, 171, 172,
	173, 174, 0, 281, 175, 282, 176, 0, 177, 178,
	179, 180, 181, 283, 182, 183, 0, 184, 185, 186,
	187, 188, 190, 191, 189, 192, 193, 194, 195, 0,
	196, 0, 197, 198, 284, 199, 0, 203, 204, 205,
	206, 0, 285, 207, 208, 209, 0, 210, 200, 201,
	211, 0, 212, 286, 287, 213, 0, 219, 214, 215,
	202, 216, 218, 288, 217, 289, 0, 220, 0, 221,
	222, 223, 224, 225, 0, 290, 291, 292, 0, 0,
	226, 227, 293, 294, 0, 228, 229, 230, 231, 0,
	0, 232, 233, 234, 235, 0, 236, 0, 295, 237,
	238, 239, 296, 297, 0, 0, 240, 0, 0, 0,
	0, 241, 242, 243, 244, 245, 618, 607, 608, 605,
	606, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 99, 0, 100, 817, 0, 0, 0,
	246, 0, 0, 0, 0, 101, 102, 103, 247, 649,
	249, 650, 104, 651, 652, 0, 105, 253, 254, 106,
	107, 0, 0, 653, 654, 257, 0, 108, 258, 0,
	335, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 336, 116, 117, 0, 0, 0, 0, 0,
	0, 118, 119, 303, 120, 655, 121, 656, 657, 0,
	122, 0, 123, 0, 0, 0, 648, 125, 0, 126,
	0, 0, 0, 262, 127, 128, 129, 263, 264, 614,
	0, 0, 130, 131, 658, 0, 132, 0, 133, 0,
	0, 337, 0, 134, 266, 0, 267, 0, 135, 136,
	137, 138, 268, 269, 339, 0, 142, 0, 139, 0,
	338, 140, 659, 141, 660, 661, 662, 0, 625, 0,
	340, 143, 144, 145, 341, 146, 147, 148, 0, 150,
	149, 0, 275, 342, 151, 343, 0, 152, 0, 0,
	153, 0, 154, 155, 156, 158, 276, 157, 344, 159,
	160, 162, 161, 0, 0, 615, 277, 163, 663, 164,
	165, 0, 166, 0, 0, 167, 0, 0, 168, 279,
	345, 169, 346, 280, 170, 171, 172, 173, 174, 0,
	281, 175, 282, 176, 0, 177, 178, 179, 180, 181,
	664, 182, 183, 0, 184, 185, 186, 187, 188, 190,
	191, 189, 192, 193, 194, 195, 0, 196, 347, 197,
	198, 284, 199, 0, 203, 204, 205, 206, 0, 285,
	207, 208, 209, 0, 210, 200, 201, 211, 348, 212,
	665, 287, 213, 0, 219, 214, 215, 202, 216, 218,
	666, 217, 289, 0, 220, 0, 221, 222, 223, 224,
	225, 0, 290, 667, 668, 0, 0, 226, 227, 293,
	294, 613, 228, 229, 230, 231, 0, 0, 232, 233,
	234, 235, 0, 236, 0, 295, 237, 238, 239, 296,
	669, 525, 522, 240, 0, 0, 744, 0, 241, 242,
	243, 244, 245, 0, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	101, 102, 103, 247, 248, 249, 250, 104, 251, 252,
	0, 105, 253, 254, 106, 107, 0, 0, 255, 256,
	257, 0, 108, 258, 0, 335, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 336, 116, 117,
	0, 0, 0, 0, 0, 0, 118, 119, 303, 120,
	259, 121, 260, 261, 0, 122, 0, 123, 0, 0,
	0, 124, 125, 0, 126, 0, 0, 0, 262, 127,
	128, 129, 263, 264, 0, 0, 0, 130, 131, 265,
	0, 132, 0, 133, 0, 0, 337, 0, 134, 266,
	0, 267, 0, 135, 136, 137, 138, 268, 269, 339,
	0, 142, 0, 139, 0, 338, 140, 270, 141, 271,
	272, 273, 0, 274, 0, 340, 143, 144, 145, 341,
	146, 147, 148, 0, 150, 149, 0, 275, 342, 151,
	343, 0, 152, 0, 0, 153, 0, 154, 155, 156,
	158, 276, 157, 344, 159, 160, 162, 161, 0, 0,
	0, 277, 163, 278, 164, 165, 0, 166, 0, 0,
	167, 0, 0, 168, 279, 345, 169, 346, 280, 170,
	171, 172, 173, 174, 0, 281, 175, 282, 176, 0,
	177, 178, 179, 180, 181, 283, 182, 183, 0, 184,
	185, 186, 187, 188, 190, 191, 189, 192, 193, 194,
	195, 0, 196, 347, 197, 198, 284, 199, 0, 203,
	204, 205, 206, 0, 285, 207, 208, 209, 0, 210,
	200, 201, 211, 348, 212, 286, 287, 213, 0, 219,
	214, 215, 202, 216, 218, 288, 217, 289, 0, 220,
	0, 221, 222, 223, 224, 225, 0, 290, 291, 292,
	0, 0, 226, 227, 293, 294, 0, 228, 229, 230,
	231, 0, 0, 232, 233, 234, 235, 0, 236, 0,
	295, 237, 238, 239, 296, 297, 95, 0, 240, 0,
	0, 0, 0, 241, 242, 243, 244, 245, 0, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 101, 102, 103, 247, 248,
	249, 250, 104, 251, 252, 0, 105, 253, 254, 106,
	107, 0, 0, 255, 256, 257, 0, 108, 258, 0,
	0, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 0, 116, 117, 0, 0, 0, 0, 0,
	0, 118, 119, 91, 120, 259, 121, 260, 261, 0,
	122, 0, 123, 0, 0, 0, 124, 125, 0, 126,
	0, 0, 0, 262, 127, 128, 129, 263, 264, 0,
	0, 0, 130, 131, 265, 0, 132, 0, 133, 0,
	0, 0, 0, 134, 266, 0, 267, 0, 135, 136,
	137, 138, 268, 269, 0, 0, 142, 0, 139, 0,
	0, 140, 270, 141, 271, 272, 273, 0, 274, 0,
	0, 143, 144, 145, 0, 146, 147, 148, 0, 150,
	149, 0, 275, 0, 151, 0, 0, 152, 0, 0,
	153, 0, 154, 155, 156, 158, 276, 157, 0, 159,
	160, 162, 161, 0, 0, 0, 277, 163, 278, 164,
	165, 0, 166, 0, 0, 167, 0, 0, 168, 279,
	0, 169, 0, 280, 170, 171, 172, 173, 174, 0,
	281, 175, 282, 176, 0, 177, 178, 179, 180, 181,
	283, 182, 183, 0, 184, 185, 186, 187, 188, 190,
	191, 189, 192, 193, 194, 195, 0, 196, 0, 197,
	198, 284, 199, 0, 203, 204, 205, 206, 0, 285,
	207, 208, 209, 0, 210, 200, 201, 211, 0, 212,
	286, 287, 213, 0, 219, 214, 215, 202, 216, 218,
	288, 217, 289, 0, 220, 90, 221, 222, 223, 224,
	225, 0, 290, 291, 292, 0, 0, 226, 227, 293,
	294, 0, 228, 229, 230, 231, 0, 0, 232, 233,
	234, 235, 0, 236, 0, 295, 237, 238, 239, 296,
	297, 525, 522, 240, 0, 0, 0, 0, 241, 242,
	243, 244, 245, 0, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 0, 246, 94, 0, 0, 0,
	101, 102, 103, 247, 248, 249, 250, 104, 251, 252,
	0, 105, 253, 254, 106, 107, 0, 0, 255, 256,
	257, 0, 108, 258, 0, 335, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 336, 116, 117,
	0, 0, 0, 0, 0, 0, 118, 119, 303, 120,
	259, 121, 260, 261, 0, 122, 0, 123, 0, 0,
	0, 124, 125, 0, 126, 0, 0, 0, 262, 127,
	128, 129, 263, 264, 0, 0, 0, 130, 131, 265,
	0, 132, 0, 133, 0, 0, 337, 0, 134, 266,
	0, 267, 0, 135, 136, 137, 138, 268, 269, 339,
	0, 142, 0, 139, 0, 338, 140, 270, 141, 271,
	272, 273, 0, 274, 0, 340, 143, 144, 145, 341,
	146, 147, 148, 0, 150, 149, 0, 275, 342, 151,
	343, 0, 152, 0, 0, 153, 0, 154, 155, 156,
	158, 276, 157, 344, 159, 160, 162, 161, 0, 0,
	0, 277, 163, 278, 164, 165, 0, 166, 0, 0,
	167, 0, 0, 168, 279, 345, 169, 346, 280, 170,
	171, 172, 173, 174, 0, 281, 175, 282, 176, 0,
	177, 178, 179, 180, 181, 283, 182, 183, 0, 184,
	185, 186, 187, 188, 190, 191, 189, 192, 193, 194,
	195, 0, 196, 347, 197, 198, 284, 199, 0, 203,
	204, 205, 206, 0, 285, 207, 208, 209, 0, 210,
	200, 201, 211, 348, 212, 286, 287, 213, 0, 219,
	214, 215, 202, 216, 218, 288, 217, 289, 0, 220,
	0, 221, 222, 223, 224, 225, 0, 290, 291, 292,
	0, 0, 226, 227, 293, 294, 0, 228, 229, 230,
	231, 0, 0, 232, 233, 234, 235, 0, 236, 0,
	295, 237, 238, 239, 296, 297, 95, 0, 240, 0,
	0, 0, 0, 241, 242, 243, 244, 245, 0, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 101, 102, 103, 247, 248,
	249, 250, 104, 251, 252, 0, 105, 253, 254, 106,
	107, 0, 0, 255, 256, 257, 0, 108, 258, 0,
	0, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 0, 116, 117, 0, 0, 0, 0, 0,
	0, 118, 119, 303, 120, 259, 121, 260, 261, 0,
	122, 0, 123, 0, 0, 0, 124, 125, 0, 126,
	0, 0, 0, 262, 127, 128, 129, 263, 264, 0,
	0, 0, 130, 131, 265, 0, 132, 0, 133, 0,
	0, 0, 0, 134, 266, 0, 267, 0, 135, 136,
	137, 138, 268, 269, 0, 0, 142, 0, 139, 0,
	0, 140, 270, 141, 271, 272, 273, 0, 274, 0,
	0, 143, 144, 145, 0, 146, 147, 148, 0, 150,
	149, 0, 275, 0, 151, 0, 0, 152, 0, 0,
	153, 0, 154, 155, 156, 158, 276, 157, 0, 159,
	160, 162, 161, 0, 0, 0, 277, 163, 278, 164,
	165, 0, 166, 0, 0, 167, 0, 0, 168, 279,
	0, 169, 0, 280, 170, 171, 172, 173, 174, 0,
	281, 175, 282, 176, 0, 177, 178, 179, 180, 181,
	283, 182, 183, 0, 184, 185, 186, 187, 188, 190,
	191, 189, 192, 193, 194, 195, 0, 196, 0, 197,
	198, 284, 199, 0, 203, 204, 205, 206, 0, 285,
	207, 208, 209, 0, 210, 200, 201, 211, 0, 212,
	286, 287, 213, 0, 219, 214, 215, 202, 216, 218,
	288, 217, 289, 0, 220, 0, 221, 222, 223, 224,
	225, 0, 290, 291, 292, 0, 0, 226, 227, 293,
	294, 0, 228, 229, 230, 231, 0, 0, 232, 233,
	234, 235, 0, 236, 0, 295, 237, 238, 239, 296,
	297, 525, 0, 240, 0, 0, 0, 0, 241, 242,
	243, 244, 245, 0, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 0, 246, 94, 0, 0, 0,
	101, 102, 103, 247, 248, 249, 250, 104, 251, 252,
	0, 105, 253, 254, 106, 107, 0, 0, 255, 256,
	257, 0, 108, 258, 0, 335, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 336, 116, 117,
	0, 0, 0, 0, 0, 0, 118, 119, 303, 120,
	259, 121, 260, 261, 0, 122, 0, 123, 0, 0,
	0, 124, 125, 0, 126, 0, 0, 0, 262, 127,
	128, 129, 263, 264, 0, 0, 0, 130, 131, 265,
	0, 132, 0, 133, 0, 0, 337, 0, 134, 266,
	0, 267, 0, 135, 136, 137, 138, 268, 269, 339,
	0, 142, 0, 139, 0, 338, 140, 270, 141, 271,
	272, 273, 0, 274, 0, 340, 143, 144, 145, 341,
	146, 147, 148, 0, 150, 149, 0, 275, 342, 151,
	343, 0, 152, 0, 0, 153, 0, 154, 155, 156,
	158, 276, 157, 344, 159, 160, 162, 161, 0, 0,
	0, 277, 163, 278, 164, 165, 0, 166, 0, 0,
	167, 0, 0, 168, 279, 345, 169, 346, 280, 170,
	171, 172, 173, 174, 0, 281, 175, 282, 176, 0,
	177, 178, 179, 180, 181, 283, 182, 183, 0, 184,
	185, 186, 187, 188, 190, 191, 189, 192, 193, 194,
	195, 0, 196, 347, 197, 198, 284, 199, 0, 203,
	204, 205, 206, 0, 285, 207, 208, 209, 0, 210,
	200, 201, 211, 348, 212, 286, 287, 213, 0, 219,
	214, 215, 202, 216, 218, 288, 217, 289, 0, 220,
	0, 221, 222, 223, 224, 225, 0, 290, 291, 292,
	0, 0, 226, 227, 293, 294, 0, 228, 229, 230,
	231, 0, 0, 232, 233, 234, 235, 0, 236, 0,
	295, 237, 238, 239, 296, 297, 95, 0, 240, 0,
	0, 0, 0, 241, 242, 243, 244, 245, 0, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 101, 102, 103, 247, 248,
	249, 250, 104, 251, 252, 0, 105, 253, 254, 106,
	107, 0, 0, 255, 256, 257, 1133, 108, 258, 0,
	0, 0, 109, 110, 111, 0, 112, 1131, 113, 114,
	115, 0, 0, 116, 117, 0, 0, 0, 0, 0,
	0, 118, 119, 303, 120, 259, 121, 260, 261, 0,
	122, 0, 123, 0, 0, 0, 124, 125, 0, 126,
	0, 0, 0, 262, 127, 128, 129, 263, 264, 0,
	1374, 0, 130, 131, 265, 0, 132, 0, 133, 1136,
	0, 0, 0, 134, 266, 0, 267, 0, 135, 136,
	137, 138, 268, 269, 0, 0, 142, 1372, 139, 0,
	0, 140, 270, 141, 271, 272, 273, 0, 274, 0,
	0, 143, 144, 145, 0, 146, 147, 148, 0, 150,
	149, 0, 275, 0, 151, 0, 0, 152, 0, 0,
	153, 0, 154, 155, 156, 158, 276, 157, 0, 159,
	160, 162, 161, 0, 0, 0, 277, 163, 278, 164,
	165, 0, 166, 0, 0, 167, 0, 0, 168, 279,
	0, 169, 0, 280, 170, 171, 172, 173, 174, 0,
	281, 175, 282, 176, 1135, 177, 178, 179, 180, 181,
	283, 182, 183, 0, 184, 185, 186, 187, 188, 190,
	191, 189, 192, 193, 194, 195, 0, 196, 0, 197,
	198, 284, 199, 0, 203, 204, 205, 206, 0, 285,
	207, 208, 209, 0, 210, 200, 201, 211, 0, 212,
	286, 287, 213, 0, 219, 214, 215, 202, 216, 218,
	288, 217, 289, 0, 220, 0, 221, 222, 223, 224,
	225, 0, 290, 291, 292, 0, 0, 226, 227, 293,
	294, 0, 228, 229, 230, 231, 0, 1373, 232, 233,
	234, 235, 0, 236, 0, 295, 237, 238, 239, 296,
	297, 95, 0, 240, 0, 0, 0, 0, 241, 242,
	243, 244, 245, 0, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	101, 102, 103, 247, 248, 249, 250, 104, 251, 252,
	0, 105, 253, 254, 106, 107, 0, 0, 255, 256,
	257, 1133, 108, 258, 0, 0, 1128, 109, 110, 111,
	0, 112, 1131, 113, 114, 115, 0, 0, 116, 117,
	0, 0, 0, 0, 0, 0, 118, 119, 303, 120,
	259, 121, 260, 261, 0, 122, 0, 123, 0, 0,
	0, 124, 125, 0, 126, 0, 0, 0, 262, 127,
	128, 129, 263, 264, 0, 0, 0, 130, 131, 265,
	0, 132, 0, 133, 1136, 0, 0, 0, 134, 266,
	0, 267, 0, 135, 136, 137, 138, 1127, 269, 0,
	0, 142, 0, 139, 0, 0, 140, 270, 141, 271,
	272, 273, 0, 274, 0, 0, 143, 144, 145, 0,
	146, 147, 148, 0, 150, 149, 0, 275, 0, 151,
	0, 0, 152, 0, 0, 153, 0, 154, 155, 156,
	158, 276, 157, 0, 159, 160, 162, 161, 0, 0,
	0, 277, 163, 278, 164, 165, 0, 166, 0, 0,
	167, 0, 0, 168, 279, 0, 169, 0, 280, 170,
	171, 172, 173, 174, 0, 281, 175, 282, 176, 1135,
	177, 178, 179, 180, 181, 283, 182, 183, 0, 184,
	185, 186, 187, 188, 190, 191, 189, 192, 193, 194,
	195, 0, 196, 0, 197, 198, 284, 199, 0, 203,
	204, 205, 206, 0, 285, 207, 208, 209, 0, 210,
	200, 201, 211, 0, 212, 286, 287, 213, 0, 219,
	214, 215, 202, 216, 218, 288, 217, 289, 0, 220,
	0, 221, 222, 223, 224, 225, 0, 290, 291, 292,
	0, 0, 226, 227, 293, 294, 0, 228, 229, 230,
	231, 0, 1134, 232, 233, 234, 235, 0, 236, 0,
	295, 237, 238, 239, 296, 297, 95, 0, 240, 0,
	0, 0, 0, 241, 242, 243, 244, 245, 0, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	246, 0, 1827, 0, 0, 101, 102, 103, 247, 248,
	249, 250, 104, 251, 252, 0, 105, 253, 254, 106,
	107, 0, 0, 255, 256, 257, 0, 108, 258, 0,
	0, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 0, 116, 117, 0, 0, 0, 0, 0,
	0, 118, 119, 303, 120, 259, 121, 260, 261, 0,
	122, 0, 123, 0, 0, 0, 124, 125, 0, 126,
	0, 0, 0, 262, 127, 128, 129, 263, 264, 0,
	0, 0, 130, 131, 265, 0, 132, 0, 133, 0,
	0, 0, 0, 134, 266, 0, 267, 0, 135, 136,
	137, 138, 268, 269, 0, 0, 142, 0, 139, 0,
	0, 140, 270, 141, 271, 272, 273, 0, 274, 0,
	0, 143, 144, 145, 0, 146, 147, 148, 0, 150,
	149, 0, 275, 0, 151, 0, 0, 152, 0, 0,
	153, 0, 154, 155, 156, 158, 276, 157, 0, 159,
	160, 162, 161, 0, 0, 0, 277, 163, 278, 164,
	165, 0, 166, 0, 0, 167, 0, 0, 168, 279,
	0, 169, 0, 280, 170, 171, 172, 173, 174, 0,
	281, 175, 282, 176, 0, 177, 178, 179, 180, 181,
	283, 182, 183, 0, 184, 185, 186, 187, 188, 190,
	191, 189, 192, 193, 194, 195, 0, 196, 0, 197,
	198, 284, 199, 0, 203, 204, 205, 206, 0, 285,
	207, 208, 209, 0, 210, 200, 201, 211, 0, 212,
	286, 287, 213, 0, 219, 214, 215, 202, 216, 218,
	288, 217, 289, 0, 220, 0, 221, 222, 223, 224,
	225, 0, 290, 291, 292, 0, 0, 226, 227, 293,
	294, 0, 228, 229, 230, 231, 0, 0, 232, 233,
	234, 235, 0, 236, 0, 295, 237, 238, 239, 296,
	297, 95, 0, 240, 0, 0, 0, 0, 241, 242,
	243, 244, 245, 0, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	101, 102, 103, 247, 248, 249, 250, 104, 251, 252,
	0, 105, 253, 254, 106, 107, 0, 0, 255, 256,
	257, 0, 108, 258, 0, 0, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 0, 116, 117,
	0, 0, 0, 0, 0, 0, 118, 119, 303, 120,
	259, 121, 260, 261, 0, 122, 0, 123, 0, 0,
	0, 124, 125, 0, 126, 0, 0, 0, 262, 127,
	128, 129, 263, 264, 0, 0, 0, 130, 131, 265,
	0, 132, 0, 133, 0, 0, 0, 0, 134, 266,
	0, 267, 0, 135, 136, 137, 138, 268, 269, 0,
	0, 142, 0, 139, 0, 0, 140, 270, 141, 271,
	272, 273, 0, 274, 0, 0, 143, 144, 145, 0,
	146, 147, 148, 0, 150, 149, 0, 275, 0, 151,
	0, 0, 152, 0, 0, 153, 0, 154, 155, 156,
	158, 276, 157, 0, 159, 160, 162, 161, 0, 0,
	0, 277, 163, 278, 164, 165, 0, 166, 0, 559,
	167, 0, 0, 168, 279, 0, 169, 0, 280, 170,
	171, 172, 173, 174, 0, 281, 175, 282, 176, 0,
	177, 178, 179, 180, 181, 283, 182, 183, 0, 184,
	185, 186, 187, 188, 190, 191, 189, 192, 193, 194,
	195, 0, 196, 0, 197, 198, 284, 199, 0, 203,
	204, 205, 206, 0, 285, 207, 208, 209, 0, 210,
	200, 201, 211, 0, 212, 286, 287, 213, 0, 219,
	214, 215, 202, 216, 218, 288, 217, 289, 0, 220,
	0, 221, 222, 223, 224, 225, 0, 290, 291, 292,
	0, 0, 226, 227, 293, 294, 0, 228, 229, 230,
	231, 0, 0, 232, 233, 234, 235, 0, 236, 0,
	295, 237, 238, 239, 296, 297, 95, 0, 240, 0,
	0, 0, 0, 241, 242, 243, 244, 245, 0, 0,
	0, 0, 98, 99, 1058, 100, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 101, 102, 103, 247, 248,
	249, 250, 104, 251, 252, 0, 105, 253, 254, 106,
	107, 0, 0, 255, 256, 257, 0, 108, 258, 0,
	0, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 0, 116, 117, 0, 0, 0, 0, 0,
	0, 118, 119, 303, 120, 259, 121, 260, 261, 0,
	122, 0, 123, 0, 0, 0, 124, 125, 0, 126,
	0, 0, 0, 262, 127, 128, 129, 263, 264, 0,
	0, 0, 130, 131, 265, 0, 132, 0, 133, 0,
	0, 0, 0, 134, 266, 0, 267, 0, 135, 136,
	137, 138, 268, 269, 0, 0, 142, 0, 139, 0,
	0, 140, 270, 141, 271, 272, 273, 0, 274, 0,
	0, 143, 144, 145, 0, 146, 147, 148, 0, 150,
	149, 0, 275, 0, 151, 0, 0, 152, 0, 0,
	153, 0, 154, 155, 156, 158, 276, 157, 0, 159,
	160, 162, 161, 0, 0, 0, 277, 163, 278, 164,
	165, 0, 166, 0, 0, 167, 0, 0, 168, 279,
	0, 169, 0, 280, 170, 171, 172, 173, 174, 0,
	281, 175, 282, 176, 0, 177, 178, 179, 180, 181,
	283, 182, 183, 0, 184, 185, 186, 187, 188, 190,
	191, 189, 192, 193, 194, 195, 0, 196, 0, 197,
	198, 284, 199, 0, 203, 204, 205, 206, 0, 285,
	207, 208, 209, 0, 210, 200, 201, 211, 0, 212,
	286, 287, 213, 0, 219, 214, 215, 202, 216, 218,
	288, 217, 289, 0, 220, 0, 221, 222, 223, 224,
	225, 0, 290, 291, 292, 0, 0, 226, 227, 293,
	294, 0, 228, 229, 230, 231, 0, 0, 232, 233,
	234, 235, 0, 236, 0, 295, 237, 238, 239, 296,
	297, 95, 0, 240, 0, 0, 0, 0, 241, 242,
	243, 244, 245, 0, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	101, 102, 103, 247, 248, 249, 250, 104, 251, 252,
	0, 105, 253, 254, 106, 107, 0, 0, 255, 256,
	257, 0, 108, 258, 0, 0, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 0, 116, 117,
	0, 0, 0, 0, 0, 0, 118, 119, 303, 120,
	259, 121, 260, 261, 0, 122, 0, 123, 0, 0,
	0, 124, 125, 0, 126, 0, 0, 0, 262, 127,
	128, 129, 263, 264, 0, 0, 0, 130, 131, 265,
	0, 132, 0, 133, 0, 0, 0, 0, 134, 266,
	0, 267, 0, 135, 136, 137, 138, 973, 269, 0,
	0, 142, 0, 139, 0, 0, 140, 270, 141, 271,
	272, 273, 0, 274, 0, 0, 143, 144, 145, 0,
	146, 147, 148, 0, 150, 149, 0, 275, 0, 151,
	0, 0, 152, 0, 0, 153, 0, 154, 155, 156,
	158, 276, 157, 0, 159, 160, 162, 161, 0, 0,
	0, 277, 163, 278, 164, 165, 0, 166, 0, 559,
	167, 0, 0, 168, 279, 0, 169, 0, 280, 170,
	171, 172, 173, 174, 0, 281, 175, 282, 176, 0,
	177, 178, 179, 180, 181, 283, 182, 183, 0, 184,
	185, 186, 187, 188, 190, 191, 189, 192, 193, 194,
	195, 0, 196, 0, 197, 198, 284, 199, 0, 203,
	204, 205, 206, 0, 285, 207, 208, 209, 0, 210,
	200, 201, 211, 0, 212, 286, 287, 213, 0, 219,
	214, 215, 202, 216, 218, 288, 217, 289, 0, 220,
	0, 221, 222, 223, 224, 225, 0, 290, 291, 292,
	0, 0, 226, 227, 293, 294, 0, 228, 229, 230,
	231, 0, 0, 232, 233, 234, 235, 0, 236, 0,
	295, 237, 238, 239, 296, 297, 95, 0, 240, 0,
	0, 0, 0, 241, 242, 243, 244, 245, 0, 0,
	0, 0, 98, 99, 711, 100, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 101, 102, 103, 247, 248,
	249, 250, 104, 251, 252, 0, 105, 253, 254, 106,
	107, 0, 0, 255, 256, 257, 0, 108, 258, 0,
	0, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 0, 116, 117, 0, 0, 0, 0, 0,
	0, 118, 119, 303, 120, 259, 121, 260, 261, 0,
	122, 0, 123, 0, 0, 0, 124, 125, 0, 126,
	0, 0, 0, 262, 127, 128, 129, 263, 264, 0,
	0, 0, 130, 131, 265, 0, 132, 0, 133, 0,
	0, 0, 0, 134, 266, 0, 267, 0, 135, 136,
	137, 138, 268, 269, 0, 0, 142, 0, 139, 0,
	0, 140, 270, 141, 271, 272, 273, 0, 274, 0,
	0, 143, 144, 145, 0, 146, 147, 148, 0, 150,
	149, 0, 275, 0, 151, 0, 0, 152, 0, 0,
	153, 0, 154, 155, 156, 158, 276, 157, 0, 159,
	160, 162, 161, 0, 0, 0, 277, 163, 278, 164,
	165, 0, 166, 0, 0, 167, 0, 0, 168, 279,
	0, 169, 0, 280, 170, 171, 172, 173, 174, 0,
	281, 175, 282, 176, 0, 177, 178, 179, 180, 181,
	283, 182, 183, 0, 184, 185, 186, 187, 188, 190,
	191, 189, 192, 193, 194, 195, 0, 196, 0, 197,
	198, 284, 199, 0, 203, 204, 205, 206, 0, 285,
	207, 208, 209, 0, 210, 200, 201, 211, 0, 212,
	286, 287, 213, 0, 219, 214, 215, 202, 216, 218,
	288, 217, 289, 0, 220, 0, 221, 222, 223, 224,
	225, 0, 290, 291, 292, 0, 0, 226, 227, 293,
	294, 0, 228, 229, 230, 231, 0, 0, 232, 233,
	234, 235, 0, 236, 0, 295, 237, 238, 239, 296,
	297, 95, 0, 240, 0, 0, 0, 0, 241, 242,
	243, 244, 245, 0, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	101, 102, 103, 247, 248, 249, 250, 104, 251, 252,
	0, 105, 253, 254, 106, 107, 0, 0, 255, 256,
	257, 0, 108, 258, 0, 0, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 0, 116, 117,
	0, 0, 0, 0, 0, 0, 118, 119, 303, 120,
	259, 121, 260, 261, 0, 122, 0, 123, 0, 0,
	0, 124, 125, 0, 126, 0, 0, 0, 262, 127,
	128, 129, 263, 264, 0, 0, 0, 130, 131, 265,
	0, 132, 0, 133, 0, 0, 0, 0, 134, 266,
	0, 267, 0, 135, 136, 137, 138, 571, 269, 0,
	0, 142, 0, 139, 0, 0, 140, 270, 141, 271,
	272, 273, 0, 274, 0, 0, 143, 144, 145, 0,
	146, 147, 148, 0, 150, 149, 0, 275, 0, 151,
	0, 0, 152, 0, 0, 153, 0, 154, 155, 156,
	158, 276, 157, 0, 159, 160, 162, 161, 0, 0,
	0, 277, 163, 278, 164, 165, 0, 166, 0, 559,
	167, 0, 0, 168, 279, 0, 169, 0, 280, 170,
	171, 172, 173, 174, 0, 281, 175, 282, 176, 0,
	177, 178, 179, 180, 181, 283, 182, 183, 0, 184,
	185, 186, 187, 188, 190, 191, 189, 192, 193, 194,
	195, 0, 196, 0, 197, 198, 284, 199, 0, 203,
	204, 205, 206, 0, 285, 207, 208, 209, 0, 210,
	200, 201, 211, 0, 212, 286, 287, 213, 0, 219,
	214, 215, 202, 216, 218, 288, 217, 289, 0, 220,
	0, 221, 222, 223, 224, 225, 0, 290, 291, 292,
	0, 0, 226, 227, 293, 294, 0, 228, 229, 230,
	231, 0, 0, 232, 233, 234, 235, 0, 236, 0,
	295, 237, 238, 239, 296, 297, 95, 0, 240, 0,
	0, 0, 0, 241, 242, 243, 244, 245, 0, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 101, 102, 103, 247, 248,
	249, 250, 104, 251, 252, 0, 105, 253, 254, 106,
	107, 0, 0, 255, 256, 257, 0, 108, 258, 0,
	0, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 0, 116, 117, 0, 0, 0, 0, 0,
	0, 118, 119, 303, 120, 259, 121, 260, 261, 0,
	122, 0, 123, 0, 0, 0, 124, 125, 0, 126,
	0, 0, 0, 262, 127, 128, 129, 263, 264, 0,
	0, 0, 130, 131, 265, 0, 132, 0, 133, 0,
	0, 0, 0, 134, 266, 0, 267, 0, 135, 136,
	137, 138, 564, 269, 0, 0, 142, 0, 139, 0,
	0, 140, 270, 141, 271, 272, 273, 0, 274, 0,
	0, 143, 144, 145, 0, 146, 147, 148, 0, 150,
	149, 0, 275, 0, 151, 0, 0, 152, 0, 0,
	153, 0, 154, 155, 156, 158, 276, 157, 0, 159,
	160, 162, 161, 0, 0, 0, 277, 163, 278, 164,
	165, 0, 166, 0, 559, 167, 0, 0, 168, 279,
	0, 169, 0, 280, 170, 171, 172, 173, 174, 0,
	281, 175, 282, 176, 0, 177, 178, 179, 180, 181,
	283, 182, 183, 0, 184, 185, 186, 187, 188, 190,
	191, 189, 192, 193, 194, 195, 0, 196, 0, 197,
	198, 284, 199, 0, 203, 204, 205, 206, 0, 285,
	207, 208, 209, 0, 210, 200, 201, 211, 0, 212,
	286, 287, 213, 0, 219, 214, 215, 202, 216, 218,
	288, 217, 289, 0, 220, 0, 221, 222, 223, 224,
	225, 0, 290, 291, 292, 0, 0, 226, 227, 293,
	294, 0, 228, 229, 230, 231, 0, 0, 232, 233,
	234, 235, 0, 236, 0, 295, 237, 238, 239, 296,
	297, 95, 0, 240, 0, 0, 0, 0, 241, 242,
	243, 244, 245, 0, 0, 0, 0, 98, 99, 434,
	100, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	101, 102, 103, 247, 248, 249, 250, 104, 251, 252,
	0, 105, 253, 254, 106, 107, 0, 0, 255, 256,
	257, 0, 108, 258, 0, 0, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 0, 116, 117,
	0, 0, 0, 0, 0, 0, 118, 119, 303, 120,
	259, 121, 260, 261, 0, 122, 0, 123, 0, 0,
	0, 124, 125, 0, 126, 0, 0, 0, 262, 127,
	128, 129, 263, 264, 0, 0, 0, 130, 131, 265,
	0, 132, 0, 133, 0, 0, 0, 0, 134, 266,
	0, 267, 0, 135, 136, 137, 138, 268, 269, 0,
	0, 142, 0, 139, 0, 0, 140, 270, 141, 271,
	272, 273, 0, 274, 0, 0, 143, 144, 145, 0,
	146, 147, 148, 0, 150, 149, 0, 275, 0, 151,
	0, 0, 152, 0, 0, 153, 0, 154, 155, 156,
	158, 276, 157, 0, 159, 160, 162, 161, 0, 0,
	0, 277, 163, 278, 164, 165, 0, 166, 0, 0,
	167, 0, 0, 168, 279, 0, 169, 0, 280, 170,
	171, 172, 173, 174, 0, 281, 175, 282, 433, 0,
	177, 178, 179, 180, 181, 283, 182, 183, 0, 184,
	185, 186, 187, 188, 190, 191, 189, 192, 193, 194,
	195, 0, 196, 0, 197, 198, 284, 199, 0, 203,
	204, 205, 206, 0, 285, 207, 208, 209, 0, 210,
	200, 201, 211, 0, 212, 286, 287, 213, 0, 219,
	214, 215, 202, 216, 218, 288, 217, 289, 0, 220,
	0, 221, 222, 223, 224, 225, 0, 290, 291, 292,
	0, 0, 226, 227, 293, 294, 0, 228, 229, 230,
	231, 0, 0, 232, 233, 234, 235, 0, 236, 0,
	295, 237, 238, 239, 296, 297, 95, 0, 240, 0,
	0, 0, 0, 241, 242, 243, 244, 245, 0, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 101, 102, 103, 247, 248,
	249, 250, 104, 251, 252, 0, 105, 253, 254, 106,
	107, 0, 0, 255, 256, 257, 0, 108, 258, 0,
	0, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 0, 116, 117, 0, 0, 0, 0, 0,
	0, 118, 119, 303, 120, 259, 121, 260, 261, 0,
	122, 0, 123, 0, 0, 0, 124, 125, 0, 126,
	0, 0, 0, 262, 127, 128, 129, 263, 264, 0,
	0, 0, 130, 131, 265, 0, 132, 0, 133, 0,
	0, 0, 0, 134, 266, 0, 267, 0, 135, 136,
	137, 138, 268, 269, 0, 0, 142, 0, 139, 0,
	0, 140, 270, 141, 271, 272, 273, 0, 274, 0,
	0, 143, 144, 145, 0, 146, 147, 148, 0, 150,
	149, 0, 275, 0, 151, 0, 0, 152, 0, 0,
	153, 0, 154, 155, 156, 158, 276, 157, 0, 159,
	160, 162, 161, 0, 0, 0, 277, 163, 278, 164,
	165, 0, 166, 0, 0, 167, 0, 0, 168, 279,
	0, 169, 0, 280, 170, 171, 172, 173, 174, 0,
	281, 175, 282, 176, 0, 177, 178, 179, 180, 181,
	283, 182, 183, 0, 184, 185, 186, 187, 188, 190,
	191, 189, 192, 193, 194, 195, 0, 196, 0, 197,
	198, 284, 199, 0, 203, 204, 205, 206, 0, 285,
	207, 208, 209, 0, 210, 200, 201, 211, 0, 212,
	286, 287, 213, 0, 219, 214, 215, 202, 216, 218,
	288, 217, 289, 0, 220, 0, 221, 222, 223, 224,
	225, 0, 290, 291, 292, 0, 0, 226, 227, 293,
	294, 0, 228, 229, 230, 231, 0, 0, 232, 233,
	234, 235, 0, 236, 0, 295, 237, 238, 239, 296,
	297, 95, 0, 240, 0, 0, 0, 0, 241, 242,
	243, 244, 245, 0, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	101, 102, 103, 247, 248, 249, 250, 104, 251, 252,
	0, 105, 253, 254, 106, 107, 0, 0, 255, 256,
	257, 0, 108, 258, 0, 0, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 0, 116, 117,
	0, 0, 0, 0, 0, 0, 118, 119, 303, 120,
	259, 121, 260, 261, 0, 122, 0, 123, 0, 0,
	0, 124, 125, 0, 126, 0, 0, 0, 262, 127,
	128, 129, 263, 264, 0, 0, 0, 130, 131, 265,
	0, 132, 0, 133, 0, 0, 0, 0, 134, 266,
	0, 267, 0, 135, 136, 137, 138, 1431, 269, 0,
	0, 142, 0, 139, 0, 0, 140, 270, 141, 271,
	272, 273, 0, 274, 0, 0, 143, 144, 145, 0,
	146, 147, 148, 0, 150, 149, 0, 275, 0, 151,
	0, 0, 152, 0, 0, 153, 0, 154, 155, 156,
	158, 276, 157, 0, 159, 160, 162, 161, 0, 0,
	0, 277, 163, 278, 164, 165, 0, 166, 0, 0,
	167, 0, 0, 168, 279, 0, 169, 0, 280, 170,
	171, 172, 173, 174, 0, 281, 175, 282, 176, 0,
	177, 178, 179, 180, 181, 283, 182, 183, 0, 184,
	185, 186, 187, 188, 190, 191, 189, 192, 193, 194,
	195, 0, 196, 0, 197, 198, 284, 199, 0, 203,
	204, 205, 206, 0, 285, 207, 208, 209, 0, 210,
	200, 201, 211, 0, 212, 286, 287, 213, 0, 219,
	214, 215, 202, 216, 218, 288, 217, 289, 0, 220,
	0, 221, 222, 223, 224, 225, 0, 290, 291, 292,
	0, 0, 226, 227, 293, 294, 0, 228, 229, 230,
	231, 0, 0, 232, 233, 234, 235, 0, 236, 0,
	295, 237, 238, 239, 296, 297, 95, 0, 240, 0,
	0, 0, 0, 241, 242, 243, 244, 245, 0, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 101, 102, 103, 247, 248,
	249, 250, 104, 251, 252, 0, 105, 253, 254, 106,
	107, 0, 0, 255, 256, 257, 0, 108, 258, 0,
	0, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 0, 116, 117, 0, 0, 0, 0, 0,
	0, 118, 119, 303, 120, 259, 121, 260, 261, 0,
	122, 0, 123, 0, 0, 0, 124, 125, 0, 126,
	0, 0, 0, 262, 127, 128, 129, 263, 264, 0,
	0, 0, 130, 131, 265, 0, 132, 0, 133, 0,
	0, 0, 0, 134, 266, 0, 267, 0, 135, 136,
	137, 138, 1429, 269, 0, 0, 142, 0, 139, 0,
	0, 140, 270, 141, 271, 272, 273, 0, 274, 0,
	0, 143, 144, 145, 0, 146, 147, 148, 0, 150,
	149, 0, 275, 0, 151, 0, 0, 152, 0, 0,
	153, 0, 154, 155, 156, 158, 276, 157, 0, 159,
	160, 162, 161, 0, 0, 0, 277, 163, 278, 164,
	165, 0, 166, 0, 0, 167, 0, 0, 168, 279,
	0, 169, 0, 280, 170, 171, 172, 173, 174, 0,
	281, 175, 282, 176, 0, 177, 178, 179, 180, 181,
	283, 182, 183, 0, 184, 185, 186, 187, 188, 190,
	191, 189, 192, 193, 194, 195, 0, 196, 0, 197,
	198, 284, 199, 0, 203, 204, 205, 206, 0, 285,
	207, 208, 209, 0, 210, 200, 201, 211, 0, 212,
	286, 287, 213, 0, 219, 214, 215, 202, 216, 218,
	288, 217, 289, 0, 220, 0, 221, 222, 223, 224,
	225, 0, 290, 291, 292, 0, 0, 226, 227, 293,
	294, 0, 228, 229, 230, 231, 0, 0, 232, 233,
	234, 235, 0, 236, 0, 295, 237, 238, 239, 296,
	297, 95, 0, 240, 0, 0, 0, 0, 241, 242,
	243, 244, 245, 0, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	101, 102, 103, 247, 248, 249, 250, 104, 251, 252,
	0, 105, 253, 254, 106, 107, 0, 0, 255, 256,
	257, 0, 108, 258, 0, 0, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 0, 116, 117,
	0, 0, 0, 0, 0, 0, 118, 119, 303, 120,
	259, 121, 260, 261, 0, 122, 0, 123, 0, 0,
	0, 124, 125, 0, 126, 0, 0, 0, 262, 127,
	128, 129, 263, 264, 0, 0, 0, 130, 131, 265,
	0, 132, 0, 133, 0, 0, 0, 0, 134, 266,
	0, 267, 0, 135, 136, 137, 138, 1418, 269, 0,
	0, 142, 0, 139, 0, 0, 140, 270, 141, 271,
	272, 273, 0, 274, 0, 0, 143, 144, 145, 0,
	146, 147, 148, 0, 150, 149, 0, 275, 0, 151,
	0, 0, 152, 0, 0, 153, 0, 154, 155, 156,
	158, 276, 157, 0, 159, 160, 162, 161, 0, 0,
	0, 277, 163, 278, 164, 165, 0, 166, 0, 0,
	167, 0, 0, 168, 279, 0, 169, 0, 280, 170,
	171, 172, 173, 174, 0, 281, 175, 282, 176, 0,
	177, 178, 179, 180, 181, 283, 182, 183, 0, 184,
	185, 186, 187, 188, 190, 191, 189, 192, 193, 194,
	195, 0, 196, 0, 197, 198, 284, 199, 0, 203,
	204, 205, 206, 0, 285, 207, 208, 209, 0, 210,
	200, 201, 211, 0, 212, 286, 287, 213, 0, 219,
	214, 215, 202, 216, 218, 288, 217, 289, 0, 220,
	0, 221, 222, 223, 224, 225, 0, 290, 291, 292,
	0, 0, 226, 227, 293, 294, 0, 228, 229, 230,
	231, 0, 0, 232, 233, 234, 235, 0, 236, 0,
	295, 237, 238, 239, 296, 297, 95, 0, 240, 0,
	0, 0, 0, 241, 242, 243, 244, 245, 0, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 101, 102, 103, 247, 248,
	249, 250, 104, 251, 252, 0, 105, 253, 254, 106,
	107, 0, 0, 255, 256, 257, 0, 108, 258, 0,
	0, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 0, 116, 117, 0, 0, 0, 0, 0,
	0, 118, 119, 303, 120, 259, 121, 260, 261, 0,
	122, 0, 123, 0, 0, 0, 124, 125, 0, 126,
	0, 0, 0, 262, 127, 128, 129, 263, 264, 0,
	0, 0, 130, 131, 265, 0, 132, 0, 133, 0,
	0, 0, 0, 134, 266, 0, 267, 0, 135, 136,
	137, 138, 1088, 269, 0, 0, 142, 0, 139, 0,
	0, 140, 270, 141, 271, 272, 273, 0, 274, 0,
	0, 143, 144, 145, 0, 146, 147, 148, 0, 150,
	149, 0, 275, 0, 151, 0, 0, 152, 0, 0,
	153, 0, 154, 155, 156, 158, 276, 157, 0, 159,
	160, 162, 161, 0, 0, 0, 277, 163, 278, 164,
	165, 0, 166, 0, 0, 167, 0, 0, 168, 279,
	0, 169, 0, 280, 170, 171, 172, 173, 174, 0,
	281, 175, 282, 176, 0, 177, 178, 179, 180, 181,
	283, 182, 183, 0, 184, 185, 186, 187, 188, 190,
	191, 189, 192, 193, 194, 195, 0, 196, 0, 197,
	198, 284, 199, 0, 203, 204, 205, 206, 0, 285,
	207, 208, 209, 0, 210, 200, 201, 211, 0, 212,
	286, 287, 213, 0, 219, 214, 215, 202, 216, 218,
	288, 217, 289, 0, 220, 0, 221, 222, 223, 224,
	225, 0, 290, 291, 292, 0, 0, 226, 227, 293,
	294, 0, 228, 229, 230, 231, 0, 0, 232, 233,
	234, 235, 0, 236, 0, 295, 237, 238, 239, 296,
	297, 95, 0, 240, 0, 0, 0, 0, 241, 242,
	243, 244, 245, 0, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	101, 102, 103, 247, 248, 249, 250, 104, 251, 252,
	0, 105, 253, 254, 106, 107, 0, 0, 255, 256,
	257, 0, 108, 258, 0, 0, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 0, 116, 117,
	0, 0, 0, 0, 0, 0, 118, 119, 303, 120,
	259, 121, 260, 261, 0, 122, 0, 123, 0, 0,
	0, 124, 125, 0, 126, 0, 0, 0, 262, 127,
	128, 129, 263, 264, 0, 0, 0, 130, 131, 265,
	0, 132, 0, 133, 0, 0, 0, 0, 134, 266,
	0, 267, 0, 135, 136, 137, 138, 268, 269, 0,
	0, 142, 0, 139, 0, 0, 140, 270, 141, 271,
	272, 273, 0, 274, 0, 0, 143, 144, 145, 0,
	146, 147, 148, 0, 150, 149, 0, 275, 0, 151,
	0, 0, 152, 0, 0, 153, 0, 154, 155, 156,
	158, 276, 157, 0, 159, 160, 162, 161, 0, 0,
	0, 277, 163, 278, 164, 165, 0, 166, 0, 0,
	167, 0, 0, 168, 279, 0, 169, 0, 280, 170,
	171, 172, 173, 174, 0, 281, 175, 282, 176, 0,
	177, 178, 179, 180, 181, 283, 182, 183, 0, 184,
	185, 186, 187, 188, 190, 191, 189, 192, 193, 194,
	195, 0, 196, 0, 197, 198, 284, 199, 0, 450,
	204, 205, 206, 0, 285, 207, 208, 209, 0, 210,
	200, 201, 211, 0, 212, 286, 287, 213, 0, 219,
	214, 215, 202, 216, 218, 288, 217, 289, 0, 220,
	0, 221, 222, 223, 224, 225, 0, 290, 291, 292,
	0, 0, 226, 227, 293, 294, 0, 228, 229, 230,
	231, 0, 0, 232, 233, 234, 235, 0, 236, 0,
	295, 237, 238, 239, 296, 297, 95, 0, 240, 0,
	0, 0, 0, 241, 242, 243, 244, 245, 0, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	246, 0, 957, 0, 0, 101, 102, 103, 247, 248,
	249, 250, 104, 251, 252, 0, 105, 253, 254, 106,
	107, 0, 0, 255, 256, 257, 0, 108, 258, 0,
	0, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 0, 116, 117, 0, 0, 0, 0, 0,
	0, 118, 119, 303, 120, 259, 121, 260, 261, 0,
	122, 0, 123, 0, 0, 0, 124, 125, 0, 126,
	0, 0, 0, 262, 127, 128, 129, 263, 264, 0,
	0, 0, 130, 131, 265, 0, 132, 0, 133, 0,
	0, 0, 0, 134, 266, 0, 267, 0, 135, 136,
	137, 138, 268, 269, 0, 0, 142, 0, 139, 0,
	0, 140, 270, 141, 271, 272, 273, 0, 274, 0,
	0, 143, 144, 145, 0, 146, 147, 148, 0, 150,
	149, 0, 275, 0, 151, 0, 0, 152, 0, 0,
	153, 0, 154, 155, 156, 158, 276, 157, 0, 159,
	160, 162, 161, 0, 0, 0, 277, 163, 278, 164,
	165, 0, 166, 0, 0, 167, 0, 0, 168, 279,
	0, 169, 0, 280, 170, 171, 172, 173, 174, 0,
	281, 175, 282, 176, 0, 177, 178, 179, 180, 181,
	283, 182, 183, 0, 184, 185, 186, 187, 188, 190,
	191, 189, 192, 193, 194, 195, 0, 196, 0, 197,
	198, 284, 199, 0, 203, 204, 205, 206, 0, 285,
	207, 208, 209, 0, 0, 200, 201, 211, 0, 212,
	286, 287, 213, 0, 219, 214, 215, 202, 216, 218,
	288, 217, 289, 0, 220, 0, 221, 222, 223, 224,
	225, 0, 290, 291, 292, 0, 0, 226, 227, 293,
	294, 0, 228, 229, 230, 231, 0, 0, 232, 233,
	234, 235, 0, 236, 0, 295, 237, 238, 239, 296,
	297, 95, 0, 240, 0, 0, 0, 0, 241, 242,
	243, 244, 245, 0, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	101, 102, 103, 247, 248, 249, 250, 104, 251, 252,
	0, 105, 253, 254, 106, 107, 0, 0, 255, 256,
	257, 0, 108, 258, 0, 0, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 0, 116, 117,
	0, 0, 0, 0, 0, 0, 118, 119, 303, 120,
	259, 121, 260, 261, 0, 122, 0, 123, 0, 0,
	0, 124, 125, 0, 126, 0, 0, 0, 262, 127,
	128, 129, 263, 264, 0, 0, 0, 130, 131, 265,
	0, 132, 0, 133, 0, 0, 0, 0, 134, 266,
	0, 267, 0, 135, 136, 137, 138, 788, 269, 0,
	0, 142, 0, 139, 0, 0, 140, 270, 141, 271,
	272, 273, 0, 274, 0, 0, 143, 144, 145, 0,
	146, 147, 148, 0, 150, 149, 0, 275, 0, 151,
	0, 0, 152, 0, 0, 153, 0, 154, 155, 156,
	158, 276, 157, 0, 159, 160, 162, 161, 0, 0,
	0, 277, 163, 278, 164, 165, 0, 166, 0, 0,
	167, 0, 0, 168, 279, 0, 169, 0, 280, 170,
	171, 172, 173, 174, 0, 281, 175, 282, 176, 0,
	177, 178, 179, 180, 181, 283, 182, 183, 0, 184,
	185, 186, 187, 188, 190, 191, 189, 192, 193, 194,
	195, 0, 196, 0, 197, 198, 284, 199, 0, 203,
	204, 205, 206, 0, 285, 207, 208, 209, 0, 210,
	200, 201, 211, 0, 212, 286, 287, 213, 0, 219,
	214, 215, 202, 216, 218, 288, 217, 289, 0, 220,
	0, 221, 222, 223, 224, 225, 0, 290, 291, 292,
	0, 0, 226, 227, 293, 294, 0, 228, 229, 230,
	231, 0, 0, 232, 233, 234, 235, 0, 236, 0,
	295, 237, 238, 239, 296, 297, 95, 0, 240, 0,
	0, 0, 0, 241, 242, 243, 244, 245, 0, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 101, 102, 103, 247, 248,
	249, 250, 104, 251, 252, 0, 105, 253, 254, 106,
	107, 0, 0, 255, 256, 257, 0, 108, 258, 0,
	0, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 0, 116, 117, 0, 0, 0, 0, 0,
	0, 118, 119, 303, 120, 259, 121, 260, 261, 0,
	122, 0, 123, 0, 0, 0, 124, 125, 0, 126,
	0, 0, 0, 262, 127, 128, 129, 263, 264, 0,
	0, 0, 130, 131, 265, 0, 132, 0, 133, 0,
	0, 0, 0, 134, 266, 0, 267, 0, 135, 136,
	137, 138, 783, 269, 0, 0, 142, 0, 139, 0,
	0, 140, 270, 141, 271, 272, 273, 0, 274, 0,
	0, 143, 144, 145, 0, 146, 147, 148, 0, 150,
	149, 0, 275, 0, 151, 0, 0, 152, 0, 0,
	153, 0, 154, 155, 156, 158, 276, 157, 0, 159,
	160, 162, 161, 0, 0, 0, 277, 163, 278, 164,
	165, 0, 166, 0, 0, 167, 0, 0, 168, 279,
	0, 169, 0, 280, 170, 171, 172, 173, 174, 0,
	281, 175, 282, 176, 0, 177, 178, 179, 180, 181,
	283, 182, 183, 0, 184, 185, 186, 187, 188, 190,
	191, 189, 192, 193, 194, 195, 0, 196, 0, 197,
	198, 284, 199, 0, 203, 204, 205, 206, 0, 285,
	207, 208, 209, 0, 210, 200, 201, 211, 0, 212,
	286, 287, 213, 0, 219, 214, 215, 202, 216, 218,
	288, 217, 289, 0, 220, 0, 221, 222, 223, 224,
	225, 0, 290, 291, 292, 0, 0, 226, 227, 293,
	294, 0, 228, 229, 230, 231, 0, 0, 232, 233,
	234, 235, 0, 236, 0, 295, 237, 238, 239, 296,
	297, 95, 0, 240, 0, 0, 0, 0, 241, 242,
	243, 244, 245, 0, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	101, 102, 103, 247, 248, 249, 250, 104, 251, 252,
	0, 105, 253, 254, 106, 107, 0, 0, 255, 256,
	719, 0, 108, 258, 0, 0, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 0, 116, 117,
	0, 0, 0, 0, 0, 0, 118, 119, 303, 120,
	259, 121, 260, 261, 0, 122, 0, 123, 0, 0,
	0, 124, 125, 0, 126, 0, 0, 0, 262, 127,
	128, 129, 263, 264, 0, 0, 0, 130, 131, 265,
	0, 132, 0, 133, 0, 0, 0, 0, 134, 266,
	0, 267, 0, 135, 136, 137, 138, 268, 269, 0,
	0, 142, 0, 139, 0, 0, 140, 270, 141, 271,
	272, 273, 0, 274, 0, 0, 143, 144, 145, 0,
	146, 147, 148, 0, 150, 149, 0, 275, 0, 151,
	0, 0, 152, 0, 0, 153, 0, 154, 155, 156,
	158, 276, 464, 0, 159, 160, 162, 161, 0, 0,
	0, 277, 163, 278, 164, 165, 0, 166, 0, 0,
	167, 0, 0, 168, 279, 0, 169, 0, 280, 170,
	171, 172, 173, 174, 0, 281, 175, 282, 176, 0,
	177, 178, 179, 180, 181, 283, 182, 183, 0, 184,
	185, 186, 187, 188, 190, 191, 189, 192, 193, 194,
	195, 0, 196, 0, 197, 198, 284, 199, 0, 203,
	204, 205, 206, 0, 285, 207, 208, 209, 0, 210,
	200, 201, 211, 0, 212, 286, 287, 213, 0, 219,
	214, 215, 202, 216, 218, 288, 217, 289, 0, 220,
	0, 221, 222, 223, 224, 225, 0, 461, 291, 292,
	0, 0, 226, 457, 293, 294, 0, 228, 229, 230,
	231, 0, 0, 232, 233, 234, 235, 0, 236, 0,
	295, 237, 238, 239, 296, 297, 95, 0, 240, 0,
	0, 0, 0, 241, 242, 243, 244, 245, 0, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 101, 102, 103, 247, 248,
	249, 250, 104, 251, 252, 0, 105, 253, 254, 106,
	107, 0, 0, 255, 256, 257, 0, 108, 258, 0,
	0, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 0, 116, 117, 0, 0, 0, 0, 0,
	0, 118, 119, 303, 120, 259, 121, 260, 261, 0,
	122, 0, 123, 0, 0, 0, 124, 125, 0, 126,
	0, 0, 0, 262, 127, 128, 129, 263, 264, 0,
	0, 0, 130, 131, 265, 0, 132, 0, 133, 0,
	0, 0, 0, 134, 266, 0, 267, 0, 135, 136,
	137, 138, 268, 269, 0, 0, 142, 0, 139, 0,
	0, 140, 270, 141, 271, 272, 273, 0, 274, 0,
	0, 143, 144, 145, 0, 146, 147, 148, 0, 150,
	149, 0, 275, 0, 151, 0, 0, 152, 0, 0,
	153, 0, 154, 155, 156, 158, 276, 464, 0, 159,
	160, 162, 161, 0, 0, 0, 277, 163, 278, 164,
	165, 0, 166, 0, 0, 167, 0, 0, 168, 279,
	0, 169, 0, 280, 170, 171, 172, 173, 174, 0,
	281, 175, 282, 176, 0, 177, 178, 179, 180, 181,
	283, 182, 183, 0, 184, 185, 186, 187, 188, 190,
	191, 189, 192, 193, 194, 195, 0, 196, 0, 197,
	198, 284, 199, 0, 203, 204, 205, 206, 0, 285,
	207, 208, 209, 0, 210, 200, 201, 211, 0, 212,
	286, 287, 213, 0, 219, 214, 215, 202, 216, 218,
	288, 217, 289, 0, 220, 0, 221, 222, 223, 224,
	225, 0, 461, 291, 292, 0, 0, 226, 457, 293,
	294, 0, 228, 229, 230, 231, 0, 0, 232, 233,
	234, 235, 0, 236, 0, 295, 237, 238, 239, 296,
	297, 95, 0, 240, 0, 0, 0, 0, 241, 242,
	243, 244, 245, 0, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	101, 102, 103, 247, 248, 249, 250, 104, 251, 252,
	0, 105, 253, 254, 106, 107, 0, 0, 255, 256,
	257, 0, 108, 258, 0, 0, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 0, 116, 117,
	0, 0, 0, 0, 0, 0, 118, 119, 303, 120,
	259, 121, 260, 261, 0, 122, 0, 123, 0, 0,
	0, 124, 125, 0, 126, 0, 0, 0, 262, 127,
	128, 129, 263, 264, 0, 0, 0, 130, 131, 265,
	0, 132, 0, 133, 0, 0, 0, 0, 134, 266,
	0, 267, 0, 135, 136, 137, 138, 699, 269, 0,
	0, 142, 0, 139, 0, 0, 140, 270, 141, 271,
	272, 273, 0, 274, 0, 0, 143, 144, 145, 0,
	146, 147, 148, 0, 150, 149, 0, 275, 0, 151,
	0, 0, 152, 0, 0, 153, 0, 154, 155, 156,
	158, 276, 157, 0, 159, 160, 162, 161, 0, 0,
	0, 277, 163, 278, 164, 165, 0, 166, 0, 0,
	167, 0, 0, 168, 279, 0, 169, 0, 280, 170,
	171, 172, 173, 174, 0, 281, 175, 282, 176, 0,
	177, 178, 179, 180, 181, 283, 182, 183, 0, 184,
	185, 186, 187, 188, 190, 191, 189, 192, 193, 194,
	195, 0, 196, 0, 197, 198, 284, 199, 0, 203,
	204, 205, 206, 0, 285, 207, 208, 209, 0, 210,
	200, 201, 211, 0, 212, 286, 287, 213, 0, 219,
	214, 215, 202, 216, 218, 288, 217, 289, 0, 220,
	0, 221, 222, 223, 224, 225, 0, 290, 291, 292,
	0, 0, 226, 227, 293, 294, 0, 228, 229, 230,
	231, 0, 0, 232, 233, 234, 235, 0, 236, 0,
	295, 237, 238, 239, 296, 297, 95, 0, 240, 0,
	0, 0, 0, 241, 242, 243, 244, 245, 0, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 101, 102, 103, 247, 248,
	249, 250, 104, 251, 252, 0, 105, 253, 254, 106,
	107, 0, 0, 255, 256, 257, 0, 108, 258, 0,
	0, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 0, 116, 117, 0, 0, 0, 0, 0,
	0, 118, 119, 303, 120, 259, 121, 260, 261, 0,
	122, 0, 123, 0, 0, 0, 124, 125, 0, 126,
	0, 0, 0, 262, 127, 128, 129, 263, 264, 0,
	0, 0, 130, 131, 265, 0, 132, 0, 133, 0,
	0, 0, 0, 134, 266, 0, 267, 0, 135, 136,
	137, 138, 697, 269, 0, 0, 142, 0, 139, 0,
	0, 140, 270, 141, 271, 272, 273, 0, 274, 0,
	0, 143, 144, 145, 0, 146, 147, 148, 0, 150,
	149, 0, 275, 0, 151, 0, 0, 152, 0, 0,
	153, 0, 154, 155, 156, 158, 276, 157, 0, 159,
	160, 162, 161, 0, 0, 0, 277, 163, 278, 164,
	165, 0, 166, 0, 0, 167, 0, 0, 168, 279,
	0, 169, 0, 280, 170, 171, 172, 173, 174, 0,
	281, 175, 282, 176, 0, 177, 178, 179, 180, 181,
	283, 182, 183, 0, 184, 185, 186, 187, 188, 190,
	191, 189, 192, 193, 194, 195, 0, 196, 0, 197,
	198, 284, 199, 0, 203, 204, 205, 206, 0, 285,
	207, 208, 209, 0, 210, 200, 201, 211, 0, 212,
	286, 287, 213, 0, 219, 214, 215, 202, 216, 218,
	288, 217, 289, 0, 220, 0, 221, 222, 223, 224,
	225, 0, 290, 291, 292, 0, 0, 226, 227, 293,
	294, 0, 228, 229, 230, 231, 0, 0, 232, 233,
	234, 235, 0, 236, 0, 295, 237, 238, 239, 296,
	297, 95, 0, 240, 0, 0, 0, 0, 241, 242,
	243, 244, 245, 0, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	101, 102, 103, 247, 248, 249, 250, 104, 251, 252,
	0, 105, 253, 254, 106, 107, 0, 0, 255, 256,
	257, 0, 108, 258, 0, 0, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 0, 116, 117,
	0, 0, 0, 0, 0, 0, 118, 119, 303, 120,
	259, 121, 260, 261, 0, 122, 0, 123, 0, 0,
	0, 124, 125, 0, 126, 0, 0, 0, 262, 127,
	128, 129, 263, 264, 0, 0, 0, 130, 131, 265,
	0, 132, 0, 133, 0, 0, 0, 0, 134, 266,
	0, 267, 0, 135, 136, 137, 138, 694, 269, 0,
	0, 142, 0, 139, 0, 0, 140, 270, 141, 271,
	272, 273, 0, 274, 0, 0, 143, 144, 145, 0,
	146, 147, 148, 0, 150, 149, 0, 275, 0, 151,
	0, 0, 152, 0, 0, 153, 0, 154, 155, 156,
	158, 276, 157, 0, 159, 160, 162, 161, 0, 0,
	0, 277, 163, 278, 164, 165, 0, 166, 0, 0,
	167, 0, 0, 168, 279, 0, 169, 0, 280, 170,
	171, 172, 173, 174, 0, 281, 175, 282, 176, 0,
	177, 178, 179, 180, 181, 283, 182, 183, 0, 184,
	185, 186, 187, 188, 190, 191, 189, 192, 193, 194,
	195, 0, 196, 0, 197, 198, 284, 199, 0, 203,
	204, 205, 206, 0, 285, 207, 208, 209, 0, 210,
	200, 201, 211, 0, 212, 286, 287, 213, 0, 219,
	214, 215, 202, 216, 218, 288, 217, 289, 0, 220,
	0, 221, 222, 223, 224, 225, 0, 290, 291, 292,
	0, 0, 226, 227, 293, 294, 0, 228, 229, 230,
	231, 0, 0, 232, 233, 234, 235, 0, 236, 0,
	295, 237, 238, 239, 296, 297, 95, 0, 240, 0,
	0, 0, 0, 241, 242, 243, 244, 245, 0, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 101, 102, 103, 247, 248,
	249, 250, 104, 251, 252, 0, 105, 253, 254, 106,
	107, 0, 0, 255, 256, 257, 0, 108, 258, 0,
	0, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 0, 116, 117, 0, 0, 0, 0, 0,
	0, 118, 119, 303, 120, 259, 121, 260, 261, 0,
	122, 0, 123, 0, 0, 0, 124, 125, 0, 126,
	0, 0, 0, 262, 127, 128, 129, 263, 264, 0,
	0, 0, 130, 131, 265, 0, 132, 0, 133, 0,
	0, 0, 0, 134, 266, 0, 267, 0, 135, 136,
	137, 138, 691, 269, 0, 0, 142, 0, 139, 0,
	0, 140, 270, 141, 271, 272, 273, 0, 274, 0,
	0, 143, 144, 145, 0, 146, 147, 148, 0, 150,
	149, 0, 275, 0, 151, 0, 0, 152, 0, 0,
	153, 0, 154, 155, 156, 158, 276, 157, 0, 159,
	160, 162, 161, 0, 0, 0, 277, 163, 278, 164,
	165, 0, 166, 0, 0, 167, 0, 0, 168, 279,
	0, 169, 0, 280, 170, 171, 172, 173, 174, 0,
	281, 175, 282, 176, 0, 177, 178, 179, 180, 181,
	283, 182, 183, 0, 184, 185, 186, 187, 188, 190,
	191, 189, 192, 193, 194, 195, 0, 196, 0, 197,
	198, 284, 199, 0, 203, 204, 205, 206, 0, 285,
	207, 208, 209, 0, 210, 200, 201, 211, 0, 212,
	286, 287, 213, 0, 219, 214, 215, 202, 216, 218,
	288, 217, 289, 0, 220, 0, 221, 222, 223, 224,
	225, 0, 290, 291, 292, 0, 0, 226, 227, 293,
	294, 0, 228, 229, 230, 231, 0, 0, 232, 233,
	234, 235, 0, 236, 0, 295, 237, 238, 239, 296,
	297, 95, 0, 240, 0, 0, 0, 0, 241, 242,
	243, 244, 245, 0, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	101, 102, 103, 247, 248, 249, 250, 104, 251, 252,
	0, 105, 253, 254, 106, 107, 0, 0, 255, 256,
	257, 0, 108, 258, 0, 0, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 0, 116, 117,
	0, 0, 0, 0, 0, 0, 118, 119, 303, 120,
	259, 121, 260, 261, 0, 122, 0, 123, 0, 0,
	0, 124, 125, 0, 126, 0, 0, 0, 262, 127,
	128, 129, 263, 264, 0, 0, 0, 130, 131, 265,
	0, 132, 0, 133, 0, 0, 0, 0, 134, 266,
	0, 267, 0, 135, 136, 137, 138, 689, 269, 0,
	0, 142, 0, 139, 0, 0, 140, 270, 141, 271,
	272, 273, 0, 274, 0, 0, 143, 144, 145, 0,
	146, 147, 148, 0, 150, 149, 0, 275, 0, 151,
	0, 0, 152, 0, 0, 153, 0, 154, 155, 156,
	158, 276, 157, 0, 159, 160, 162, 161, 0, 0,
	0, 277, 163, 278, 164, 165, 0, 166, 0, 0,
	167, 0, 0, 168, 279, 0, 169, 0, 280, 170,
	171, 172, 173, 174, 0, 281, 175, 282, 176, 0,
	177, 178, 179, 180, 181, 283, 182, 183, 0, 184,
	185, 186, 187, 188, 190, 191, 189, 192, 193, 194,
	195, 0, 196, 0, 197, 198, 284, 199, 0, 203,
	204, 205, 206, 0, 285, 207, 208, 209, 0, 210,
	200, 201, 211, 0, 212, 286, 287, 213, 0, 219,
	214, 215, 202, 216, 218, 288, 217, 289, 0, 220,
	0, 221, 222, 223, 224, 225, 0, 290, 291, 292,
	0, 0, 226, 227, 293, 294, 0, 228, 229, 230,
	231, 0, 0, 232, 233, 234, 235, 0, 236, 0,
	295, 237, 238, 239, 296, 297, 95, 0, 240, 0,
	0, 0, 0, 241, 242, 243, 244, 245, 0, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 101, 102, 103, 247, 248,
	249, 250, 104, 251, 252, 0, 105, 253, 254, 106,
	107, 0, 0, 255, 256, 257, 0, 108, 258, 0,
	0, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 0, 116, 117, 0, 0, 0, 0, 0,
	0, 118, 119, 303, 120, 259, 121, 260, 261, 0,
	122, 0, 123, 0, 0, 0, 124, 125, 0, 126,
	0, 0, 0, 262, 127, 128, 129, 263, 264, 0,
	0, 0, 130, 131, 265, 0, 132, 0, 133, 0,
	0, 0, 0, 134, 266, 0, 267, 0, 135, 136,
	137, 138, 567, 269, 0, 0, 142, 0, 139, 0,
	0, 140, 270, 141, 271, 272, 273, 0, 274, 0,
	0, 143, 144, 145, 0, 146, 147, 148, 0, 150,
	149, 0, 275, 0, 151, 0, 0, 152, 0, 0,
	153, 0, 154, 155, 156, 158, 276, 157, 0, 159,
	160, 162, 161, 0, 0, 0, 277, 163, 278, 164,
	165, 0, 166, 0, 0, 167, 0, 0, 168, 279,
	0, 169, 0, 280, 170, 171, 172, 173, 174, 0,
	281, 175, 282, 176, 0, 177, 178, 179, 180, 181,
	283, 182, 183, 0, 184, 185, 186, 187, 188, 190,
	191, 189, 192, 193, 194, 195, 0, 196, 0, 197,
	198, 284, 199, 0, 203, 204, 205, 206, 0, 285,
	207, 208, 209, 0, 210, 200, 201, 211, 0, 212,
	286, 287, 213, 0, 219, 214, 215, 202, 216, 218,
	288, 217, 289, 0, 220, 0, 221, 222, 223, 224,
	225, 0, 290, 291, 292, 0, 0, 226, 227, 293,
	294, 0, 228, 229, 230, 231, 0, 0, 232, 233,
	234, 235, 0, 236, 0, 295, 237, 238, 239, 296,
	297, 95, 0, 240, 0, 0, 0, 0, 241, 242,
	243, 244, 245, 0, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	101, 102, 103, 247, 248, 249, 250, 104, 251, 252,
	0, 105, 253, 254, 106, 107, 0, 0, 255, 256,
	257, 0, 108, 258, 0, 0, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 0, 116, 117,
	0, 0, 0, 0, 0, 0, 118, 119, 303, 120,
	259, 121, 260, 261, 0, 122, 0, 123, 0, 0,
	0, 124, 125, 0, 126, 0, 0, 0, 262, 127,
	128, 129, 263, 264, 0, 0, 0, 130, 131, 265,
	0, 132, 0, 133, 0, 0, 0, 0, 134, 266,
	0, 267, 0, 135, 136, 137, 138, 268, 269, 0,
	0, 142, 0, 139, 0, 0, 140, 270, 141, 271,
	272, 273, 0, 274, 0, 0, 143, 144, 145, 0,
	146, 147, 148, 0, 150, 149, 0, 275, 0, 151,
	0, 0, 152, 0, 0, 153, 0, 154, 155, 156,
	158, 276, 157, 0, 159, 160, 162, 161, 0, 0,
	0, 277, 163, 278, 164, 165, 0, 166, 0, 0,
	167, 0, 0, 168, 279, 0, 169, 0, 280, 170,
	171, 172, 173, 174, 0, 281, 175, 282, 176, 0,
	177, 178, 179, 180, 181, 283, 548, 183, 0, 184,
	185, 186, 187, 188, 190, 191, 189, 192, 193, 194,
	195, 0, 196, 0, 197, 198, 284, 199, 0, 203,
	204, 205, 206, 0, 285, 207, 208, 209, 0, 210,
	200, 201, 211, 0, 212, 286, 287, 213, 0, 219,
	214, 215, 202, 216, 218, 288, 217, 289, 0, 220,
	0, 221, 222, 223, 224, 225, 0, 290, 291, 292,
	0, 0, 226, 227, 293, 294, 0, 228, 229, 230,
	231, 0, 0, 232, 233, 234, 235, 0, 236, 0,
	295, 237, 238, 239, 296, 297, 95, 0, 240, 0,
	0, 0, 0, 241, 242, 243, 244, 245, 0, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 101, 102, 103, 247, 248,
	249, 250, 104, 251, 252, 0, 105, 253, 254, 106,
	107, 0, 0, 255, 256, 257, 0, 455, 258, 0,
	0, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 0, 116, 117, 0, 0, 0, 0, 0,
	0, 118, 119, 303, 120, 259, 121, 260, 261, 0,
	122, 0, 123, 0, 0, 0, 124, 125, 0, 126,
	0, 0, 0, 262, 127, 128, 129, 263, 264, 0,
	0, 0, 130, 131, 265, 0, 132, 0, 133, 0,
	0, 0, 0, 134, 266, 0, 267, 0, 135, 136,
	137, 138, 268, 269, 0, 0, 142, 0, 139, 0,
	0, 140, 270, 141, 271, 272, 273, 0, 274, 0,
	0, 143, 144, 145, 0, 146, 147, 148, 0, 150,
	149, 0, 275, 0, 151, 0, 0, 453, 0, 0,
	153, 0, 154, 155, 156, 158, 276, 464, 0, 159,
	160, 162, 161, 0, 0, 0, 277, 163, 278, 164,
	165, 0, 166, 0, 0, 167, 0, 0, 168, 279,
	0, 169, 0, 280, 170, 171, 172, 173, 174, 0,
	281, 175, 282, 176, 0, 177, 178, 179, 180, 181,
	283, 182, 183, 0, 184, 185, 186, 187, 188, 190,
	191, 189, 192, 193, 194, 195, 0, 196, 0, 197,
	198, 456, 199, 0, 203, 204, 205, 206, 0, 285,
	207, 454, 209, 0, 210, 200, 201, 211, 0, 212,
	286, 287, 213, 0, 219, 214, 215, 202, 216, 218,
	288, 217, 289, 0, 220, 0, 221, 222, 223, 224,
	225, 0, 461, 291, 292, 0, 0, 226, 457, 293,
	294, 0, 228, 229, 230, 231, 0, 0, 232, 233,
	234, 235, 0, 236, 0, 295, 237, 238, 239, 296,
	297, 95, 0, 240, 0, 0, 0, 0, 241, 242,
	243, 244, 245, 0, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	101, 102, 103, 247, 248, 249, 250, 104, 251, 252,
	0, 105, 253, 254, 106, 107, 0, 0, 255, 256,
	257, 0, 108, 258, 0, 0, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 0, 116, 117,
	0, 0, 0, 0, 0, 0, 118, 119, 303, 120,
	259, 121, 260, 261, 0, 122, 0, 123, 0, 0,
	0, 124, 125, 0, 126, 0, 0, 0, 262, 127,
	128, 129, 263, 264, 0, 0, 0, 130, 131, 265,
	0, 132, 0, 133, 0, 0, 0, 0, 134, 266,
	0, 267, 0, 135, 136, 137, 138, 268, 269, 0,
	0, 142, 0, 139, 0, 0, 140, 270, 141, 271,
	272, 273, 0, 274, 0, 0, 143, 144, 145, 0,
	146, 147, 148, 0, 150, 149, 0, 275, 0, 151,
	0, 0, 152, 0, 0, 153, 0, 154, 155, 156,
	158, 276, 157, 0, 159, 160, 162, 161, 0, 0,
	0, 277, 163, 278, 164, 165, 0, 166, 0, 0,
	167, 0, 0, 168, 279, 0, 169, 0, 280, 170,
	171, 0, 173, 174, 0, 281, 175, 282, 176, 0,
	177, 178, 179, 0, 181, 283, 182, 183, 0, 184,
	185, 186, 187, 188, 190, 191, 189, 192, 193, 194,
	195, 0, 196, 0, 197, 198, 284, 0, 0, 203,
	204, 205, 206, 0, 285, 207, 208, 209, 0, 210,
	200, 201, 211, 0, 212, 286, 287, 213, 0, 219,
	214, 215, 202, 216, 218, 288, 217, 289, 0, 220,
	0, 221, 222, 223, 224, 225, 0, 290, 291, 292,
	0, 0, 226, 227, 293, 294, 0, 228, 229, 230,
	231, 0, 0, 232, 233, 234, 235, 0, 236, 0,
	295, 237, 238, 239, 296, 297, 0, 0, 240, 0,
	0, 0, 0, 241, 242, 243, 244, 245, 849, 850,
	0, 869, 870, 871, 879, 880, 881, 0, 0, 0,
	0, 0, 0, 0, 872, 0, 0, 0, 0, 0,
	0, 852, 0, 0, 883, 0, 849, 850, 0, 869,
	870, 871, 879, 880, 881, 0, 0, 0, 0, 0,
	0, 0, 872, 0, 0, 851, 0, 0, 0, 852,
	0, 866, 883, 0, 0, 849, 850, 0, 869, 870,
	871, 879, 880, 881, 0, 0, 0, 0, 0, 0,
	0, 872, 0, 851, 0, 0, 0, 0, 852, 866,
	0, 883, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 857, 851, 0, 0, 0, 0, 0, 866, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	876, 884, 0, 0, 0, 0, 0, 0, 0, 857,
	0, 0, 0, 0, 0, 0, 882, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 876, 884,
	0, 874, 0, 0, 0, 0, 0, 867, 857, 0,
	0, 0, 0, 0, 882, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 876, 884, 874,
	0, 0, 873, 0, 0, 867, 0, 0, 0, 0,
	0, 0, 0, 882, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 874, 0,
	873, 0, 0, 0, 867, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 868,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 873,
	0, 0, 0, 0, 877, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 868, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 877, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 868, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 877, 0, 0, 0, 0, 0, 0, 0, 875,
	0, 0, 863, 864, 865, 878, 0, 862, 860, 861,
	853, 854, 855, 856, 858, 859, 0, 0, 0, 0,
	0, 0, 0, 1552, 0, 0, 0, 875, 0, 0,
	863, 864, 865, 878, 0, 862, 860, 861, 853, 854,
	855, 856, 858, 859, 0, 0, 0, 0, 0, 0,
	0, 1504, 0, 0, 0, 0, 875, 0, 0, 863,
	864, 865, 878, 0, 862, 860, 861, 853, 854, 855,
	856, 858, 859, 0, 0, 849, 850, 2103, 869, 870,
	871, 879, 880, 881, 0, 0, 0, 0, 0, 0,
	0, 872, 0, 0, 0, 0, 0, 0, 852, 0,
	0, 883, 0, 849, 850, 0, 869, 870, 871, 879,
	880, 881, 0, 0, 0, 0, 0, 0, 0, 872,
	0, 0, 851, 0, 0, 0, 852, 0, 866, 883,
	0, 0, 849, 850, 0, 869, 870, 871, 879, 880,
	881, 0, 0, 0, 0, 0, 0, 0, 872, 0,
	851, 0, 0, 0, 0, 852, 866, 0, 883, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 857, 851,
	0, 0, 0, 0, 0, 866, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 876, 884, 0,
	0, 0, 0, 0, 0, 0, 857, 0, 0, 0,
	0, 0, 0, 882, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 876, 884, 0, 874, 0,
	0, 0, 0, 0, 867, 857, 0, 0, 0, 0,
	0, 882, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 876, 884, 874, 0, 0, 873,
	0, 0, 867, 0, 0, 0, 0, 0, 0, 0,
	882, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 874, 0, 873, 0, 0,
	0, 867, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 868, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 873, 0, 0, 0,
	0, 877, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 868, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 877,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 868, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 877, 0,
	0, 0, 0, 0, 0, 0, 875, 0, 0, 863,
	864, 865, 878, 0, 862, 860, 861, 853, 854, 855,
	856, 858, 859, 0, 0, 0, 0, 2078, 0, 0,
	0, 0, 0, 0, 875, 0, 0, 863, 864, 865,
	878, 0, 862, 860, 861, 853, 854, 855, 856, 858,
	859, 0, 0, 0, 0, 2012, 0, 0, 0, 0,
	0, 0, 0, 875, 0, 0, 863, 864, 865, 878,
	0, 862, 860, 861, 853, 854, 855, 856, 858, 859,
	0, 0, 849, 850, 2007, 869, 870, 871, 879, 880,
	881, 0, 0, 0, 0, 0, 0, 0, 872, 0,
	0, 0, 0, 0, 0, 852, 0, 0, 883, 0,
	849, 850, 0, 869, 870, 871, 879, 880, 881, 0,
	0, 0, 0, 0, 0, 0, 872, 0, 0, 851,
	0, 0, 0, 852, 0, 866, 883, 0, 0, 849,
	850, 0, 869, 870, 871, 879, 880, 881, 0, 0,
	0, 0, 0, 0, 0, 872, 0, 851, 0, 0,
	0, 0, 852, 866, 0, 883, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 857, 851, 0, 0, 0,
	0, 0, 866, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 876, 884, 0, 0, 0, 0,
	0, 0, 0, 857, 0, 0, 0, 0, 0, 0,
	882, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 876, 884, 0, 874, 0, 0, 0, 0,
	0, 867, 857, 0, 0, 0, 0, 0, 882, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 876, 884, 874, 0, 0, 873, 0, 0, 867,
	0, 0, 0, 0, 0, 0, 0, 882, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 874, 0, 873, 0, 0, 0, 867, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 868, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 873, 0, 0, 0, 0, 877, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 868, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 877, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	868, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 877, 0, 0, 0, 0,
	0, 0, 0, 875, 0, 0, 863, 864, 865, 878,
	0, 862, 860, 861, 853, 854, 855, 856, 858, 859,
	0, 0, 0, 0, 2003, 0, 0, 0, 0, 0,
	0, 875, 0, 0, 863, 864, 865, 878, 0, 862,
	860, 861, 853, 854, 855, 856, 858, 859, 0, 0,
	0, 0, 1980, 0, 0, 0, 0, 0, 0, 0,
	875, 0, 0, 863, 864, 865, 878, 0, 862, 860,
	861, 853, 854, 855, 856, 858, 859, 0, 0, 849,
	850, 1911, 869, 870, 871, 879, 880, 881, 0, 0,
	0, 0, 0, 0, 0, 872, 0, 0, 0, 0,
	0, 0, 852, 0, 0, 883, 0, 849, 850, 0,
	869, 870, 871, 879, 880, 881, 0, 0, 0, 0,
	0, 0, 0, 872, 0, 0, 851, 0, 0, 0,
	852, 0, 866, 883, 0, 0, 849, 850, 0, 869,
	870, 871, 879, 880, 881, 0, 0, 0, 0, 0,
	0, 0, 872, 0, 851, 0, 0, 0, 0, 852,
	866, 0, 883, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 857, 851, 0, 0, 0, 0, 0, 866,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 876, 884, 0, 0, 0, 0, 0, 0, 0,
	857, 0, 0, 0, 0, 0, 0, 882, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 876,
	884, 0, 874, 0, 0, 0, 0, 0, 867, 857,
	0, 0, 0, 0, 0, 882, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 876, 884,
	874, 0, 0, 873, 0, 0, 867, 0, 0, 0,
	0, 0, 0, 0, 882, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 874,
	0, 873, 0, 0, 0, 867, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	868, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	873, 0, 0, 0, 0, 877, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 868, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 877, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 868, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 877, 0, 0, 0, 0, 0, 0, 0,
	875, 0, 0, 863, 864, 865, 878, 0, 862, 860,
	861, 853, 854, 855, 856, 858, 859, 0, 0, 0,
	0, 1910, 0, 0, 0, 0, 0, 0, 875, 0,
	0, 863, 864, 865, 878, 0, 862, 860, 861, 853,
	854, 855, 856, 858, 859, 0, 0, 0, 0, 1849,
	0, 0, 0, 0, 0, 0, 0, 875, 0, 0,
	863, 864, 865, 878, 0, 862, 860, 861, 853, 854,
	855, 856, 858, 859, 0, 0, 849, 850, 1802, 869,
	870, 871, 879, 880, 881, 0, 0, 0, 0, 0,
	0, 0, 872, 0, 0, 0, 0, 0, 0, 852,
	0, 0, 883, 0, 849, 850, 0, 869, 870, 871,
	879, 880, 881, 0, 0, 0, 0, 0, 0, 0,
	872, 0, 0, 851, 0, 0, 0, 852, 0, 866,
	883, 0, 0, 849, 850, 0, 869, 870, 871, 879,
	880, 881, 0, 0, 0, 0, 0, 0, 0, 872,
	0, 851, 0, 0, 0, 0, 852, 866, 0, 883,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 857,
	851, 0, 0, 0, 0, 0, 866, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 876, 884,
	0, 0, 0, 0, 0, 0, 0, 857, 0, 0,
	0, 0, 0, 0, 882, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 876, 884, 0, 874,
	0, 0, 0, 0, 0, 867, 857, 0, 0, 0,
	0, 0, 882, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 876, 884, 874, 0, 0,
	873, 0, 0, 867, 0, 0, 0, 0, 0, 0,
	0, 882, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 874, 0, 873, 0,
	0, 0, 867, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 868, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 873, 0, 0,
	0, 0, 877, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 868, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	877, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 868, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 877,
	0, 0, 0, 0, 0, 0, 0, 875, 0, 0,
	863, 864, 865, 878, 0, 862, 860, 861, 853, 854,
	855, 856, 858, 859, 0, 0, 0, 0, 1722, 0,
	0, 0, 0, 0, 0, 875, 0, 0, 863, 864,
	865, 878, 0, 862, 860, 861, 853, 854, 855, 856,
	858, 859, 0, 0, 0, 0, 1698, 0, 0, 0,
	0, 0, 0, 0, 875, 0, 0, 863, 864, 865,
	878, 0, 862, 860, 861, 853, 854, 855, 856, 858,
	859, 0, 0, 849, 850, 1230, 869, 870, 871, 879,
	880, 881, 0, 0, 0, 0, 0, 0, 0, 872,
	0, 0, 0, 0, 0, 0, 852, 0, 0, 883,
	0, 849, 850, 0, 869, 870, 871, 879, 880, 881,
	0, 0, 0, 0, 0, 0, 0, 872, 0, 0,
	851, 0, 0, 0, 852, 0, 866, 883, 0, 0,
	849, 850, 0, 869, 870, 871, 879, 880, 881, 0,
	0, 0, 0, 0, 0, 0, 872, 0, 851, 0,
	0, 0, 0, 852, 866, 0, 883, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 857, 851, 0, 0,
	0, 0, 0, 866, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 876, 884, 0, 0, 0,
	0, 0, 0, 0, 857, 2180, 0, 0, 0, 0,
	0, 882, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 876, 884, 0, 874, 0, 0, 0,
	0, 0, 867, 857, 0, 1544, 0, 0, 1543, 882,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 876, 884, 874, 0, 0, 873, 0, 0,
	867, 0, 0, 0, 0, 0, 0, 0, 882, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 874, 0, 873, 0, 0, 0, 867,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2179, 0, 0, 0, 868, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 873, 0, 0, 0, 0, 877,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 868, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 877, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 868, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 877, 0, 0, 0,
	0, 0, 0, 0, 875, 0, 0, 863, 864, 865,
	878, 0, 862, 860, 861, 853, 854, 855, 856, 858,
	859, 0, 0, 1474, 0, 0, 0, 0, 0, 0,
	0, 0, 875, 0, 0, 863, 864, 865, 878, 0,
	862, 860, 861, 853, 854, 855, 856, 858, 859, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 875, 0, 0, 863, 864, 865, 878, 0, 862,
	860, 861, 853, 854, 855, 856, 858, 859, 849, 850,
	0, 869, 870, 871, 879, 880, 881, 0, 0, 0,
	0, 0, 0, 0, 872, 0, 0, 0, 0, 1394,
	0, 852, 0, 0, 883, 0, 0, 0, 0, 0,
	1116, 0, 0, 0, 0, 0, 849, 850, 0, 869,
	870, 871, 879, 880, 881, 851, 0, 0, 0, 0,
	0, 866, 872, 0, 0, 0, 1115, 0, 0, 852,
	0, 0, 883, 0, 849, 850, 0, 869, 870, 871,
	879, 880, 881, 0, 0, 0, 0, 0, 0, 1395,
	872, 0, 0, 851, 0, 0, 0, 852, 0, 866,
	883, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 857, 849, 850, 0, 869, 870, 871, 879, 880,
	881, 851, 0, 0, 0, 0, 0, 866, 872, 0,
	876, 884, 0, 0, 0, 852, 0, 0, 883, 0,
	0, 0, 0, 0, 0, 0, 882, 0, 0, 857,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 851,
	0, 874, 0, 0, 0, 866, 0, 867, 876, 884,
	0, 0, 0, 0, 0, 0, 0, 857, 0, 0,
	0, 0, 0, 0, 882, 0, 0, 0, 0, 0,
	0, 0, 873, 0, 0, 0, 876, 884, 0, 874,
	0, 0, 0, 0, 0, 867, 0, 0, 0, 0,
	0, 0, 882, 0, 0, 857, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 874, 0, 0,
	873, 0, 0, 867, 876, 884, 0, 0, 0, 868,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	882, 0, 0, 0, 877, 0, 0, 0, 873, 543,
	0, 0, 0, 0, 0, 874, 0, 0, 0, 0,
	0, 867, 0, 0, 0, 0, 0, 868, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 877, 0, 0, 0, 873, 0, 0, 0,
	0, 0, 0, 0, 0, 868, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 875,
	877, 0, 863, 864, 865, 878, 0, 862, 860, 861,
	853, 854, 855, 856, 858, 859, 0, 0, 0, 0,
	0, 0, 0, 868, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 875, 877, 0,
	863, 864, 865, 878, 0, 862, 860, 861, 853, 854,
	855, 856, 858, 859, 0, 0, 0, 0, 0, 0,
	0, 1702, 0, 0, 0, 875, 0, 0, 863, 864,
	865, 878, 0, 862, 860, 861, 853, 854, 855, 856,
	858, 859, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 875, 0, 0, 863, 864, 865, 878,
	0, 862, 860, 861, 853, 854, 855, 856, 858, 859,
	849, 850, 0, 869, 870, 871, 879, 880, 881, 0,
	0, 0, 0, 0, 0, 0, 872, 0, 0, 0,
	0, 0, 0, 852, 0, 0, 883, 0, 849, 850,
	0, 869, 870, 871, 879, 880, 881, 0, 0, 0,
	0, 0, 0, 0, 872, 0, 0, 851, 1545, 0,
	0, 852, 0, 866, 883, 0, 0, 849, 850, 0,
	869, 870, 871, 879, 880, 881, 0, 0, 0, 0,
	0, 0, 0, 872, 0, 851, 0, 0, 0, 0,
	852, 866, 0, 883, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 857, 851, 0, 0, 0, 1550, 0,
	866, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 876, 884, 0, 0, 0, 0, 0, 0,
	0, 857, 0, 0, 0, 0, 0, 0, 882, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	876, 884, 0, 874, 0, 0, 0, 0, 0, 867,
	857, 0, 0, 0, 0, 0, 882, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 876,
	884, 874, 0, 0, 873, 0, 0, 867, 0, 0,
	0, 0, 0, 0, 0, 882, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	874, 0, 873, 0, 0, 0, 867, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 868, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 873, 0, 0, 0, 0, 877, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 0, 0, 0, 868,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 877, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 868, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 877, 0, 0, 0, 0, 0, 0,
	0, 875, 0, 0, 863, 864, 865, 878, 0, 862,
	860, 861, 853, 854, 855, 856, 858, 859, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 875,
	0, 0, 863, 864, 865, 878, 0, 862, 860, 861,
	853, 854, 855, 856, 858, 859, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 875, 0,
	0, 863, 864, 865, 878, 0, 862, 860, 861, 853,
	854, 855, 856, 858, 859, 849, 850, 0, 869, 870,
	871, 879, 880, 881, 0, 0, 0, 0, 0, 0,
	0, 872, 0, 0, 0, 1503, 0, 0, 852, 0,
	0, 883, 0, 849, 850, 0, 869, 870, 871, 879,
	880, 881, 0, 0, 0, 0, 0, 0, 0, 872,
	0, 0, 851, 0, 0, 0, 852, 0, 866, 883,
	0, 0, 849, 850, 0, 869, 870, 871, 879, 880,
	881, 0, 0, 0, 0, 0, 0, 0, 872, 0,
	851, 0, 0, 0, 0, 852, 866, 0, 883, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 857, 851,
	0, 0, 0, 0, 0, 866, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 876, 884, 0,
	0, 0, 0, 0, 0, 0, 857, 0, 0, 0,
	0, 0, 0, 882, 849, 850, 0, 869, 870, 871,
	879, 880, 881, 0, 0, 876, 884, 0, 874, 0,
	0, 0, 0, 0, 867, 857, 0, 852, 0, 0,
	883, 882, 0, 0, 1512, 1513, 0, 1530, 1531, 1532,
	0, 0, 0, 0, 876, 884, 874, 0, 0, 873,
	1690, 851, 867, 0, 0, 0, 0, 866, 0, 0,
	882, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 874, 0, 873, 0, 0,
	0, 867, 0, 0, 0, 0, 0, 1527, 0, 0,
	0, 0, 0, 0, 0, 0, 868, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 857, 0, 0,
	0, 877, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 868, 0, 876, 884, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1518, 0, 877,
	0, 0, 882, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 868, 0, 0, 0, 874, 0, 0,
	0, 0, 0, 867, 0, 0, 0, 0, 877, 0,
	0, 0, 1533, 0, 0, 0, 875, 0, 0, 863,
	864, 865, 878, 0, 862, 860, 861, 853, 854, 855,
	856, 858, 859, 1528, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 875, 0, 0, 863, 864, 865,
	878, 0, 862, 860, 861, 853, 854, 855, 856, 858,
	859, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 875, 0, 868, 863, 864, 865, 878,
	0, 862, 860, 861, 853, 854, 855, 856, 858, 859,
	877, 0, 0, 0, 0, 0, 0, 0, 0, 1000,
	992, 1017, 984, 1008, 1007, 1529, 0, 986, 985, 0,
	0, 0, 0, 1019, 1018, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1013, 0, 1005, 1004, 0,
	0, 0, 0, 0, 0, 875, 1003, 0, 863, 864,
	865, 878, 0, 862, 860, 861, 853, 854, 855, 856,
	858, 859, 0, 0, 1002, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1524, 1525,
	1526, 0, 0, 1523, 1521, 1522, 1514, 1515, 1516, 1517,
	1519, 1520, 995, 994, 996, 997, 998, 0, 1016, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1000,
	992, 1017, 984, 1008, 1007, 0, 0, 986, 985, 0,
	0, 0, 0, 1019, 1018, 0, 988, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1006, 0,
	0, 0, 993, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1013, 0, 1005, 1004, 0,
	0, 0, 0, 0, 0, 0, 1003, 0, 0, 0,
	1001, 0, 0, 0, 1165, 1163, 1164, 1167, 1166, 0,
	0, 0, 0, 0, 1002, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 989,
	0, 0, 0, 0, 0, 466, 0, 0, 0, 0,
	999, 990, 995, 994, 996, 997, 998, 0, 1016, 0,
	1021, 0, 0, 471, 0, 0, 0, 0, 0, 0,
	987, 0, 0, 1014, 1015, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 988, 0, 0, 0,
	0, 0, 0, 0, 0, 991, 473, 0, 1006, 0,
	1020, 474, 993, 0, 0, 0, 479, 480, 0, 0,
	491, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 469, 475, 0, 0, 0, 0, 0, 0,
	1001, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 989,
	0, 0, 476, 0, 0, 0, 0, 0, 0, 0,
	999, 990, 0, 0, 0, 0, 477, 478, 0, 0,
	1021, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	987, 0, 484, 1014, 1015, 481, 486, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 483, 0, 0, 0,
	0, 0, 0, 0, 0, 991, 467, 0, 0, 0,
	1020, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 482, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	485, 487, 468, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 488, 0, 493, 0, 0,
	0, 489, 0, 0, 0, 0, 470, 490, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 492,
}
var sqlPact = [...]int{

	255, -1000, 26, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 653, 17092, 17092, 1008, 21362,
	-1000, -1000, -1000, -1000, -1000, -1000, 677, 721, 269, 5186,
	21362, 21362, 21057, 1666, 1159, 1158, 1666, 22887, -1000, -1000,
	26852, -1000, 31221, 479, 496, 479, 479, 492, 22887, 1049,
	611, 14004, 650, 146, -1000, 877, -40, 26547, 21362, 1487,
	20, 19227, 237, 255, 20752, 26242, 21362, 20447, 571, 16,
	17702, 21362, -1000, 28, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1303, 10799,
	10799, 313, 28, -1000, 1302, 1174, 1172, 19227, 25937, 25632,
	25327, 25022, 24717, -1000, 12734, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 766, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	293, 282, -1000, 20142, -1000, 1047, -1000, 18, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 10799, 10799, 1036, -1000,
	21362, -1000, -1000, 24412, 24107, 742, 281, 1027, -1000, -1000,
	540, 392, -1000, -1000, 13687, 35, -1000, -1000, -1000, -1000,
	1322, 1501, 16787, 933, 1300, -1000, 1031, 1298, 1296, 1293,
	1292, 1291, -1000, 945, -1000, 625, 504, -1000, 1289, 390,
	799, 463, -1000, 1288, 1287, 1027, -1000, 1027, -1000, -1000,
	-1000, 568, 22887, -1000, -1000, -1000, -1000, -1000, 19227, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1678,
	-1000, -1000, -1000, -1000, 1721, -1000, -1000, -1000, -1000, 23802,
	21362, 21362, 1179, 23497, -1000, 877, -1000, -1000, -1000, 1123,
	1473, 1473, 1473, 1520, 133, 121, 146, 10, 21362, -1000,
	280, 10, 9148, 9148, -1000, -1000, 237, -1000, 301, 16165,
	-1000, 7498, -1000, 1015, 1388, 461, 685, 1386, -74, 893,
	891, 1384, 16787, 17702, 16, 0, -1000, -1000, -1000, 4869,
	16787, 30633, -1000, 10799, 10799, 10799, 10799, 10799, 974, 312,
	-1000, 277, 272, 6164, -1000, -1000, 1719, -1000, -1000, -1000,
	131, -1000, -1000, 10799, 28, -1000, -1000, -1000, -1000, 268,
	1748, -1000, 444, -1000, -1000, -1000, 398, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1321, 266, 264, -1000,
	-1000, -1000, -1000, 263, 262, 261, 260, 257, 256, 254,
	253, 252, 251, 249, 247, 245, 244, 241, 911, -1000,
	417, -1000, -1000, 417, 417, -1000, 226, 226, 227, -1000,
	-1000, -1000, -1000, 226, -1000, -1000, -1000, 356, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 238, 30633, 647, 15237, 28,
	-1000, -1000, -1000, 19227, 21362, 21362, 697, 23192, -1000, 1383,
	122, 1376, -1000, 117, 1371, -1000, 117, 1370, 0, 1368,
	-1, -1000, -1000, 237, 19837, 21362, 1587, 31092, -1000, 10799,
	-1000, -1000, 17092, 730, 30633, 30633, 17092, -1000, -1000, 1582,
	-1000, 21362, 10799, 15, -1000, -1000, -1000, -1000, 1124, 1169,
	495, 13370, 13053, 1443, 1211, -1000, -1000, -1000, 29, 5186,
	222, 671, -1000, -1000, -1000, 19532, -1000, -1000, -1000, 21362,
	1318, 17092, 21362, 21362, 21362, 21362, 21362, -1000, -1000, -1000,
	-1000, 499, 1317, 21362, -1000, 1122, -1000, -1000, 21362, 21362,
	762, 609, -1000, 15, -1000, 22887, -1000, 124, -1000, -1000,
	-1000, -1000, 234, 1099, 401, 135, 22582, 401, 1098, -1000,
	1123, -1000, 1057, 1196, 9809, 1171, 10799, 146, -1000, -1000,
	146, 146, 10799, -1000, -1000, 21362, 10, 1577, 21362, 107,
	-1000, 29826, -1000, 107, -1000, -1000, -1000, 21362, -3, -1000,
	30633, -1000, -13, 964, -1000, 18617, 1482, 1469, 1456, 19227,
	1538, -40, 1286, 1534, -40, 1285, 566, 21362, 21362, 564,
	558, 19227, 348, -1000, 21362, -1000, -1000, -27, -1000, 30972,
	31092, 5186, 585, 10799, 10799, 10799, 10799, 10799, 10799, 10799,
	10799, 10799, 10799, 10799, 10799, 10799, 10799, 10799, 10799, 10799,
	10799, 10799, 10799, 10799, 10799, 1078, 10799, 557, 10799, 10799,
	10799, 10799, 1305, 884, 214, 930, -1000, 1739, 1739, 1739,
	30744, 30744, 170, 312, -1000, 10799, -1000, 9479, 121, 29073,
	6, -1000, -1000, -1000, 7155, 415, 30633, 28, 5833, -1000,
	1717, 709, 1328, 1247, 230, 118, 116, 10799, 10799, 11129,
	11129, 10799, 11459, 10799, 10799, 6494, 10799, 10799, 10799, 10799,
	10799, 10799, -1000, 228, -1000, -1000, -1000, -1000, 1714, -1000,
	-1000, 1707, -1000, 582, 577, 1705, -1000, 1283, -5, -1000,
	-1000, 408, 89, 1568, 89, 15547, -1000, 21362, 21362, -1000,
	21362, -1000, -1000, 21362, -1000, 21362, 21362, -1000, 21362, 21362,
	222, 18007, 758, 1367, 827, 222, -11, -1000, 1591, -1000,
	-1000, -1000, -1000, 84, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 227, 911, 226, 226, 226, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 356, -1000, -1000, 417, 417, 417,
	-1000, -1000, -15, 30633, 550, -1000, 1281, 473, -1000, 370,
	-22, 1027, 944, -1000, -1000, -1000, -1000, -1000, -1000, 2,
	-1000, -1000, 2, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1747, 5186, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 21362, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 222,
	-1000, -1000, -1000, -1000, 21362, 21362, 21362, -1000, -1000, 19227,
	18312, 1563, 1364, 922, -1000, 1557, 21362, 1029, 1094, -1000,
	595, 1362, -1000, -1000, -1000, -1000, 30633, -1000, 367, -1000,
	-1000, 30633, 775, 1177, -1000, 1177, 1, -1000, 29788, -1000,
	220, -38, 408, 9148, 14928, 5186, -1000, 408, 115, 7498,
	-1000, 758, 21362, 21362, 21362, -1000, -1000, 1093, 22277, 1091,
	31092, 21362, -1000, 218, 217, 1141, 1140, 21362, 21362, 21972,
	21667, 21362, 990, -40, -1000, 216, -40, -1000, 215, 21362,
	890, -1000, 21362, 21362, 886, 1224, 1061, -1000, 404, 16787,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	389, 426, 426, 554, 554, 554, 554, 1604, 358, 714,
	2243, 3844, 3844, 3844, 2274, 1203, 1203, 3844, 3844, 3844,
	30744, 30662, 295, 10799, 10799, 549, 866, 214, 295, 10799,
	295, 295, 295, 295, -1000, 1438, -1000, -1000, -1000, -1000,
	1280, 212, 11459, 11459, -1000, -1000, -1000, 6164, 11789, -1000,
	-1000, -1000, -1000, 211, 10799, -1000, 29403, -185, -57, -1000,
	-1000, 10799, -45, -46, -1000, -1000, 639, -1000, 10799, -1000,
	-24, 10799, 10799, 10799, 108, 106, -1000, 545, -1000, 539,
	536, 534, -1000, 210, 983, 209, 207, 10799, -1000, -1000,
	30605, 27496, 105, 1276, -93, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 103, 102, 30277, -93, 99, 2468, -1000, 11459,
	11459, 11459, 6164, 206, 97, 29460, -93, 30248, 8818, 8818,
	8818, 96, 30220, 10799, -93, 27468, 3795, 3690, -58, -59,
	-65, 1698, -76, 90, 378, 357, 87, 641, 1271, 21362,
	798, 10799, 987, -1000, 14619, 430, 21362, 798, 67, -1000,
	-1000, -1000, 341, 21362, -1000, -1000, -1000, 122, -1000, 117,
	117, 0, -1000, -1000, 19227, -1000, -1000, 31092, 308, 307,
	-1000, 1695, -1000, 10799, 21362, 21362, 1164, -1000, -1000, -1000,
	710, -1000, 894, -1000, 14004, -1000, -42, -1000, -1000, -1000,
	-1000, 348, -1000, 86, -77, -12, 31092, -1000, -1000, -1000,
	-1000, -1000, 21362, 292, 21362, -40, 21362, -1000, 1736, -40,
	21362, 1361, 1396, 336, 21362, 775, -1000, 10799, 1682, -1000,
	-1000, -1000, 10799, -1000, -1000, -1000, 222, -1000, 1236, -1000,
	-64, 1394, 167, -168, 92, 354, -1000, 14310, -1000, 1236,
	-1000, -1000, -1000, -1000, 529, 527, 1360, -1000, 1088, -1000,
	435, -1000, 712, 10799, 12425, 205, 202, 1007, -1000, 1359,
	1034, 1358, 1034, -1000, -13, 960, -1000, 10799, -1000, 10799,
	-1000, 524, -1000, -1000, 522, 404, 1269, 614, -1000, 1004,
	-1000, 10799, 295, 295, 10799, 11459, 11459, -1000, 295, -1000,
	-1000, -1000, -1000, -1000, 1268, 199, 10799, 31092, 30774, 3348,
	-82, -1000, 8488, -20, -1000, 10799, -1000, 29044, -1000, -1000,
	306, 1393, -1000, 10799, 29892, 82, 8158, -1000, 29854, -26,
	-26, -1000, 1734, 1109, 888, 898, 720, 1664, -1000, 15856,
	413, 1001, 29016, 30972, 31092, -1000, 10799, -1000, -1000, 1265,
	10799, -1000, 30972, 31092, 11459, 11459, 11459, 11459, 11459, 11459,
	11459, 11459, 11459, 11459, 11459, 11459, 11459, 11459, 11459, 11459,
	11459, 11459, 11459, 1157, 11459, 1646, 1646, 1646, -31, 7828,
	-1000, 1312, 1265, 10799, 10799, 31092, 81, 79, 78, -1000,
	10799, -93, 10799, 10799, 10799, -1000, -1000, -1000, 74, -1000,
	1662, -1000, -1000, -1000, -1000, -1000, 634, -1000, -1000, 6824,
	30633, -1000, 798, 1485, -84, -1000, -1000, -1000, 408, 15547,
	14928, 7498, -88, -1000, -1000, -1000, 758, -1000, 528, 1658,
	72, 30633, -42, -42, -1000, -1000, -1000, -1000, -1000, 21362,
	-1000, 1184, -1000, 18312, 185, 21362, 184, -1000, 182, -1000,
	-1000, 181, 21362, 1127, 336, 17397, -1000, 401, 1006, 28686,
	-1000, 68, 1233, 1519, -1000, 14928, 1149, 1147, 14928, 967,
	989, 989, 989, -1000, 180, 303, 354, 4221, 10799, 18922,
	998, 55, 64, 1394, 1233, 21362, 21362, 21362, 1352, -1000,
	1675, -1000, 28657, -92, -1000, 309, 1496, 10799, -1000, -1000,
	177, 12425, 21362, -1000, 1175, 1191, 460, 21362, -1000, 21362,
	-1000, 21362, 21362, 21362, -94, -96, 21362, 21362, -1000, 16787,
	575, 176, 1720, 295, 3243, 655, 10799, 31092, 3877, -98,
	10799, 10799, -1000, -102, -1000, 10799, 302, 30633, -1000, -1000,
	-1000, 30633, 10799, 1648, 10799, 63, 60, 59, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 57, -1000, -1000, 27157,
	10799, 56, -1000, 52, 51, 30633, 1312, 30633, -1000, -1000,
	407, 407, 645, 645, 645, 645, 1646, 994, 833, 1032,
	2709, 2709, 2709, 2649, 664, 664, 2709, 2709, 2709, 1260,
	1160, 175, 3330, 10799, -103, -1000, -1000, -1000, 30633, 30633,
	48, -1000, -1000, -1000, -93, 3453, 28629, 28299, -1000, 47,
	-1000, -47, -1000, -1000, 197, -40, 798, -1000, -48, -1000,
	338, -1000, 300, 299, -1000, -1000, -1000, 1206, -1000, 12425,
	173, 21362, 18312, 1556, 12425, 1018, 1133, 336, 17397, -1000,
	595, -1000, -1000, -1000, 406, 10799, 10799, 1394, 14928, 14928,
	1115, 1145, 14928, -1000, -1000, -1000, -1000, 298, 369, 354,
	18922, -1000, 1637, 1173, -104, -1000, -1000, 21362, 172, -1000,
	354, 406, -1000, -1000, -1000, 21362, -1000, 21362, -1000, 5186,
	21362, 1266, 1075, -1000, -1000, 1139, 171, 11459, 21362, -1000,
	843, 12425, 1511, 28, 5186, 1511, 28270, 5833, -110, -111,
	1074, -1000, 1073, 10799, -1000, 31092, 1034, 1034, -1000, 515,
	514, 511, 507, -1000, -1000, -66, 16482, 1731, 10799, 10799,
	3877, -115, -1000, 295, 295, -1000, 28242, -1000, 30633, -1000,
	29854, -1000, -1000, -1000, -1000, 947, -1000, 27912, -1000, -1000,
	-1000, -1000, 11459, 1253, 164, 31092, 27883, -1000, -1000, 10799,
	-1000, -1000, -1000, 1401, 21362, 1453, -1000, -1000, 163, -1000,
	-1000, 946, -116, 12425, -121, 45, -40, -122, 21362, -1000,
	336, 17397, -1000, 1396, -1000, 21362, 30633, -93, -1000, 1115,
	-1000, 161, 10799, 14928, -1000, -168, -1000, -123, -1000, 18922,
	-1000, 297, -182, -1000, 334, -1000, 354, 159, 21362, 18922,
	-1000, -1000, 1201, -1000, -1000, 21362, 1080, -1000, -1000, 10799,
	3330, 158, 1184, 153, -1000, -1000, -1000, -1000, -1000, -1000,
	1496, -24, -1000, 858, -1000, -1000, 30633, 1495, -1000, -1000,
	21362, 21362, 152, 150, -1000, 140, 28, -127, -1000, 333,
	295, 295, -1000, -1000, 44, 1001, 1518, -1000, 2673, 11459,
	31092, -128, -1000, 27855, 592, -134, 21362, -1000, -1000, 5503,
	21362, 843, -140, -1000, 1184, -1000, 843, 139, 17397, -1000,
	1127, -81, -1000, 1543, -1000, 21362, 30633, -1000, 354, -1000,
	1635, -1000, -1000, 1173, -1000, 4549, 18922, 21362, -141, -1000,
	-1000, -1000, 1350, 27525, 1113, 21362, -1000, 21362, 1511, 43,
	21362, 443, 5186, -1000, -1000, 10799, 10799, 10799, 1731, -1000,
	-1000, 1728, -1000, 793, 10799, 2673, -142, -1000, -1000, 678,
	-1000, 408, -1000, 138, 1184, 843, -1000, 1184, 12425, -1000,
	1133, 21362, 137, -147, 18922, -1000, -1000, -1000, 1617, -1000,
	-148, -1000, 1336, -1000, 1009, 852, 42, -149, -1000, -1000,
	135, -1000, 10799, -1000, -153, -159, -26, -1000, -1000, 40,
	10469, 10469, -93, -1000, 15547, -1000, 21362, -1000, 1184, -1000,
	-163, -1000, -1000, -1000, -1000, -1000, 296, -1000, 21362, -1000,
	1017, 1014, 696, -1000, -1000, -1000, -1000, -1000, 1113, 30633,
	-1000, -1000, 37, -1000, -1000, -1000, 12108, 1020, 744, 29431,
	-1000, -146, -165, -1000, 843, -1000, -1000, -1000, 1416, -1000,
	452, 874, 874, 1009, 1648, 1597, -1000, -1000, -1000, -1000,
	-1000, -1000, 1013, 1184, -1000, 1619, -1000, -1000, 1167, -1000,
	-1000, 10139, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2034, 2031, 1524, 1745, 2030, 2028, 2025, 1722, 2024,
	2023, 2020, 2019, 2016, 2015, 1703, 1682, 1659, 1631, 2014,
	119, 2012, 2011, 2010, 1627, 2009, 2008, 2007, 2006, 2003,
	2002, 55, 1996, 1995, 1591, 1582, 1559, 1557, 1990, 1987,
	1519, 1986, 1983, 15, 1980, 83, 1979, 21, 135, 2220,
	133, 1977, 1967, 1964, 16, 111, 64, 1958, 117, 1957,
	1956, 49, 41, 19, 17, 1952, 103, 1949, 1947, 1388,
	27, 1945, 1942, 141, 1941, 29, 24, 188, 155, 145,
	130, 129, 1940, 1939, 1933, 1931, 44, 1930, 1, 1925,
	1924, 10, 76, 36, 1921, 80, 54, 1917, 1916, 128,
	1910, 74, 100, 1514, 131, 134, 136, 1907, 66, 8,
	65, 1903, 1902, 153, 35, 1901, 32, 89, 148, 1900,
	77, 160, 62, 28, 60, 123, 1899, 1898, 1892, 102,
	1890, 115, 93, 1888, 1886, 81, 1880, 138, 147, 1879,
	1878, 95, 1877, 116, 1876, 1874, 154, 162, 1865, 159,
	1864, 1863, 161, 114, 5, 59, 63, 18, 1505, 1501,
	126, 75, 26, 20, 1861, 2038, 1037, 1225, 34, 104,
	67, 43, 109, 48, 73, 144, 22, 1859, 1857, 124,
	1853, 1851, 1835, 1834, 1833, 106, 1830, 1827, 70, 143,
	11, 23, 42, 90, 31, 125, 94, 99, 151, 112,
	1826, 96, 122, 1823, 921, 1818, 1816, 1737, 157, 1815,
	1812, 1811, 1658, 1341, 914, 400, 1808, 1807, 858, 380,
	1804, 1803, 71, 1802, 137, 113, 1801, 142, 149, 121,
	1800, 120, 33, 101, 1798, 110, 45, 0, 600, 68,
	1797, 127, 84, 1796, 1795, 1794, 1791, 25, 2, 9,
	6, 7, 4, 57, 30, 1790, 1789, 132, 107, 46,
	1788, 158, 1785, 1784, 1782, 39, 1781, 12, 1780, 14,
	1779, 1778, 13, 3, 1776, 1774, 175, 1773, 97, 1763,
	1561, 1758, 150, 1757, 1755, 1568, 47, 105,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 4, 56, 56,
	55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 55, 53, 53, 58, 58, 58,
	60, 60, 57, 57, 52, 52, 5, 5, 235, 235,
	236, 236, 42, 42, 46, 46, 43, 44, 44, 45,
	45, 7, 7, 7, 6, 6, 8, 8, 8, 8,
	8, 8, 15, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 105, 105, 104, 104, 107, 107, 17,
	17, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 203, 203, 202, 19, 177, 177,
	21, 130, 130, 22, 22, 22, 22, 23, 30, 276,
	276, 276, 280, 280, 281, 281, 282, 282, 282, 282,
	282, 282, 282, 278, 278, 28, 28, 28, 28, 41,
	33, 33, 33, 33, 33, 33, 150, 147, 147, 146,
	146, 146, 146, 148, 148, 148, 148, 151, 151, 85,
	85, 228, 227, 227, 233, 233, 233, 83, 83, 83,
	83, 83, 84, 84, 84, 226, 226, 226, 226, 234,
	234, 234, 234, 234, 234, 232, 232, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	18, 277, 277, 279, 279, 25, 35, 35, 36, 36,
	37, 37, 37, 37, 11, 11, 12, 12, 86, 86,
	87, 87, 156, 156, 156, 156, 88, 88, 59, 59,
	59, 155, 245, 245, 246, 246, 246, 246, 246, 246,
	247, 247, 247, 247, 247, 247, 247, 243, 243, 244,
	241, 241, 242, 242, 242, 242, 283, 283, 154, 154,
	91, 91, 250, 250, 250, 250, 248, 248, 248, 248,
	248, 251, 249, 252, 252, 252, 252, 252, 189, 189,
	189, 39, 13, 65, 65, 14, 10, 10, 134, 134,
	95, 95, 194, 194, 194, 76, 76, 54, 54, 54,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 135, 135, 136, 136, 26, 29, 32, 38, 38,
	38, 38, 38, 285, 285, 72, 72, 72, 72, 73,
	73, 149, 149, 152, 152, 153, 153, 153, 67, 66,
	68, 68, 9, 9, 61, 61, 62, 62, 63, 63,
	64, 64, 286, 286, 24, 24, 24, 79, 79, 143,
	143, 143, 145, 145, 144, 144, 144, 120, 120, 120,
	40, 100, 100, 109, 109, 110, 110, 200, 111, 111,
	31, 31, 49, 49, 47, 47, 47, 47, 47, 47,
	48, 48, 50, 50, 50, 50, 50, 50, 50, 258,
	258, 258, 261, 261, 257, 259, 259, 260, 260, 284,
	284, 121, 121, 121, 90, 89, 89, 93, 93, 92,
	94, 94, 193, 118, 118, 118, 118, 137, 137, 138,
	138, 139, 139, 140, 140, 140, 141, 141, 142, 142,
	117, 117, 173, 173, 51, 51, 99, 99, 101, 101,
	163, 163, 163, 164, 164, 162, 162, 162, 162, 195,
	195, 195, 195, 195, 195, 195, 274, 274, 274, 275,
	275, 192, 192, 196, 196, 196, 196, 196, 196, 190,
	190, 190, 190, 191, 191, 201, 201, 124, 124, 124,
	124, 122, 122, 123, 123, 197, 197, 197, 197, 119,
	119, 198, 198, 198, 157, 157, 204, 204, 204, 222,
	222, 98, 98, 98, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 206, 206, 206, 206, 208, 208, 208, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 221, 221, 221, 221, 221, 209, 209, 216,
	216, 217, 217, 218, 219, 210, 210, 211, 211, 212,
	213, 220, 220, 220, 220, 224, 224, 214, 214, 214,
	214, 214, 215, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 132, 132, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 167, 167, 167, 167, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 253, 253, 253, 253,
	253, 253, 253, 255, 255, 256, 256, 254, 254, 254,
	254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
	254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
	254, 254, 254, 254, 262, 262, 263, 263, 265, 265,
	266, 266, 267, 268, 268, 268, 269, 270, 270, 264,
	264, 271, 271, 271, 272, 272, 273, 273, 273, 273,
	273, 179, 179, 179, 180, 180, 181, 187, 187, 187,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 74, 74, 74, 74,
	74, 106, 106, 176, 176, 174, 174, 174, 178, 178,
	125, 125, 223, 223, 223, 223, 223, 223, 223, 126,
	126, 126, 133, 127, 127, 128, 128, 128, 128, 128,
	128, 170, 171, 129, 129, 129, 172, 172, 182, 186,
	186, 185, 184, 184, 183, 183, 160, 160, 161, 161,
	159, 158, 114, 114, 113, 113, 112, 112, 287, 287,
	188, 188, 115, 115, 116, 108, 108, 199, 199, 199,
	199, 102, 102, 81, 81, 103, 103, 77, 77, 80,
	80, 78, 78, 78, 78, 96, 96, 97, 97, 75,
	75, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 225, 225, 225, 175, 69, 69, 69, 70,
	70, 71, 71, 230, 230, 230, 231, 231, 231, 231,
	229, 229, 229, 229, 229, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 4, 6, 1, 3,
	2, 5, 3, 6, 4, 6, 6, 6, 4, 8,
	3, 3, 3, 6, 4, 3, 2, 1, 1, 0,
	2, 0, 2, 0, 2, 0, 7, 6, 1, 1,
	1, 3, 3, 0, 2, 0, 2, 1, 3, 5,
	0, 4, 6, 7, 3, 3, 1, 1, 1, 1,
	1, 1, 6, 3, 5, 4, 6, 4, 6, 4,
	6, 3, 5, 1, 3, 1, 2, 2, 3, 2,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 5, 3, 0,
	3, 3, 0, 2, 3, 2, 3, 6, 6, 1,
	2, 2, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 2, 2, 2, 2,
	2, 3, 6, 3, 4, 1, 5, 2, 1, 3,
	3, 3, 3, 1, 3, 3, 1, 2, 2, 1,
	0, 1, 1, 3, 1, 1, 1, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 2, 3, 4, 4, 4, 4, 2, 4,
	4, 4, 4, 4, 4, 2, 3, 3, 2, 3,
	3, 3, 4, 4, 5, 2, 3, 3, 4, 2,
	3, 4, 3, 3, 4, 4, 2, 5, 5, 6,
	2, 2, 0, 2, 0, 3, 6, 6, 5, 5,
	4, 12, 4, 12, 7, 10, 6, 9, 1, 0,
	1, 3, 1, 1, 1, 1, 8, 0, 1, 1,
	0, 3, 2, 0, 3, 1, 2, 2, 3, 6,
	2, 1, 1, 2, 4, 2, 5, 7, 8, 5,
	3, 1, 4, 6, 5, 10, 1, 1, 4, 0,
	3, 0, 2, 2, 2, 0, 1, 1, 2, 2,
	0, 3, 3, 2, 1, 1, 2, 2, 1, 2,
	1, 4, 5, 2, 0, 6, 11, 14, 1, 0,
	1, 3, 3, 3, 5, 2, 0, 1, 1, 0,
	6, 6, 8, 6, 8, 6, 8, 8, 10, 8,
	10, 1, 0, 2, 0, 2, 3, 2, 3, 3,
	2, 2, 2, 1, 0, 1, 3, 2, 0, 2,
	1, 1, 0, 1, 3, 1, 1, 1, 2, 3,
	2, 2, 8, 11, 3, 0, 3, 0, 3, 0,
	3, 0, 1, 0, 6, 7, 6, 1, 3, 1,
	4, 2, 8, 5, 4, 3, 0, 2, 2, 0,
	8, 2, 0, 1, 3, 1, 1, 3, 5, 5,
	1, 1, 3, 3, 1, 2, 3, 2, 3, 4,
	1, 1, 8, 8, 1, 2, 4, 4, 4, 2,
	2, 3, 1, 3, 6, 1, 0, 1, 0, 1,
	0, 1, 1, 0, 1, 1, 0, 1, 0, 3,
	1, 3, 2, 2, 2, 1, 1, 2, 5, 2,
	3, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	3, 0, 2, 0, 2, 3, 3, 0, 1, 3,
	3, 5, 1, 1, 3, 2, 4, 4, 0, 7,
	4, 6, 3, 1, 5, 5, 0, 2, 3, 1,
	3, 2, 0, 3, 4, 5, 4, 5, 4, 5,
	2, 4, 1, 1, 0, 5, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 1,
	1, 3, 4, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 5, 2, 1, 1, 1, 1, 4,
	1, 2, 2, 1, 1, 1, 0, 1, 1, 4,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 0, 1, 4, 1,
	3, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 4, 3, 4, 4, 5, 3, 3, 3, 3,
	3, 4, 3, 4, 3, 3, 4, 3, 4, 3,
	4, 5, 6, 6, 7, 6, 7, 6, 7, 3,
	4, 4, 1, 3, 3, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 6, 6,
	7, 1, 2, 1, 2, 1, 1, 2, 1, 3,
	1, 1, 2, 2, 1, 1, 3, 5, 6, 8,
	6, 6, 4, 4, 1, 1, 1, 5, 1, 3,
	1, 3, 1, 1, 1, 1, 6, 6, 4, 4,
	4, 4, 4, 6, 5, 5, 5, 4, 8, 6,
	6, 4, 4, 4, 5, 0, 5, 0, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 2, 2, 0, 1, 4, 2, 2, 2, 2,
	2, 4, 3, 5, 4, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 3, 1, 3, 3, 3, 2, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 1, 2, 3, 0, 3, 3, 2, 2, 1,
	0, 2, 2, 3, 2, 1, 1, 3, 5, 1,
	2, 4, 2, 0, 1, 0, 3, 5, 1, 0,
	2, 2, 1, 1, 1, 2, 1, 2, 1, 0,
	1, 1, 1, 3, 3, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 1, 3, 1, 2, 3,
	1, 1, 1, 2, 2, 1, 3, 3, 0, 1,
	2, 1, 1, 1, 1, 6, 2, 1, 5, 1,
	1, 1, 1, 2, 2, 3, 1, 1, 1, 1,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -8, -15,
	-16, -17, -18, -19, -21, -22, -23, -24, -25, -27,
	-29, -30, -32, -31, -33, -34, -35, -36, -37, -38,
	-26, -28, -39, -40, -41, 23, 34, 231, 47, 67,
	-9, -10, -11, -12, -13, -14, -260, 95, 104, 126,
	211, 102, 88, 120, 206, 233, 235, 242, -47, -49,
	252, -150, 255, 35, 264, 61, 98, 237, 229, 230,
	290, 299, 69, -258, -50, -48, 341, 315, 322, 246,
	-51, 273, 307, 344, 273, 135, 81, 310, -276, -103,
	273, 81, -78, -69, 334, 4, -237, -239, 20, 21,
	23, 33, 34, 35, 40, 44, 47, 48, 55, 60,
	61, 62, 64, 66, 67, 68, 71, 72, 79, 80,
	82, 84, 88, 90, 94, 95, 97, 102, 103, 104,
	110, 111, 114, 116, 121, 126, 127, 128, 129, 136,
	139, 141, 134, 149, 150, 151, 153, 154, 155, 158,
	157, 162, 165, 168, 170, 171, 172, 175, 173, 177,
	178, 180, 179, 185, 187, 188, 190, 193, 196, 199,
	202, 203, 204, 205, 206, 209, 211, 213, 214, 215,
	216, 217, 219, 220, 222, 223, 224, 225, 226, 229,
	227, 228, 230, 231, 232, 233, 235, 237, 238, 240,
	253, 254, 265, 242, 243, 244, 245, 248, 249, 250,
	252, 255, 257, 260, 263, 264, 266, 269, 267, 262,
	272, 274, 275, 276, 277, 278, 285, 286, 290, 291,
	292, 293, 296, 297, 298, 299, 301, 304, 305, 306,
	311, 316, 317, 318, 319, 320, 28, 36, 37, 38,
	39, 41, 42, 45, 46, 51, 52, 53, 56, 83,
	85, 86, 101, 105, 106, 112, 122, 124, 130, 131,
	140, 142, 143, 144, 146, 160, 174, 184, 186, 197,
	201, 208, 210, 218, 239, 247, 258, 259, 268, 270,
	280, 281, 282, 287, 288, 303, 307, 308, -276, 150,
	215, -77, -69, 81, 90, 139, 298, 297, 81, 135,
	273, 310, 300, -20, 341, -31, -8, -16, -4, -24,
	-40, -15, -34, -18, -35, -36, -37, -17, 23, -229,
	4, -237, -239, -238, -240, 58, 70, 119, 138, 132,
	148, 152, 161, 163, 176, 198, 200, 236, 256, 22,
	24, 25, 26, 27, 29, 30, 31, 32, 43, 49,
	50, 54, 57, 59, 65, 69, 73, 74, 75, 76,
	77, 78, 87, 89, 91, 92, 93, 96, 98, 100,
	107, 108, 109, 115, 117, 118, 120, 123, 125, 133,
	135, 137, 145, 147, 156, 159, 164, 166, 167, 181,
	182, 183, 189, 191, 192, 194, 195, 207, 212, 221,
	234, 246, 251, 261, 271, 273, 279, 283, 284, 289,
	294, 295, 300, 302, 309, 310, 312, 313, 314, 315,
	-69, -69, -69, 211, 22, -280, 22, -281, -282, 69,
	95, 120, 246, 139, 90, 297, 150, 150, -280, -73,
	242, -69, -147, 165, 249, 55, 239, 286, -148, -146,
	-228, 280, -151, -104, 175, -69, 4, 175, 251, 81,
	285, 22, 34, 55, 60, 82, 121, 135, 136, 65,
	66, 154, 214, 165, 151, 249, 155, 250, 274, 280,
	286, 69, 301, 276, 103, -285, 286, 286, -285, -285,
	-72, 286, 283, -73, 4, 81, 251, 175, -284, 273,
	-233, -226, -189, 9, 289, 107, 191, -232, 8, 333,
	-225, -231, 5, 7, 332, 4, -237, -239, -238, 273,
	300, 310, -134, 81, 295, -48, -50, -49, -92, -93,
	294, 145, 100, 195, -47, -49, -258, -261, 219, -257,
	-69, -261, -89, -90, 22, 92, 345, -197, -77, 192,
	-116, 341, -3, -197, 130, -77, -80, 130, -77, -69,
	-197, 130, 283, 345, -103, -96, -69, -159, -158, 343,
	118, -165, -167, 332, 333, 327, 181, 321, -179, -169,
	-182, 101, 239, 341, -77, -168, 346, 9, -255, -49,
	29, -180, -181, 49, -69, 7, 8, 5, 6, -75,
	-206, -175, -215, 289, 107, 183, -253, -254, 4, -237,
	-230, -207, -217, -211, -214, 146, 58, 74, 77, 75,
	78, 251, 300, 50, 28, 105, 106, 201, 208, 270,
	287, 288, 130, 184, 131, 56, 122, 160, 94, 37,
	39, 41, 42, 51, 52, 83, 85, 86, 112, 140,
	142, 143, 144, 186, 218, 258, 268, 281, 282, 308,
	-238, -218, -219, -212, -213, -220, -165, 118, 341, -113,
	-114, -158, -159, 118, 147, 147, -198, -197, -69, 130,
	-81, 130, -80, -105, 130, -104, -105, 130, -96, 130,
	-203, -202, -231, 307, 273, 135, -177, 341, -130, 341,
	-69, 22, 191, 345, -165, -165, 191, -69, -147, 53,
	-147, 253, 341, -152, -153, -66, -67, -68, 149, 213,
	217, 283, 326, 118, 320, -233, -85, 87, -107, 343,
	115, 55, -235, -232, 9, 253, 214, 151, 250, 118,
	-277, 191, 118, 118, 118, 118, 118, 214, 151, 250,
	285, 155, 285, 118, 320, 149, 213, 265, 273, 310,
	118, 118, -149, -152, -149, 283, -73, -119, -197, 8,
	7, 7, -104, 130, -69, -104, 135, -69, 130, -92,
	-93, -118, -137, -138, 164, 109, 189, -121, 22, 92,
	-121, -121, 44, 342, 342, 345, -261, -97, 341, -108,
	-199, -165, 334, -108, -116, 334, -77, 341, -115, -188,
	-165, 87, -56, 227, -55, 21, 23, 95, 305, 101,
	262, 277, 243, 262, 277, 243, 227, 101, 346, 227,
	227, 101, -235, -78, 345, -229, 334, -236, -235, 10,
	11, 57, 33, 332, 333, 334, 335, 113, 336, 337,
	330, 331, 329, 324, 325, 326, 63, 169, 241, 13,
	14, 15, 26, 194, 163, 321, 132, 256, 327, 16,
	17, 18, 148, 36, 133, -74, -82, -165, -165, -165,
	-165, -165, 200, -112, -160, 339, -49, 341, -49, -165,
	-106, 7, -49, -174, 339, -183, -165, -113, 341, 5,
	341, 5, -262, 316, 115, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 210, -224, 311, -224, -224, -208, 341, -208,
	-209, 341, -208, 317, 322, 341, 266, 342, -102, -77,
	-114, -198, -79, -77, -79, 252, -69, 30, 101, -58,
	345, 48, 232, 101, -58, 345, 101, -58, 101, 101,
	342, 345, -197, 130, -80, 30, -176, -204, -205, -207,
	-216, -210, -214, -215, 40, 46, 45, 278, 174, 247,
	259, 303, 38, 190, 141, 140, 142, 143, 144, 258,
	37, 218, 112, 94, 86, 85, 186, 42, 41, -218,
	-219, -212, -213, 83, 281, 282, 146, 39, 52, 51,
	308, 268, -106, -165, -276, -282, -276, 30, -146, -228,
	-106, 345, 162, -84, 168, 180, 127, 192, 318, -227,
	87, -233, -227, 87, 72, -234, 5, 4, -175, -189,
	87, 165, -215, 343, -229, -20, 254, -104, 22, -228,
	-279, 115, -276, -228, -228, -228, -228, -228, 285, 115,
	-69, 162, -228, -228, 273, 135, 273, -73, -58, 345,
	341, -91, 181, -259, 315, -91, 341, -70, 130, -69,
	-259, 181, -118, -138, -137, -139, -165, 22, -142, 111,
	177, -165, -167, -48, -48, -48, -94, -193, -165, -257,
	30, -96, -99, 345, 118, 30, 4, -99, -77, 345,
	342, 345, 283, -135, 65, 59, -155, 130, 59, -241,
	-69, 65, -242, 54, 295, 212, 117, -135, 65, -135,
	65, 65, -197, 33, -31, 118, 33, -31, 118, 283,
	-80, -69, 283, 283, -197, -201, 323, -69, -201, 345,
	-222, -204, -221, 223, 224, 222, 226, 225, -204, -229,
	280, -165, -165, -165, -165, -165, -165, -165, -165, -165,
	-165, -165, -165, -165, -165, -165, -165, -165, -165, -165,
	-165, -165, -165, 163, 132, 256, 36, 133, -165, 283,
	-165, -165, -165, -165, 173, 181, 183, 289, 107, 296,
	92, 187, -287, 271, 32, -172, -49, 341, -187, 27,
	261, 22, -179, 239, 341, -160, -165, -161, -106, 342,
	342, 345, -106, -178, 340, -174, -186, -185, 312, 342,
	-106, 309, 22, 92, 334, 7, -131, 319, 172, 84,
	128, 171, -132, 245, -263, 110, 123, 341, 342, 342,
	-165, -165, -125, -223, -106, 4, 319, 172, 84, 128,
	171, 245, -125, -126, -165, -106, -127, -166, -167, 332,
	333, 327, 341, 239, -128, -165, -106, -165, 43, 159,
	284, -129, -165, 118, -106, -165, -165, -165, -106, -106,
	-106, 341, 7, 7, 280, 280, 7, 118, 342, 345,
	-157, 313, -143, -31, 341, 87, 30, -143, -109, -110,
	-200, -111, -77, 341, -69, -69, -80, -81, -104, -105,
	-105, -96, -20, -202, 101, -20, 342, 345, -98, 29,
	-131, 341, 342, 345, 283, 118, 286, 342, -153, -83,
	217, 260, 228, 248, 345, -229, -278, -69, -20, -77,
	-80, -77, -197, -86, -96, -87, -69, -156, -155, -243,
	-244, -241, 135, 295, 108, 30, 101, -65, 205, 30,
	191, 181, -61, 275, 101, -140, -225, 341, 333, -141,
	239, 240, 345, -54, 31, 91, 341, 342, -157, -199,
	-101, -195, 339, -197, -77, -49, -196, 341, -229, -157,
	342, -188, -55, -77, -69, -69, 181, -155, 130, -60,
	181, -204, -69, 341, 341, 153, 153, -69, -69, 130,
	-69, 130, -69, -69, -56, 227, -31, 341, -31, 341,
	-69, 227, -69, -77, 227, -42, 129, 187, -45, 315,
	-235, 320, -165, -165, 283, -287, 271, -172, -165, 173,
	183, 289, 107, 296, 92, 187, 118, 341, -166, -166,
	-106, -169, 341, -106, 340, 349, 342, -165, 340, 340,
	345, -184, -185, 96, -165, -93, 345, -92, -165, -106,
	-106, 342, 342, 283, 283, 283, 283, 341, -268, 199,
	341, 341, -165, 30, 345, 342, 118, 342, 342, -133,
	207, 342, 10, 11, 332, 333, 334, 335, 113, 336,
	337, 330, 331, 329, 324, 325, 326, 63, 169, 241,
	13, 14, 15, 148, 133, -166, -166, -166, -106, 341,
	342, -170, -171, 118, 115, 30, -129, -129, -129, 342,
	118, -106, 345, 345, 345, 342, 342, 342, 7, 342,
	345, 342, 320, 320, 342, 266, 118, -77, -120, 234,
	-165, -120, -145, 191, -102, 307, -69, -120, -100, 345,
	118, 326, -102, -58, -58, -58, -197, -204, 339, 339,
	7, -165, -278, -278, -66, 293, 62, 217, -233, 345,
	-201, 342, 342, 345, -70, 135, -70, -31, -104, 5,
	-31, -77, 101, -62, 97, -286, 326, -69, -141, -165,
	-193, -20, -117, 123, -201, 345, 70, -124, 152, 176,
	119, 161, 236, 138, 7, -20, -162, 346, 341, -192,
	322, -49, -196, -195, -117, 283, 283, 101, 181, 304,
	-245, -242, -165, -95, -194, -69, -256, 341, -253, -254,
	-75, 341, 341, -53, 95, 252, -136, 101, -58, 101,
	-58, 283, -135, 65, -106, -106, 283, 283, -45, 118,
	272, 193, -165, -165, -166, -166, 118, 341, -165, -176,
	26, 26, 342, -106, 342, 345, -161, -165, 342, -174,
	98, -165, 279, 342, 309, -93, -93, -93, 5, 172,
	128, 171, -132, 171, -132, -132, 7, -269, -69, 341,
	313, -92, 342, -222, -204, -165, -170, -165, -222, -204,
	-166, -166, -166, -166, -166, -166, -166, -166, -166, -166,
	-166, -166, -166, -166, -166, -166, -166, -166, -166, 92,
	181, 187, -166, 345, -106, 342, -171, -170, -165, -165,
	-204, 342, 342, 342, -106, -165, -165, -165, 342, 7,
	266, -108, 182, -120, 64, 342, -157, -110, -101, -188,
	342, 340, 7, 7, 342, -69, -88, 134, -156, 341,
	-70, 341, 341, -91, 341, -69, -63, 158, -286, -232,
	-259, 192, 342, 342, -173, 125, 44, -195, 152, 152,
	-195, -124, 152, -122, 198, -122, -122, -274, 341, 340,
	-192, -229, 339, 347, -106, -191, -190, 30, -69, 196,
	342, -173, -69, -69, -155, 101, -246, 65, -247, 57,
	108, 69, 181, 183, 295, 212, 54, 87, 221, 342,
	342, 345, -76, -113, 57, -76, -165, 341, -95, -96,
	181, 87, 181, 87, 80, 291, -69, -69, -77, -69,
	-69, 342, 342, -69, -77, -236, 280, 341, 26, 26,
	-165, -176, 342, -165, -165, 342, -165, 340, -165, 5,
	-165, 342, 342, 342, 342, -270, -69, -165, 342, 342,
	342, -171, 118, 92, 187, 341, -165, 342, 342, 345,
	342, 342, 342, -144, 341, 191, -31, -120, 326, 340,
	340, 133, -95, 341, -96, -86, 30, -95, 191, -64,
	157, -286, -232, -61, -265, 314, -165, -106, -195, -195,
	-123, 302, 191, 152, -195, 340, 342, -275, 7, -192,
	-191, 7, -164, -163, 116, 179, 342, -69, 341, -192,
	-265, -155, -69, -229, -69, 108, 130, 183, 153, 341,
	-166, -77, -154, -283, 68, 269, -194, -54, -229, -54,
	342, -106, 342, 342, 183, 183, -165, -204, -58, -58,
	283, 283, 283, 283, -168, -75, -69, -44, -43, 5,
	-165, -165, 342, 342, -93, -264, 204, 342, -166, 118,
	341, -176, 342, -165, 93, -96, 65, -116, -49, 341,
	202, 342, -95, 342, 342, -31, 342, -77, -286, -232,
	-62, -266, -267, -69, -123, 341, -165, -195, -162, 342,
	345, -191, 340, 345, 348, 326, -192, 341, -96, -190,
	-247, -70, 181, -165, -71, 341, -88, 341, -76, -93,
	221, -57, 57, -69, -69, 341, 341, 341, 345, 342,
	-46, 326, 342, -93, 44, -166, -176, 342, 342, 297,
	182, 342, -69, -69, -154, 342, -88, -154, 341, -232,
	-63, 345, 30, -96, -192, 7, -163, -229, 339, -191,
	-96, 342, 101, 342, -250, 170, -69, -96, -54, 342,
	-77, -52, 302, -229, -106, -106, -106, -43, 5, -271,
	216, 240, -106, 342, 252, -157, 341, -88, -154, -88,
	-95, -64, -267, -269, 342, -190, 7, 342, 108, -248,
	-251, -249, 191, 119, 203, 257, 342, 342, -91, -165,
	342, 342, -93, 342, -272, -273, 36, 292, 72, -165,
	-272, -109, -96, -88, 342, 340, -69, -249, 191, -251,
	191, 297, 90, -250, 342, -273, 209, 114, 239, 209,
	114, -157, 342, -154, -252, 178, 232, 48, 252, -252,
	-248, 26, -59, 48, 232, -88, 20, 183, 87, -273,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 0, 0, 0, 0, 0,
	86, 87, 88, 89, 90, 91, 0, 0, 458, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 430, -2,
	0, 165, 0, 374, 0, 374, 374, 378, 0, 0,
	460, 0, 339, 457, -2, 468, 0, 0, 0, 466,
	444, 0, 0, -2, 0, 0, 0, 0, 0, 139,
	0, 997, 925, 931, 932, 956, 957, 958, 975, 976,
	977, 978, 979, 980, 981, 982, 983, 984, 985, 986,
	987, 988, 989, 990, 991, 992, 993, 994, 995, 996,
	998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007,
	1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017,
	1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
	1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037,
	1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047,
	1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057,
	1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067,
	1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077,
	1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087,
	1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097,
	1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107,
	1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117,
	1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127,
	1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137,
	1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147,
	1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157,
	1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167,
	1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 0, 0,
	0, 0, 927, 997, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 0, 250,
	970, 971, 972, 973, 974, 1176, 1177, 1178, 1179, 1180,
	1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190,
	1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200,
	1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210,
	1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220,
	1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230,
	1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240,
	1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250,
	1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260,
	1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270,
	129, 132, 133, 1054, 135, 0, 142, 143, 144, 146,
	147, 148, 149, 150, 151, 152, 0, 0, 0, 367,
	1081, 380, 160, 1030, 1086, 985, 1162, 1105, 168, 173,
	0, 1168, 176, 181, -2, 105, 207, 208, 209, 210,
	211, 212, 0, 0, 0, 218, 252, 0, 0, 0,
	0, 0, 225, 0, 228, 0, 0, 235, 239, 0,
	0, 0, 246, 0, 0, 382, 373, 382, 370, 371,
	372, 375, 0, 365, 155, 156, 157, 158, 0, 459,
	159, 184, 185, 186, 195, 196, 197, 198, 328, 0,
	330, 205, 206, 952, 0, 966, 967, 968, 969, 0,
	0, 0, 0, 0, 338, -2, 440, 441, -2, 0,
	463, 463, 463, 0, 0, 441, 0, 449, 1060, 452,
	938, 450, 0, 0, 465, 464, 0, 445, 545, 0,
	494, 0, 2, 0, 1146, 545, 0, 1146, 930, 0,
	0, 1146, 0, 0, 140, 141, 935, 933, 934, 0,
	0, 84, 649, 0, 0, 0, 0, 0, 0, 741,
	743, 1140, 1162, 0, 745, 746, 0, 748, 750, 751,
	0, 754, 755, 895, 927, 941, 942, 943, 944, 0,
	0, 947, 0, 949, 950, 951, 795, 764, -2, -2,
	939, 581, 582, 583, 584, -2, 1176, 768, 770, 772,
	773, 774, 775, 0, 1124, 1141, 1142, 1158, 1159, 1167,
	1171, 1172, 1146, 1155, 1147, 1136, 1144, 1153, 1002, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	965, 611, 612, 617, 618, 620, 85, 0, 0, 928,
	904, 902, 903, 0, 0, 0, 0, 551, 93, 1146,
	59, 1146, 923, 59, 1146, 103, 59, 1146, 101, 1146,
	0, 124, 126, 1174, 0, 0, 0, 0, 130, 0,
	134, 136, 0, 0, 255, 366, 0, 379, 161, 1135,
	163, 0, 0, 167, 383, 385, 386, 387, 0, 0,
	0, 0, 0, 0, 0, 177, 178, 179, 106, 0,
	458, 0, 213, 68, 69, 0, 226, 229, 236, 0,
	254, 0, 0, 0, 0, 0, 0, 227, 230, 237,
	231, 0, 0, 0, 240, 0, 242, 243, 0, 0,
	0, 0, 368, 381, 369, 0, 377, 59, 549, 329,
	954, 953, 311, 1146, 456, 311, 960, 456, 1146, -2,
	0, 436, 475, 476, 0, 0, 0, 0, 461, 462,
	0, 0, 0, 432, 433, 0, 451, 0, 0, 497,
	915, 919, 920, 497, 495, 546, 547, 0, 0, 912,
	910, 911, 36, 362, 38, 0, 362, 362, 0, 0,
	0, 0, 260, 0, 0, 262, 0, 0, 0, 0,
	0, 0, 536, 926, 0, 900, 901, 536, 70, 0,
	0, 0, 0, 830, 831, 832, 833, 834, 835, 838,
	839, 836, 837, 840, 841, 842, 0, 0, 0, 843,
	844, 845, 0, 0, 847, 0, 849, 0, 0, 0,
	0, 0, 0, 909, 0, 0, 846, 654, 655, 656,
	678, 679, 0, 742, 906, 899, 744, 0, -2, 851,
	0, 747, 752, 753, 0, 0, 894, -2, 0, 946,
	0, 646, 797, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 874, 880, 0, 0, 0, 0, 0, 0,
	0, 0, 596, 614, 625, 622, 621, 598, 0, 597,
	595, 0, 599, 0, 0, 0, 81, 0, 0, 921,
	905, 555, 0, 407, 0, 0, 552, 0, 0, 95,
	0, 57, 58, 0, 97, 0, 0, 99, 0, 0,
	458, 0, 0, 1146, 0, 458, 0, 853, 563, 564,
	565, 566, 567, 646, 570, 571, 572, 573, 574, 575,
	576, 577, 578, 579, 580, 588, 589, 590, 591, 592,
	593, 594, 608, 0, 587, 587, 587, 600, 601, 609,
	610, 615, 616, 627, 628, 630, 632, 626, 626, 626,
	623, 624, 0, 851, 0, 145, 0, 0, 164, 0,
	0, 0, 0, 388, 192, 193, 194, 390, 391, 169,
	171, 182, 170, 172, 174, 175, 199, 200, 201, 202,
	203, 204, 0, 0, 107, 233, 216, 214, 215, 217,
	219, 0, 251, 220, 221, 222, 223, 224, 232, 458,
	238, 241, 244, 245, 0, 0, 0, 376, 331, 0,
	269, 0, 0, 334, 455, 0, 0, 0, 1146, 959,
	395, 0, 439, 473, 474, 477, 481, 482, 485, 488,
	489, 479, 649, 446, 447, 448, 469, 470, 349, 453,
	0, 0, 555, 0, 0, 0, 918, 555, 0, 0,
	914, 0, 0, 0, 0, 361, 40, 1146, 0, 61,
	0, 0, 301, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 259, 0, 0,
	0, 929, 0, 0, 0, 73, 0, 936, 80, 0,
	650, 559, 560, 602, 603, 604, 605, 606, 651, 652,
	0, 657, 658, 659, 660, 661, 662, 663, 664, 665,
	666, -2, -2, -2, 670, 671, 672, -2, -2, -2,
	676, 677, -2, 848, 850, 0, 909, 0, -2, 0,
	-2, -2, -2, -2, 690, 0, 692, 695, 697, 699,
	0, 0, 0, 0, 908, 709, 886, 0, 0, 827,
	828, 829, 694, 0, 0, 907, 898, 0, 0, -2,
	749, 0, 0, 0, 857, 858, 893, 889, 0, 756,
	468, 0, 0, 0, 0, 0, 955, 633, 634, 635,
	636, 637, 638, 647, 805, 0, 0, 0, 769, 771,
	0, 0, 0, 0, 861, -2, -2, -2, -2, -2,
	-2, -2, 0, 0, 851, 871, 0, 0, 712, 0,
	0, 0, 0, 1162, 0, 851, 879, 0, 0, 0,
	0, 0, 851, 0, 885, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	419, 0, 419, 409, 0, 0, 0, 419, 422, 423,
	425, 426, 0, 0, 553, 94, 924, 59, 104, 59,
	59, 102, 110, 125, 0, 127, 128, 0, 556, 558,
	568, 0, 131, 0, 0, 0, 0, 166, 384, 389,
	0, 189, 0, 191, 0, 108, 253, 153, 234, 247,
	248, 536, 550, 0, 0, 268, 935, 270, 272, 273,
	274, 275, 960, 0, 960, 0, 0, 332, 0, 0,
	0, 0, 397, 403, 0, 0, 483, 0, 0, 480,
	486, 487, 0, 472, 347, 348, 458, 937, 491, 916,
	536, 498, 458, 508, 545, 522, 513, 0, 917, 491,
	548, 913, 39, 351, 0, 0, 0, 42, 1146, 50,
	0, 283, 0, 0, 0, 0, 0, 364, 51, 1146,
	59, 1146, 59, 52, 37, 362, 256, 0, 257, 0,
	355, 0, 350, 353, 0, 80, 0, 0, 67, 0,
	71, 0, -2, -2, 0, 0, 0, 710, -2, 691,
	693, 696, 698, 700, 0, 0, 0, 0, 0, 0,
	0, 711, 0, 0, 896, 899, -2, 852, 855, 856,
	0, 0, 890, 0, 0, 0, 0, 467, 468, 468,
	468, 762, 0, 0, 0, 0, 0, 0, 763, 0,
	0, 0, 0, 0, 0, 778, 0, 779, 780, 0,
	0, 781, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 715, 716, 717, 0, 0,
	782, 877, 878, 0, 0, 0, 0, 0, 0, 787,
	0, 884, 0, 0, 0, 791, 792, 793, 0, 585,
	0, 607, 629, 631, 619, 82, 0, 922, 92, 0,
	554, 404, 419, 0, 0, 411, 408, 406, 555, 0,
	0, 0, 0, 96, 98, 100, 0, 854, 0, 0,
	0, 852, 137, 138, 162, 187, 188, 190, 183, 0,
	249, 277, 310, 0, 0, 960, 0, 266, 311, 333,
	335, 0, 0, 399, 403, 0, 402, 456, 0, 0,
	471, 0, 493, 0, 496, 0, 0, 0, 0, 0,
	542, 542, 542, 540, 516, 0, 522, 0, 0, 534,
	0, -2, 513, 0, 493, 0, 0, 0, 0, 60,
	281, 300, 0, 0, 340, 346, 346, 0, 765, 766,
	0, 0, 0, 44, 0, 0, 0, 0, 48, 0,
	54, 0, 0, 0, 0, 0, 0, 0, 66, 0,
	0, 0, 653, -2, 0, 0, 0, 0, -2, 0,
	0, 0, 887, 0, 822, 0, 0, 898, -2, 859,
	888, 892, 0, 757, 0, 0, 0, 0, 948, 639,
	640, 641, 642, 643, 644, 645, 0, 803, 804, 808,
	0, 0, 767, 0, 0, 860, 870, 872, 713, 714,
	718, 719, 720, 721, 722, 723, 724, 725, 726, 727,
	-2, -2, -2, 731, 732, 733, -2, -2, -2, 0,
	0, 0, 873, 0, 0, 825, 875, 876, 881, 882,
	0, 784, 785, 786, 883, 0, 0, 0, 613, 0,
	83, 417, 418, 405, 416, 0, 419, 424, 421, 427,
	0, 561, 0, 0, 569, 154, 264, 0, 271, 0,
	0, 0, 269, 0, 0, 0, 401, 403, 0, 394,
	395, 478, 484, 454, 799, 0, 0, 499, 0, 0,
	0, 0, 0, 537, 541, 538, 539, 0, 0, 522,
	534, 505, 0, 0, 0, 512, 533, 0, 532, 521,
	-2, 799, 357, 359, 41, 0, 282, 0, 285, 0,
	0, 0, 0, 291, 292, 0, 0, 0, 0, 302,
	309, 0, 349, 940, 0, 349, 0, 0, 0, 0,
	0, 56, 0, 0, 363, 0, 59, 59, 352, 0,
	0, 0, 0, 356, 354, 72, 0, 0, 0, 0,
	-2, 0, 703, -2, -2, 821, 852, 897, 891, 945,
	468, 758, 760, 761, 648, 810, 807, 0, 794, 776,
	777, 869, 0, 0, 0, 0, 852, 824, 783, 0,
	789, 790, 586, 0, 0, 0, 410, 420, 0, 562,
	557, 0, 0, 0, 0, 0, 0, 0, 0, 392,
	403, 0, 396, 397, 442, 0, 492, 490, 524, 0,
	526, 0, 0, 0, 528, 508, 517, 0, 519, 534,
	510, 0, 0, 503, 0, 502, 522, 530, 0, 0,
	443, 43, 0, 286, 287, 960, 0, 290, 293, 0,
	295, 962, 277, 0, 306, 307, 341, 342, 345, 343,
	346, 468, 304, 0, 45, 46, 55, 63, 47, 53,
	0, 0, 0, 0, 535, 0, 0, 0, 77, 75,
	-2, -2, 704, 823, 0, 468, 0, 796, -2, 0,
	0, 0, 826, 0, 0, 0, 0, 428, 429, 0,
	0, 309, 0, 299, 277, 267, 309, 0, 0, 398,
	399, 798, 800, 0, 525, 0, 544, 527, 522, 518,
	0, 515, 506, 0, 507, 0, 534, 0, 0, 514,
	284, 288, 0, 0, 315, 0, 303, 0, 349, 0,
	0, 65, 0, 358, 360, 0, 0, 0, 0, 79,
	76, 0, 759, 813, 0, -2, 0, 739, 788, 0,
	413, 555, 415, 0, 277, 309, 265, 277, 0, 400,
	401, 0, 0, 0, 0, 520, 504, 500, 0, 511,
	0, 531, 0, 294, 320, 0, 0, 0, 344, 757,
	311, 49, 0, 62, 0, 0, 468, 78, 74, 0,
	0, 0, 809, 740, 0, 414, 0, 297, 277, 336,
	0, 393, 801, 802, 543, 509, 0, 529, 0, 296,
	316, 317, 0, 312, 313, 314, 961, 308, 315, 64,
	261, 263, 0, 806, 811, 814, -2, 1108, 994, 0,
	812, 555, 0, 298, 309, 501, 289, 318, 0, 319,
	0, 0, 0, 320, 0, 0, 816, 817, 818, 819,
	820, 412, 280, 277, 321, 0, 324, 325, 0, 322,
	305, 0, 276, 278, 279, 337, 323, 326, 327, 815,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 330, 3, 336, 331, 3,
	341, 342, 334, 332, 345, 333, 343, 335, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 349, 344,
	324, 326, 325, 3, 346, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 339, 3, 340, 337, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 347, 329, 348, 327,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 328, 57667, 338, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:794
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:800
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:806
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:835
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 35:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:850
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 36:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:856
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:860
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:866
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:870
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:877
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:882
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:887
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:892
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:897
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:906
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 47:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:909
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 48:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:919
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:929
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:939
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:942
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:949
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:958
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:968
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:972
		{
			sqlVAL.union.val = nil
		}
	case 57:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:978
		{
			sqlVAL.union.val = DropCascade
		}
	case 58:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:982
		{
			sqlVAL.union.val = DropRestrict
		}
	case 59:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:986
		{
			sqlVAL.union.val = DropDefault
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:992
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 61:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:996
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1001
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 63:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1002
		{
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1005
		{
			return unimplemented(sqllex, "alter using")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1006
		{
		}
	case 66:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1010
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1014
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1020
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 70:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1030
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1034
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1040
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 73:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1044
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 74:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1050
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 75:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1054
		{
			sqlVAL.str = ""
		}
	case 76:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 79:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1076
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 80:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1079
		{
		}
	case 81:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1083
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1091
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1098
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1102
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1118
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1175
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1179
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1185
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1195
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1230
		{ /* SKIP DOC */
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1234
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1248
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1262
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1269
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 132:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1328
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1332
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1346
		{
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1361
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1404
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1408
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1412
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1418
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1425
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1434
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1437
		{
			return unimplemented(sqllex, "set local")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 164:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1451
		{ /* SKIP DOC */
		}
	case 166:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[2].union.transactionModes()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1474
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1478
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1482
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1489
		{
			return unimplemented(sqllex, "set from current")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1492
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1501
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1505
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1509
		{
		}
	case 180:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1509
		{
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1520
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1534
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1542
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1546
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1550
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.union.val = Low
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = Normal
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = High
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1585
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1629
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "client_encoding"}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1633
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1637
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1641
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1649
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1653
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1657
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1661
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1665
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1673
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1677
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1681
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1693
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1697
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1709
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowJobs{Cluster: true}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1713
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowJobs{Cluster: true}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1717
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowJobs{Cluster: false}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1725
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1729
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1733
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1737
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1741
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1749
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1753
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1757
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1761
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1765
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1769
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1773
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1777
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1781
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1785
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1789
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1793
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1799
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1805
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1810
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1816
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1820
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1827
		{
			/* SKIP DOC */
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1833
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1837
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1843
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1847
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1853
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1857
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1861
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1865
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1876
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1882
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1886
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1899
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 276:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1936
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1940
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 280:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1944
		{
			sqlVAL.union.val = DropDefault
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1950
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1961
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 283:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1965
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1971
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1975
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1979
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1983
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1991
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2009
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2013
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2033
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2076
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 302:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2087
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2093
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2103
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2113
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2136
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 309:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2140
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2146
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2150
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2155
		{
			return unimplemented(sqllex, "match full")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2156
		{
			return unimplemented(sqllex, "match partial")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2157
		{
			return unimplemented(sqllex, "match simple")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2158
		{
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2164
		{
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2165
		{
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2166
		{
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2167
		{
		}
	case 320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2168
		{
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2171
		{
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2174
		{
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2177
		{
			return unimplemented(sqllex, "no action")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2180
		{
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2181
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2182
		{
			return unimplemented(sqllex, "action set null")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2183
		{
			return unimplemented(sqllex, "action set default")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2187
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 331:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2202
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2209
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2215
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 334:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2219
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 335:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2226
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2239
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2250
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.union.val = true
		}
	case 339:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = false
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2274
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2278
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2287
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2290
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2291
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2294
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 346:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2295
		{
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2299
		{
			sqlVAL.union.val = Ascending
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2303
		{
			sqlVAL.union.val = Descending
		}
	case 349:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 350:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2318
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2322
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2326
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2334
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2338
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2342
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2346
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2349
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2350
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2354
		{
			sqlVAL.union.val = true
		}
	case 362:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2358
		{
			sqlVAL.union.val = false
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2363
		{
		}
	case 364:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2364
		{
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2368
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2375
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2381
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2388
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2392
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2396
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2400
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2404
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2413
		{
		}
	case 374:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2414
		{
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2418
		{
			sqlVAL.str = ""
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2422
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2426
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 378:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2430
		{
			sqlVAL.str = ""
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2436
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2440
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2446
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2450
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2456
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2460
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2470
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2474
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2478
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2490
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2496
		{
			sqlVAL.union.val = ReadOnly
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2500
		{
			sqlVAL.union.val = ReadWrite
		}
	case 392:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2506
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2516
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2533
		{
			sqlVAL.str = ""
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2539
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2543
		{
			sqlVAL.str = ""
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2549
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 399:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2553
		{
			sqlVAL.str = ""
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2559
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2563
		{
			sqlVAL.str = ""
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2568
		{
		}
	case 403:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2569
		{
		}
	case 404:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 405:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2579
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 406:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2586
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2599
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2603
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2609
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2613
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2617
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2623
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2627
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2633
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2637
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2639
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2645
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2650
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 419:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2654
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 420:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2661
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2667
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 422:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2668
		{
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2672
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2698
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2752
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2756
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2771
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2775
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2779
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2783
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2787
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2791
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2825
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2838
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2851
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2859
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2868
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2895
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2896
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2897
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2900
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2901
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2904
		{
			return unimplemented(sqllex, "cte")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2907
		{
		}
	case 456:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2908
		{
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2911
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2912
		{
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2915
		{
		}
	case 460:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2916
		{
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = true
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2924
		{
			sqlVAL.union.val = false
		}
	case 463:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2928
		{
			sqlVAL.union.val = false
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2934
		{
			sqlVAL.union.val = true
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2939
		{
		}
	case 466:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2940
		{
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2944
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 468:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2948
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2970
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2978
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2998
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3013
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3020
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3036
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3040
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 485:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3044
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3050
		{
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3051
		{
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3054
		{
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3055
		{
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3077
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3081
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3109
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3121
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.union.val = &From{}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3131
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3145
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3152
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3163
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3186
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3190
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3196
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3200
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 509:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3207
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3230
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3254
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = nil
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3260
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3265
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3271
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = true
		}
	case 522:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = false
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3354
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3358
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.str = astFullJoin
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.str = astLeftJoin
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.str = astRightJoin
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.str = astInnerJoin
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3382
		{
		}
	case 542:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3383
		{
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3394
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3398
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3439
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3443
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3447
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 555:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3469
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3482
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3483
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3487
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3497
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 563:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3506
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3508
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3520
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3528
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3532
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3544
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3548
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3569
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3578
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3592
		{
			sqlVAL.union.val = nil
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3603
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3607
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3619
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3627
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3641
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3650
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3659
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3668
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3679
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3705
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3723
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3739
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3755
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3771
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3777
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3781
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3785
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3794
		{
		}
	case 626:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3795
		{
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 629:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3812
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 631:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3816
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3827
		{
			sqlVAL.union.val = year
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3831
		{
			sqlVAL.union.val = month
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3835
		{
			sqlVAL.union.val = day
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3839
		{
			sqlVAL.union.val = hour
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = minute
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = month
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = hour
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = minute
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = minute
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3881
		{
			sqlVAL.union.val = nil
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3887
		{
			sqlVAL.union.val = second
		}
	case 648:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3890
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3914
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3925
		{
			return unimplemented(sqllex, "at tz")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3938
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3942
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3946
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3962
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3966
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3982
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3986
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3990
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3994
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3998
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4006
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4010
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4014
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4018
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4022
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4026
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4030
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4038
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4046
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4050
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4058
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4062
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4066
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4074
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4086
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4093
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4111
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4115
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4119
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4123
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4127
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4131
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4151
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4155
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4159
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4215
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4219
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4239
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4243
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4247
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4251
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4255
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4259
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4263
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4267
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4271
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4275
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4279
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4283
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4287
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4291
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4308
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4316
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4327
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4332
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4345
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4349
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4354
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4358
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4362
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4366
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4370
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4378
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4385
		{
			return unimplemented(sqllex, "variadic")
		}
	case 759:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4386
		{
			return unimplemented(sqllex, "variadic")
		}
	case 760:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4388
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4392
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4396
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4409
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4416
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4425
		{
			return unimplemented(sqllex, "func_application")
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4426
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 767:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4430
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4432
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4436
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4440
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4444
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4447
		{
			return unimplemented(sqllex, "current role")
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4448
		{
			return unimplemented(sqllex, "current user")
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4449
		{
			return unimplemented(sqllex, "session user")
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4450
		{
			return unimplemented(sqllex, "user")
		}
	case 776:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4452
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4456
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4460
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4464
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4468
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4472
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4476
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4479
		{
			return unimplemented(sqllex, "treat")
		}
	case 784:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4481
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4485
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4489
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4493
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4497
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4501
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4509
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4513
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4517
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4523
		{
			return unimplemented(sqllex, "within group")
		}
	case 795:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4524
		{
		}
	case 796:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4528
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 797:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 799:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.union.val = Window(nil)
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4549
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4553
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4559
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4567
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4571
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4575
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 806:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4582
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4601
		{
			sqlVAL.str = ""
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4607
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 810:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4611
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4621
		{
			return unimplemented(sqllex, "frame range")
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4622
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 813:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4623
		{
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4626
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 815:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4627
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4633
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4634
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4635
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4636
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4637
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 821:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4648
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4652
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4656
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4662
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4666
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4672
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4678
		{
			sqlVAL.union.val = Any
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4682
		{
			sqlVAL.union.val = Some
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4686
		{
			sqlVAL.union.val = All
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4691
		{
			sqlVAL.union.val = Plus
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4692
		{
			sqlVAL.union.val = Minus
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4693
		{
			sqlVAL.union.val = Mult
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4694
		{
			sqlVAL.union.val = Div
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4695
		{
			sqlVAL.union.val = FloorDiv
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4696
		{
			sqlVAL.union.val = Mod
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4697
		{
			sqlVAL.union.val = Bitand
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4698
		{
			sqlVAL.union.val = Bitor
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = Pow
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4700
		{
			sqlVAL.union.val = Bitxor
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4701
		{
			sqlVAL.union.val = LT
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4702
		{
			sqlVAL.union.val = GT
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4703
		{
			sqlVAL.union.val = EQ
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4704
		{
			sqlVAL.union.val = LE
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = GE
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4706
		{
			sqlVAL.union.val = NE
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4710
		{
			sqlVAL.union.val = Like
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4711
		{
			sqlVAL.union.val = NotLike
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4712
		{
			sqlVAL.union.val = ILike
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4713
		{
			sqlVAL.union.val = NotILike
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4724
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4728
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4734
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4738
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 855:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4744
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4748
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4752
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4758
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4762
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4768
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4772
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 869:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4794
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4798
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4802
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4808
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4815
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4819
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4836
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4840
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4844
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4848
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4852
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 880:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4856
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4862
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4868
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4874
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4878
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4882
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4888
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4892
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4903
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4910
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4914
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 891:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4920
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4926
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 893:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4930
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 895:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4937
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4943
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4947
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4954
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4960
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4966
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4972
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4976
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4982
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4986
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4992
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4996
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5001
		{
		}
	case 909:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5002
		{
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5011
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5017
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5021
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5030
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5036
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5040
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5046
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5055
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5059
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5063
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5071
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5075
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5081
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5085
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5091
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5095
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5106
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5110
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5116
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5120
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5133
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5137
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5141
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5145
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5151
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5155
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5161
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 938:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5164
		{
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5174
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5178
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 941:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5185
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 942:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5189
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 943:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5193
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5197
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5200
		{
			return unimplemented(sqllex, "func const")
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5202
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5206
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 948:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5209
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 949:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5211
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 950:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5215
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 951:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5219
		{
			sqlVAL.union.val = DNull
		}
	case 953:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5226
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 954:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5230
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5236
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 960:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5271
		{
			sqlVAL.str = ""
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5277
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 962:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5281
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
